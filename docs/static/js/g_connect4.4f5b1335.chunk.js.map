{"version":3,"sources":["components/games/connect4/Piece.tsx","components/games/connect4/Board.tsx","components/games/connect4/Header.tsx","components/games/connect4/GameBoard.tsx","components/games/connect4/Connect4.tsx"],"names":["Piece","props","piece","enabled","onClick","noop","style","backgroundColor","red","lightGreen","getColor","Fab","size","role","color","disabled","React","memo","styles","padding","textAlign","Board","board","turn","insert","gameBoard","map","arr","i","row","j","TableCell","TableRow","reverse","gameButtons","length","Table","TableHead","TableBody","Header","winner","newGame","status","Toolbar","className","display","alignItems","Typography","marginRight","variant","Button","GameBoard","Paper","elevation","maxWidth","minWidth","margin","paddingBottom","helpEvalConnect4","col","line","undefined","C4Turn","EMPTY","push","Connect4","useSelector","state","connect4","dispatch","useDispatch","newC4Game","useCallback","updateC4Turn","updateTurn","RED","BLACK","evalConnect4","dp","forEach","t","updateEval","gutterBottom"],"mappings":"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","file":"static/js/g_connect4.4f5b1335.chunk.js","sourcesContent":["import React from 'react';\nimport ContentAdd from '@mui/icons-material/Add';\nimport Fab from '@mui/material/Fab';\nimport { red, lightGreen } from '@mui/material/colors';\n\nimport noop from '../../../apis/noop';\n\ninterface PieceProps {\n  /** can the piece be clicked? */\n  enabled?: boolean;\n  /** callback onClick of piece */\n  onClick?: React.MouseEventHandler;\n  /** type of piece */\n  piece: number;\n}\n\n/** returns color based of piece type */\nconst getColor = (piece: number): string | undefined => {\n  switch (piece) {\n    case 0:\n      return undefined;\n    case 1:\n      return red[500];\n    case 2:\n      return 'black';\n    default:\n      return lightGreen[600];\n  }\n};\n\nconst Piece = (props: PieceProps): React.ReactElement => {\n  const { piece, enabled = false, onClick = noop } = props;\n\n  const color = getColor(piece);\n  const style: React.CSSProperties = { backgroundColor: color };\n\n  return !enabled\n    ? (\n      <Fab disabled size=\"small\" style={style}>\n        <div />\n      </Fab>\n    ) : (\n      <Fab size=\"small\" onClick={onClick} style={style} role=\"button\">\n        <ContentAdd style={{ color: 'white' }} />\n      </Fab>\n    );\n};\n\nexport default React.memo(Piece);\n","import React from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Piece from './Piece';\nimport { C4Turn } from '../../../store/types';\n\ninterface BoardProps {\n  board: number[][];\n  insert: (col: number) => void;\n  turn: C4Turn;\n}\n\nconst styles: React.CSSProperties = {\n  padding: 1,\n  textAlign: 'center',\n};\n\nconst Board: React.FC<BoardProps> = (props: BoardProps) => {\n  const { board, turn, insert } = props;\n  // generate code for Connect4 Board\n  const gameBoard = board.map((arr, i) => {\n    const row = arr.map((piece, j) => (\n      <TableCell key={`c4c${i},${j}`} style={styles}>\n        <Piece piece={piece} />\n      </TableCell>\n    ));\n    return (\n      <TableRow key={`c4r${i}`}>\n        {row}\n      </TableRow>\n    );\n  }).reverse();\n  // generate buttons to play pieces based off top board row\n  const gameButtons = board[board.length - 1].map((piece, i) => (\n    <TableCell key={`c4h${i}`} style={styles}>\n      <Piece\n        enabled={!piece}\n        onClick={(): void => insert(i)}\n        piece={!piece ? turn : 0}\n      />\n    </TableCell>\n  ));\n\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          {gameButtons}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {gameBoard}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport Button from '@mui/material/Button';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Piece from './Piece';\nimport { C4Turn } from '../../../store/types';\n\ninterface HeaderProps {\n  newGame: React.MouseEventHandler;\n  turn: C4Turn;\n  winner?: number;\n}\n\nconst Header: React.FC<HeaderProps> = React.memo((props: HeaderProps) => {\n  const { winner, turn, newGame } = props;\n  // status text\n  const status = winner ? 'Winner:' : 'Turn:';\n  const piece = winner || turn;\n\n  return (\n    <Toolbar>\n      <div className=\"flex-container\">\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <Typography style={{ marginRight: 10 }} variant=\"h6\">\n            {status}\n          </Typography>\n          <Piece piece={piece} />\n        </div>\n        <Button color=\"primary\" onClick={newGame} variant=\"contained\" role=\"button\">\n          Reset Game\n        </Button>\n      </div>\n    </Toolbar>\n  );\n});\n\nexport default Header;\n","import React from 'react';\nimport Paper from '@mui/material/Paper';\nimport Board from './Board';\nimport Header from './Header';\nimport { C4Turn } from '../../../store/types';\n\ninterface GameBoardProps {\n  board: number[][];\n  insert: (col: number) => void;\n  newGame: React.MouseEventHandler;\n  turn: C4Turn;\n  winner?: number;\n}\n\nconst GameBoard: React.FC<GameBoardProps> = (props: GameBoardProps) => {\n  const {\n    board, insert, winner, turn,\n    newGame,\n  } = props;\n\n  return (\n    <Paper\n      elevation={2}\n      style={{\n        maxWidth: 900,\n        minWidth: 300,\n        display: 'block',\n        margin: 'auto',\n        paddingBottom: 5,\n      }}\n    >\n      <Header newGame={newGame} turn={turn} winner={winner} />\n      <Board board={board} insert={insert} turn={turn} />\n    </Paper>\n  );\n};\n\nexport default GameBoard;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Typography from '@mui/material/Typography';\nimport { newGame, updateTurn, updateEval } from '../../../store/modules/connect4';\nimport GameBoard from './GameBoard';\nimport { DBRootState, C4Turn } from '../../../store/types';\n\n// dp constants\nconst PIECE = 0;\nconst STREAK = 1;\nconst MAX = 2;\n\n/** function to check for match and increment streak / max\n * @param {array} line - dp storage, [PIECE, STREAK, MAX] */\nconst helpEvalConnect4 = (board: number[][], row: number, col: number, line: [number, [number, number][], [number, number][]]): void => {\n  // verify row\n  if (board[row] !== undefined) {\n    const piece = board[row][col];\n    // verify piece\n    if (piece !== undefined) {\n      // check piece\n      if (piece === line[PIECE] && piece !== C4Turn.EMPTY) {\n        // matches, increment streak and max if needed\n        line[STREAK].push([row, col]);\n        // update max and Win row if needed\n        if (line[STREAK].length > line[MAX].length) {\n          line[MAX] = [...line[STREAK]];\n        }\n      } else {\n        // doesn't match, restart streak\n        line[PIECE] = piece;\n        line[STREAK] = [[row, col]];\n      }\n    }\n  }\n};\n\n/* Connect4  ->  GameBoard  ->  Header  ->  Piece\n *                         |->  Board   ->  Piece */\nconst Connect4: React.FC = () => {\n  const { board, turn, winner } = useSelector((state: DBRootState) => ({ ...state.connect4 }));\n  const dispatch = useDispatch();\n\n  /** start a new game, reset the board and helper vars */\n  const newC4Game = React.useCallback((): void => {\n    dispatch(newGame());\n  }, [dispatch]);\n\n  /** update turn, alternating red/black */\n  const updateC4Turn = React.useCallback((): void => {\n    dispatch(updateTurn(turn === C4Turn.RED ? C4Turn.BLACK : C4Turn.RED));\n  }, [dispatch, turn]);\n\n  /** function to evaluate a connect 4 board based off the last piece played\n   * NOTE: win condition will be within +-3 of the piece last played - O(N)\n   * updates state of winner and board for highlighting */\n  const evalConnect4 = React.useCallback((row: number, col: number): void => {\n    // variables to track streaks\n    const dp: [number, [number, number][], [number, number][]][] = [];\n    for (let i = 0; i < 4; i += 1) {\n      const a1: [number, number][] = [];\n      const a2: [number, number][] = [];\n      dp.push([0, a1, a2]);\n    }\n\n    // win will be contained w/in +-3 of the token placed\n    for (let i = -3; i <= 3; i += 1) {\n      // check for streaks\n      // vertical\n      helpEvalConnect4(board, row + i, col, dp[0]);\n      // horizontal\n      helpEvalConnect4(board, row, col + i, dp[1]);\n      // diagonal down\n      helpEvalConnect4(board, row + i, col + i, dp[2]);\n      // diagonal up\n      helpEvalConnect4(board, row - i, col + i, dp[3]);\n    }\n\n    dp.forEach((line) => {\n      if (line[MAX].length >= 4) {\n        line[MAX].forEach((t) => {\n          board[t[0]][t[1]] = 3;\n        });\n        dispatch(updateEval(turn, board));\n      }\n    });\n  }, [board, dispatch, turn]);\n\n  /** insert piece into the board, piece falls to the bottom row every time */\n  const insert = React.useCallback((col: number): void => {\n    // check to see if there is an empty spot left\n    if (!winner && !board[board.length - 1][col]) {\n      let i = 0;\n      // look for the lowest empty spot\n      while (board[i][col] !== 0) {\n        i += 1;\n      }\n      // insert element\n      board[i][col] = turn;\n      // update turn\n      updateC4Turn();\n      // check if win\n      evalConnect4(i, col);\n    }\n  }, [board, evalConnect4, turn, updateC4Turn, winner]);\n\n  return (\n    <>\n      <Typography variant=\"h2\" gutterBottom>Welcome to Ken&apos;s Connect4 Game</Typography>\n      <GameBoard\n        board={board}\n        insert={insert}\n        newGame={newC4Game}\n        turn={turn}\n        winner={winner}\n      />\n    </>\n  );\n};\n\nexport default Connect4;\n"],"sourceRoot":""}