{"version":3,"sources":["components/resume/graphql/Loading.jsx","components/resume/graphql/Link.jsx","components/resume/graphql/repository/item/Description.jsx","components/resume/graphql/repository/fragments.js","components/resume/graphql/repository/item/WatchRepository.jsx","components/resume/graphql/repository/item/StarRepository.jsx","components/resume/graphql/repository/item/UnstarRepository.jsx","components/resume/graphql/repository/item/RepositoryItem.jsx","components/resume/graphql/FetchMore.jsx","components/resume/graphql/repository/RepositoryList.jsx","components/resume/graphql/repository/index.js","components/resume/graphql/Error.jsx","components/resume/graphql/Profile.jsx","components/resume/graphql/Header.jsx","components/resume/graphql/NoToken.jsx","components/resume/graphql/GraphQL.jsx","components/resume/graphql/index.js"],"names":["Loading","Link","children","props","target","rel","Description","descriptionHTML","primaryLanguage","owner","className","dangerouslySetInnerHTML","__html","Typography","display","name","href","url","login","REPOSITORY_FRAGMENT","gql","WATCH_REPOSITORY","VIEWER_SUBSCRIPTIONS","isWatch","viewerSubscription","updateWatch","client","data","updateSubscription","subscribable","id","repository","readFragment","fragment","totalCount","watchers","writeFragment","WatchRepository","mutation","variables","optimisticResponse","__typename","update","loading","error","Button","onClick","variant","color","STAR_REPOSITORY","updateAddStar","addStar","starrable","stargazers","StarRepository","viewerHasStarred","UNSTAR_REPOSITORY","updateRemoveStar","removeStar","UnstarRepository","RepositoryItem","FetchMore","hasNextPage","updateQuery","fetchMore","previousResult","fetchMoreResult","viewer","repositories","edges","RepositoryList","map","node","key","pageInfo","cursor","endCursor","ErrorMessage","toString","defaultProps","GET_REPOSITORIES_OF_CURRENT_USER","Profile","useQuery","Error","Header","authToken","onChange","TextField","label","placeholder","value","style","margin","fullWidth","NoToken","memo","errorLink","onError","graphQLErrors","networkError","cache","InMemoryCache","connect","state","graphQLToken","graphql","token","dispatch","stateActions","bindActionCreators","setToken","useState","setAuthToken","handleChange","e","httpLink","HttpLink","uri","headers","authorization","link","ApolloLink","from","ApolloClient","GraphQL"],"mappings":"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","file":"static/js/r_graphql.10a81630.chunk.js","sourcesContent":["import React from 'react';\n\nconst Loading = () => <div>Loading ...</div>;\n\nexport default Loading;\n","import React from 'react';\nimport types from 'prop-types';\n\nconst Link = ({ children, ...props }) => (\n  <a {...props} target=\"_blank\" rel=\"noopener noreferrer\">\n    {children}\n  </a>\n);\n\nLink.propTypes = {\n  children: types.node,\n};\n\nexport default Link;\n","import React from 'react';\nimport types from 'prop-types';\nimport { Typography } from '@material-ui/core';\n\n/* eslint-disable react/no-danger */\n\nconst Description = (props) => {\n  const { descriptionHTML, primaryLanguage, owner } = props;\n\n  return (\n    <div className=\"RepositoryItem-description\">\n      <div\n        className=\"RepositoryItem-description-info\"\n        dangerouslySetInnerHTML={{ __html: descriptionHTML }}\n      />\n      <div className=\"RepositoryItem-description-details\">\n        {primaryLanguage && (\n          <Typography display=\"inline\">\n            Language:\n            {' '}\n            {primaryLanguage.name}\n          </Typography>\n        )}\n        {owner && (\n          <Typography display=\"inline\">\n            Owner:\n            {' '}\n            <a href={owner.url}>{owner.login}</a>\n          </Typography>\n        )}\n      </div>\n    </div>\n  );\n};\n\n/* eslint-enable react/no-danger */\n\nDescription.propTypes = {\n  descriptionHTML: types.string.isRequired,\n  primaryLanguage: types.shape({\n    name: types.string.isRequired,\n  }),\n  owner: types.shape({\n    url: types.string,\n    login: types.string,\n  }),\n};\n\nexport default Description;\n","import gql from 'graphql-tag';\n\nconst REPOSITORY_FRAGMENT = gql`\n  fragment repository on Repository {\n    id\n    name\n    url\n    descriptionHTML\n    primaryLanguage {\n      name\n    }\n    owner {\n      login\n      url\n    }\n    stargazers {\n      totalCount\n    }\n    viewerHasStarred\n    watchers {\n      totalCount\n    }\n    viewerSubscription\n  }\n`;\n\nexport default REPOSITORY_FRAGMENT;\n","import React from 'react';\nimport types from 'prop-types';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nimport Button from '@material-ui/core/Button';\nimport REPOSITORY_FRAGMENT from '../fragments';\n\nconst WATCH_REPOSITORY = gql`\n  mutation ($id: ID!, $viewerSubscription: SubscriptionState!) {\n    updateSubscription(\n      input: { state: $viewerSubscription, subscribableId: $id }\n    ) {\n      subscribable {\n        id\n        viewerSubscription\n      }\n    }\n  }\n`;\n\nconst VIEWER_SUBSCRIPTIONS = {\n  SUBSCRIBED: 'SUBSCRIBED',\n  UNSUBSCRIBED: 'UNSUBSCRIBED',\n};\n\nconst isWatch = (viewerSubscription) => viewerSubscription === VIEWER_SUBSCRIPTIONS.SUBSCRIBED;\n\nconst updateWatch = (\n  client,\n  {\n    data: {\n      updateSubscription: {\n        subscribable: { id, viewerSubscription },\n      },\n    },\n  },\n) => {\n  const repository = client.readFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  let { totalCount } = repository.watchers;\n  totalCount = viewerSubscription === VIEWER_SUBSCRIPTIONS.SUBSCRIBED\n    ? totalCount + 1\n    : totalCount - 1;\n\n  client.writeFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: {\n      ...repository,\n      watchers: {\n        ...repository.watchers,\n        totalCount,\n      },\n    },\n  });\n};\n\nconst WatchRepository = (props) => {\n  const { id, watchers, viewerSubscription } = props;\n\n  /* eslint-disable no-unused-vars */\n\n  return (\n    <Mutation\n      mutation={WATCH_REPOSITORY}\n      variables={{\n        id,\n        viewerSubscription: isWatch(viewerSubscription)\n          ? VIEWER_SUBSCRIPTIONS.UNSUBSCRIBED\n          : VIEWER_SUBSCRIPTIONS.SUBSCRIBED,\n      }}\n      optimisticResponse={{\n        updateSubscription: {\n          __typename: 'Mutation',\n          subscribable: {\n            __typename: 'Repository',\n            id,\n            viewerSubscription: isWatch(viewerSubscription)\n              ? VIEWER_SUBSCRIPTIONS.UNSUBSCRIBED\n              : VIEWER_SUBSCRIPTIONS.SUBSCRIBED,\n          },\n        },\n      }}\n      update={updateWatch}\n    >\n      {(updateSubscription, { data, loading, error }) => (\n        <Button\n          className=\"RepositoryItem-title-action\"\n          onClick={updateSubscription}\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          {isWatch(viewerSubscription) ? 'Unwatch' : 'Watch'}\n          {` (${watchers.totalCount})`}\n        </Button>\n      )}\n    </Mutation>\n  );\n};\n\n/* eslint-enable no-unused-vars */\n\nWatchRepository.propTypes = {\n  id: types.string.isRequired,\n  watchers: types.shape({\n    totalCount: types.number,\n  }).isRequired,\n  viewerSubscription: types.string.isRequired,\n};\n\nexport default WatchRepository;\n","import React from 'react';\nimport types from 'prop-types';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nimport Button from '@material-ui/core/Button';\nimport REPOSITORY_FRAGMENT from '../fragments';\n\nconst STAR_REPOSITORY = gql`\n  mutation($id: ID!) {\n    addStar(input: { starrableId: $id }) {\n      starrable {\n        id\n        viewerHasStarred\n      }\n    }\n  }\n`;\n\nconst updateAddStar = (\n  client,\n  { data: { addStar: { starrable: { id }}}},\n) => {\n  const repository = client.readFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  const totalCount = repository.stargazers.totalCount + 1;\n\n  client.writeFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: {\n      ...repository,\n      stargazers: {\n        ...repository.stargazers,\n        totalCount,\n      },\n    },\n  });\n};\n\nconst StarRepository = (props) => {\n  const { id, stargazers } = props;\n\n  /* eslint-disable no-unused-vars */\n\n  return (\n    <Mutation\n      mutation={STAR_REPOSITORY}\n      variables={{ id }}\n      optimisticResponse={{\n        addStar: {\n          __typename: 'Mutation',\n          starrable: {\n            __typename: 'Repository',\n            id,\n            viewerHasStarred: true,\n          },\n        },\n      }}\n      update={updateAddStar}\n    >\n      {(addStar, { data, loading, error }) => (\n        <Button\n          className=\"RepositoryItem-title-action\"\n          onClick={addStar}\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          Star (\n          {stargazers.totalCount}\n          )\n        </Button>\n      )}\n    </Mutation>\n  );\n};\n\n/* eslint-enable no-unused-vars */\n\nStarRepository.propTypes = {\n  id: types.string.isRequired,\n  stargazers: types.shape({\n    totalCount: types.number,\n  }).isRequired,\n};\n\nexport default StarRepository;\n","import React from 'react';\nimport types from 'prop-types';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nimport Button from '@material-ui/core/Button';\nimport REPOSITORY_FRAGMENT from '../fragments';\n\nconst UNSTAR_REPOSITORY = gql`\n  mutation($id: ID!) {\n    removeStar(input: { starrableId: $id }) {\n      starrable {\n        id\n        viewerHasStarred\n      }\n    }\n  }\n`;\n\nconst updateRemoveStar = (\n  client,\n  { data: { removeStar: { starrable: { id }}}},\n) => {\n  const repository = client.readFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  const totalCount = repository.stargazers.totalCount - 1;\n\n  client.writeFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: {\n      ...repository,\n      stargazers: {\n        ...repository.stargazers,\n        totalCount,\n      },\n    },\n  });\n};\n\nconst UnstarRepository = (props) => {\n  const { id, stargazers } = props;\n\n  /* eslint-disable no-unused-vars */\n\n  return (\n    <Mutation\n      mutation={UNSTAR_REPOSITORY}\n      variables={{ id }}\n      optimisticResponse={{\n        removeStar: {\n          __typename: 'Mutation',\n          starrable: {\n            __typename: 'Repository',\n            id,\n            viewerHasStarred: false,\n          },\n        },\n      }}\n      update={updateRemoveStar}\n    >\n      {(removeStar, { data, loading, error }) => (\n        <Button\n          className=\"RepositoryItem-title-action\"\n          onClick={removeStar}\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          UnStar (\n          {stargazers.totalCount}\n          )\n        </Button>\n      )}\n    </Mutation>\n  );\n};\n\n/* eslint-enable no-unused-vars */\n\nUnstarRepository.propTypes = {\n  id: types.string.isRequired,\n  stargazers: types.shape({\n    totalCount: types.number,\n  }).isRequired,\n};\n\nexport default UnstarRepository;\n","import React, { Fragment } from 'react';\nimport types from 'prop-types';\nimport { Typography } from '@material-ui/core';\nimport Link from '../../Link';\nimport Description from './Description';\nimport WatchRepository from './WatchRepository';\nimport StarRepository from './StarRepository';\nimport UnstarRepository from './UnstarRepository';\n\nconst RepositoryItem = (props) => {\n  const {\n    id,\n    name,\n    url,\n    descriptionHTML,\n    primaryLanguage,\n    owner,\n    stargazers,\n    watchers,\n    viewerSubscription,\n    viewerHasStarred,\n  } = props;\n\n  return (\n    <Fragment>\n      <div className=\"RepositoryItem-title\">\n        <Typography variant=\"h3\">\n          <Link href={url}>{name}</Link>\n        </Typography>\n        {!viewerHasStarred\n          ? (<StarRepository id={id} stargazers={stargazers} />)\n          : (<UnstarRepository id={id} stargazers={stargazers} />)}\n        <WatchRepository id={id} watchers={watchers} viewerSubscription={viewerSubscription} />\n      </div>\n\n      <Description descriptionHTML={descriptionHTML} primaryLanguage={primaryLanguage} owner={owner} />\n    </Fragment>\n  );\n};\n\nRepositoryItem.propTypes = {\n  id: types.string.isRequired,\n  name: types.string.isRequired,\n  url: types.string.isRequired,\n  descriptionHTML: types.string.isRequired,\n  primaryLanguage: types.shape({\n    name: types.string.isRequired,\n  }),\n  owner: types.shape({\n    url: types.string,\n    login: types.string,\n  }),\n  stargazers: types.shape({\n    totalCount: types.number,\n  }).isRequired,\n  watchers: types.shape({\n    totalCount: types.number,\n  }).isRequired,\n  viewerSubscription: types.string.isRequired,\n  viewerHasStarred: types.bool.isRequired,\n};\n\nexport default RepositoryItem;\n","import React from 'react';\nimport types from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Loading from './Loading';\n\nconst FetchMore = (props) => {\n  const {\n    loading,\n    hasNextPage,\n    variables,\n    updateQuery,\n    fetchMore,\n    children,\n  } = props;\n\n  return (\n    <div className=\"FetchMore\">\n      {loading\n        ? (\n          <Loading />\n        ) : (\n          hasNextPage && (\n            <Button\n              className=\"FetchMore-button\"\n              onClick={() => fetchMore({ variables, updateQuery })}\n              variant=\"outlined\"\n              color=\"primary\"\n            >\n              More\n              {' '}\n              {children}\n            </Button>\n          )\n        )}\n    </div>\n  );\n};\n\nFetchMore.propTypes = {\n  loading: types.bool.isRequired,\n  hasNextPage: types.bool.isRequired,\n  variables: types.shape({\n    cursor: types.shape.isRequired,\n  }).isRequired,\n  updateQuery: types.func.isRequired,\n  fetchMore: types.func.isRequired,\n  children: types.node,\n};\n\nexport default FetchMore;\n","import React from 'react';\nimport types from 'prop-types';\nimport map from 'lodash/map';\nimport RepositoryItem from './item/RepositoryItem';\nimport FetchMore from '../FetchMore';\n\nconst updateQuery = (previousResult, { fetchMoreResult }) => {\n  if (!fetchMoreResult) {\n    return previousResult;\n  }\n\n  return {\n    ...previousResult,\n    viewer: {\n      ...previousResult.viewer,\n      repositories: {\n        ...previousResult.viewer.repositories,\n        ...fetchMoreResult.viewer.repositories,\n        edges: [\n          ...previousResult.viewer.repositories.edges,\n          ...fetchMoreResult.viewer.repositories.edges,\n        ],\n      },\n    },\n  };\n};\n\nconst RepositoryList = ({ repositories, loading, fetchMore }) => (\n  <>\n    {map(repositories.edges, ({ node }) => (\n      <div key={node.id} className=\"RepositoryItem\">\n        <RepositoryItem {...node} />\n      </div>\n    ))}\n\n    <FetchMore\n      loading={loading}\n      hasNextPage={repositories.pageInfo.hasNextPage}\n      variables={{\n        cursor: repositories.pageInfo.endCursor,\n      }}\n      updateQuery={updateQuery}\n      fetchMore={fetchMore}\n    >\n      Repositories\n    </FetchMore>\n  </>\n);\n\nRepositoryList.propTypes = {\n  repositories: types.shape({\n    edges: types.arrayOf(types.object).isRequired,\n    pageInfo: types.shape({\n      hasNextPage: types.bool.isRequired,\n      endCursor: types.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n  loading: types.bool.isRequired,\n  fetchMore: types.func.isRequired,\n};\n\nexport default RepositoryList;\n","import RepositoryList from './RepositoryList';\nimport REPOSITORY_FRAGMENT from './fragments';\n\nexport { REPOSITORY_FRAGMENT };\n\nexport default RepositoryList;\n","import React from 'react';\nimport types from 'prop-types';\n\nconst ErrorMessage = ({ error }) => (\n  <div>\n    <small>{error.toString()}</small>\n  </div>\n);\n\nErrorMessage.propTypes = {\n  error: types.shape({}),\n};\n\nErrorMessage.defaultProps = {\n  error: 'Something Went Wrong',\n};\n\nexport default ErrorMessage;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from 'react-apollo-hooks';\nimport Loading from './Loading';\nimport RepositoryList, { REPOSITORY_FRAGMENT } from './repository';\nimport ErrorMessage from './Error';\n\nconst GET_REPOSITORIES_OF_CURRENT_USER = gql`\n  query($cursor: String) {\n    viewer {\n      repositories(\n        first: 5\n        orderBy: { direction: DESC, field: STARGAZERS }\n        after: $cursor\n      ) {\n        edges {\n          node {\n            ...repository\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  }\n  ${REPOSITORY_FRAGMENT}\n`;\n\nconst Profile = () => {\n  const {\n    error, data, loading, fetchMore,\n  } = useQuery(GET_REPOSITORIES_OF_CURRENT_USER);\n\n  // check errors\n  if (error || !data) {\n    return <ErrorMessage error={error} />;\n  }\n\n  // check for data\n  const { viewer } = data;\n  if (loading && !viewer) {\n    return <Loading />;\n  }\n\n  // display data\n  return <RepositoryList loading={loading} repositories={viewer.repositories} fetchMore={fetchMore} />;\n};\n\nexport default Profile;\n","import React, { Fragment } from 'react';\nimport types from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\n\nconst Header = (props) => {\n  const { authToken, onChange } = props;\n\n  return (\n    <Fragment>\n      <Typography variant=\"h2\">GraphQL Demo</Typography>\n      <TextField\n        label=\"Authorization Code\"\n        placeholder=\"some32characterthingfromgithub\"\n        value={authToken}\n        onChange={onChange}\n        style={{ margin: '20px 0 20px 0' }}\n        fullWidth\n      />\n    </Fragment>\n  );\n};\n\nHeader.propTypes = {\n  authToken: types.string,\n  onChange: types.func.isRequired,\n};\n\nexport default Header;\n","import React, { memo } from 'react';\nimport { Typography } from '@material-ui/core';\n\nconst NoToken = memo(() => (\n  <Typography variant=\"h6\">\n    You need to generate a personal access token with &quot;repo&quot; and &quot;admin:repo_hook&quot; permissions.\n    <br />\n    This can be done in the Developer settings on GitHub.\n  </Typography>\n));\n\nexport default NoToken;\n","import React, { useState, Fragment } from 'react';\nimport types from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloProvider as ApolloHooksProvider } from 'react-apollo-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport Profile from './Profile';\nimport { setToken } from '../../../store/modules/graphql';\nimport Header from './Header';\nimport NoToken from './NoToken';\n\nconst GITHUB_BASE_URL = 'https://api.github.com/graphql';\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    // do something with graphql error\n  }\n  if (networkError) {\n    // do something with network error\n  }\n});\nconst cache = new InMemoryCache();\n\nconst GraphQL = (props) => {\n  const { graphQLToken, stateActions } = props;\n  const [authToken, setAuthToken] = useState(graphQLToken);\n\n  const handleChange = (e) => {\n    const token = e.target.value;\n    stateActions.setToken(token);\n    setAuthToken(token);\n  };\n\n  if (!graphQLToken) {\n    return (\n      <Fragment>\n        <Header authToken={authToken} onChange={handleChange} />\n        <NoToken />\n      </Fragment>\n    );\n  }\n\n  const httpLink = new HttpLink({\n    uri: GITHUB_BASE_URL,\n    headers: {\n      authorization: `Bearer ${graphQLToken}`,\n    },\n  });\n  const link = ApolloLink.from([errorLink, httpLink]);\n  const client = new ApolloClient({ link, cache });\n\n  return (\n    <ApolloProvider client={client}>\n      <ApolloHooksProvider client={client}>\n        <Header authToken={authToken} onChange={handleChange} />\n        <Profile />\n      </ApolloHooksProvider>\n    </ApolloProvider>\n  );\n};\n\nGraphQL.propTypes = {\n  graphQLToken: types.string,\n  stateActions: types.shape({\n    setToken: types.func.isRequired,\n  }).isRequired,\n};\n\n// react-redux export\nconst mapStateToProps = (state) => ({ graphQLToken: state.graphql.token });\nconst mapDispatchToProps = (dispatch) => ({\n  stateActions: bindActionCreators({ setToken }, dispatch),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(GraphQL);\n","import GraphQL from './GraphQL';\n\nexport default GraphQL;\n"],"sourceRoot":""}