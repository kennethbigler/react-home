{"version":3,"file":"static/js/g_dond.2e96d313.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/colors/amber.js","components/games/deal-or-no-deal/helpers.ts","components/games/deal-or-no-deal/Money.tsx","components/games/deal-or-no-deal/Modal.tsx","components/games/deal-or-no-deal/Case.tsx","components/games/deal-or-no-deal/Board.tsx","components/games/deal-or-no-deal/Header.tsx","components/games/deal-or-no-deal/DealOrNoDeal.tsx"],"sourcesContent":["const amber = {\n  50: '#fff8e1',\n  100: '#ffecb3',\n  200: '#ffe082',\n  300: '#ffd54f',\n  400: '#ffca28',\n  500: '#ffc107',\n  600: '#ffb300',\n  700: '#ffa000',\n  800: '#ff8f00',\n  900: '#ff6f00',\n  A100: '#ffe57f',\n  A200: '#ffd740',\n  A400: '#ffc400',\n  A700: '#ffab00'\n};\nexport default amber;","/** function that takes a number and returns string displayed like money */\nexport const getMoneyText = (n = 0): string => {\n  const txt = n.toString().split(\"\");\n  const e = txt[0] === \"-\" ? 1 : 0;\n  for (let i = txt.length - 3; i > e; i -= 3) {\n    txt.splice(i, 0, \",\");\n  }\n  txt.splice(e, 0, \"$\");\n  return txt.join(\"\");\n};\n\nexport default getMoneyText;\n","import React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport { amber, grey } from \"@mui/material/colors\";\nimport { getMoneyText } from \"./helpers\";\nimport { Briefcase } from \"../../../store/modules/dnd\";\n\ninterface MoneyProps {\n  briefcase: Briefcase;\n}\n\nconst paperStyles: React.CSSProperties = {\n  width: \"90%\",\n  marginLeft: \"5%\",\n  marginRight: \"5%\",\n  marginBottom: 5,\n  padding: 5,\n  textAlign: \"center\",\n  color: \"white\",\n};\n\nconst Money: React.FC<MoneyProps> = (props: MoneyProps) => {\n  const { briefcase: bc } = props;\n\n  const color: React.CSSProperties = {\n    backgroundColor: bc.on ? amber[500] : grey[700],\n  };\n\n  const style: React.CSSProperties = {\n    ...paperStyles,\n    ...color,\n  };\n\n  return (\n    <Paper style={style}>\n      {bc.on ? getMoneyText(bc.val) : <del>{getMoneyText(bc.val)}</del>}\n    </Paper>\n  );\n};\n\nexport default Money;\n","import React from \"react\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport Button from \"@mui/material/Button\";\nimport Money from \"./Money\";\nimport { getMoneyText } from \"./helpers\";\nimport { Briefcase } from \"../../../store/modules/dnd\";\n\ninterface ModalProps {\n  board: Briefcase[];\n  deal: React.MouseEventHandler;\n  noDeal: React.MouseEventHandler;\n  numCases: number;\n  offer: number;\n  open: boolean;\n  swap: React.MouseEventHandler;\n}\n\nconst colStyles: React.CSSProperties = {\n  width: \"50%\",\n  display: \"inline-block\",\n};\n\nconst genMoneyCols = (\n  arr: Briefcase[],\n  start: number,\n  stop = arr.length\n): React.ReactNode[] =>\n  arr.slice(start, stop).map((bc) => <Money key={bc.loc} briefcase={bc} />);\n\nconst Modal: React.FC<ModalProps> = (props: ModalProps) => {\n  const { deal, noDeal, offer, open, swap, numCases, board: imBoard } = props;\n\n  const board = [...imBoard].sort((a, b) => a.val - b.val);\n\n  // columns displaying money values left\n  const lhs = genMoneyCols(board, 0, board.length / 2);\n  const rhs = genMoneyCols(board, board.length / 2);\n\n  return (\n    <Dialog fullWidth open={open}>\n      <DialogTitle>{`${getMoneyText(offer)} - Deal or No Deal?`}</DialogTitle>\n      <DialogContent>\n        <div style={colStyles}>{lhs}</div>\n        <div style={colStyles}>{rhs}</div>\n      </DialogContent>\n      {numCases > 2 ? (\n        <DialogActions>\n          <Button color=\"primary\" onClick={deal}>\n            Deal\n          </Button>\n          <Button color=\"secondary\" onClick={noDeal}>\n            No Deal\n          </Button>\n        </DialogActions>\n      ) : (\n        <DialogActions>\n          <Button color=\"primary\" onClick={deal}>\n            Deal\n          </Button>\n          <Button color=\"secondary\" onClick={noDeal}>\n            My Case\n          </Button>\n          <Button color=\"secondary\" onClick={swap}>\n            Other Case\n          </Button>\n        </DialogActions>\n      )}\n    </Dialog>\n  );\n};\n\nexport default Modal;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport { getMoneyText } from \"./helpers\";\nimport { Briefcase } from \"../../../store/modules/dnd\";\n\ninterface CaseProps {\n  briefcase: Briefcase;\n  onClick: React.MouseEventHandler;\n  secondary?: boolean;\n}\n\nconst style = { margin: 10 };\n\nconst Case: React.FC<CaseProps> = (props: CaseProps) => {\n  const { onClick, briefcase: bc, secondary } = props;\n  const color = secondary ? \"secondary\" : \"primary\";\n  const label = bc.on ? bc.loc : getMoneyText(bc.val);\n\n  return (\n    <Button\n      color={color}\n      disabled={!bc.on}\n      onClick={onClick}\n      style={style}\n      role=\"button\"\n      variant=\"contained\"\n    >\n      {label}\n    </Button>\n  );\n};\n\nexport default Case;\n","import React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Case from \"./Case\";\nimport { Briefcase } from \"../../../store/modules/dnd\";\n\ninterface BoardProps {\n  board: Briefcase[];\n  onClick: (x: number) => void;\n  playerChoice?: Briefcase;\n}\n\nconst style: React.CSSProperties = {\n  maxWidth: 796,\n  padding: 9,\n  textAlign: \"center\",\n  display: \"block\",\n  margin: \"auto\",\n  marginTop: 20,\n};\n\nconst Board: React.FC<BoardProps> = ({\n  board,\n  onClick,\n  playerChoice: pc,\n}: BoardProps) => (\n  <Paper elevation={2} style={style}>\n    {board.map((bc, i) => (\n      <Case\n        key={i}\n        briefcase={bc}\n        onClick={(): void => onClick(i)}\n        secondary={pc && pc.loc === bc.loc}\n      />\n    ))}\n  </Paper>\n);\n\nexport default Board;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport { getMoneyText } from \"./helpers\";\nimport { Briefcase } from \"../../../store/modules/dnd\";\nimport { DBPlayer } from \"../../../store/modules/types\";\n\ninterface HeaderProps {\n  casesToOpen: number;\n  isOver: boolean;\n  newGame: React.MouseEventHandler;\n  offer?: number;\n  player: DBPlayer;\n  playerChoice?: Briefcase;\n}\n\nconst Header: React.FC<HeaderProps> = (props: HeaderProps) => {\n  const {\n    playerChoice: pc,\n    casesToOpen,\n    isOver,\n    offer,\n    newGame,\n    player,\n  } = props;\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item sm={6} xs={12}>\n        <Typography variant=\"h3\" gutterBottom>\n          {`Your Case: ${pc ? pc.loc : \"?\"}${\n            isOver ? ` - ${getMoneyText(pc && pc.val)}` : \"\"\n          }`}\n        </Typography>\n        <Typography variant=\"h4\" gutterBottom>\n          {isOver\n            ? `You Won ${getMoneyText(offer)}`\n            : `Number of Cases to Open: ${casesToOpen}`}\n        </Typography>\n        {isOver && (\n          <Button color=\"primary\" onClick={newGame} variant=\"contained\">\n            New Game\n          </Button>\n        )}\n      </Grid>\n      <Grid item sm={6} xs={12}>\n        <Typography variant=\"h3\" align=\"right\" gutterBottom>\n          {`${player.name}: ${getMoneyText(player.money)}`}\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport Modal from \"./Modal\";\nimport Board from \"./Board\";\nimport Header from \"./Header\";\nimport { useAppDispatch, useAppSelector } from \"../../../store/store\";\nimport {\n  newGame,\n  setOpenCase,\n  setOpenOffer,\n  setNoDeal,\n  setFinishGame,\n  setPlayerChoice,\n  briefcasesToOpen,\n} from \"../../../store/modules/dnd\";\n\n// TODO: add rules to page\n/* DealOrNoDeal  ->  Header\n *              |->  Board  ->  Case\n *              |->  Modal  ->  Money */\nconst DND: React.FC = () => {\n  const {\n    board,\n    dndOpen,\n    isOver,\n    offer,\n    sum,\n    turn,\n    player,\n    playerChoice,\n    casesToOpen,\n    numCases,\n  } = useAppSelector((state) => ({\n    ...state.dnd,\n    player: state.players[0],\n  }));\n\n  const dispatch = useAppDispatch();\n\n  /** function to generate the bank offer */\n  const getBankOffer = React.useCallback(\n    (): number => Math.round((sum / numCases) * (turn / 10)),\n    [numCases, sum, turn]\n  );\n\n  /** open a briefcase and update global status\n   * NOTE: updates sum, numCases, board, casesToOpen */\n  const openBriefcase = (x: number) => {\n    const bc = board[x];\n    // check if player has already made case selection\n    if (playerChoice) {\n      // verify cases left and briefcase not already opened\n      if (!isOver && casesToOpen > 0 && bc.loc !== playerChoice.loc && bc.on) {\n        // update board\n        dispatch(\n          setOpenCase({\n            board,\n            caseNum: x,\n            sum: sum - bc.val,\n            numCases: numCases - 1,\n            casesToOpen: casesToOpen - 1,\n          })\n        );\n      }\n    } else {\n      dispatch(setPlayerChoice({ id: player.id, playerChoice: bc }));\n    }\n  };\n\n  const handleOpen = (): void => {\n    // get the new offer\n    const newOffer = getBankOffer();\n    // reset the counter\n    const newCasesToOpen =\n      turn < briefcasesToOpen - 1 ? briefcasesToOpen - turn : 1;\n    dispatch(setOpenOffer({ offer: newOffer, casesToOpen: newCasesToOpen }));\n  };\n\n  /** function to reset the game */\n  const newDNDGame = (): void => {\n    dispatch(newGame());\n  };\n\n  /** called on selection of Deal */\n  const deal = (): void => {\n    dispatch(setFinishGame({ id: player.id, offer }));\n  };\n\n  /** called on selection of No Deal\n   * NOTE: update turn, casesToOpen */\n  const noDeal = (): void => {\n    // no deal on last case\n    if (numCases <= 2) {\n      dispatch(\n        setFinishGame({\n          id: player.id,\n          offer: playerChoice ? playerChoice.val : -1,\n        })\n      );\n    } else {\n      // advance the turn\n      dispatch(setNoDeal(turn));\n    }\n  };\n\n  const swap = (): void => {\n    for (let i = 0; i < board.length; i += 1) {\n      const bc = board[i];\n      if (bc.on && playerChoice && bc.loc !== playerChoice.loc) {\n        dispatch(setFinishGame({ id: player.id, offer: bc.val }));\n        return;\n      }\n    }\n  };\n\n  // check if it is time for an offer\n  casesToOpen === 0 && setTimeout(handleOpen, 300);\n\n  return (\n    <>\n      <Typography variant=\"h2\" gutterBottom>\n        Deal or No Deal\n      </Typography>\n      <Header\n        casesToOpen={casesToOpen}\n        isOver={isOver}\n        newGame={newDNDGame}\n        offer={offer}\n        player={player}\n        playerChoice={playerChoice}\n      />\n      <Board\n        board={board}\n        onClick={openBriefcase}\n        playerChoice={playerChoice}\n      />\n      <Modal\n        board={board}\n        deal={deal}\n        noDeal={noDeal}\n        numCases={numCases}\n        offer={offer}\n        open={dndOpen}\n        swap={swap}\n      />\n    </>\n  );\n};\n\nexport default DND;\n"],"names":["A100","A200","A400","A700","getMoneyText","n","txt","toString","split","e","i","length","splice","join","paperStyles","width","marginLeft","marginRight","marginBottom","padding","textAlign","color","props","bc","briefcase","backgroundColor","on","amber","grey","style","Paper","val","colStyles","display","genMoneyCols","arr","start","stop","slice","map","loc","deal","noDeal","offer","open","swap","numCases","imBoard","board","sort","a","b","lhs","rhs","Dialog","fullWidth","DialogTitle","DialogContent","DialogActions","Button","onClick","margin","secondary","label","disabled","role","variant","maxWidth","marginTop","pc","playerChoice","elevation","casesToOpen","isOver","newGame","player","Grid","container","spacing","item","sm","xs","Typography","gutterBottom","align","name","money","useAppSelector","state","dnd","players","dndOpen","sum","turn","dispatch","useAppDispatch","getBankOffer","React","Math","round","setTimeout","newOffer","newCasesToOpen","briefcasesToOpen","setOpenOffer","x","setOpenCase","caseNum","setPlayerChoice","id","setFinishGame","setNoDeal"],"sourceRoot":""}