{"version":3,"file":"static/js/games.6b6a13f6.chunk.js","mappings":"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","sources":["apis/noop.ts","hooks/useAnchorEl.ts","components/common/header/ButtonPopover.tsx","components/common/header/PlayerMenu.tsx","components/common/header/TopBar.tsx","components/common/header/Header.tsx","components/games/Menu.tsx","components/games/Routes.tsx","helpers/lazyWithPreload.ts","hooks/useToggle.ts"],"sourcesContent":["export default (): void => {\n  /* do nothing */\n};\n","import React from \"react\";\n\ninterface AnchorElHook {\n  anchorEl: null | HTMLElement;\n  setAnchor: React.MouseEventHandler;\n  clearAnchor: React.MouseEventHandler;\n}\n\nconst useAnchorEl = (): AnchorElHook => {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const setAnchor = (e: React.MouseEvent<HTMLButtonElement>): void => {\n    setAnchorEl(e.currentTarget);\n  };\n  const clearAnchor = (): void => {\n    setAnchorEl(null);\n  };\n  return { anchorEl, setAnchor, clearAnchor };\n};\n\nexport default useAnchorEl;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Popover from \"@mui/material/Popover\";\nimport useAnchorEl from \"../../../hooks/useAnchorEl\";\n\ninterface ButtonPopoverProps {\n  children: React.ReactElement;\n  buttonText: string;\n}\n\nconst contentStyle: React.CSSProperties = { padding: 15 };\n\nconst ButtonPopover = (props: ButtonPopoverProps): React.ReactElement => {\n  const { anchorEl, setAnchor, clearAnchor } = useAnchorEl();\n  const { children, buttonText } = props;\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <Button\n        aria-haspopup=\"true\"\n        variant=\"contained\"\n        component=\"button\"\n        onClick={setAnchor}\n      >\n        {buttonText}\n      </Button>\n      <Popover\n        id=\"player-popover\"\n        open={open}\n        anchorEl={anchorEl}\n        onClose={clearAnchor}\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n        transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n        title=\"player-popover\"\n      >\n        <div style={contentStyle}>{children}</div>\n      </Popover>\n    </>\n  );\n};\n\nexport default ButtonPopover;\n","import React from \"react\";\nimport Switch from \"@mui/material/Switch\";\nimport TextField from \"@mui/material/TextField\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport { useAppDispatch, useAppSelector } from \"../../../store/store\";\nimport { updateName, updateBot } from \"../../../store/modules/players\";\n\nconst namePadStyles: React.CSSProperties = {\n  maxWidth: \"420px\",\n  width: \"100%\",\n  display: \"block\",\n  margin: \"auto\",\n};\n\nconst PlayerMenu: React.FC = () => {\n  const players = useAppSelector((state) => state.players);\n  const dispatch = useAppDispatch();\n\n  const isBot = React.useMemo(() => players.map((a) => a.isBot), [players]);\n\n  /** toggle between bot and human player - dispatch to redux */\n  const handleToggle = (id: number, isChecked: boolean): void => {\n    dispatch(updateBot({ id, isBot: isChecked }));\n  };\n\n  /** update player name onBlur - dispatch to redux */\n  const handleBlur =\n    (id: number) =>\n    (e: React.FocusEvent<HTMLInputElement>): void => {\n      dispatch(updateName({ id, name: e.target.value || \"\" }));\n    };\n\n  /** if enter key was pressed in textfield, update name - dispatch to redux */\n  const handleKeyPress =\n    (id: number) =>\n    (e: React.KeyboardEvent<HTMLDivElement>): void => {\n      if (e.key === \"Enter\") {\n        dispatch(\n          updateName({ id, name: (e.target as HTMLInputElement).value || \"\" })\n        );\n      }\n    };\n\n  return (\n    <div style={namePadStyles}>\n      <Grid container spacing={1}>\n        <Grid item xs={9}>\n          <Typography variant=\"h5\">Edit Player Names</Typography>\n        </Grid>\n        <Grid item xs={3}>\n          <Typography variant=\"h5\">Is Bot?</Typography>\n        </Grid>\n      </Grid>\n      {players.map((p, i) =>\n        p.id !== 0 ? (\n          <Grid key={`${p.name},${i}`} container spacing={1}>\n            <Grid item xs={9}>\n              <TextField\n                defaultValue={p.name}\n                onBlur={handleBlur(p.id)}\n                onKeyPress={handleKeyPress(p.id)}\n                placeholder=\"Enter Player Name\"\n                title={`player ${i} name`}\n              />\n            </Grid>\n            <Grid item xs={3}>\n              <Switch\n                checked={isBot[i]}\n                value={isBot[i]}\n                color=\"primary\"\n                onChange={(_e, isC): void => handleToggle(p.id, isC)}\n                title={`isBot-switch-${i}`}\n              />\n            </Grid>\n          </Grid>\n        ) : (\n          <Grid key={`${p.name},${i}`} container spacing={1}>\n            <Grid item xs={9}>\n              <Typography variant=\"h5\">{p.name}</Typography>\n            </Grid>\n            <Grid item xs={3}>\n              <Switch checked disabled />\n            </Grid>\n          </Grid>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default PlayerMenu;\n","import React from \"react\";\nimport AppBar from \"@mui/material/AppBar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport Switch from \"@mui/material/Switch\";\nimport { useAppSelector, useAppDispatch } from \"../../../store/store\";\nimport SimplePopover from \"./ButtonPopover\";\nimport PlayerMenu from \"./PlayerMenu\";\nimport {\n  displayDarkTheme,\n  displayLightTheme,\n} from \"../../../store/modules/theme\";\n\nconst cursorStyles: React.CSSProperties = { cursor: \"pointer\" };\nconst flexLeftStyles: React.CSSProperties = {\n  display: \"flex\",\n  alignItems: \"center\",\n};\nconst flexRightStyles: React.CSSProperties = {\n  display: \"flex\",\n  marginRight: 15,\n};\nconst spanTopStyles: React.CSSProperties = { left: 0, right: 0, top: 0 };\n\ninterface TopBarProps {\n  /** change the color scheme of the icon */\n  textColor: \"inherit\" | \"primary\" | \"secondary\" | \"default\" | undefined;\n  /** show/hide the player editor button */\n  showPlayers?: boolean;\n  /** callback called onClick of Icon or Menu text */\n  toggleOpen: React.MouseEventHandler;\n}\n\nconst TopBar = (props: TopBarProps): React.ReactElement => {\n  const theme = useAppSelector((state) => state.theme);\n  const dispatch = useAppDispatch();\n  const [checked, setChecked] = React.useState(theme.mode !== \"dark\");\n\n  /** function toggle between site's light and dark theme - dispatch to Redux */\n  const toggleTheme = React.useCallback((): void => {\n    checked ? dispatch(displayDarkTheme()) : dispatch(displayLightTheme());\n    setChecked(!checked);\n  }, [checked, dispatch]);\n\n  const { toggleOpen, showPlayers = false, textColor } = props;\n\n  return (\n    <AppBar style={spanTopStyles} className={`header-${theme.mode}-theme`}>\n      <Toolbar disableGutters>\n        <div className=\"flex-container\">\n          <div style={flexLeftStyles}>\n            <IconButton\n              aria-label=\"Menu\"\n              onClick={toggleOpen}\n              color={textColor}\n              title=\"Icon Menu Button\"\n              size=\"large\"\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography\n              onClick={toggleOpen}\n              style={cursorStyles}\n              variant=\"h6\"\n              color={textColor}\n            >\n              Menu\n            </Typography>\n          </div>\n          {showPlayers && (\n            <div style={flexRightStyles}>\n              <SimplePopover buttonText=\"Players\">\n                <PlayerMenu />\n              </SimplePopover>\n            </div>\n          )}\n          <div style={flexRightStyles}>\n            <Switch\n              checked={checked}\n              value={checked}\n              onChange={toggleTheme}\n              title=\"Theme Toggle Switch\"\n              color=\"secondary\"\n            />\n          </div>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default React.memo(TopBar);\n","import React from \"react\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Drawer from \"@mui/material/Drawer\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\nimport NavigationClose from \"@mui/icons-material/Close\";\nimport { useTheme } from \"@mui/material/styles\";\nimport TopBar from \"./TopBar\";\nimport useToggleState from \"../../../hooks/useToggle\";\nimport noop from \"../../../apis/noop\";\n\ntype ItemClick = (loc: string) => void;\n\nexport interface NavProps {\n  onItemClick: ItemClick;\n}\n\ninterface HeaderProps {\n  /** content of the header bar via render props */\n  children: (onItemClick: ItemClick) => React.ReactElement<NavProps>;\n  /** callback function, wrapped with logic, then passed as onItemClick to children */\n  handleNav?: (loc: string) => void;\n  /** show/hide the player editor button */\n  showPlayers?: boolean;\n}\n\nconst Header = (props: HeaderProps): React.ReactElement => {\n  const [isOpen, toggleOpen, setIsOpen] = useToggleState();\n  const {\n    palette: { mode },\n  } = useTheme();\n  const { children, handleNav = noop, showPlayers = false } = props;\n\n  /** close the menu and call the passed callback */\n  const handleNavigation = React.useCallback(\n    (loc: string): void => {\n      setIsOpen(false);\n      handleNav(loc);\n    },\n    [handleNav, setIsOpen]\n  );\n\n  const textColor = mode === \"light\" ? \"inherit\" : \"default\";\n\n  return (\n    <>\n      <TopBar\n        toggleOpen={toggleOpen}\n        showPlayers={showPlayers}\n        textColor={textColor}\n      />\n      <Drawer onClose={toggleOpen} open={isOpen}>\n        <AppBar position=\"sticky\">\n          <Toolbar disableGutters>\n            <IconButton\n              aria-label=\"Menu Close\"\n              onClick={toggleOpen}\n              color={textColor}\n              title=\"Close Side Menu\"\n              size=\"large\"\n            >\n              <NavigationClose />\n            </IconButton>\n            <Typography variant=\"h6\" color={textColor}>\n              Menu\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        {children(handleNavigation)}\n      </Drawer>\n    </>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport Divider from \"@mui/material/Divider\";\n\ninterface MenuProps {\n  onItemClick?: (loc: string) => void;\n}\n\nconst Menu: React.FC<MenuProps> = React.memo((props: MenuProps) => {\n  const { onItemClick } = props;\n  const baseUrl = \"/games\";\n\n  // internal routes\n  const menu = React.useMemo(\n    () =>\n      [\n        { name: \"Home - Games\", route: \"\" },\n        { divider: true },\n        { name: \"BlackJack\", route: \"blackjack\" },\n        { name: \"Connect4\", route: \"connect4\" },\n        { name: \"Deal or No Deal\", route: \"deal\" },\n        { name: \"Poker\", route: \"poker\" },\n        { name: \"Slot Machine\", route: \"slots\" },\n        { name: \"Tic-Tac-Toe\", route: \"tictactoe\" },\n        { name: \"Yahtzee\", route: \"yahtzee\" },\n        { name: \"Family Feud\", route: \"family-feud\" },\n        { name: \"Are You The One\", route: \"are-you-the-one\" },\n      ].map((item, index) =>\n        item.divider ? (\n          <Divider key={index} />\n        ) : (\n          <MenuItem\n            key={item.name}\n            onClick={(): void =>\n              onItemClick && onItemClick(`${baseUrl}/${item.route || \"\"}`)\n            }\n          >\n            {item.name}\n          </MenuItem>\n        )\n      ),\n    [onItemClick]\n  );\n\n  // navigation\n  const home = React.useCallback(\n    (): void => onItemClick && onItemClick(\"/\"),\n    [onItemClick]\n  );\n\n  // render menu\n  return (\n    <>\n      <MenuItem onClick={home}>Back to Resume</MenuItem>\n      {menu}\n    </>\n  );\n});\n\nexport default Menu;\n","import React from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport lazyWithPreload from \"../../helpers/lazyWithPreload\";\nimport Header, { NavProps } from \"../common/header/Header\";\nimport Menu from \"./Menu\";\nimport LoadingSpinner from \"../common/loading-spinner\";\n\ninterface RoutesProps {\n  handleNav: (loc: string) => void;\n}\n\n// lazy load page components\nconst GameHome = lazyWithPreload(\n  import(/* webpackChunkName: \"g_home\" */ \"./Home\")\n);\nconst BlackJack = lazyWithPreload(\n  import(/* webpackChunkName: \"g_bj\" */ \"./blackjack\")\n);\nconst Connect4 = lazyWithPreload(\n  import(/* webpackChunkName: \"g_connect4\" */ \"./connect4\")\n);\nconst DealOrNoDeal = lazyWithPreload(\n  import(/* webpackChunkName: \"g_dond\" */ \"./deal-or-no-deal\")\n);\nconst Poker = lazyWithPreload(\n  import(/* webpackChunkName: \"g_poker\" */ \"./poker\")\n);\nconst Slots = lazyWithPreload(\n  import(/* webpackChunkName: \"g_slots\" */ \"./slots\")\n);\nconst TicTacToe = lazyWithPreload(\n  import(/* webpackChunkName: \"g_tictactoe\" */ \"./tictactoe\")\n);\nconst Yahtzee = lazyWithPreload(\n  import(/* webpackChunkName: \"g_yahtzee\" */ \"./yahtzee\")\n);\nconst FamilyFeud = lazyWithPreload(\n  import(/* webpackChunkName: \"g_family_feud\" */ \"./family-feud\")\n);\nconst AreYouTheOne = lazyWithPreload(\n  import(/* webpackChunkName: \"g_are_you_the_one\" */ \"./are-you-the-one\")\n);\n\nconst GameRoutes: React.FC<RoutesProps> = ({ handleNav }) => (\n  <>\n    <Header handleNav={handleNav} showPlayers>\n      {(onItemClick): React.ReactElement<NavProps> => (\n        <Menu onItemClick={onItemClick} />\n      )}\n    </Header>\n    <React.Suspense fallback={<LoadingSpinner />}>\n      <Routes>\n        <Route path=\"/*\" element={<GameHome />} />\n        <Route path=\"blackjack/*\" element={<BlackJack />} />\n        <Route path=\"connect4/*\" element={<Connect4 />} />\n        <Route path=\"deal/*\" element={<DealOrNoDeal />} />\n        <Route path=\"poker/*\" element={<Poker />} />\n        <Route path=\"slots/*\" element={<Slots />} />\n        <Route path=\"tictactoe/*\" element={<TicTacToe />} />\n        <Route path=\"yahtzee/*\" element={<Yahtzee />} />\n        <Route path=\"family-feud/*\" element={<FamilyFeud />} />\n        <Route path=\"are-you-the-one/*\" element={<AreYouTheOne />} />\n      </Routes>\n    </React.Suspense>\n  </>\n);\n\nexport default GameRoutes;\n","import React from \"react\";\n\ntype ImportPromise = Promise<{ default: React.ComponentType }>;\ntype LazyComponent = React.LazyExoticComponent<React.ComponentType>;\n\nexport default function lazyWithPreload(\n  ComponentPromise: ImportPromise\n): LazyComponent {\n  return React.lazy(() => ComponentPromise);\n}\n","import React from \"react\";\n\ntype ToggleStateHook = [\n  boolean,\n  React.MouseEventHandler,\n  React.Dispatch<React.SetStateAction<boolean>>\n];\n\nconst useToggleState = (defaultVal = false): ToggleStateHook => {\n  const [isToggled, setIsToggled] = React.useState(defaultVal);\n\n  const handleToggle = (): void => {\n    setIsToggled(!isToggled);\n  };\n\n  return [isToggled, handleToggle, setIsToggled];\n};\n\nexport default useToggleState;\n"],"names":["React","anchorEl","setAnchorEl","setAnchor","e","currentTarget","clearAnchor","contentStyle","padding","props","useAnchorEl","children","buttonText","open","Boolean","Button","variant","component","onClick","Popover","id","onClose","anchorOrigin","vertical","horizontal","transformOrigin","title","style","namePadStyles","maxWidth","width","display","margin","players","useAppSelector","state","dispatch","useAppDispatch","isBot","map","a","handleKeyPress","key","updateName","name","target","value","Grid","container","spacing","item","xs","Typography","p","i","TextField","defaultValue","onBlur","onKeyPress","placeholder","Switch","checked","color","onChange","_e","isC","isChecked","updateBot","handleToggle","disabled","cursorStyles","cursor","flexLeftStyles","alignItems","flexRightStyles","marginRight","spanTopStyles","left","right","top","TopBar","theme","mode","setChecked","toggleTheme","displayDarkTheme","displayLightTheme","toggleOpen","showPlayers","textColor","AppBar","className","Toolbar","disableGutters","IconButton","size","Menu","useToggleState","isOpen","setIsOpen","useTheme","palette","handleNav","noop","handleNavigation","loc","Drawer","position","onItemClick","menu","route","divider","index","Divider","MenuItem","home","GameHome","lazyWithPreload","BlackJack","Connect4","DealOrNoDeal","Poker","Slots","TicTacToe","Yahtzee","FamilyFeud","AreYouTheOne","Header","fallback","path","element","ComponentPromise","defaultVal","isToggled","setIsToggled"],"sourceRoot":""}