{"version":3,"sources":["components/common/ExpandableCard.jsx","components/resume/git-tools/CopyTextDisplay.jsx","components/resume/git-tools/BranchName.jsx","components/resume/git-tools/CommitText.jsx","components/resume/git-tools/DeployBranch.jsx","components/resume/git-tools/Header.jsx","components/resume/git-tools/GitTools.jsx","components/resume/git-tools/index.js"],"names":["styles","card","marginTop","overflow","header","borderRadius","marginLeft","marginRight","position","top","ExpandableCard","props","_useState","useState","_useState2","Object","_Users_kennethbigler_GitHub_react_home_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","expanded","setExpanded","title","subtitle","children","backgroundColor","theme","inverted","palette","primary","main","type","boxShadow","concat","grey","expandedHeader","_Users_kennethbigler_GitHub_react_home_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","marginBottom","color","titleJSX","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_7__","style","variant","subtitleJSX","_material_ui_core_Card__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core_CardHeader__WEBPACK_IMPORTED_MODULE_4__","onClick","subheader","_material_ui_core_Collapse__WEBPACK_IMPORTED_MODULE_6__","in","timeout","unmountOnExit","_material_ui_core_CardContent__WEBPACK_IMPORTED_MODULE_5__","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_8__","container","spacing","overflowY","defaultProps","withTheme","CopyTextDisplay","slicedToArray","isOpen","setIsOpen","handleCopy","copyText","text","react_default","Chip","elevation","label","Snackbar","action","IconButton","key","Close_default","autoHideDuration","message","onClose","open","BranchName","getBranchPrefixOptions","getSelectOptions","_this","getCasePreferenceOptions","handleBranchPrefixSelect","e","setBranchPrefix","target","value","handleCasePrefSelect","setCasePreference","_this$props","this","branchMessage","branchName","branchPrefix","casePreference","gitTheme","onBranchMessageChange","onBranchMessageClear","paddingLeft","paddingRight","width","Grid","item","sm","xs","FormControl","fullWidth","InputLabel","htmlFor","Select","input","Input","id","onChange","TextField","InputLabelProps","multiline","placeholder","Clear_default","git_tools_CopyTextDisplay","Component","connect","state","gitCommit","git","commitPrefix","dispatch","gitActions","bindActionCreators","setCommitPrefix","storyID","_useCommitText","setLocalCommitPrefix","_useState3","_useState4","commitMessage","setCommitMessage","_useState5","_useState6","commitDescription","setCommitDescription","_useState7","_useState8","finishes","setFinishes","getCommitText","prefix","desc","postfix","gitMessage","handleCommitPrefixSelect","handleCommitMessageChange","handleCommitDescriptionChange","clearCommitMessage","clearCommitDescription","handleFinishesToggle","isC","useCommitText","wrapper","commitText","displayText","nl2br","FormControlLabel","control","Switch","checked","memo","targetBranch","setTargetBranch","display","alignItems","validId","RegExp","Header","handleIDChange","isIdValid","test","Typography","error","validTypingId","GitTools","arr","map","t","i","MenuItem","_ref","exec","setKey","str","copy","handleBranchMessageChange","setBranchMessage","handleBranchMessageClear","getBranchName","_this$props$git","msg","snakeCase","kebabCase","camelCase","_this$props$git2","deepOrange","git_tools_Header","BranchName_BranchName","git_tools_CommitText","DeployBranch"],"mappings":"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","file":"static/js/r_git.ecb7bc71.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport types from 'prop-types';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Collapse from '@material-ui/core/Collapse';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { withTheme } from '@material-ui/core/styles';\nimport grey from '@material-ui/core/colors/grey';\n\nconst styles = {\n  card: { marginTop: 40, overflow: 'visible' },\n  header: {\n    borderRadius: 3,\n    marginLeft: 15,\n    marginRight: 15,\n    position: 'relative',\n    top: -20,\n  },\n};\n\nconst ExpandableCard = (props) => {\n  const [expanded, setExpanded] = useState(true);\n\n  const {\n    title, subtitle, children, backgroundColor, theme, inverted,\n  } = props;\n\n  styles.header.backgroundColor = backgroundColor || theme.palette.primary.main;\n  if (theme.palette.type !== 'dark') {\n    styles.header.boxShadow = `0px 15px 15px -10px ${grey[400]}`;\n  } else {\n    delete styles.header.boxShadow;\n  }\n  styles.expandedHeader = { ...styles.header, marginBottom: -20 };\n  styles.title = { color: inverted ? 'black' : 'white' };\n  styles.subtitle = { color: grey[inverted ? 800 : 300] };\n\n  const titleJSX = (\n    <Typography style={styles.title} variant=\"h6\">\n      {title}\n    </Typography>\n  );\n  const subtitleJSX = expanded ? (\n    <Typography style={styles.subtitle}>\n      {subtitle}\n    </Typography>\n  ) : null;\n\n  return (\n    <Card style={styles.card}>\n      <CardHeader\n        onClick={() => { setExpanded(!expanded); }}\n        style={expanded ? styles.expandedHeader : styles.header}\n        subheader={subtitleJSX}\n        title={titleJSX}\n      />\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n          <Grid container spacing={1} style={{ overflowY: 'hidden' }}>\n            {children}\n          </Grid>\n        </CardContent>\n      </Collapse>\n    </Card>\n  );\n};\n\nExpandableCard.propTypes = {\n  backgroundColor: types.string,\n  children: types.oneOfType([types.arrayOf(types.node), types.node]),\n  inverted: types.bool,\n  subtitle: types.oneOfType([types.string, types.element]),\n  theme: types.shape({\n    palette: types.shape({\n      primary: types.shape({\n        main: types.string.isRequired,\n      }).isRequired,\n      type: types.string,\n    }).isRequired,\n  }),\n  title: types.oneOfType([types.string, types.element]),\n};\n\nExpandableCard.defaultProps = {\n  inverted: false,\n};\n\nexport default withTheme(ExpandableCard);\n","import React, { useState } from 'react';\nimport types from 'prop-types';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Chip from '@material-ui/core/Chip';\n// Parents: Main\n\nconst CopyTextDisplay = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { handleCopy, copyText, text } = props;\n\n  /**\n   * copies text to clipboard and opens prompt to tell the user\n   * @param {Object} e event fired when select occurs\n   */\n  const handleCopyText = () => {\n    setIsOpen(true);\n    const toCopy = copyText || text;\n    handleCopy(toCopy);\n  };\n\n  return (\n    <div>\n      <Chip elevation={1} onClick={handleCopyText} label={text} />\n      <Snackbar\n        action={[\n          <IconButton key=\"close\" onClick={() => { setIsOpen(false); }}>\n            <CloseIcon />\n          </IconButton>,\n        ]}\n        autoHideDuration={4000}\n        message=\"Copied Commit Text to clipboard!\"\n        onClose={() => { setIsOpen(false); }}\n        open={isOpen}\n      />\n    </div>\n  );\n};\n\nCopyTextDisplay.propTypes = {\n  copyText: types.string,\n  handleCopy: types.func.isRequired,\n  text: types.oneOfType([types.string, types.array]).isRequired,\n};\n\nexport default CopyTextDisplay;\n","import React, { Component } from 'react';\nimport types from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport IconButton from '@material-ui/core/IconButton';\nimport Clear from '@material-ui/icons/Clear';\nimport Grid from '@material-ui/core/Grid';\nimport CopyTextDisplay from './CopyTextDisplay';\n// Parents: GitTools\n\nexport default class BranchName extends Component {\n  static propTypes = {\n    branchMessage: types.string,\n    branchName: types.string.isRequired,\n    branchPrefix: types.string.isRequired,\n    casePreference: types.string.isRequired,\n    getSelectOptions: types.func.isRequired,\n    gitTheme: types.string.isRequired,\n    handleCopy: types.func.isRequired,\n    onBranchMessageChange: types.func.isRequired,\n    onBranchMessageClear: types.func.isRequired,\n    setBranchPrefix: types.func.isRequired,\n    setCasePreference: types.func.isRequired,\n  };\n\n  /**\n   * function to generate select items for branch prefixes\n   * @return {[Object]}\n   */\n  getBranchPrefixOptions = () => {\n    const { getSelectOptions } = this.props;\n    return getSelectOptions(['chores', 'epics', 'features', 'fixes']);\n  };\n\n  /**\n   * function to generate select items for case preference\n   * @return {[Object]}\n   */\n  getCasePreferenceOptions = () => {\n    const { getSelectOptions } = this.props;\n    return getSelectOptions([\n      'snake_case',\n      'kebab-case',\n      'camelCase',\n      'No Changes',\n    ]);\n  };\n\n  /**\n   * function to update select state based on value\n   * @param {Object} e event fired when select occurs\n   */\n  handleBranchPrefixSelect = (e) => {\n    const { setBranchPrefix } = this.props;\n    setBranchPrefix(e.target.value);\n  };\n\n  /**\n   * function to update text state based on value\n   * @param {Object} e event fired when select occurs\n   */\n  handleCasePrefSelect = (e) => {\n    const { setCasePreference } = this.props;\n    setCasePreference(e.target.value);\n  };\n\n  render() {\n    const {\n      branchMessage,\n      branchName,\n      branchPrefix,\n      casePreference,\n      gitTheme,\n      handleCopy,\n      onBranchMessageChange,\n      onBranchMessageClear,\n    } = this.props;\n\n    return (\n      <div style={{ paddingLeft: 20, paddingRight: 20, width: '100%' }}>\n        <Grid container spacing={1}>\n          <Grid item sm={3} xs={12}>\n            <FormControl fullWidth>\n              <InputLabel htmlFor=\"branch-prefix\" style={{ color: gitTheme }}>\n                Branch Prefix\n              </InputLabel>\n              <Select\n                input={<Input id=\"branch-prefix\" />}\n                onChange={this.handleBranchPrefixSelect}\n                value={branchPrefix}\n              >\n                {this.getBranchPrefixOptions()}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item sm={3} xs={12}>\n            <FormControl fullWidth>\n              <InputLabel htmlFor=\"branch-prefix\" style={{ color: gitTheme }}>\n                Case Preference\n              </InputLabel>\n              <Select\n                input={<Input id=\"branch-prefix\" />}\n                onChange={this.handleCasePrefSelect}\n                value={casePreference}\n              >\n                {this.getCasePreferenceOptions()}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item sm={5} xs={10}>\n            <TextField\n              fullWidth\n              InputLabelProps={{ style: { color: gitTheme } }}\n              label=\"Branch Name\"\n              multiline\n              onChange={onBranchMessageChange}\n              placeholder=\"Summary of User Story\"\n              value={branchMessage}\n            />\n          </Grid>\n          <Grid item sm={1} xs={2}>\n            <IconButton\n              onClick={onBranchMessageClear}\n              style={{ marginTop: 12 }}\n            >\n              <Clear />\n            </IconButton>\n          </Grid>\n        </Grid>\n        <CopyTextDisplay handleCopy={handleCopy} text={branchName} />\n      </div>\n    );\n  }\n}\n","import React, { useState } from 'react';\nimport types from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport Select from '@material-ui/core/Select';\nimport IconButton from '@material-ui/core/IconButton';\nimport Clear from '@material-ui/icons/Clear';\nimport Grid from '@material-ui/core/Grid';\nimport nl2br from 'react-newline-to-break';\nimport CopyTextDisplay from './CopyTextDisplay';\nimport { setCommitPrefix } from '../../../store/modules/git';\n// Parents: Main\n\nconst styles = {\n  wrapper: { paddingLeft: 20, paddingRight: 20, width: '100%' },\n  marginTop: { marginTop: 12 },\n};\n\nfunction useCommitText(storyID, gitCommit) {\n  const [commitPrefix, setLocalCommitPrefix] = useState('feat');\n  const [commitMessage, setCommitMessage] = useState('');\n  const [commitDescription, setCommitDescription] = useState('');\n  const [finishes, setFinishes] = useState(false);\n\n  /**\n   * function to generate the commit message from inputs\n   * @return {string} format Prefix: Message [?Finishes? ID]\n   */\n  const getCommitText = () => {\n    // prefix\n    const prefix = commitPrefix ? `${commitPrefix}: ` : '';\n\n    // description\n    let desc = ' ';\n    if (commitDescription && storyID) {\n      desc = `\\n\\n${commitDescription}\\n\\n`;\n    } else if (commitDescription) {\n      desc = `\\n\\n${commitDescription}`;\n    }\n\n    // postfix\n    let postfix = '';\n    if (finishes && storyID) {\n      postfix = `[${storyID} #finish]`;\n    } else if (storyID) {\n      postfix = `[${storyID}]`;\n    }\n\n    // compile all components together\n    const gitMessage = `${prefix}${commitMessage}${desc}${postfix}`;\n\n    // add syntax wrapper\n    return gitCommit ? `git commit -m \"${gitMessage}\"` : gitMessage;\n  };\n\n  /**\n   * function to update select state based on value\n   * @param {Object} e event fired when select occurs\n   */\n  const handleCommitPrefixSelect = (e) => {\n    setLocalCommitPrefix(e.target.value);\n  };\n\n  /**\n   * function to update text state based on value\n   * @param {Object} e event fired when select occurs\n   */\n  const handleCommitMessageChange = (e) => {\n    setCommitMessage(e.target.value);\n  };\n\n  const handleCommitDescriptionChange = (e) => {\n    setCommitDescription(e.target.value);\n  };\n\n  /**\n   * function to update text state based on value\n   * @param {Object} e event fired when select occurs\n   */\n  const clearCommitMessage = () => {\n    setCommitMessage('');\n  };\n\n  const clearCommitDescription = () => {\n    setCommitDescription('');\n  };\n\n  /**\n   * function(event: object, isInputChecked: bool) => void\n   * @param {Object} e - event: Change event targeting the toggle\n   * @param {boolean} isC - is input checked: The new value of the toggle\n   */\n  const handleFinishesToggle = (e, isC) => {\n    setFinishes(isC);\n  };\n\n  return {\n    commitPrefix,\n    commitMessage,\n    commitDescription,\n    finishes,\n    getCommitText,\n    handleCommitPrefixSelect,\n    handleCommitMessageChange,\n    handleCommitDescriptionChange,\n    clearCommitMessage,\n    clearCommitDescription,\n    handleFinishesToggle,\n  };\n}\n\nconst CommitText = (props) => {\n  const {\n    getSelectOptions, storyID, gitActions, handleCopy, gitCommit, gitTheme,\n  } = props;\n\n  const {\n    commitPrefix,\n    commitMessage,\n    commitDescription,\n    finishes,\n    getCommitText,\n    handleCommitPrefixSelect,\n    handleCommitMessageChange,\n    handleCommitDescriptionChange,\n    clearCommitMessage,\n    clearCommitDescription,\n    handleFinishesToggle,\n  } = useCommitText(storyID, gitCommit);\n\n  const { wrapper, marginTop } = styles;\n\n  /**\n   * function to generate select items based of input\n   * @param {[string]} arr input array of options\n   * @return {[Object]}\n   */\n  const getCommitPrefixOptions = () => getSelectOptions([\n    'build',\n    'chore',\n    'ci',\n    'docs',\n    'feat',\n    'fix',\n    'perf',\n    'refactor',\n    'revert',\n    'style',\n    'test',\n  ]);\n\n  const handleGitCommitToggle = (e, isC) => {\n    gitActions.setCommitPrefix(isC);\n  };\n\n  const commitText = getCommitText();\n  const displayText = commitText && nl2br(getCommitText());\n\n  return (\n    <div style={wrapper}>\n      <Grid container spacing={1}>\n        <Grid item sm={4} xs={12}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"commit-prefix\" style={{ color: gitTheme }}>\n              Commit Prefix\n            </InputLabel>\n            <Select\n              input={<Input id=\"branch-prefix\" />}\n              onChange={handleCommitPrefixSelect}\n              value={commitPrefix}\n            >\n              {getCommitPrefixOptions()}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item sm={4} xs={12}>\n          <FormControlLabel\n            control={(\n              <Switch\n                checked={finishes}\n                onChange={handleFinishesToggle}\n                value=\"Finishes User Story\"\n              />\n            )}\n            label=\"Finishes User Story\"\n          />\n        </Grid>\n        <Grid item sm={4} xs={12}>\n          <FormControlLabel\n            control={(\n              <Switch\n                checked={gitCommit}\n                onChange={handleGitCommitToggle}\n                value=\"Add git commit -m\"\n              />\n            )}\n            label=\"Add git commit -m\"\n          />\n        </Grid>\n        <Grid item sm={5} xs={10}>\n          <TextField\n            fullWidth\n            InputLabelProps={{ style: { color: gitTheme } }}\n            label=\"Commit Message\"\n            onChange={handleCommitMessageChange}\n            placeholder=\"Summary of Work Done (Message)\"\n            value={commitMessage}\n          />\n        </Grid>\n        <Grid item sm={1} xs={2}>\n          <IconButton onClick={clearCommitMessage} style={marginTop}>\n            <Clear />\n          </IconButton>\n        </Grid>\n        <Grid item sm={5} xs={10}>\n          <TextField\n            fullWidth\n            InputLabelProps={{ style: { color: gitTheme } }}\n            label=\"Commit Description\"\n            multiline\n            onChange={handleCommitDescriptionChange}\n            placeholder=\"Summary of Work Done (Description)\"\n            value={commitDescription}\n          />\n        </Grid>\n        <Grid item sm={1} xs={2}>\n          <IconButton\n            onClick={clearCommitDescription}\n            style={marginTop}\n          >\n            <Clear />\n          </IconButton>\n        </Grid>\n      </Grid>\n      <CopyTextDisplay\n        copyText={commitText}\n        handleCopy={handleCopy}\n        text={displayText}\n      />\n    </div>\n  );\n};\n\nCommitText.propTypes = {\n  getSelectOptions: types.func.isRequired,\n  gitActions: types.shape({\n    setCommitPrefix: types.func.isRequired,\n  }).isRequired,\n  gitCommit: types.bool.isRequired,\n  gitTheme: types.string.isRequired,\n  handleCopy: types.func.isRequired,\n  storyID: types.string,\n};\n\n// react-redux export\nconst mapStateToProps = state => ({ gitCommit: state.git.commitPrefix });\nconst mapDispatchToProps = dispatch => ({\n  gitActions: bindActionCreators({ setCommitPrefix }, dispatch),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(CommitText);\n","import React, { useState, memo } from 'react';\nimport types from 'prop-types';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport Grid from '@material-ui/core/Grid';\nimport CopyTextDisplay from './CopyTextDisplay';\n// Parents: GitTools\n\nconst BranchName = memo((props) => {\n  const [targetBranch, setTargetBranch] = useState('test-pipeline');\n\n  const handleSelect = (e) => {\n    setTargetBranch(e.target.value);\n  };\n\n  const {\n    gitTheme, handleCopy, getSelectOptions, branchName,\n  } = props;\n\n  return (\n    <div style={{ paddingLeft: 20, paddingRight: 20, width: '100%' }}>\n      <Grid container spacing={1} style={{ display: 'flex', alignItems: 'center' }}>\n        <Grid item sm={3} xs={12}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"target-branch\" style={{ color: gitTheme }}>\n              Target Branch\n            </InputLabel>\n            <Select\n              input={<Input id=\"target-branch\" />}\n              onChange={handleSelect}\n              value={targetBranch}\n            >\n              {getSelectOptions(['test-pipeline', 'sandbox-pipeline'])}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item sm={9} xs={12}>\n          <CopyTextDisplay handleCopy={handleCopy} text={`git push -f origin ${branchName}:${targetBranch}`} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n});\n\nBranchName.propTypes = {\n  branchName: types.string.isRequired,\n  getSelectOptions: types.func.isRequired,\n  gitTheme: types.string.isRequired,\n  handleCopy: types.func.isRequired,\n};\n\nexport default BranchName;\n","// react\nimport React, { memo } from 'react';\nimport types from 'prop-types';\n// material-ui\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\n// Parents: Main\n\nconst validId = RegExp('[A-Z]{4}-[a-zA-Z0-9]+');\n\nconst Header = memo((props) => {\n  const { handleIDChange, storyID, gitTheme } = props;\n\n  const isIdValid = validId.test(storyID);\n\n  return (\n    <div>\n      <Typography variant=\"h2\">\n        Git Tools\n      </Typography>\n      <TextField\n        InputLabelProps={{ style: { color: gitTheme } }}\n        label=\"User Story ID\"\n        onChange={handleIDChange}\n        placeholder=\"GNAP-12345\"\n        style={{ marginLeft: 20 }}\n        value={storyID}\n        error={!isIdValid}\n      />\n      <br />\n    </div>\n  );\n});\n\nHeader.propTypes = {\n  gitTheme: types.string.isRequired,\n  handleIDChange: types.func.isRequired,\n  storyID: types.string,\n};\n\nexport default Header;\n","// react\nimport React, { Component } from 'react';\nimport types from 'prop-types';\n// redux\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n// material-ui\nimport MenuItem from '@material-ui/core/MenuItem';\nimport deepOrange from '@material-ui/core/colors/deepOrange';\n// functions\nimport copy from 'copy-to-clipboard';\nimport map from 'lodash/map';\nimport snakeCase from 'lodash/snakeCase';\nimport kebabCase from 'lodash/kebabCase';\nimport camelCase from 'lodash/camelCase';\nimport {\n  setBranchMessage,\n  setBranchPrefix,\n  setCasePreference,\n  setKey,\n} from '../../../store/modules/git';\n// Components\nimport BranchName from './BranchName';\nimport CommitText from './CommitText';\nimport DeployBranch from './DeployBranch';\nimport Header from './Header';\nimport ExpandableCard from '../../common/ExpandableCard';\n// Parents: Main\n\nconst validTypingId = RegExp('[A-Z]{1,4}-?[a-zA-Z0-9]*');\n\nclass GitTools extends Component {\n  static propTypes = {\n    git: types.shape({\n      storyID: types.string.isRequired,\n      branchPrefix: types.string.isRequired,\n      casePreference: types.string.isRequired,\n      branchMessage: types.string,\n    }).isRequired,\n    gitActions: types.shape({\n      setBranchMessage: types.func.isRequired,\n      setBranchPrefix: types.func.isRequired,\n      setCasePreference: types.func.isRequired,\n      setKey: types.func.isRequired,\n    }).isRequired,\n  };\n\n  /**\n   * function to generate select items based of input\n   * @param {[string]} arr input array of options\n   * @return {[Object]}\n   */\n  getSelectOptions = arr => map(arr, (t, i) => (\n    <MenuItem key={i} value={t}>\n      {t}\n    </MenuItem>\n  ));\n\n  /**\n   * function to update text state based on value\n   * @param {Object} e event fired when typing occurs\n   */\n  handleIDChange = (e) => {\n    const { gitActions } = this.props;\n    const [value] = validTypingId.exec(e.target.value) || [''];\n    gitActions.setKey(value);\n  };\n\n  /**\n   * function to update text state based on value\n   * @param {string} str string to copy\n   */\n  handleCopy = (str) => {\n    copy(str);\n  };\n\n  /**\n   * function to update text state based on value\n   * @param {Object} e event fired when select occurs\n   */\n  handleBranchMessageChange = (e) => {\n    const { gitActions } = this.props;\n    gitActions.setBranchMessage(e.target.value);\n  };\n\n  /**\n   * function to update text state based on value\n   * @param {Object} e event fired when select occurs\n   */\n  handleBranchMessageClear = () => {\n    const { gitActions } = this.props;\n    gitActions.setBranchMessage('');\n  };\n\n  /**\n   * function to generate the branch name from inputs\n   * @return {string} format prefix/<story_id>_name_lower_cased\n   */\n  getBranchName = () => {\n    const {\n      git: {\n        branchMessage, branchPrefix, casePreference, storyID: id,\n      },\n    } = this.props;\n    const prefix = branchPrefix ? `${branchPrefix}/` : '';\n    let msg = '';\n    switch (casePreference) {\n      case 'snake_case':\n        msg = `${id && `${id}_`}${snakeCase(branchMessage)}`;\n        break;\n      case 'kebab-case':\n        msg = `${id && `${id}-`}${kebabCase(branchMessage)}`;\n        break;\n      case 'camelCase':\n        msg = `${id}${camelCase(branchMessage)}`;\n        break;\n      default:\n        msg = `${id}${branchMessage}`;\n    }\n    return `${prefix}${msg}`;\n  };\n\n  render() {\n    const {\n      git: {\n        branchMessage, branchPrefix, casePreference, storyID,\n      }, gitActions,\n    } = this.props;\n    const branchName = this.getBranchName();\n    const gitTheme = deepOrange[600];\n\n    return (\n      <div>\n        <Header\n          {...{\n            gitTheme,\n            handleIDChange: this.handleIDChange,\n            storyID,\n          }}\n        />\n        <ExpandableCard backgroundColor={gitTheme} title=\"Create Branch Name\">\n          <BranchName\n            {...{\n              branchMessage,\n              branchName,\n              branchPrefix,\n              casePreference,\n              getSelectOptions: this.getSelectOptions,\n              gitTheme,\n              handleCopy: this.handleCopy,\n              onBranchMessageChange: this.handleBranchMessageChange,\n              onBranchMessageClear: this.handleBranchMessageClear,\n              setBranchPrefix: gitActions.setBranchPrefix,\n              setCasePreference: gitActions.setCasePreference,\n            }}\n          />\n        </ExpandableCard>\n        <ExpandableCard backgroundColor={gitTheme} title=\"Create Commit Message\">\n          <CommitText\n            {...{\n              getSelectOptions: this.getSelectOptions,\n              gitTheme,\n              handleCopy: this.handleCopy,\n              storyID,\n            }}\n          />\n        </ExpandableCard>\n        <ExpandableCard backgroundColor={gitTheme} title=\"Deploy to Test Pipelines\">\n          <DeployBranch\n            {...{\n              branchName,\n              getSelectOptions: this.getSelectOptions,\n              gitTheme,\n              handleCopy: this.handleCopy,\n            }}\n          />\n        </ExpandableCard>\n      </div>\n    );\n  }\n}\n\n// react-redux export\nconst mapStateToProps = state => ({ git: state.git });\nconst mapDispatchToProps = dispatch => ({\n  gitActions: bindActionCreators(\n    {\n      setBranchMessage,\n      setBranchPrefix,\n      setCasePreference,\n      setKey,\n    },\n    dispatch,\n  ),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(GitTools);\n","import GitTools from './GitTools';\n\nexport default GitTools;\n"],"sourceRoot":""}