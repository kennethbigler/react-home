{"version":3,"sources":["hooks/useToggle.ts","helpers/lazyWithPreload.ts","hooks/useAnchorEl.ts","components/common/ButtonPopover.tsx","components/common/header/PlayerMenu.tsx","components/common/header/TopBar.tsx","components/common/header/Header.tsx","components/games/Menu.tsx","components/games/Routes.tsx"],"names":["useToggleState","defaultVal","React","useState","isToggled","setIsToggled","handleToggle","lazyWithPreload","ComponentPromise","lazy","useAnchorEl","anchorEl","setAnchorEl","setAnchor","e","currentTarget","clearAnchor","contentStyle","padding","ButtonPopover","props","children","buttonText","open","Boolean","Button","aria-haspopup","variant","component","onClick","Popover","id","onClose","anchorOrigin","vertical","horizontal","transformOrigin","style","cloneElement","namePadStyles","maxWidth","width","display","margin","PlayerMenu","players","useSelector","state","dispatch","useDispatch","isBot","useMemo","map","a","useCallback","isChecked","updateBot","handleBlur","updateName","target","value","handleKeyPress","key","Grid","container","spacing","item","xs","Typography","p","i","name","TextField","defaultValue","onBlur","onKeyPress","placeholder","Switch","checked","color","onChange","_e","isC","disabled","flexLeftStyles","alignItems","flexRightStyles","marginRight","spanTopStyles","left","right","top","TopBar","memo","theme","type","setChecked","toggleTheme","displayDarkTheme","displayLightTheme","toggleOpen","showPlayers","fontColor","iconColor","AppBar","Toolbar","disableGutters","className","IconButton","aria-label","cursor","defaultProps","Header","isOpen","setIsOpen","handleNav","palette","Drawer","position","onItemClick","loc","withTheme","Menu","menu","route","divider","index","Divider","MenuItem","GameHome","BlackJack","Connect4","DealOrNoDeal","Poker","Slots","TicTacToe","Yahtzee","Routes","match","url","paths","reduce","acc","obj","path","push","exact","from","to","Suspense","fallback"],"mappings":"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","file":"static/js/games.c8b96e3d.chunk.js","sourcesContent":["import React from 'react';\n\ntype ToggleStateHook = [ boolean, React.MouseEventHandler, Function ];\n\nconst useToggleState = (defaultVal = false): ToggleStateHook => {\n  const [isToggled, setIsToggled] = React.useState(defaultVal);\n\n  const handleToggle = (): void => { setIsToggled(!isToggled); };\n\n  return [isToggled, handleToggle, setIsToggled];\n};\n\nexport default useToggleState;\n","import React from 'react';\n\ntype Props = {};\ntype ReactComponent = React.ComponentType<Props>;\ntype ImportPromise = Promise<{ default: ReactComponent }>;\ntype LazyComponent = React.LazyExoticComponent<ReactComponent>;\n\nexport default function lazyWithPreload(ComponentPromise: ImportPromise): LazyComponent {\n  return React.lazy(() => ComponentPromise);\n}\n","import React from 'react';\n\ninterface AnchorElHook {\n  anchorEl: null | HTMLElement;\n  setAnchor: React.MouseEventHandler;\n  clearAnchor: React.MouseEventHandler;\n}\n\nconst useAnchorEl = (): AnchorElHook => {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const setAnchor = (e: React.MouseEvent<HTMLButtonElement>): void => {\n    setAnchorEl(e.currentTarget);\n  };\n  const clearAnchor = (): void => {\n    setAnchorEl(null);\n  };\n  return { anchorEl, setAnchor, clearAnchor };\n};\n\nexport default useAnchorEl;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Popover from '@material-ui/core/Popover';\nimport useAnchorEl from '../../hooks/useAnchorEl';\n\ninterface ButtonPopoverProps {\n  children: React.ReactElement;\n  buttonText: string;\n}\n\nconst contentStyle: React.CSSProperties = { padding: 15 };\n\nconst ButtonPopover: React.FC<ButtonPopoverProps> = (props: ButtonPopoverProps) => {\n  const { anchorEl, setAnchor, clearAnchor } = useAnchorEl();\n  const { children, buttonText } = props;\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <Button\n        aria-haspopup=\"true\"\n        variant=\"contained\"\n        component=\"button\"\n        onClick={setAnchor}\n      >\n        {buttonText}\n      </Button>\n      <Popover\n        id=\"simple-popper\"\n        open={open}\n        anchorEl={anchorEl}\n        onClose={clearAnchor}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'center' }}\n      >\n        <div style={contentStyle}>\n          {React.cloneElement(children)}\n        </div>\n      </Popover>\n    </>\n  );\n};\n\nexport default ButtonPopover;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Switch from '@material-ui/core/Switch';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { updateName, updateBot } from '../../../store/modules/players';\nimport { DBRootState } from '../../../store/types';\n\nconst namePadStyles: React.CSSProperties = {\n  maxWidth: '420px',\n  width: '100%',\n  display: 'block',\n  margin: 'auto',\n};\n\nconst PlayerMenu: React.FC<{}> = () => {\n  const players = useSelector((state: DBRootState) => state.players);\n  const dispatch = useDispatch();\n\n  const isBot = React.useMemo(() => players.map((a) => a.isBot), [players]);\n\n  const handleToggle = React.useCallback(\n    (id: number, isChecked: boolean): void => {\n      dispatch(updateBot(id, isChecked));\n    },\n    [dispatch],\n  );\n\n  const handleBlur = React.useCallback(\n    (id: number) => (e: React.FocusEvent<HTMLInputElement>): void => {\n      dispatch(updateName(id, e.target.value || ''));\n    },\n    [dispatch],\n  );\n\n  const handleKeyPress = React.useCallback(\n    (id: number) => (e: React.KeyboardEvent<HTMLDivElement>): void => {\n      if (e.key === 'Enter') {\n        dispatch(updateName(id, (e.target as HTMLInputElement).value || ''));\n      }\n    },\n    [dispatch],\n  );\n\n  return (\n    <div style={namePadStyles}>\n      <Grid container spacing={1}>\n        <Grid item xs={9}>\n          <Typography variant=\"h5\">\n            Edit Player Names\n          </Typography>\n        </Grid>\n        <Grid item xs={3}>\n          <Typography variant=\"h5\">\n            Is Bot?\n          </Typography>\n        </Grid>\n      </Grid>\n      {players.map((p, i) => (p.id !== 0\n        ? (\n          <Grid key={`${p.name},${i}`} container spacing={1}>\n            <Grid item xs={9}>\n              <TextField\n                defaultValue={p.name}\n                onBlur={handleBlur(p.id)}\n                onKeyPress={handleKeyPress(p.id)}\n                placeholder=\"Enter Player Name\"\n              />\n            </Grid>\n            <Grid item xs={3}>\n              <Switch\n                checked={isBot[i]}\n                color=\"primary\"\n                onChange={(_e, isC): void => handleToggle(p.id, isC)}\n              />\n            </Grid>\n          </Grid>\n        ) : (\n          <Grid key={`${p.name},${i}`} container spacing={1}>\n            <Grid item xs={9}>\n              <Typography variant=\"h5\">\n                {p.name}\n              </Typography>\n            </Grid>\n            <Grid item xs={3}>\n              <Switch checked disabled />\n            </Grid>\n          </Grid>\n        )\n      ))}\n    </div>\n  );\n};\n\nexport default PlayerMenu;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Switch from '@material-ui/core/Switch';\nimport SimplePopover from '../ButtonPopover';\nimport PlayerMenu from './PlayerMenu';\nimport {\n  displayDarkTheme,\n  displayLightTheme,\n} from '../../../store/modules/theme';\nimport { DBRootState } from '../../../store/types';\n\ninterface TopBarProps {\n  fontColor: 'inherit' | 'initial' | 'error' | 'primary' | 'secondary' | 'textPrimary' | 'textSecondary' | undefined;\n  iconColor: 'inherit' | 'primary' | 'secondary' | 'default' | undefined;\n  showPlayers?: boolean;\n  toggleOpen: React.MouseEventHandler;\n}\n\nconst flexLeftStyles: React.CSSProperties = {\n  display: 'flex',\n  alignItems: 'center',\n};\nconst flexRightStyles: React.CSSProperties = {\n  display: 'flex',\n  marginRight: 15,\n};\nconst spanTopStyles: React.CSSProperties = { left: 0, right: 0, top: 0 };\n\nconst TopBar: React.FC<TopBarProps> = React.memo((props: TopBarProps) => {\n  const theme = useSelector((state: DBRootState) => state.theme);\n  const dispatch = useDispatch();\n\n  const [checked, setChecked] = React.useState(theme.type !== 'dark');\n\n  const toggleTheme = React.useCallback(\n    (): void => {\n      checked\n        ? dispatch(displayDarkTheme())\n        : dispatch(displayLightTheme());\n      setChecked(!checked);\n    },\n    [checked, dispatch],\n  );\n\n  const {\n    toggleOpen, showPlayers, fontColor, iconColor,\n  } = props;\n\n  return (\n    <AppBar style={spanTopStyles}>\n      <Toolbar disableGutters>\n        <div className=\"flex-container\">\n          <div style={flexLeftStyles}>\n            <IconButton\n              aria-label=\"Menu\"\n              onClick={toggleOpen}\n              color={iconColor}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography\n              onClick={toggleOpen}\n              style={{ cursor: 'pointer' }}\n              variant=\"h6\"\n              color={fontColor}\n            >\n              Menu\n            </Typography>\n          </div>\n          {showPlayers && (\n            <div style={flexRightStyles}>\n              <SimplePopover buttonText=\"Players\">\n                <PlayerMenu />\n              </SimplePopover>\n            </div>\n          )}\n          <div style={flexRightStyles}>\n            <Switch checked={checked} onChange={toggleTheme} />\n          </div>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n});\n\nTopBar.defaultProps = {\n  showPlayers: false,\n};\n\nexport default TopBar;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Drawer from '@material-ui/core/Drawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport NavigationClose from '@material-ui/icons/Close';\nimport { withTheme, Theme } from '@material-ui/core/styles';\nimport TopBar from './TopBar';\nimport useToggleState from '../../../hooks/useToggle';\n\ninterface NavProps {\n  onItemClick: (loc: string) => void;\n}\ninterface HeaderProps {\n  children: React.ReactElement<NavProps>;\n  handleNav: Function;\n  showPlayers?: boolean;\n  theme: Theme;\n}\n\nconst Header: React.FC<HeaderProps> = (props: HeaderProps) => {\n  const [isOpen, toggleOpen, setIsOpen] = useToggleState(false);\n  const {\n    children, handleNav, showPlayers,\n    theme: { palette: { type }},\n  } = props;\n\n  const handleNavigation = (loc: string): void => {\n    setIsOpen(false);\n    handleNav(loc);\n  };\n\n  const iconColor = type === 'light' ? 'inherit' : 'default';\n  const fontColor = type === 'light' ? 'inherit' : 'initial';\n\n  return (\n    <>\n      <TopBar toggleOpen={toggleOpen} showPlayers={showPlayers} fontColor={fontColor} iconColor={iconColor} />\n      <Drawer onClose={toggleOpen} open={isOpen}>\n        <AppBar position=\"sticky\">\n          <Toolbar disableGutters>\n            <IconButton\n              aria-label=\"Menu Close\"\n              onClick={toggleOpen}\n              color={iconColor}\n            >\n              <NavigationClose />\n            </IconButton>\n            <Typography variant=\"h6\" color={fontColor}>\n              Menu\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        {React.cloneElement(children, { onItemClick: handleNavigation })}\n      </Drawer>\n    </>\n  );\n};\n\nHeader.defaultProps = {\n  showPlayers: false,\n};\n\nexport default withTheme(Header);\n","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Divider from '@material-ui/core/Divider';\n\ninterface MenuProps {\n  onItemClick?: Function;\n}\n\nconst Menu: React.FC<MenuProps> = React.memo((props: MenuProps) => {\n  const { onItemClick } = props;\n  const baseUrl = '/games';\n\n  // internal routes\n  const menu = [\n    { name: 'Home - Games', route: '' },\n    { divider: true },\n    { name: 'BlackJack', route: 'blackjack' },\n    { name: 'Connect4', route: 'connect4' },\n    { name: 'Deal or No Deal', route: 'deal' },\n    { name: 'Poker', route: 'poker' },\n    { name: 'Slot Machine', route: 'slots' },\n    { name: 'Tic-Tac-Toe', route: 'tictactoe' },\n    { name: 'Yahtzee', route: 'yahtzee' },\n  ].map((item, index) => (item.divider\n    ? (\n      <Divider key={index} />\n    ) : (\n      <MenuItem\n        key={item.name}\n        onClick={(): void => onItemClick && onItemClick(`${baseUrl}/${item.route}`)}\n      >\n        {item.name}\n      </MenuItem>\n    )\n  ));\n\n  // navigation\n  const home = (): void => onItemClick && onItemClick('/');\n\n  // render menu\n  return (\n    <>\n      <MenuItem onClick={home}>\n        Back to Resume\n      </MenuItem>\n      {menu}\n    </>\n  );\n});\n\nexport default Menu;\n","import React from 'react';\nimport {\n  Switch, Route, Redirect, match as Match,\n} from 'react-router-dom';\nimport lazyWithPreload from '../../helpers/lazyWithPreload';\nimport Header from '../common/header/Header';\nimport Menu from './Menu';\nimport LoadingSpinner from '../common/loading-spinner';\n\ninterface RoutesProps {\n  handleNav: Function;\n  match: Match;\n}\n\n// lazy load page components\nconst GameHome = lazyWithPreload(import(/* webpackChunkName: \"g_home\" */ './Home'));\nconst BlackJack = lazyWithPreload(import(/* webpackChunkName: \"g_bj\" */ './blackjack'));\nconst Connect4 = lazyWithPreload(import(/* webpackChunkName: \"g_connect4\" */ './connect4'));\nconst DealOrNoDeal = lazyWithPreload(import(/* webpackChunkName: \"g_dond\" */ './deal-or-no-deal'));\nconst Poker = lazyWithPreload(import(/* webpackChunkName: \"g_poker\" */ './poker'));\nconst Slots = lazyWithPreload(import(/* webpackChunkName: \"g_slots\" */ './slots'));\nconst TicTacToe = lazyWithPreload(import(/* webpackChunkName: \"g_tictactoe\" */ './tictactoe'));\nconst Yahtzee = lazyWithPreload(import(/* webpackChunkName: \"g_yahtzee\" */ './yahtzee'));\n\nconst Routes: React.FC<RoutesProps> = (props: RoutesProps) => {\n  const { match, handleNav } = props;\n  const { url } = match;\n\n  const paths = [\n    { name: 'blackjack', component: BlackJack },\n    { name: 'connect4', component: Connect4 },\n    { name: 'deal', component: DealOrNoDeal },\n    { name: 'poker', component: Poker },\n    { name: 'slots', component: Slots },\n    { name: 'tictactoe', component: TicTacToe },\n    { name: 'yahtzee', component: Yahtzee },\n  ].reduce((acc: React.ReactNode[], obj) => {\n    const { name, component } = obj;\n    const path = `${url}/${name}`;\n    acc.push(<Route key={`${path}r`} exact {...{ path, component }} />);\n    acc.push(<Redirect key={`${path}d`} from={`${path}*`} to={path} />);\n    return acc;\n  },\n  []);\n\n  return (\n    <>\n      <Header handleNav={handleNav} showPlayers>\n        <Menu />\n      </Header>\n      <React.Suspense fallback={<LoadingSpinner />}>\n        <Switch>\n          <Route component={GameHome} exact path={`${url}`} />\n          {paths}\n          <Redirect from={`${url}/*`} to={`${url}`} />\n          <Route component={GameHome} />\n        </Switch>\n      </React.Suspense>\n    </>\n  );\n};\n\nexport default Routes;\n"],"sourceRoot":""}