{"version":3,"file":"static/js/g_poker.6bced9cd.chunk.js","mappings":"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","sources":["components/games/game-table/board/card/Card.styles.ts","components/games/game-table/board/card/Card.tsx","components/games/game-table/board/Hand.tsx","components/games/game-table/board/player/Player.styles.ts","components/games/game-table/board/player/Player.tsx","components/games/game-table/board/Board.tsx","components/games/game-table/button-group/Button.tsx","components/games/game-table/button-group/ButtonGroup.tsx","components/games/game-table/GameTable.tsx","components/games/poker/helpers.ts","components/games/poker/hooks.ts","components/games/poker/Poker.tsx"],"sourcesContent":["const cardFace: React.CSSProperties = {\n  backgroundColor: \"white\",\n  borderRadius: 5,\n  cursor: \"pointer\",\n  display: \"inline-block\",\n  fontWeight: \"bold\",\n  height: 78,\n  margin: 5,\n  padding: 3,\n  width: 50,\n};\n\nconst cardTitle: React.CSSProperties = {\n  textAlign: \"left\",\n};\n\nconst suit: React.CSSProperties = {\n  margin: \"auto\",\n  marginTop: 5,\n  textAlign: \"center\",\n  width: \"100%\",\n};\n\nexport default {\n  cardFace,\n  cardTitle,\n  suit,\n};\n","import React from \"react\";\nimport { Typography } from \"@mui/material\";\nimport { red } from \"@mui/material/colors\";\nimport styles from \"./Card.styles\";\n\ninterface CardProps {\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardNo: number;\n  dropped: boolean;\n  handNo: number;\n  name: string;\n  playerNo: number;\n  suit: string;\n}\n\nconst Card = React.memo((props: CardProps) => {\n  const { dropped, suit, name, cardHandler, playerNo, handNo, cardNo } = props;\n  // handle click to for card\n  const handleClick = React.useCallback((): void => {\n    cardHandler && cardHandler(playerNo, handNo, cardNo);\n  }, [cardHandler, cardNo, handNo, playerNo]);\n  // checking color based off suits: ♣♦♥♠\n  const cardColor: React.CSSProperties = {\n    color: suit === \"♣\" || suit === \"♠\" ? \"black\" : red[500],\n    backgroundColor: dropped ? red[100] : \"white\",\n  };\n\n  return (\n    <div\n      style={{ ...styles.cardFace, ...cardColor }}\n      onClick={handleClick}\n      role=\"main\"\n    >\n      <div style={styles.cardTitle}>{name + suit}</div>\n      <Typography variant=\"h4\" style={{ ...styles.suit, ...cardColor }}>\n        {suit}\n      </Typography>\n    </div>\n  );\n});\n\nexport default Card;\n","import React from \"react\";\nimport { Typography } from \"@mui/material\";\nimport { purple } from \"@mui/material/colors\";\nimport Card from \"./card/Card\";\nimport { DBHand } from \"../../../../store/types\";\n\nconst boldStyle: React.CSSProperties = {\n  fontWeight: \"bold\",\n  marginTop: \"0.5em\",\n};\nconst normalStyle: React.CSSProperties = {\n  fontWeight: \"normal\",\n  marginTop: \"0.5em\",\n};\n\ninterface HandProps {\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hand: DBHand;\n  handNo: number;\n  isBlackJack: boolean;\n  isHandTurn: boolean;\n  isMultiHand: boolean;\n  isPlayerTurn: boolean;\n  playerNo: number;\n}\n\nconst Hand: React.FC<HandProps> = (props: HandProps) => {\n  const {\n    cardHandler,\n    cardsToDiscard,\n    hand,\n    handNo,\n    isBlackJack,\n    isHandTurn,\n    isMultiHand,\n    isPlayerTurn,\n    playerNo,\n  } = props;\n\n  const styles = React.useMemo(\n    () =>\n      isPlayerTurn && (!isMultiHand || (isMultiHand && isHandTurn))\n        ? { ...boldStyle, color: purple[700] }\n        : normalStyle,\n    [isPlayerTurn, isMultiHand, isHandTurn]\n  );\n  const handWeight = hand.weight || 0;\n\n  return (\n    <>\n      <Typography variant=\"h4\" style={styles}>\n        {isBlackJack && `${handWeight > 21 ? \"Bust\" : \"Hand\"}: ${handWeight}`}\n      </Typography>\n      {hand.cards.map((card, i) => {\n        const dropped: boolean = cardsToDiscard.includes(i);\n        return (\n          <Card\n            key={card.name + card.suit}\n            cardHandler={cardHandler}\n            cardNo={i}\n            dropped={dropped}\n            handNo={handNo}\n            name={card.name}\n            playerNo={playerNo}\n            suit={card.suit}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nexport default Hand;\n","const player: React.CSSProperties = {\n  borderRadius: 5,\n  display: \"inline-block\",\n  margin: 10,\n  padding: 20,\n};\n\nconst width: React.CSSProperties = { minWidth: \"100px\" };\n\nexport default {\n  player,\n  width,\n};\n","import React from \"react\";\nimport Slider from \"@mui/material/Slider\";\nimport { Typography } from \"@mui/material\";\nimport Card from \"@mui/material/Card\";\nimport { cyan, green, blueGrey, red } from \"@mui/material/colors\";\nimport Hand from \"../Hand\";\nimport { DBTurn, DBPlayer } from \"../../../../../store/types\";\nimport styles from \"./Player.styles\";\n\ninterface PlayerProps {\n  betHandler?: (id: number, event: Event, value: number) => void;\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  player: DBPlayer;\n  playerNo: number;\n  turn: DBTurn;\n}\n\nconst Player: React.FC<PlayerProps> = (props: PlayerProps) => {\n  // get vars from props\n  const {\n    betHandler,\n    cardHandler,\n    cardsToDiscard,\n    hideHands,\n    isBlackJack,\n    player,\n    playerNo,\n    turn,\n  } = props;\n  // set booleans\n  const isPlayerTurn: boolean = !!turn && playerNo === turn.player;\n  const isMultiHand: boolean = player.hands.length > 1;\n  const showSlider: boolean =\n    !!hideHands && isBlackJack && player.id !== 0 && !player.isBot;\n  // set slider variables\n  const minBet: number = Math.max(Math.min(player.money, 5), 0);\n  const maxBet: number = Math.max(Math.min(player.money, 100), 10);\n  const step = 5;\n  const onSliderChange = React.useCallback(\n    (event: Event, value: number | number[]): void => {\n      betHandler && betHandler(player.id, event, value as number);\n    },\n    [betHandler, player.id]\n  );\n  // set colors\n  let color: React.CSSProperties = isPlayerTurn\n    ? { background: cyan[200] }\n    : {};\n  const weight: React.CSSProperties = isPlayerTurn\n    ? { fontWeight: \"bold\" }\n    : { fontWeight: \"normal\" };\n  if (player.status === \"win\") {\n    color = { background: green[300] };\n  }\n  if (player.status === \"draw\") {\n    color = { background: blueGrey[300] };\n  }\n  if (player.status === \"lose\") {\n    color = { background: red[300] };\n  }\n\n  return (\n    <Card style={{ ...styles.player, ...color }}>\n      <Typography variant=\"h4\" style={{ ...weight }}>\n        {`${player.name}: $${player.money}`}\n      </Typography>\n      {showSlider && (\n        <Slider\n          max={maxBet}\n          min={minBet}\n          onChange={onSliderChange}\n          step={step}\n          style={styles.width}\n          value={player.bet}\n        />\n      )}\n      {isBlackJack && player.id !== 0 && (\n        <Typography variant=\"h5\">{`Bet: $${player.bet}`}</Typography>\n      )}\n      {player.hands.map((hand, i) => {\n        const isHandTurn: boolean = !!turn && turn.hand === i;\n        return (\n          <div key={`hand${i}`}>\n            {!hideHands && (\n              <Hand\n                cardHandler={cardHandler}\n                cardsToDiscard={cardsToDiscard}\n                hand={hand}\n                handNo={i}\n                isBlackJack={isBlackJack}\n                isHandTurn={isHandTurn}\n                isMultiHand={isMultiHand}\n                isPlayerTurn={isPlayerTurn}\n                playerNo={playerNo}\n              />\n            )}\n          </div>\n        );\n      })}\n    </Card>\n  );\n};\n\nexport default Player;\n","import React from \"react\";\nimport Player from \"./player/Player\";\nimport { DBPlayer, DBTurn } from \"../../../../store/types\";\n// Parents: GameTable\n\ninterface BoardProps {\n  betHandler?: (id: number, event: Event, value: number) => void;\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  players: DBPlayer[];\n  turn: DBTurn;\n}\n\nconst Board: React.FC<BoardProps> = (props: BoardProps) => {\n  const {\n    betHandler,\n    cardHandler,\n    cardsToDiscard,\n    hideHands,\n    isBlackJack,\n    players,\n    turn,\n  } = props;\n\n  return (\n    <>\n      {players.map((player, i) => (\n        <Player\n          key={`player${i}`}\n          betHandler={betHandler}\n          cardHandler={cardHandler}\n          cardsToDiscard={cardsToDiscard}\n          hideHands={hideHands}\n          isBlackJack={isBlackJack}\n          player={player}\n          playerNo={i}\n          turn={turn}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport MuiButton from \"@mui/material/Button\";\nimport { PropTypes } from \"@mui/material/\";\n\nconst buttonStyle: React.CSSProperties = { margin: 12 };\nconst color: PropTypes.Color = \"primary\";\n\nexport interface ButtonProps {\n  onClick: (name: string) => void;\n  name: string;\n}\n\nconst Button: React.FC<ButtonProps> = React.memo(\n  ({ onClick, name }: ButtonProps) => (\n    <MuiButton\n      color={color}\n      onClick={(): void => onClick(name)}\n      style={buttonStyle}\n      variant=\"contained\"\n    >\n      {name}\n    </MuiButton>\n  )\n);\n\nexport default Button;\n","import React from \"react\";\nimport Button from \"./Button\";\n\nexport interface ButtonGroupProps {\n  gameFunctions: string[];\n  onClick: (name: string) => void;\n}\n\nconst ButtonGroup: React.FC<ButtonGroupProps> = ({\n  gameFunctions,\n  onClick,\n}: ButtonGroupProps) => (\n  <div>\n    {gameFunctions.map((key) => (\n      <Button key={key} onClick={onClick} name={key} />\n    ))}\n  </div>\n);\n\nexport default ButtonGroup;\n","import React from \"react\";\nimport Board from \"./board/Board\";\nimport ButtonGroup from \"./button-group/ButtonGroup\";\nimport { DBPlayer, DBTurn } from \"../../../store/types\";\n\ninterface GameTableProps {\n  betHandler?: (id: number, event: Event, value: number) => void;\n  cardClickHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard?: number[];\n  gameFunctions?: string[];\n  gameOver?: boolean;\n  hideHands?: boolean;\n  isBlackJack?: boolean;\n  onClick: (name: string) => void;\n  players: DBPlayer[];\n  turn: DBTurn;\n}\n\n/* GameTable ->  Board -> Player -> Hand -> Card\n *          |->  Button Group  ->  Button        */\nconst GameTable = (props: GameTableProps): React.ReactElement => {\n  const {\n    betHandler,\n    cardClickHandler,\n    cardsToDiscard = [],\n    gameFunctions = [],\n    gameOver = false,\n    hideHands = false,\n    isBlackJack = true,\n    players,\n    turn,\n    onClick,\n  } = props;\n\n  // move game buttons to make turn more obvious and support mobile\n  const played: DBPlayer[] = React.useMemo(\n    () => players.slice(0, turn.player + 1),\n    [players, turn.player]\n  );\n  const future: DBPlayer[] = React.useMemo(\n    () => players.slice(turn.player + 1),\n    [players, turn.player]\n  );\n  const playersToDisplay: DBPlayer[] = React.useMemo(\n    () =>\n      !hideHands && gameOver === false\n        ? players.slice(turn.player, turn.player + 1)\n        : players,\n    [hideHands, gameOver, players, turn.player]\n  );\n\n  return isBlackJack && !hideHands ? (\n    <>\n      <Board\n        players={played}\n        betHandler={betHandler}\n        cardHandler={cardClickHandler}\n        cardsToDiscard={cardsToDiscard}\n        hideHands={hideHands}\n        isBlackJack={isBlackJack}\n        turn={turn}\n      />\n      <ButtonGroup gameFunctions={gameFunctions} onClick={onClick} />\n      <Board\n        players={future}\n        betHandler={betHandler}\n        cardHandler={cardClickHandler}\n        cardsToDiscard={cardsToDiscard}\n        hideHands={hideHands}\n        isBlackJack={isBlackJack}\n        turn={{ player: -1, hand: -1 }}\n      />\n    </>\n  ) : (\n    <>\n      <Board\n        players={playersToDisplay}\n        betHandler={betHandler}\n        cardHandler={cardClickHandler}\n        cardsToDiscard={cardsToDiscard}\n        hideHands={hideHands}\n        isBlackJack={isBlackJack}\n        turn={turn}\n      />\n      <ButtonGroup gameFunctions={gameFunctions} onClick={onClick} />\n    </>\n  );\n};\n\nexport default GameTable;\n","import { DBCard, DBPlayer } from \"../../../store/types\";\n\n/** Rankings:\n *   Straight Flush  8\n *   4 of a Kind     7\n *   Full House      6\n *   Flush           5\n *   Straight        4\n *   3 of a Kind     3\n *   2 Pair          2\n *   1 Pair          1\n *   High Card       0\n * @return {number} value is a base 14 string, to be converted into base 10 for comparison */\nexport const rankHand = (hand: DBCard[], hist: number[]): number => {\n  // iterate through and look for hands with multiple cards\n  if (hist.includes(4)) {\n    return 7; // 4 of a kind\n  }\n  // Check for hands with sets of 3 or 2 cards\n  const has3 = hist.includes(3);\n  const i = hist.indexOf(2);\n  const has2 = i !== -1;\n  if (has3 && has2) {\n    return 6; // full house\n  }\n  if (has3) {\n    return 3; // 3 of a kind\n  }\n  if (has2 && hist.includes(2, i + 1)) {\n    return 2; // 2 pair\n  }\n  if (has2) {\n    return 1; // 1 pair\n  }\n  // all single cards\n  // check for straight\n  const isStraight =\n    hist.lastIndexOf(1) - hist.indexOf(1) === 4 || // (end - start = 4)\n    (hist[12] && hist[0] && hist[1] && hist[2] && hist[3]); // (A,2,3,4,5)\n  // check for flush\n  let isFlush = true;\n  for (let j = 0; j < hand.length; j += 1) {\n    if (hand[j].suit !== hand[0].suit) {\n      isFlush = false;\n      break;\n    }\n  }\n  if (isStraight && isFlush) {\n    return 8; // straight flush\n  }\n  if (isFlush) {\n    return 5; // flush\n  }\n  if (isStraight) {\n    return 4; // straight\n  }\n  return 0; // high card\n};\n\nexport const getHistogram = (hand: DBCard[]): number[] => {\n  // Histogram for the cards\n  const hist = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  // put hand into the histogram\n  hand.forEach((card) => {\n    hist[card.weight - 2] += 1; // 2-14 - 2 = 0-12\n  });\n  return hist;\n};\n\n/**\n * Compare hands to see who wins\n * @param {array} hand - array of card objects\n * Hands is assigned a weight based on hand, then card values\n * Compare values to see who wins\n * @return {number} value is a base 14 string, to be converted into base 10 for comparison\n */\nexport const evaluate = (hand: DBCard[]): string => {\n  const hist = getHistogram(hand);\n  const rank = rankHand(hand, hist);\n\n  const cards = [\"0\", \"0\", \"0\", \"0\", \"0\"];\n  let total = 0; // track number of cards counted\n  let numCards = 4; // number of same cards in a set\n  let i = 0; // iterator\n  let last = -1; // track location of last in numCards set\n\n  // get card values and display them in order of importance\n  while (total < 5) {\n    const num = hist.indexOf(numCards, last + 1);\n    if (num === -1) {\n      numCards -= 1;\n      last = -1;\n    } else {\n      cards[i] = num.toString(14);\n      i += 1;\n      total += numCards;\n      last = num;\n    }\n  }\n  return `${rank}${cards.reduce((a, c) => `${a}${c}`)}`;\n};\n\n/** function to remove n number of cards */\nexport const getCardsToDiscard = (\n  n: number,\n  hist: number[],\n  hand: DBCard[]\n): number[] => {\n  const nextCardsToDiscard: number[] = [];\n  const cardValues = [hist.indexOf(1)];\n  // find cards without pairs, starting with the smallest\n  for (let i = 1; i < n; i += 1) {\n    cardValues[i] = hist.indexOf(1, cardValues[i - 1] + 1);\n  }\n  // find hand index of individual cards\n  for (let i = 0; i < hand.length; i += 1) {\n    for (let j = 0; j < cardValues.length; j += 1) {\n      if (hand[i].weight - 2 === cardValues[j]) {\n        nextCardsToDiscard.push(i);\n        break;\n      }\n    }\n  }\n  return nextCardsToDiscard;\n};\n\n/** computer play algorithm:\n * PAIRS\n * draw 0 on 4 of a kind\n * draw 0 on full house\n * draw 1 on 3 of a kind, keep higher of 2\n * draw 1 on 2 pair\n * draw 3 on 2 of a kind\n *\n * This is a nice to have, for now we only follow the first half\n * STRAIGHT/FLUSH\n * draw 0 on straight\n * draw 0 on flush\n * draw 0 on straight flush\n * if 1 away from sf -> draw 1\n * if 1 away from S -> draw 1 if 5+ players, else regular hand\n * if 1 away from F -> draw 1 if 5+ players, else regular hand\n *\n * REGULAR HAND\n * if K / A -> draw 4\n * else draw 5\n */\nexport const computer = async (\n  player: DBPlayer,\n  discard: (cardsToDiscardInDB: number[], player: DBPlayer) => Promise<void>\n): Promise<void> => {\n  try {\n    const hand = player.hands[0].cards;\n    const hist = getHistogram(hand);\n    const rank = rankHand(hand, hist);\n\n    switch (rank) {\n      case 0: /* draw 4-5 on high card */ {\n        const nextCardsToDiscard =\n          hist.lastIndexOf(1) >= 11\n            ? getCardsToDiscard(4, hist, hand) // if ace || king draw 4\n            : [0, 1, 2, 3, 4]; // otherwise, draw all 5\n        await discard(nextCardsToDiscard, player);\n        break;\n      }\n      case 1: /* draw 3 on 2 of a kind */ {\n        const nextCardsToDiscard = getCardsToDiscard(3, hist, hand);\n        await discard(nextCardsToDiscard, player);\n        break;\n      }\n      case 2: /* draw 1 on 3 of a kind */\n      case 3: /* draw 1 on 2 Pair */ {\n        const nextCardsToDiscard = getCardsToDiscard(1, hist, hand);\n        await discard(nextCardsToDiscard, player);\n        break;\n      }\n      case 4: // draw 0 on straight\n      case 5: // draw 0 on flush\n      case 6: // draw 0 on full house\n      case 7: // draw 0 on 4 of a kind\n      case 8: // draw 0 on straight flush\n      default:\n        break;\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error(e);\n  }\n};\n\nexport const DEALER = 0;\nexport const LAST_PLAYER = 5;\n\nexport const findAndPayWinner = (\n  players: DBPlayer[],\n  payPlayer: (id: number, status: string, money: number) => void\n): void => {\n  let winner = { val: 0, id: 0 };\n\n  players.forEach((player) => {\n    if (player.id === DEALER || player.id > LAST_PLAYER) {\n      return;\n    }\n\n    const playerScore = parseInt(evaluate(player.hands[0].cards), 14);\n    if (playerScore > winner.val) {\n      winner = { val: playerScore, id: player.id };\n    }\n  });\n\n  players.forEach((player) => {\n    if (player.id === DEALER || player.id > LAST_PLAYER) {\n      return;\n    }\n\n    if (player.id === winner.id) {\n      payPlayer(player.id, \"win\", 20);\n    } else {\n      payPlayer(player.id, \"lose\", -5);\n    }\n  });\n};\n","import { Dispatch } from \"redux\";\nimport asyncForEach from \"../../../helpers/asyncForEach\";\nimport { swapCards, newHand, payout } from \"../../../store/modules/players\";\nimport Deck from \"../../../apis/Deck\";\nimport { DEALER, LAST_PLAYER, computer, findAndPayWinner } from \"./helpers\";\nimport {\n  newPokerGame,\n  startPokerGame,\n  endPokerTurn,\n  endPokerGame,\n  discardCards,\n} from \"../../../store/modules/poker\";\nimport { DBPlayer, PokerGameFunctions as PGF } from \"../../../store/types\";\n\ninterface UsePokerFunctions {\n  checkUpdate: () => Promise<void>;\n  handleGameFunctionClick: (type: string) => void;\n}\n\nconst usePokerFunctions = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  dispatch: Dispatch<any>,\n  cardsToDiscard: number[],\n  players: DBPlayer[],\n  turn: number,\n  hideHands: boolean,\n  gameOver: boolean\n): UsePokerFunctions => {\n  // ----------     bot automation handlers     ---------- //\n  /** increment player turn and reset state */\n  const endTurn = async (): Promise<void> => {\n    try {\n      await dispatch(endPokerTurn());\n    } catch (e) {\n      console.error(e); // eslint-disable-line no-console\n    }\n  };\n\n  /** iterate through array, removing each index number from hand\n   * then add new cards to the hand */\n  const discard = async (\n    cardsToDiscardInDB: number[],\n    player: DBPlayer\n  ): Promise<void> => {\n    try {\n      const { id, hands } = player;\n      await dispatch(swapCards(hands, id, cardsToDiscardInDB));\n    } catch (e) {\n      console.error(e); // eslint-disable-line no-console\n    }\n  };\n\n  const payPlayer = (id: number, status: string, money: number) => {\n    dispatch(payout(id, status, money));\n  };\n\n  const endGame = async (\n    tempPlayers: DBPlayer[],\n    tempTurn: number\n  ): Promise<void> => {\n    try {\n      await dispatch(endPokerGame());\n\n      await asyncForEach(tempPlayers, async (player: DBPlayer, i: number) => {\n        if (tempTurn <= i && i < LAST_PLAYER) {\n          await computer(player, discard);\n        }\n      });\n\n      findAndPayWinner(tempPlayers, payPlayer);\n    } catch (e) {\n      console.error(e); // eslint-disable-line no-console\n    }\n  };\n\n  const checkUpdate = async (): Promise<void> => {\n    try {\n      const player = players[turn] || { isBot: false };\n\n      if (!hideHands && !gameOver && player.isBot) {\n        await endGame(players, turn);\n      }\n    } catch (e) {\n      console.error(e); // eslint-disable-line no-console\n    }\n  };\n\n  // ----------     player handlers     ---------- //\n  const newGame = async (tempPlayers: DBPlayer[]): Promise<void> => {\n    try {\n      await dispatch(newPokerGame(tempPlayers));\n    } catch (e) {\n      console.error(e); // eslint-disable-line no-console\n    }\n  };\n\n  /** function to finish betting and start the game */\n  const startGame = async (tempPlayers: DBPlayer[]): Promise<void> => {\n    try {\n      await dispatch(startPokerGame());\n      // shuffle the deck\n      await Deck.shuffle().then(async () => {\n        // deal the hands\n        await asyncForEach(tempPlayers, async (player: DBPlayer) => {\n          if (player.id !== DEALER && player.id <= LAST_PLAYER) {\n            try {\n              await dispatch(newHand(player.id, 5));\n            } catch (e) {\n              console.error(e); // eslint-disable-line no-console\n            }\n          }\n        });\n      });\n    } catch (e) {\n      console.error(e); // eslint-disable-line no-console\n    }\n  };\n\n  /** helper function wrapping discard, meant for UI */\n  const handleDiscard = async (\n    tempPlayers: DBPlayer[],\n    tempTurn: number,\n    tempCardsToDiscard: number[]\n  ): Promise<void> => {\n    try {\n      await discard(tempCardsToDiscard, tempPlayers[tempTurn]);\n      await dispatch(discardCards());\n    } catch (e) {\n      console.error(e); // eslint-disable-line no-console\n    }\n  };\n\n  /** function to route click actions */\n  const handleGameFunctionClick = async (type: string): Promise<void> => {\n    try {\n      switch (type) {\n        case PGF.DISCARD_CARDS:\n          await handleDiscard(players, turn, cardsToDiscard);\n          break;\n        case PGF.END_TURN:\n          await endTurn();\n          break;\n        case PGF.NEW_GAME:\n          await newGame(players);\n          break;\n        case PGF.START_GAME:\n          await startGame(players);\n          break;\n        default:\n          // eslint-disable-next-line no-console\n          console.error(\"Unknown Game Function: \", type);\n      }\n    } catch (e) {\n      console.error(e); // eslint-disable-line no-console\n    }\n  };\n\n  return {\n    checkUpdate,\n    handleGameFunctionClick,\n  };\n};\n\nexport default usePokerFunctions;\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport GameTable from \"../game-table\";\nimport { updateCardsToDiscard } from \"../../../store/modules/poker\";\nimport { DBRootState } from \"../../../store/types\";\nimport usePokerFunctions from \"./hooks\";\n\nconst Poker: React.FC = () => {\n  const { turn, players, cardsToDiscard, gameFunctions, gameOver, hideHands } =\n    useSelector((state: DBRootState) => ({\n      turn: state.turn,\n      players: state.players,\n      ...state.poker,\n    }));\n  const dispatch = useDispatch();\n\n  /** function to be called on card clicks */\n  const cardClickHandler = React.useCallback(\n    (playerNo: number, handNo: number, cardNo: number): void => {\n      const newCardsToDiscard = [...cardsToDiscard];\n      // find card\n      const i = newCardsToDiscard.indexOf(cardNo);\n      // toggle in array\n      i === -1\n        ? newCardsToDiscard.push(cardNo)\n        : newCardsToDiscard.splice(i, 1);\n      // update state\n      dispatch(updateCardsToDiscard(newCardsToDiscard));\n    },\n    [cardsToDiscard, dispatch]\n  );\n\n  const { checkUpdate, handleGameFunctionClick } = usePokerFunctions(\n    dispatch,\n    cardsToDiscard,\n    players,\n    turn.player,\n    hideHands,\n    gameOver\n  );\n\n  checkUpdate().catch(() => {\n    // eslint-disable-next-line no-console\n    console.error(\"check update failed\");\n  });\n\n  return (\n    <>\n      <Typography variant=\"h2\" gutterBottom>\n        5 Card Draw Poker\n      </Typography>\n      <GameTable\n        cardClickHandler={cardClickHandler}\n        cardsToDiscard={cardsToDiscard}\n        gameFunctions={gameFunctions}\n        onClick={handleGameFunctionClick}\n        gameOver={gameOver}\n        hideHands={hideHands}\n        isBlackJack={false}\n        players={players}\n        turn={turn}\n      />\n    </>\n  );\n};\n\nexport default Poker;\n"],"names":["cardFace","backgroundColor","borderRadius","cursor","display","fontWeight","height","margin","padding","width","cardTitle","textAlign","suit","marginTop","Card","React","props","dropped","name","cardHandler","playerNo","handNo","cardNo","handleClick","cardColor","color","red","style","styles","onClick","role","Typography","variant","boldStyle","normalStyle","cardsToDiscard","hand","isBlackJack","isHandTurn","isMultiHand","isPlayerTurn","purple","handWeight","weight","cards","map","card","i","includes","player","minWidth","betHandler","hideHands","turn","hands","length","showSlider","id","isBot","minBet","Math","max","min","money","maxBet","onSliderChange","event","value","background","cyan","status","green","blueGrey","Slider","onChange","step","bet","players","buttonStyle","gameFunctions","key","cardClickHandler","gameOver","played","slice","future","playersToDisplay","rankHand","hist","has3","indexOf","has2","isStraight","lastIndexOf","isFlush","j","getHistogram","forEach","getCardsToDiscard","n","nextCardsToDiscard","cardValues","push","computer","discard","rank","console","error","findAndPayWinner","payPlayer","winner","val","playerScore","parseInt","total","numCards","last","num","toString","reduce","a","c","evaluate","dispatch","endTurn","endPokerTurn","cardsToDiscardInDB","swapCards","payout","endGame","tempPlayers","tempTurn","endPokerGame","asyncForEach","checkUpdate","newGame","newPokerGame","startGame","startPokerGame","Deck","then","newHand","handleDiscard","tempCardsToDiscard","discardCards","handleGameFunctionClick","type","PGF","useSelector","state","poker","useDispatch","newCardsToDiscard","splice","updateCardsToDiscard","usePokerFunctions","catch","gutterBottom"],"sourceRoot":""}