{"version":3,"sources":["components/games/deal-or-no-deal/helpers.ts","components/games/deal-or-no-deal/Money.tsx","components/games/deal-or-no-deal/Modal.tsx","components/games/deal-or-no-deal/Case.tsx","components/games/deal-or-no-deal/Board.tsx","components/games/deal-or-no-deal/Header.tsx","components/games/deal-or-no-deal/DealOrNoDeal.tsx","components/games/deal-or-no-deal/index.ts"],"names":["getMoneyText","n","txt","split","toString","e","i","length","splice","join","shuffle","arr","j","Math","floor","random","k","temp","loc","Money","props","bc","briefcase","style","width","marginLeft","marginRight","marginBottom","padding","textAlign","color","backgroundColor","on","amber","grey","Paper","val","colStyles","display","genMoneyCols","start","stop","slice","map","key","Modal","deal","noDeal","offer","open","swap","numCases","imBoard","board","sort","a","b","lhs","rhs","Dialog","fullWidth","DialogTitle","DialogContent","DialogActions","Button","onClick","Case","secondary","label","disabled","margin","variant","maxWidth","marginTop","Board","pc","playerChoice","elevation","Header","casesToOpen","isOver","newGame","player","Grid","container","spacing","item","sm","xs","Typography","gutterBottom","align","name","money","OPEN","getNewState","turn","undefined","sum","dndOpen","DND","getBankOffer","state","round","chargePlayer","actions","payout","id","openBriefcase","x","setState","handleOpen","prepareNewGameState","forEach","finishGame","this","setTimeout","Component","connect","players","dispatch","bindActionCreators","DealOrNoDeal"],"mappings":"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","file":"static/js/g_dond.bef0da5f.chunk.js","sourcesContent":["import split from 'lodash/split';\nimport { Briefcase } from './Case';\n\n/** function that takes a number and returns string displayed like money */\nexport const getMoneyText = (n = 0): string => {\n  const txt = split(n.toString(), '');\n  const e = txt[0] === '-' ? 1 : 0;\n  for (let i = txt.length - 3; i > e; i -= 3) {\n    txt.splice(i, 0, ',');\n  }\n  txt.splice(e, 0, '$');\n  return txt.join('');\n};\n\n/** function that takes an array and shuffles it's elements */\nexport const shuffle = (arr: Briefcase[]): void => {\n  // shuffle values of briefcases\n  for (let i = 0; i < 100; i += 1) {\n    // get to random briefcases\n    const j = Math.floor(Math.random() * arr.length);\n    const k = Math.floor(Math.random() * arr.length);\n    // swap the briefcases\n    const temp = arr[j].loc;\n    arr[j].loc = arr[k].loc;\n    arr[k].loc = temp;\n  }\n};\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport amber from '@material-ui/core/colors/amber';\nimport grey from '@material-ui/core/colors/grey';\nimport { getMoneyText } from './helpers';\nimport { Briefcase } from './Case';\n\ninterface MoneyProps {\n  briefcase: Briefcase;\n}\n\nconst Money: React.FC<MoneyProps> = (props: MoneyProps) => {\n  const { briefcase: bc } = props;\n\n  const color: React.CSSProperties = {\n    backgroundColor: bc.on ? amber[500] : grey[700],\n  };\n\n  const style: React.CSSProperties = {\n    width: '90%',\n    marginLeft: '5%',\n    marginRight: '5%',\n    marginBottom: 5,\n    padding: 5,\n    textAlign: 'center',\n    color: 'white',\n    ...color,\n  };\n\n  return (\n    <Paper style={style}>\n      { bc.on\n        ? getMoneyText(bc.val)\n        : (<del>{getMoneyText(bc.val)}</del>)}\n    </Paper>\n  );\n};\n\nexport default Money;\n","import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport Money from './Money';\nimport { getMoneyText } from './helpers';\nimport { Briefcase } from './Case';\n\ninterface ModalProps {\n  board: Briefcase[];\n  deal: React.MouseEventHandler;\n  noDeal: React.MouseEventHandler;\n  numCases: number;\n  offer: number;\n  open: boolean;\n  swap: React.MouseEventHandler;\n}\n\nconst colStyles: React.CSSProperties = { width: '50%', display: 'inline-block' };\n\nconst genMoneyCols = (arr: Briefcase[], start: number, stop = arr.length): React.ReactNode[] => (\n  arr.slice(start, stop).map((bc) => <Money key={bc.loc} briefcase={bc} />)\n);\n\nconst Modal: React.FC<ModalProps> = (props: ModalProps) => {\n  const {\n    deal, noDeal, offer, open,\n    swap, numCases, board: imBoard,\n  } = props;\n\n  const board = [...imBoard].sort((a, b) => a.val - b.val);\n\n  // columns displaying money values left\n  const lhs = genMoneyCols(board, 0, board.length / 2);\n  const rhs = genMoneyCols(board, board.length / 2);\n\n  return (\n    <Dialog fullWidth open={open}>\n      <DialogTitle>\n        {`${getMoneyText(offer)} - Deal or No Deal?`}\n      </DialogTitle>\n      <DialogContent>\n        <div style={colStyles}>\n          {lhs}\n        </div>\n        <div style={colStyles}>\n          {rhs}\n        </div>\n      </DialogContent>\n      {numCases > 2\n        ? (\n          <DialogActions>\n            <Button color=\"primary\" onClick={deal}>\n              Deal\n            </Button>\n            <Button color=\"secondary\" onClick={noDeal}>\n              No Deal\n            </Button>\n          </DialogActions>\n        ) : (\n          <DialogActions>\n            <Button color=\"primary\" onClick={deal}>\n              Deal\n            </Button>\n            <Button color=\"secondary\" onClick={noDeal}>\n              My Case\n            </Button>\n            <Button color=\"secondary\" onClick={swap}>\n              Other Case\n            </Button>\n          </DialogActions>\n        )}\n    </Dialog>\n  );\n};\n\nexport default Modal;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { getMoneyText } from './helpers';\n\nexport interface Briefcase {\n  on: boolean;\n  loc: number;\n  val: number;\n}\ninterface CaseProps {\n  briefcase: Briefcase;\n  onClick: React.MouseEventHandler;\n  secondary?: boolean;\n}\n\nconst Case: React.FC<CaseProps> = (props: CaseProps) => {\n  const { onClick, briefcase: bc, secondary } = props;\n  const color = secondary ? 'secondary' : 'primary';\n  const style = { margin: 10 };\n  const label = bc.on ? bc.loc : getMoneyText(bc.val);\n\n  return (\n    <Button\n      color={color}\n      disabled={!bc.on}\n      onClick={onClick}\n      style={style}\n      variant=\"contained\"\n    >\n      {label}\n    </Button>\n  );\n};\n\nexport default Case;\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Case, { Briefcase } from './Case';\n\ninterface BoardProps {\n  board: Briefcase[];\n  onClick: Function;\n  playerChoice?: Briefcase;\n}\n\nconst style: React.CSSProperties = {\n  maxWidth: 796,\n  padding: 9,\n  textAlign: 'center',\n  display: 'block',\n  margin: 'auto',\n  marginTop: 20,\n};\n\nconst Board: React.FC<BoardProps> = (props: BoardProps) => {\n  const { board, onClick, playerChoice: pc } = props;\n\n  return (\n    <Paper elevation={2} style={style}>\n      {board.map((bc, i) => (\n        <Case\n          key={i}\n          briefcase={bc}\n          onClick={(): void => onClick(i)}\n          secondary={pc && pc.loc === bc.loc}\n        />\n      ))}\n    </Paper>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { getMoneyText } from './helpers';\nimport { DBPlayer } from '../../../store/types';\nimport { Briefcase } from './Case';\n\ninterface HeaderProps {\n  casesToOpen: number;\n  isOver: boolean;\n  newGame: React.MouseEventHandler;\n  offer?: number;\n  player: DBPlayer;\n  playerChoice?: Briefcase;\n}\n\nconst Header: React.FC<HeaderProps> = (props: HeaderProps) => {\n  const {\n    playerChoice: pc, casesToOpen, isOver,\n    offer, newGame, player,\n  } = props;\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item sm={6} xs={12}>\n        <Typography variant=\"h3\" gutterBottom>\n          Your Case:\n          {' '}\n          {pc ? pc.loc : '?'}\n          {isOver && ` - ${getMoneyText(pc && pc.val)}`}\n        </Typography>\n        <Typography variant=\"h4\" gutterBottom>\n          {isOver\n            ? `You Won ${getMoneyText(offer)}`\n            : `Number of Cases to Open: ${casesToOpen}`}\n        </Typography>\n        {isOver && (\n          <Button color=\"primary\" onClick={newGame} variant=\"contained\">\n            New Game\n          </Button>\n        )}\n      </Grid>\n      <Grid item sm={6} xs={12}>\n        <Typography variant=\"h3\" align=\"right\" gutterBottom>\n          {player.name}\n          :\n          {getMoneyText(player.money)}\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from './Modal';\nimport Board from './Board';\nimport Header from './Header';\nimport { shuffle } from './helpers';\nimport { payout } from '../../../store/modules/players';\nimport { DBRootState, DBPlayer } from '../../../store/types';\nimport { Briefcase } from './Case';\n\ninterface ActionsProp {\n  payout: Function;\n}\ninterface DNDProps {\n  actions: ActionsProp;\n  player: DBPlayer;\n}\ninterface DNDState {\n  board: Briefcase[];\n  turn: number;\n  playerChoice?: Briefcase;\n  casesToOpen: number;\n  sum: number;\n  numCases: number;\n  offer: number;\n  dndOpen: boolean;\n  isOver: boolean;\n}\n\nconst OPEN = 6;\n\nconst getNewState = (): DNDState => ({\n  board: [\n    { val: 1, loc: 1, on: true },\n    { val: 2, loc: 2, on: true },\n    { val: 5, loc: 3, on: true },\n    { val: 10, loc: 4, on: true },\n    { val: 25, loc: 5, on: true },\n    { val: 50, loc: 6, on: true },\n    { val: 75, loc: 7, on: true },\n    { val: 100, loc: 8, on: true },\n    { val: 200, loc: 9, on: true },\n    { val: 300, loc: 10, on: true },\n    { val: 400, loc: 11, on: true },\n    { val: 500, loc: 12, on: true },\n    { val: 750, loc: 13, on: true },\n    { val: 1000, loc: 14, on: true },\n    { val: 5000, loc: 15, on: true },\n    { val: 10000, loc: 16, on: true },\n    { val: 25000, loc: 17, on: true },\n    { val: 50000, loc: 18, on: true },\n    { val: 75000, loc: 19, on: true },\n    { val: 100000, loc: 20, on: true },\n    { val: 200000, loc: 21, on: true },\n    { val: 300000, loc: 22, on: true },\n    { val: 400000, loc: 23, on: true },\n    { val: 500000, loc: 24, on: true },\n    { val: 750000, loc: 25, on: true },\n    { val: 1000000, loc: 26, on: true },\n  ],\n  turn: 1,\n  playerChoice: undefined,\n  casesToOpen: OPEN,\n  sum: 0,\n  numCases: 0,\n  offer: 0,\n  dndOpen: false,\n  isOver: false,\n});\n\n// TODO: add rules to page\n/* DealOrNoDeal  ->  Header\n *              |->  Board  ->  Case\n *              |->  Modal  ->  Money */\nclass DND extends Component<DNDProps, DNDState> {\n  /** reset board and shuffle cases */\n  constructor(props: DNDProps) {\n    super(props);\n\n    this.state = this.prepareNewGameState();\n  }\n\n  /** check if it is time for an offer */\n  componentDidUpdate(): void {\n    const { casesToOpen } = this.state;\n    if (casesToOpen === 0) {\n      setTimeout(this.handleOpen, 300);\n    }\n  }\n\n  /** function to generate the bank offer */\n  getBankOffer = (): number => {\n    const { sum, numCases, turn } = this.state;\n    // return offer from the bank\n    return Math.round((sum / numCases) * (turn / 10));\n  };\n\n  /** charge user to play\n   * NOTE: avg (Expected win value) is 131477.62 / 1k = $132\n   */\n  chargePlayer = (): void => {\n    const { player, actions } = this.props;\n    actions.payout(player.id, 'lose', -100);\n  };\n\n  /** open a briefcase and update global states\n   * NOTE: udpates sum, numCases, board, casesToOpen\n   */\n  openBriefcase = (x: number): void => {\n    // state vars\n    const { board, playerChoice: pc } = this.state;\n    const bc = board[x];\n    // check if player has already made case selection\n    if (pc) {\n      // state vars\n      const { isOver } = this.state;\n      let { sum, numCases, casesToOpen } = this.state;\n      // verify cases left and briefcase not already opened\n      if (!isOver && casesToOpen > 0 && bc.loc !== pc.loc && bc.on) {\n        // flag the value and update global trackers\n        bc.on = false;\n        sum -= bc.val;\n        numCases -= 1;\n        casesToOpen -= 1;\n        // update state\n        this.setState({\n          board,\n          sum,\n          numCases,\n          casesToOpen,\n        });\n      }\n    } else {\n      this.setState({ playerChoice: bc });\n      this.chargePlayer();\n    }\n  };\n\n  handleOpen = (): void => {\n    const { turn } = this.state;\n    // get the new offer\n    const offer = this.getBankOffer();\n    // reset the counter\n    const casesToOpen = turn < OPEN - 1 ? OPEN - turn : 1;\n    this.setState({ offer, casesToOpen, dndOpen: true });\n  };\n\n  /** function to get a new game state */\n  prepareNewGameState = (): DNDState => {\n    const state = getNewState();\n    // mix up board\n    shuffle(state.board);\n    // set all flags to un-touched\n    state.board.forEach((bc) => {\n      // get sum and count of cases remaining\n      state.sum += bc.val;\n      state.numCases += 1;\n      // reset opened flag\n      bc.on = true;\n    });\n    // sort function for the briefcases\n    state.board.sort((a, b) => a.loc - b.loc);\n\n    return state;\n  }\n\n  /** function to reset the game\n   * NOTE: reset entire state\n   */\n  newGame = (): void => {\n    const state = this.prepareNewGameState();\n    // update state\n    this.setState(state);\n  };\n\n  /** function to finish the game\n   * NOTE: payout to user offer / 1k\n   */\n  finishGame = (offer: number): void => {\n    const { player, actions } = this.props;\n    actions.payout(player.id, 'win', Math.round(offer / 1000));\n    this.setState({ dndOpen: false, isOver: true, offer });\n  };\n\n  /** called on selection of Deal */\n  deal = (): void => {\n    const { offer } = this.state;\n    this.finishGame(offer);\n  };\n\n  /** called on selection of No Deal\n   * NOTE: update turn, casesToOpen\n   */\n  noDeal = (): void => {\n    const { turn, numCases, playerChoice } = this.state;\n    // no deal on last case\n    if (numCases <= 2) {\n      this.finishGame(playerChoice ? playerChoice.val : -1);\n    }\n    // advance the turn and update state\n    this.setState({ dndOpen: false, turn: turn + 1 });\n  };\n\n  /**\n   * called on selection of 'Other Case'\n   * @param {number} offer - case value\n   */\n  swap = (): void => {\n    const { board, playerChoice: pc } = this.state;\n    for (let i = 0; i < board.length; i += 1) {\n      const bc = board[i];\n      if (bc.on && pc && bc.loc !== pc.loc) {\n        this.finishGame(bc.val);\n        return;\n      }\n    }\n  };\n\n  render(): React.ReactNode {\n    const {\n      board,\n      dndOpen,\n      isOver,\n      offer,\n      playerChoice,\n      casesToOpen,\n      numCases,\n    } = this.state;\n    const { player } = this.props;\n    // render component\n    return (\n      <>\n        <Typography variant=\"h2\" gutterBottom>Deal or No Deal</Typography>\n        <Header\n          casesToOpen={casesToOpen}\n          isOver={isOver}\n          newGame={this.newGame}\n          offer={offer}\n          player={player}\n          playerChoice={playerChoice}\n        />\n        <Board\n          board={board}\n          onClick={this.openBriefcase}\n          playerChoice={playerChoice}\n        />\n        <Modal\n          board={board}\n          deal={this.deal}\n          noDeal={this.noDeal}\n          numCases={numCases}\n          offer={offer}\n          open={dndOpen}\n          swap={this.swap}\n        />\n      </>\n    );\n  }\n}\n\n// react-redux export\nconst mapStateToProps = (state: DBRootState): { player: DBPlayer } => ({\n  player: state.players[0],\n});\nconst mapDispatchToProps = (dispatch: Dispatch): { actions: ActionsProp } => ({\n  actions: bindActionCreators({ payout }, dispatch),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(DND);\n","import DealOrNoDeal from './DealOrNoDeal';\n\nexport default DealOrNoDeal;\n"],"sourceRoot":""}