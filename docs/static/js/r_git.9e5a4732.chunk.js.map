{"version":3,"sources":["components/common/expandable-card/ExpandableCard.tsx","hooks/useOpenState.ts","components/resume/git-tools/CopyTextDisplay.tsx","components/resume/git-tools/BranchName.tsx","components/resume/git-tools/useCommitText.ts","components/resume/git-tools/CommitText.tsx","components/resume/git-tools/DeployBranch.tsx","components/resume/git-tools/Header.tsx","components/resume/git-tools/GitTools.tsx"],"names":["cardStyles","marginTop","overflow","headerStyles","borderRadius","marginLeft","marginRight","position","top","ExpandableCard","props","useToggleState","expanded","toggleExpanded","palette","useTheme","title","subtitle","children","backgroundColor","inverted","headerStyle","primary","main","type","boxShadow","grey","expandedHeaderStyle","marginBottom","titleStyle","React","useMemo","color","subtitleStyle","titleJSX","Typography","style","variant","subtitleJSX","Card","CardHeader","onClick","subheader","Collapse","in","timeout","unmountOnExit","CardContent","Grid","container","spacing","overflowY","useOpenState","defaultVal","useState","isOpen","setIsOpen","chipStyles","height","paddingTop","paddingBottom","CopyTextDisplay","handleOpen","handleClose","handleCopy","copyText","text","handleCopyText","useCallback","Chip","label","Snackbar","action","IconButton","autoHideDuration","message","onClose","open","wrapperStyles","paddingLeft","paddingRight","width","topSpacing","BranchName","getSelectOptions","setBranchPrefix","setCasePreference","getBranchPrefixOptions","getCasePreferenceOptions","handleBranchPrefixSelect","e","target","value","handleCasePrefSelect","branchMessage","branchName","branchPrefix","casePreference","gitTheme","onBranchMessageChange","onBranchMessageClear","gitThemeStyles","item","sm","xs","FormControl","fullWidth","InputLabel","htmlFor","Select","input","Input","id","onChange","MenuItem","TextField","InputLabelProps","multiline","placeholder","useCommitText","storyID","gitCommit","commitPrefix","setLocalCommitPrefix","commitMessage","setCommitMessage","commitDescription","setCommitDescription","finishes","setFinishes","getCommitText","prefix","desc","postfix","gitMessage","handleCommitPrefixSelect","handleCommitMessageChange","handleCommitDescriptionChange","clearCommitMessage","clearCommitDescription","handleFinishesToggle","_e","isC","marginTopStyles","CommitText","useSelector","state","git","dispatch","useDispatch","getCommitPrefixOptions","handleGitCommitToggle","setCommitPrefix","commitText","displayText","nl2br","FormControlLabel","control","Switch","checked","DeployBranch","memo","targetBranch","setTargetBranch","handleSelect","display","alignItems","validId","RegExp","Header","onIdChange","isIdValid","test","error","deepOrange","validTypingId","arr","map","t","i","GitTools","handleIDChange","exec","setKey","handleBranchMessageChange","setBranchMessage","handleBranchMessageClear","handleBranchPrefix","newBranchPrefix","handleCasePreference","newCasePreference","msg","snakeCase","kebabCase","camelCase","getBranchName"],"mappings":"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","file":"static/js/r_git.9e5a4732.chunk.js","sourcesContent":["import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Collapse from '@material-ui/core/Collapse';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport grey from '@material-ui/core/colors/grey';\nimport { useTheme } from '@material-ui/core/styles';\nimport useToggleState from '../../../hooks/useToggle';\n\nconst cardStyles: React.CSSProperties = { marginTop: 40, overflow: 'visible' };\nconst headerStyles: React.CSSProperties = {\n  borderRadius: 3,\n  marginLeft: 15,\n  marginRight: 15,\n  position: 'relative',\n  top: -20,\n};\n\ninterface ExpandableCardProps {\n  /** change the background color of the title bar */\n  backgroundColor?: string;\n  /** content to be displayed in the main section of the card */\n  children?: React.ReactNode;\n  /** invert the color of the title and subtitle text */\n  inverted?: boolean;\n  /** subtitle content */\n  subtitle?: string | React.ReactNode;\n  /** title content */\n  title?: string | React.ReactNode;\n}\n\nconst ExpandableCard = (props: ExpandableCardProps): React.ReactElement => {\n  const [expanded, toggleExpanded] = useToggleState(true);\n  const { palette } = useTheme();\n  const {\n    title, subtitle, children, backgroundColor, inverted = false,\n  } = props;\n\n  const headerStyle = {\n    ...headerStyles,\n    backgroundColor: backgroundColor || palette.primary.main,\n  };\n  if (palette.type !== 'dark') {\n    headerStyle.boxShadow = `0px 15px 15px -10px ${grey[400]}`;\n  } else {\n    delete headerStyle.boxShadow;\n  }\n  const expandedHeaderStyle = { ...headerStyle, marginBottom: -20 };\n\n  const titleStyle = React.useMemo(() => ({ color: inverted ? 'black' : 'white' }), [inverted]);\n  const subtitleStyle = React.useMemo(() => ({ color: grey[inverted ? 800 : 300] }), [inverted]);\n\n  const titleJSX = (\n    <Typography style={titleStyle} variant=\"h6\">\n      {title}\n    </Typography>\n  );\n  const subtitleJSX = expanded ? (\n    <Typography style={subtitleStyle}>\n      {subtitle}\n    </Typography>\n  ) : null;\n\n  return (\n    <Card style={cardStyles}>\n      <CardHeader\n        onClick={toggleExpanded}\n        style={expanded ? expandedHeaderStyle : headerStyle}\n        subheader={subtitleJSX}\n        title={titleJSX}\n      />\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n          <Grid container spacing={1} style={{ overflowY: 'hidden' }}>\n            {children}\n          </Grid>\n        </CardContent>\n      </Collapse>\n    </Card>\n  );\n};\n\nexport default ExpandableCard;\n","import React from 'react';\n\ntype OpenStateHook = [\n  boolean,\n  () => void,\n  () => void,\n]\n\nconst useOpenState = (defaultVal = false): OpenStateHook => {\n  const [isOpen, setIsOpen] = React.useState(defaultVal);\n\n  const handleOpen = (): void => { setIsOpen(true); };\n  const handleClose = (): void => { setIsOpen(false); };\n\n  return [isOpen, handleOpen, handleClose];\n};\n\nexport default useOpenState;\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Chip from '@material-ui/core/Chip';\nimport useOpenState from '../../../hooks/useOpenState';\n\ninterface CopyTextDisplayProps {\n  copyText?: string;\n  handleCopy: (text: string) => boolean;\n  text: string;\n}\n\nconst chipStyles: React.CSSProperties = { height: 'auto', paddingTop: 7, paddingBottom: 7 };\n\nconst CopyTextDisplay: React.FC<CopyTextDisplayProps> = (props: CopyTextDisplayProps) => {\n  const [isOpen, handleOpen, handleClose] = useOpenState(false);\n  const { handleCopy, copyText, text } = props;\n\n  /** copies text to clipboard and opens prompt to tell the user */\n  const handleCopyText = React.useCallback((): void => {\n    handleOpen();\n    const toCopy = copyText || text;\n    handleCopy(toCopy);\n  }, [copyText, handleCopy, handleOpen, text]);\n\n  return (\n    <>\n      <Chip onClick={handleCopyText} style={chipStyles} label={<div>{text}</div>} />\n      <Snackbar\n        action={[\n          <IconButton key=\"close\" onClick={handleClose as React.MouseEventHandler}>\n            <CloseIcon />\n          </IconButton>,\n        ]}\n        autoHideDuration={4000}\n        message=\"Copied Commit Text to clipboard!\"\n        onClose={handleClose as React.ReactEventHandler}\n        open={isOpen}\n      />\n    </>\n  );\n};\n\nexport default CopyTextDisplay;\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport IconButton from '@material-ui/core/IconButton';\nimport Clear from '@material-ui/icons/Clear';\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport CopyTextDisplay from './CopyTextDisplay';\nimport { MaterialSelectEventHandler } from './types';\nimport { BranchPrefixes, CasePreferences } from '../../../store/types';\n\ninterface BranchNameProps {\n  branchMessage?: string;\n  branchName: string;\n  branchPrefix: BranchPrefixes;\n  casePreference: CasePreferences;\n  getSelectOptions: (arr: string[]) => React.ReactNode;\n  gitTheme: string;\n  handleCopy: (text: string) => boolean;\n  onBranchMessageChange: MaterialSelectEventHandler;\n  onBranchMessageClear: React.MouseEventHandler;\n  setBranchPrefix: (newBranchPrefix: BranchPrefixes) => void;\n  setCasePreference: (newCasePreference: CasePreferences) => void;\n}\n\nconst wrapperStyles: React.CSSProperties = { paddingLeft: 20, paddingRight: 20, width: '100%' };\nconst topSpacing: React.CSSProperties = { marginTop: 12 };\n\nconst BranchName: React.FC<BranchNameProps> = (props: BranchNameProps) => {\n  const { getSelectOptions, setBranchPrefix, setCasePreference } = props;\n\n  /** function to generate select items for branch prefixes */\n  const getBranchPrefixOptions = React.useCallback(\n    (): React.ReactNode => getSelectOptions(['chores', 'epics', 'features', 'fixes']),\n    [getSelectOptions],\n  );\n\n  /** function to generate select items for case preference */\n  const getCasePreferenceOptions = React.useCallback(\n    (): React.ReactNode => getSelectOptions([\n      'snake_case', 'kebab-case', 'camelCase', 'No Changes',\n    ]),\n    [getSelectOptions],\n  );\n\n  /** function to update select state based on value */\n  const handleBranchPrefixSelect = React.useCallback(\n    (e: React.ChangeEvent<{ name?: string | undefined; value: unknown }>): void => {\n      setBranchPrefix(e.target.value as BranchPrefixes);\n    },\n    [setBranchPrefix],\n  );\n\n  /** function to update text state based on value */\n  const handleCasePrefSelect = React.useCallback(\n    (e: React.ChangeEvent<{ name?: string | undefined; value: unknown }>): void => {\n      setCasePreference(e.target.value as CasePreferences);\n    },\n    [setCasePreference],\n  );\n\n  const {\n    branchMessage,\n    branchName,\n    branchPrefix,\n    casePreference,\n    gitTheme,\n    handleCopy,\n    onBranchMessageChange,\n    onBranchMessageClear,\n  } = props;\n\n  const gitThemeStyles: React.CSSProperties = React.useMemo(() => ({ color: gitTheme }), [gitTheme]);\n\n  return (\n    <div style={wrapperStyles}>\n      <Grid container spacing={1}>\n        <Grid item sm={3} xs={12}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"branch-prefix\" style={gitThemeStyles}>\n              Branch Prefix\n            </InputLabel>\n            <Select\n              input={<Input id=\"branch-prefix\" />}\n              onChange={handleBranchPrefixSelect}\n              value={branchPrefix}\n            >\n              {getBranchPrefixOptions() || (\n                <MenuItem value=\"features\">features</MenuItem>\n              )}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item sm={3} xs={12}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"branch-prefix\" style={gitThemeStyles}>\n              Case Preference\n            </InputLabel>\n            <Select\n              input={<Input id=\"branch-prefix\" />}\n              onChange={handleCasePrefSelect}\n              value={casePreference}\n            >\n              {getCasePreferenceOptions() || (\n                <MenuItem value=\"snake_case\">snake_case</MenuItem>\n              )}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item sm={5} xs={10}>\n          <TextField\n            fullWidth\n            InputLabelProps={{ style: gitThemeStyles }}\n            label=\"Branch Name\"\n            multiline\n            onChange={onBranchMessageChange}\n            placeholder=\"Summary of User Story\"\n            value={branchMessage}\n          />\n        </Grid>\n        <Grid item sm={1} xs={2}>\n          <IconButton\n            onClick={onBranchMessageClear}\n            style={topSpacing}\n          >\n            <Clear />\n          </IconButton>\n        </Grid>\n      </Grid>\n      <CopyTextDisplay handleCopy={handleCopy} text={branchName} />\n    </div>\n  );\n};\n\nexport default BranchName;\n","import React from 'react';\nimport { MaterialSelectEvent } from './types';\n\ninterface UseCommitTextReturns {\n  commitPrefix: string;\n  commitMessage: string;\n  commitDescription: string;\n  finishes: boolean;\n  getCommitText: () => string;\n  handleCommitPrefixSelect: (event: MaterialSelectEvent, child: React.ReactNode) => void;\n  handleCommitMessageChange: React.ChangeEventHandler;\n  handleCommitDescriptionChange: React.ChangeEventHandler;\n  clearCommitMessage: React.MouseEventHandler;\n  clearCommitDescription: React.MouseEventHandler;\n  handleFinishesToggle: (event: React.ChangeEvent<HTMLInputElement>, checked: boolean) => void;\n}\n\nfunction useCommitText(storyID?: string, gitCommit?: boolean): UseCommitTextReturns {\n  const [commitPrefix, setLocalCommitPrefix] = React.useState('feat');\n  const [commitMessage, setCommitMessage] = React.useState('');\n  const [commitDescription, setCommitDescription] = React.useState('');\n  const [finishes, setFinishes] = React.useState(false);\n\n  /** function to generate the commit message from inputs\n   * @return {string} format Prefix: Message [?Finishes? ID] */\n  const getCommitText = (): string => {\n    // prefix\n    const prefix = `${commitPrefix}: `;\n\n    // description\n    let desc = ' ';\n    if (commitDescription && storyID) {\n      desc = `\\n\\n${commitDescription}\\n\\n`;\n    } else if (commitDescription) {\n      desc = `\\n\\n${commitDescription}`;\n    }\n\n    // postfix\n    let postfix = '';\n    if (finishes && storyID) {\n      postfix = `[${storyID} #finish]`;\n    } else if (storyID) {\n      postfix = `[${storyID}]`;\n    }\n\n    // compile all components together\n    const gitMessage = `${prefix}${commitMessage}${desc}${postfix}`;\n\n    // add syntax wrapper\n    return gitCommit ? `git commit -m \"${gitMessage}\"` : gitMessage;\n  };\n\n  /** function to update select state based on value */\n  const handleCommitPrefixSelect = (e: MaterialSelectEvent): void => {\n    setLocalCommitPrefix(e.target.value as string);\n  };\n\n  /** function to update text state based on value */\n  const handleCommitMessageChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setCommitMessage(e.target.value);\n  };\n\n  const handleCommitDescriptionChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setCommitDescription(e.target.value);\n  };\n\n  /** function to update text state based on value */\n  const clearCommitMessage = (): void => {\n    setCommitMessage('');\n  };\n\n  const clearCommitDescription = (): void => {\n    setCommitDescription('');\n  };\n\n  const handleFinishesToggle = (_e: React.ChangeEvent<HTMLInputElement>, isC: boolean): void => {\n    setFinishes(isC);\n  };\n\n  return {\n    commitPrefix,\n    commitMessage,\n    commitDescription,\n    finishes,\n    getCommitText,\n    handleCommitPrefixSelect,\n    handleCommitMessageChange,\n    handleCommitDescriptionChange,\n    clearCommitMessage,\n    clearCommitDescription,\n    handleFinishesToggle,\n  };\n}\n\nexport default useCommitText;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport Select from '@material-ui/core/Select';\nimport IconButton from '@material-ui/core/IconButton';\nimport Clear from '@material-ui/icons/Clear';\nimport Grid from '@material-ui/core/Grid';\nimport nl2br from 'react-newline-to-break';\nimport CopyTextDisplay from './CopyTextDisplay';\nimport { setCommitPrefix } from '../../../store/modules/git';\nimport { DBRootState } from '../../../store/types';\nimport useCommitText from './useCommitText';\n\ninterface CommitTextProps {\n  getSelectOptions: (arr: string[]) => React.ReactNode;\n  gitTheme: string;\n  handleCopy: (text: string) => boolean;\n  storyID?: string;\n}\n\nconst wrapperStyles: React.CSSProperties = { paddingLeft: 20, paddingRight: 20, width: '100%' };\nconst marginTopStyles: React.CSSProperties = { marginTop: 12 };\n\nconst CommitText: React.FC<CommitTextProps> = (props: CommitTextProps) => {\n  const gitCommit = useSelector((state: DBRootState) => state.git.commitPrefix);\n  const dispatch = useDispatch();\n\n  const {\n    getSelectOptions, storyID, handleCopy, gitTheme,\n  } = props;\n\n  const {\n    commitPrefix,\n    commitMessage,\n    commitDescription,\n    finishes,\n    getCommitText,\n    handleCommitPrefixSelect,\n    handleCommitMessageChange,\n    handleCommitDescriptionChange,\n    clearCommitMessage,\n    clearCommitDescription,\n    handleFinishesToggle,\n  } = useCommitText(storyID, gitCommit);\n\n  /** function to generate select items based of input */\n  const getCommitPrefixOptions = React.useCallback((): React.ReactNode => getSelectOptions([\n    'build', 'chore', 'ci', 'docs',\n    'feat', 'fix', 'perf', 'refactor',\n    'revert', 'style', 'test',\n  ]), [getSelectOptions]);\n\n  const handleGitCommitToggle = React.useCallback(\n    (_e: React.ChangeEvent<HTMLInputElement>, isC: boolean): void => {\n      dispatch(setCommitPrefix(isC));\n    },\n    [dispatch],\n  );\n\n  const commitText = getCommitText();\n  const displayText = commitText && nl2br(getCommitText());\n\n  return (\n    <div style={wrapperStyles}>\n      <Grid container spacing={1}>\n        <Grid item sm={4} xs={12}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"commit-prefix\" style={{ color: gitTheme }}>\n              Commit Prefix\n            </InputLabel>\n            <Select\n              input={<Input id=\"branch-prefix\" />}\n              onChange={handleCommitPrefixSelect}\n              value={commitPrefix}\n            >\n              {getCommitPrefixOptions()}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item sm={4} xs={12}>\n          <FormControlLabel\n            control={(\n              <Switch\n                checked={finishes}\n                onChange={handleFinishesToggle}\n                value=\"Finishes User Story\"\n              />\n            )}\n            label=\"Finishes User Story\"\n          />\n        </Grid>\n        <Grid item sm={4} xs={12}>\n          <FormControlLabel\n            control={(\n              <Switch\n                checked={gitCommit}\n                onChange={handleGitCommitToggle}\n                value=\"Add git commit -m\"\n              />\n            )}\n            label=\"Add git commit -m\"\n          />\n        </Grid>\n        <Grid item sm={5} xs={10}>\n          <TextField\n            fullWidth\n            InputLabelProps={{ style: { color: gitTheme }}}\n            label=\"Commit Message\"\n            onChange={handleCommitMessageChange}\n            placeholder=\"Summary of Work Done (Message)\"\n            value={commitMessage}\n          />\n        </Grid>\n        <Grid item sm={1} xs={2}>\n          <IconButton onClick={clearCommitMessage} style={marginTopStyles}>\n            <Clear />\n          </IconButton>\n        </Grid>\n        <Grid item sm={5} xs={10}>\n          <TextField\n            fullWidth\n            InputLabelProps={{ style: { color: gitTheme }}}\n            label=\"Commit Description\"\n            multiline\n            onChange={handleCommitDescriptionChange}\n            placeholder=\"Summary of Work Done (Description)\"\n            value={commitDescription}\n          />\n        </Grid>\n        <Grid item sm={1} xs={2}>\n          <IconButton\n            onClick={clearCommitDescription}\n            style={marginTopStyles}\n          >\n            <Clear />\n          </IconButton>\n        </Grid>\n      </Grid>\n      <CopyTextDisplay\n        copyText={commitText}\n        handleCopy={handleCopy}\n        text={displayText}\n      />\n    </div>\n  );\n};\n\nexport default CommitText;\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport Grid from '@material-ui/core/Grid';\nimport CopyTextDisplay from './CopyTextDisplay';\nimport { MaterialSelectEvent } from './types';\n\ninterface DeployBranchProps {\n  branchName: string;\n  getSelectOptions: (arr: string[]) => React.ReactNode;\n  gitTheme: string;\n  handleCopy: (text: string) => boolean;\n}\n\nconst DeployBranch: React.FC<DeployBranchProps> = React.memo((props: DeployBranchProps) => {\n  const [targetBranch, setTargetBranch] = React.useState('test-pipeline');\n\n  const handleSelect = React.useCallback((e: MaterialSelectEvent): void => {\n    setTargetBranch(e.target.value as string);\n  }, [setTargetBranch]);\n\n  const {\n    gitTheme, handleCopy, getSelectOptions, branchName,\n  } = props;\n\n  return (\n    <div style={{ paddingLeft: 20, paddingRight: 20, width: '100%' }}>\n      <Grid container spacing={1} style={{ display: 'flex', alignItems: 'center' }}>\n        <Grid item sm={3} xs={12}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"target-branch\" style={{ color: gitTheme }}>\n              Target Branch\n            </InputLabel>\n            <Select\n              input={<Input id=\"target-branch\" />}\n              onChange={handleSelect}\n              value={targetBranch}\n            >\n              {getSelectOptions(['test-pipeline', 'sandbox-pipeline'])}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item sm={9} xs={12}>\n          <CopyTextDisplay handleCopy={handleCopy} text={`git push -f origin ${branchName}:${targetBranch}`} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n});\n\nexport default DeployBranch;\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\nimport { MaterialSelectEventHandler } from './types';\n\ninterface HeaderProps {\n  gitTheme: string;\n  onIdChange: MaterialSelectEventHandler;\n  storyID?: string;\n}\n\nconst validId = RegExp('[A-Z]{4}-[a-zA-Z0-9]+');\n\nconst Header: React.FC<HeaderProps> = React.memo((props: HeaderProps) => {\n  const { onIdChange, storyID, gitTheme } = props;\n\n  const isIdValid = storyID && validId.test(storyID);\n\n  return (\n    <>\n      <Typography variant=\"h2\">\n        Git Tools\n      </Typography>\n      <TextField\n        InputLabelProps={{ style: { color: gitTheme }}}\n        label=\"User Story ID\"\n        onChange={onIdChange}\n        placeholder=\"GNAP-12345\"\n        style={{ marginLeft: 20 }}\n        value={storyID}\n        error={!isIdValid}\n      />\n      <br />\n    </>\n  );\n});\n\nexport default Header;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport deepOrange from '@material-ui/core/colors/deepOrange';\nimport handleCopy from 'copy-to-clipboard';\nimport snakeCase from 'lodash/snakeCase';\nimport kebabCase from 'lodash/kebabCase';\nimport camelCase from 'lodash/camelCase';\nimport {\n  setBranchMessage, setBranchPrefix, setCasePreference, setKey,\n} from '../../../store/modules/git';\nimport BranchName from './BranchName';\nimport CommitText from './CommitText';\nimport DeployBranch from './DeployBranch';\nimport Header from './Header';\nimport ExpandableCard from '../../common/expandable-card';\nimport { DBRootState, BranchPrefixes, CasePreferences } from '../../../store/types';\nimport { MaterialSelectEvent } from './types';\n\nconst gitTheme = deepOrange[600];\nexport const validTypingId = RegExp('[A-Z]{1,4}-?[a-zA-Z0-9]*');\n\n/** function to generate select items based of input */\nexport const getSelectOptions = (arr: string[]): React.ReactNode => arr.map((t, i) => (\n  <MenuItem key={i} value={t}>{t}</MenuItem>\n));\n\n/** function to generate the branch name from inputs\n   * @return {string} format prefix/<story_id>_name_lower_cased */\nexport const getBranchName = (\n  branchMessage: string,\n  branchPrefix: BranchPrefixes,\n  casePreference: CasePreferences,\n  storyID: string,\n): string => {\n  const prefix = branchPrefix ? `${branchPrefix}/` : '';\n  let msg = '';\n  switch (casePreference) {\n    case 'snake_case':\n      msg = `${storyID && `${storyID}_`}${snakeCase(branchMessage)}`;\n      break;\n    case 'kebab-case':\n      msg = `${storyID && `${storyID}-`}${kebabCase(branchMessage)}`;\n      break;\n    case 'camelCase':\n      msg = `${storyID}${camelCase(branchMessage)}`;\n      break;\n    default:\n      msg = `${storyID}${branchMessage}`;\n  }\n  return `${prefix}${msg}`;\n};\n\n/* GitTools  ->  Header\n *          |->  BranchName    -|\n *          |->  CommitText    -|->  CopyTextDisplay\n *          |->  DeployBranch  -|    */\nconst GitTools: React.FC = () => {\n  const {\n    branchMessage, branchPrefix, casePreference, storyID,\n  } = useSelector((state: DBRootState) => state.git);\n  const dispatch = useDispatch();\n\n  /** function to update text state based on value */\n  const handleIDChange = React.useCallback((e: MaterialSelectEvent): void => {\n    const [value] = validTypingId.exec(e.target.value as string) || [''];\n    dispatch(setKey(value));\n  }, [dispatch]);\n  /** function to update text state based on value */\n  const handleBranchMessageChange = React.useCallback((e: MaterialSelectEvent): void => {\n    dispatch(setBranchMessage(e.target.value as string));\n  }, [dispatch]);\n  /** function to clear text state based on value */\n  const handleBranchMessageClear = React.useCallback((): void => {\n    dispatch(setBranchMessage(''));\n  }, [dispatch]);\n  /** function to update text state based on value */\n  const handleBranchPrefix = React.useCallback((newBranchPrefix: BranchPrefixes): void => {\n    dispatch(setBranchPrefix(newBranchPrefix));\n  }, [dispatch]);\n  /** function to update case pref based on value */\n  const handleCasePreference = React.useCallback((newCasePreference: CasePreferences): void => {\n    dispatch(setCasePreference(newCasePreference));\n  }, [dispatch]);\n\n  const branchName = getBranchName(branchMessage, branchPrefix, casePreference, storyID);\n\n  return (\n    <>\n      <Header\n        {...{\n          gitTheme,\n          onIdChange: handleIDChange,\n          storyID,\n        }}\n      />\n      <ExpandableCard backgroundColor={gitTheme} title=\"Create Branch Name\">\n        <BranchName\n          {...{\n            branchMessage,\n            branchName,\n            branchPrefix,\n            casePreference,\n            getSelectOptions,\n            gitTheme,\n            handleCopy,\n            onBranchMessageChange: handleBranchMessageChange,\n            onBranchMessageClear: handleBranchMessageClear,\n            setBranchPrefix: handleBranchPrefix,\n            setCasePreference: handleCasePreference,\n          }}\n        />\n      </ExpandableCard>\n      <ExpandableCard backgroundColor={gitTheme} title=\"Create Commit Message\">\n        <CommitText\n          {...{\n            getSelectOptions,\n            gitTheme,\n            handleCopy,\n            storyID,\n          }}\n        />\n      </ExpandableCard>\n      <ExpandableCard backgroundColor={gitTheme} title=\"Deploy to Test Pipelines\">\n        <DeployBranch\n          {...{\n            branchName,\n            getSelectOptions,\n            gitTheme,\n            handleCopy,\n          }}\n        />\n      </ExpandableCard>\n    </>\n  );\n};\n\nexport default GitTools;\n"],"sourceRoot":""}