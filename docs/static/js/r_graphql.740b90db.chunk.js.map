{"version":3,"sources":["components/resume/graphql/common/Loading.tsx","components/resume/graphql/repository/item/Link.tsx","components/resume/graphql/repository/item/Description.tsx","components/resume/graphql/repository/fragments.ts","components/resume/graphql/repository/item/WatchRepository.tsx","components/resume/graphql/repository/item/StarRepository.tsx","components/resume/graphql/repository/item/UnstarRepository.tsx","components/resume/graphql/repository/item/index.ts","components/resume/graphql/repository/item/RepositoryItem.tsx","components/resume/graphql/repository/item/FetchMore.tsx","components/resume/graphql/repository/RepositoryList.tsx","components/resume/graphql/repository/index.ts","components/resume/graphql/ErrorMessage.tsx","components/resume/graphql/Profile.tsx","components/resume/graphql/Header.tsx","components/resume/graphql/NoToken.tsx","components/resume/graphql/GraphQL.tsx","components/resume/graphql/index.ts"],"names":["Loading","React","memo","Link","props","children","otherProps","target","rel","Description","descriptionHTML","primaryLanguage","owner","className","dangerouslySetInnerHTML","__html","Typography","display","name","href","url","login","REPOSITORY_FRAGMENT","gql","WATCH_REPOSITORY","VIEWER_SUBSCRIPTIONS","isWatch","viewerSubscription","updateWatch","cache","mutationResult","data","updateSubscription","subscribable","id","repository","readFragment","fragment","totalCount","watchers","writeFragment","WatchRepository","useMutation","variables","optimisticResponse","__typename","update","Button","onClick","variant","color","STAR_REPOSITORY","updateAddStar","addStar","starrable","stargazers","StarRepository","viewerHasStarred","UNSTAR_REPOSITORY","updateRemoveStar","removeStar","UnstarRepository","RepositoryItem","FetchMore","loading","hasNextPage","updateQuery","fetchMore","previousResult","fetchMoreResult","viewer","repositories","edges","RepositoryList","map","node","key","pageInfo","cursor","endCursor","ErrorMessage","error","toString","GET_REPOSITORIES_OF_CURRENT_USER","Profile","useQuery","Header","authToken","onChange","TextField","label","placeholder","value","style","margin","fullWidth","NoToken","errorLink","onError","graphQLErrors","networkError","InMemoryCache","GraphQL","gqlToken","stateActions","useState","setAuthToken","handleChange","e","token","setToken","httpLink","HttpLink","uri","headers","authorization","link","ApolloLink","from","client","ApolloClient","connect","state","dispatch","bindActionCreators"],"mappings":"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","file":"static/js/r_graphql.740b90db.chunk.js","sourcesContent":["import React from 'react';\n\nconst Loading: React.FC<{}> = React.memo(() => <div>Loading ...</div>);\n\nexport default Loading;\n","import React from 'react';\n\ninterface LinkProps extends React.AnchorHTMLAttributes<HTMLAnchorElement> {\n  children: React.ReactNode | React.ReactNodeArray;\n}\n\nconst Link: React.FC<LinkProps> = (props: LinkProps) => {\n  const { children, ...otherProps } = props;\n  return (\n    <a {...otherProps} target=\"_blank\" rel=\"noopener noreferrer\">\n      {children}\n    </a>\n  );\n};\n\nexport default Link;\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { PrimaryLanguage, Owner } from './types';\n\ninterface DescriptionProps {\n  descriptionHTML: string;\n  primaryLanguage: PrimaryLanguage;\n  owner: Owner;\n}\n\nconst Description: React.FC<DescriptionProps> = (props: DescriptionProps) => {\n  const { descriptionHTML, primaryLanguage, owner } = props;\n\n  return (\n    <div className=\"RepositoryItem-description\">\n      <div\n        className=\"RepositoryItem-description-info\"\n        // eslint-disable-next-line react/no-danger\n        dangerouslySetInnerHTML={{ __html: descriptionHTML }}\n      />\n      <div className=\"RepositoryItem-description-details\">\n        {primaryLanguage && (\n          <Typography display=\"inline\">\n            Language:\n            {' '}\n            {primaryLanguage.name}\n          </Typography>\n        )}\n        {owner && (\n          <Typography display=\"inline\">\n            Owner:\n            {' '}\n            <a href={owner.url}>{owner.login}</a>\n          </Typography>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Description;\n","import gql from 'graphql-tag';\n\nconst REPOSITORY_FRAGMENT = gql`\n  fragment repository on Repository {\n    id\n    name\n    url\n    descriptionHTML\n    primaryLanguage {\n      name\n    }\n    owner {\n      login\n      url\n    }\n    stargazers {\n      totalCount\n    }\n    viewerHasStarred\n    watchers {\n      totalCount\n    }\n    viewerSubscription\n  }\n`;\n\nexport default REPOSITORY_FRAGMENT;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport Button from '@material-ui/core/Button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { MutationUpdaterFn } from 'apollo-client';\nimport REPOSITORY_FRAGMENT from '../fragments';\nimport { Watchers } from './types';\n\ninterface WatchRepositoryProps {\n  id: string;\n  watchers: Watchers;\n  viewerSubscription: string;\n}\n\nconst WATCH_REPOSITORY = gql`\n  mutation ($id: ID!, $viewerSubscription: SubscriptionState!) {\n    updateSubscription(\n      input: { state: $viewerSubscription, subscribableId: $id }\n    ) {\n      subscribable {\n        id\n        viewerSubscription\n      }\n    }\n  }\n`;\n\nconst VIEWER_SUBSCRIPTIONS = {\n  SUBSCRIBED: 'SUBSCRIBED',\n  UNSUBSCRIBED: 'UNSUBSCRIBED',\n};\n\nconst isWatch = (viewerSubscription: string): boolean => viewerSubscription === VIEWER_SUBSCRIPTIONS.SUBSCRIBED;\n\nconst updateWatch: MutationUpdaterFn = (cache, mutationResult) => {\n  const { data } = mutationResult;\n  if (!data) {\n    return;\n  }\n\n  const { updateSubscription: { subscribable: { id, viewerSubscription }}} = data;\n\n  const repository: WatchRepositoryProps | null = cache.readFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  if (!repository) {\n    return;\n  }\n\n  let { totalCount } = repository.watchers;\n  totalCount = viewerSubscription === VIEWER_SUBSCRIPTIONS.SUBSCRIBED\n    ? totalCount + 1\n    : totalCount - 1;\n\n  cache.writeFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: {\n      ...repository,\n      watchers: {\n        ...repository.watchers,\n        totalCount,\n      },\n    },\n  });\n};\n\nconst WatchRepository: React.FC<WatchRepositoryProps> = (props: WatchRepositoryProps) => {\n  const { id, watchers, viewerSubscription } = props;\n  const [updateSubscription] = useMutation(WATCH_REPOSITORY, {\n    variables: {\n      id,\n      viewerSubscription: isWatch(viewerSubscription)\n        ? VIEWER_SUBSCRIPTIONS.UNSUBSCRIBED\n        : VIEWER_SUBSCRIPTIONS.SUBSCRIBED,\n    },\n    optimisticResponse: {\n      updateSubscription: {\n        __typename: 'Mutation',\n        subscribable: {\n          __typename: 'Repository',\n          id,\n          viewerSubscription: isWatch(viewerSubscription)\n            ? VIEWER_SUBSCRIPTIONS.UNSUBSCRIBED\n            : VIEWER_SUBSCRIPTIONS.SUBSCRIBED,\n        },\n      },\n    },\n    update: updateWatch,\n  });\n\n  return (\n    <Button\n      className=\"RepositoryItem-title-action\"\n      onClick={updateSubscription as React.MouseEventHandler}\n      variant=\"outlined\"\n      color=\"primary\"\n    >\n      {isWatch(viewerSubscription) ? 'Unwatch' : 'Watch'}\n      {` (${watchers.totalCount})`}\n    </Button>\n  );\n};\n\nexport default WatchRepository;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport Button from '@material-ui/core/Button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { MutationUpdaterFn } from 'apollo-client';\nimport REPOSITORY_FRAGMENT from '../fragments';\nimport { StarRepositoryProps } from './types';\n\nconst STAR_REPOSITORY = gql`\n  mutation($id: ID!) {\n    addStar(input: { starrableId: $id }) {\n      starrable {\n        id\n        viewerHasStarred\n      }\n    }\n  }\n`;\n\nconst updateAddStar: MutationUpdaterFn = (cache, mutationResult): void => {\n  const { data } = mutationResult;\n  if (!data) {\n    return;\n  }\n  const { addStar: { starrable: { id }}} = data;\n\n  const repository: StarRepositoryProps | null = cache.readFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  if (!repository) {\n    return;\n  }\n\n  const totalCount = repository.stargazers.totalCount + 1;\n\n  cache.writeFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: {\n      ...repository,\n      stargazers: {\n        ...repository.stargazers,\n        totalCount,\n      },\n    },\n  });\n};\n\nconst StarRepository: React.FC<StarRepositoryProps> = (props: StarRepositoryProps) => {\n  const { id, stargazers } = props;\n  const [addStar] = useMutation(STAR_REPOSITORY, {\n    variables: { id },\n    update: updateAddStar,\n    optimisticResponse: {\n      addStar: {\n        __typename: 'Mutation',\n        starrable: { __typename: 'Repository', id, viewerHasStarred: true },\n      },\n    },\n  });\n\n  return (\n    <Button\n      className=\"RepositoryItem-title-action\"\n      onClick={addStar as React.MouseEventHandler}\n      variant=\"outlined\"\n      color=\"primary\"\n    >\n      {`Star (${stargazers.totalCount})`}\n    </Button>\n  );\n};\n\nexport default StarRepository;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport Button from '@material-ui/core/Button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { MutationUpdaterFn } from 'apollo-client';\nimport REPOSITORY_FRAGMENT from '../fragments';\nimport { StarRepositoryProps } from './types';\n\nconst UNSTAR_REPOSITORY = gql`\n  mutation($id: ID!) {\n    removeStar(input: { starrableId: $id }) {\n      starrable {\n        id\n        viewerHasStarred\n      }\n    }\n  }\n`;\n\nconst updateRemoveStar: MutationUpdaterFn = (cache, mutationResult) => {\n  const { data } = mutationResult;\n  if (!data) {\n    return;\n  }\n\n  const { removeStar: { starrable: { id }}} = data;\n  const repository: StarRepositoryProps | null = cache.readFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  if (!repository) {\n    return;\n  }\n\n  const totalCount = repository.stargazers.totalCount - 1;\n\n  cache.writeFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: {\n      ...repository,\n      stargazers: {\n        ...repository.stargazers,\n        totalCount,\n      },\n    },\n  });\n};\n\nconst UnstarRepository: React.FC<StarRepositoryProps> = (props: StarRepositoryProps) => {\n  const { id, stargazers } = props;\n  const [removeStar] = useMutation(UNSTAR_REPOSITORY, {\n    variables: { id },\n    optimisticResponse: {\n      removeStar: {\n        __typename: 'Mutation',\n        starrable: {\n          __typename: 'Repository',\n          id,\n          viewerHasStarred: false,\n        },\n      },\n    },\n    update: updateRemoveStar,\n  });\n\n  return (\n    <Button\n      className=\"RepositoryItem-title-action\"\n      onClick={removeStar as React.MouseEventHandler}\n      variant=\"outlined\"\n      color=\"primary\"\n    >\n      {`UnStar (${stargazers.totalCount})`}\n    </Button>\n  );\n};\n\nexport default UnstarRepository;\n","import RepositoryItem from './RepositoryItem';\n\nexport default RepositoryItem;\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport Link from './Link';\nimport Description from './Description';\nimport WatchRepository from './WatchRepository';\nimport StarRepository from './StarRepository';\nimport UnstarRepository from './UnstarRepository';\nimport {\n  Owner, PrimaryLanguage, StarGazers, Watchers,\n} from './types';\n\ninterface RepositoryItemProps {\n  id: string;\n  name: string;\n  url: string;\n  descriptionHTML: string;\n  primaryLanguage: PrimaryLanguage;\n  owner: Owner;\n  stargazers: StarGazers;\n  watchers: Watchers;\n  viewerSubscription: string;\n  viewerHasStarred: boolean;\n}\n\n/* RepositoryItem  ->  StarRepository\n *                |->  UnstarRepository\n *                | -> WatchRepository\n *                | -> Description */\nconst RepositoryItem: React.FC<RepositoryItemProps> = (props: RepositoryItemProps) => {\n  const {\n    id,\n    name,\n    url,\n    descriptionHTML,\n    primaryLanguage,\n    owner,\n    stargazers,\n    watchers,\n    viewerSubscription,\n    viewerHasStarred,\n  } = props;\n\n  return (\n    <>\n      <div className=\"RepositoryItem-title\">\n        <Typography variant=\"h3\">\n          <Link href={url}>{name}</Link>\n        </Typography>\n        {!viewerHasStarred\n          ? (<StarRepository id={id} stargazers={stargazers} />)\n          : (<UnstarRepository id={id} stargazers={stargazers} />)}\n        <WatchRepository id={id} watchers={watchers} viewerSubscription={viewerSubscription} />\n      </div>\n\n      <Description descriptionHTML={descriptionHTML} primaryLanguage={primaryLanguage} owner={owner} />\n    </>\n  );\n};\n\nexport default RepositoryItem;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Loading from '../../common/Loading';\n\ninterface Variables {\n  cursor: any;\n}\ninterface FetchMoreProps {\n  loading: boolean;\n  hasNextPage: boolean;\n  variables: Variables;\n  updateQuery: Function;\n  fetchMore: Function;\n  children?: React.ReactNodeArray | string;\n}\n\nconst FetchMore: React.FC<FetchMoreProps> = (props: FetchMoreProps) => {\n  const {\n    loading, hasNextPage, variables, updateQuery,\n    fetchMore, children,\n  } = props;\n\n  return (\n    <div className=\"FetchMore\">\n      {loading\n        ? (\n          <Loading />\n        ) : (\n          hasNextPage && (\n            <Button\n              className=\"FetchMore-button\"\n              onClick={(): void => fetchMore({ variables, updateQuery })}\n              variant=\"outlined\"\n              color=\"primary\"\n            >\n              More\n              {' '}\n              {children}\n            </Button>\n          )\n        )}\n    </div>\n  );\n};\n\nexport default FetchMore;\n","import React from 'react';\nimport map from 'lodash/map';\nimport RepositoryItem from './item';\nimport FetchMore from './item/FetchMore';\n\ninterface PageInto {\n  hasNextPage: boolean;\n  endCursor: string;\n}\ninterface Repository {\n  edges: any[];\n  pageInfo: PageInto;\n}\ninterface RepositoryListProps {\n  repositories: Repository;\n  loading: boolean;\n  fetchMore: Function;\n}\n\nconst updateQuery = (previousResult: any, { fetchMoreResult }: any): any => {\n  if (!fetchMoreResult) {\n    return previousResult;\n  }\n\n  return {\n    ...previousResult,\n    viewer: {\n      ...previousResult.viewer,\n      repositories: {\n        ...previousResult.viewer.repositories,\n        ...fetchMoreResult.viewer.repositories,\n        edges: [\n          ...previousResult.viewer.repositories.edges,\n          ...fetchMoreResult.viewer.repositories.edges,\n        ],\n      },\n    },\n  };\n};\n\nconst RepositoryList: React.FC<RepositoryListProps> = (props: RepositoryListProps) => {\n  const { repositories, loading, fetchMore } = props;\n\n  return (\n    <>\n      {map(repositories.edges, ({ node }) => (\n        <div key={node.id} className=\"RepositoryItem\">\n          <RepositoryItem {...node} />\n        </div>\n      ))}\n\n      <FetchMore\n        loading={loading}\n        hasNextPage={repositories.pageInfo.hasNextPage}\n        variables={{\n          cursor: repositories.pageInfo.endCursor,\n        }}\n        updateQuery={updateQuery}\n        fetchMore={fetchMore}\n      >\n        Repositories\n      </FetchMore>\n    </>\n  );\n};\n\nexport default RepositoryList;\n","import RepositoryList from './RepositoryList';\nimport REPOSITORY_FRAGMENT from './fragments';\n\nexport { REPOSITORY_FRAGMENT };\n\nexport default RepositoryList;\n","import React from 'react';\nimport { ApolloError } from 'apollo-client';\n\ninterface ErrorMessageProps {\n  error?: ApolloError;\n}\n\nconst ErrorMessage: React.FC<ErrorMessageProps> = (props: ErrorMessageProps) => {\n  const { error } = props;\n\n  return (\n    <div>\n      <small>{error ? error.toString() : 'Something Went Wrong'}</small>\n    </div>\n  );\n};\n\nexport default ErrorMessage;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport Loading from './common/Loading';\nimport RepositoryList, { REPOSITORY_FRAGMENT } from './repository';\nimport ErrorMessage from './ErrorMessage';\n\nconst GET_REPOSITORIES_OF_CURRENT_USER = gql`\n  query($cursor: String) {\n    viewer {\n      repositories(\n        first: 5\n        orderBy: { direction: DESC, field: STARGAZERS }\n        after: $cursor\n      ) {\n        edges {\n          node {\n            ...repository\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  }\n  ${REPOSITORY_FRAGMENT}\n`;\n\nconst Profile: React.FC<{}> = React.memo(() => {\n  const {\n    error, data, loading, fetchMore,\n  } = useQuery(GET_REPOSITORIES_OF_CURRENT_USER);\n\n  // check errors\n  if (error || !data) {\n    return <ErrorMessage error={error} />;\n  }\n\n  // check for data\n  const { viewer } = data;\n  if (loading && !viewer) {\n    return <Loading />;\n  }\n\n  // display data\n  return <RepositoryList loading={loading} repositories={viewer.repositories} fetchMore={fetchMore} />;\n});\n\nexport default Profile;\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\n\ninterface HeaderProps {\n  authToken?: string;\n  onChange: React.ChangeEventHandler;\n}\n\nconst Header: React.FC<HeaderProps> = React.memo((props: HeaderProps) => {\n  const { authToken, onChange } = props;\n\n  return (\n    <>\n      <Typography variant=\"h2\">GraphQL Demo</Typography>\n      <TextField\n        label=\"Authorization Code\"\n        placeholder=\"some 32 character string from github\"\n        value={authToken}\n        onChange={onChange}\n        style={{ margin: '20px 0 20px 0' }}\n        fullWidth\n      />\n    </>\n  );\n});\n\nexport default Header;\n","import React, { memo } from 'react';\nimport { Typography } from '@material-ui/core';\n\nconst NoToken: React.FC<{}> = memo(() => (\n  <Typography variant=\"h6\">\n    You need to generate a personal access token with &quot;repo&quot; and &quot;admin:repo_hook&quot; permissions.\n    <br />\n    This can be done in the Developer settings on GitHub.\n  </Typography>\n));\n\nexport default NoToken;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport Profile from './Profile';\nimport { setToken } from '../../../store/modules/gqlToken';\nimport Header from './Header';\nimport NoToken from './NoToken';\nimport { DBRootState } from '../../../store/types';\n\ninterface StateActions {\n  setToken: Function;\n}\ninterface GraphQLProps {\n  gqlToken: string;\n  stateActions: StateActions;\n}\n\nconst GITHUB_BASE_URL = 'https://api.github.com/graphql';\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) { /* do something with graphql error */ }\n  if (networkError) { /* do something with network error */ }\n});\nconst cache = new InMemoryCache();\n\n/* GraphQL  ->  Header\n *         |->  NoToken\n *         |->  Profile  ->  Repository\n *            Loading  <-|->  ErrorMessage */\nconst GraphQL: React.FC<GraphQLProps> = React.memo((props: GraphQLProps) => {\n  const { gqlToken, stateActions } = props;\n  const [authToken, setAuthToken] = useState(gqlToken);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const token = e.target.value;\n    stateActions.setToken(token);\n    setAuthToken(token);\n  };\n\n  if (!gqlToken) {\n    return (\n      <>\n        <Header authToken={authToken} onChange={handleChange} />\n        <NoToken />\n      </>\n    );\n  }\n\n  const httpLink = new HttpLink({\n    uri: GITHUB_BASE_URL,\n    headers: {\n      authorization: `Bearer ${gqlToken}`,\n    },\n  });\n  const link = ApolloLink.from([errorLink, httpLink]);\n  const client = new ApolloClient({ link, cache });\n\n  return (\n    <ApolloProvider client={client}>\n      <Header authToken={authToken} onChange={handleChange} />\n      <Profile />\n    </ApolloProvider>\n  );\n});\n\n// react-redux export\nconst mapStateToProps = (state: DBRootState): { gqlToken: string } => ({\n  gqlToken: state.gqlToken,\n});\nconst mapDispatchToProps = (dispatch: Dispatch): { stateActions: StateActions } => ({\n  stateActions: bindActionCreators({ setToken }, dispatch),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(GraphQL);\n","import GraphQL from './GraphQL';\n\nexport default GraphQL;\n"],"sourceRoot":""}