{"version":3,"file":"static/js/r_git.1e89867b.chunk.js","mappings":"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","sources":["components/common/expandable-card/ExpandableCard.tsx","recoil/git-atom.ts","recoil/git-selector.ts","components/resume/git-tools/CopyTextDisplay.tsx","components/resume/git-tools/BranchName.tsx","components/resume/git-tools/useCommitText.ts","components/resume/git-tools/CommitText.tsx","components/resume/git-tools/DeployBranch.tsx","components/resume/git-tools/Header.tsx","components/resume/git-tools/helpers.tsx","components/resume/git-tools/GitTools.tsx","hooks/useOpenState.ts"],"sourcesContent":["import * as React from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Collapse from \"@mui/material/Collapse\";\nimport Typography from \"@mui/material/Typography\";\nimport Grid from \"@mui/material/Grid\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { grey } from \"@mui/material/colors\";\nimport useToggleState from \"../../../hooks/useToggle\";\n\nconst cardStyles: React.CSSProperties = { marginTop: 40, overflow: \"visible\" };\nconst headerStyles: React.CSSProperties = {\n  borderRadius: 3,\n  marginLeft: 15,\n  marginRight: 15,\n  position: \"relative\",\n  top: -20,\n};\n\ninterface ExpandableCardProps {\n  /** change the background color of the title bar */\n  backgroundColor?: string;\n  /** content to be displayed in the main section of the card */\n  children?: React.ReactNode;\n  /** invert the color of the title and subtitle text */\n  inverted?: boolean;\n  /** subtitle content */\n  subtitle?: string | React.ReactNode;\n  /** title content */\n  title?: string | React.ReactNode;\n}\n\nconst ExpandableCard = (props: ExpandableCardProps): React.ReactElement => {\n  const [expanded, toggleExpanded] = useToggleState(true);\n  const { palette } = useTheme();\n  const { inverted, title, subtitle, children, backgroundColor } = props;\n\n  const headerStyle = {\n    ...headerStyles,\n    backgroundColor: backgroundColor || palette.primary.dark,\n  };\n  if (palette.mode !== \"dark\") {\n    headerStyle.boxShadow = `0px 15px 15px -10px ${grey[400]}`;\n  } else {\n    delete headerStyle.boxShadow;\n  }\n  const expandedHeaderStyle = { ...headerStyle, marginBottom: -20 };\n\n  const titleStyle = {\n    color: inverted ? \"black\" : palette.primary.contrastText,\n  };\n\n  const titleJSX = <Typography style={titleStyle}>{title}</Typography>;\n  const subtitleJSX = expanded ? (\n    <Typography style={titleStyle} variant=\"body2\">\n      {subtitle}\n    </Typography>\n  ) : null;\n\n  return (\n    <Card style={cardStyles}>\n      <CardHeader\n        onClick={toggleExpanded}\n        style={expanded ? expandedHeaderStyle : headerStyle}\n        subheader={subtitleJSX}\n        title={titleJSX}\n      />\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n          <Grid container spacing={1} style={{ overflowY: \"hidden\" }}>\n            {children}\n          </Grid>\n        </CardContent>\n      </Collapse>\n    </Card>\n  );\n};\n\nexport default ExpandableCard;\n","import { atom } from \"recoil\";\n\nexport const branchPrefixes = [\"chores\", \"epics\", \"features\", \"fixes\"] as const;\nexport type BranchPrefixes = typeof branchPrefixes[number];\nexport const casePreferences = [\n  \"snake_case\",\n  \"kebab-case\",\n  \"camelCase\",\n  \"No Changes\",\n] as const;\nexport type CasePreferences = typeof casePreferences[number];\n\nexport interface GitState {\n  branchMessage: string;\n  branchPrefix: BranchPrefixes;\n  casePreference: CasePreferences;\n}\n\nconst initialState: GitState = {\n  branchMessage: \"\",\n  branchPrefix: \"features\",\n  casePreference: \"snake_case\",\n};\n\nconst gitAtom = atom({\n  key: \"gitAtom\",\n  default:\n    (JSON.parse(localStorage.getItem(\"git-atom\") || \"null\") as GitState) ||\n    initialState,\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"git-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\nexport const storyIdGitAtom = atom({\n  key: \"storyIdGitAtom\",\n  default: JSON.parse(\n    localStorage.getItem(\"story-id-git-atom\") || '\"\"'\n  ) as string,\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"story-id-git-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\nexport const commitPrefixGitAtom = atom({\n  key: \"commitPrefixGitAtom\",\n  default: JSON.parse(\n    localStorage.getItem(\"commit-prefix-git-atom\") || \"true\"\n  ) as boolean,\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"commit-prefix-git-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\nexport default gitAtom;\n","import { selector } from \"recoil\";\nimport snakeCase from \"lodash/snakeCase\";\nimport kebabCase from \"lodash/kebabCase\";\nimport camelCase from \"lodash/camelCase\";\nimport gitAtom, { storyIdGitAtom } from \"./git-atom\";\n\n/** function to generate the branch name from inputs\n * @return {string} format prefix/<story_id>_name_lower_cased */\nconst branchNameGitSelector = selector({\n  key: \"branchNameGitSelector\",\n  get: ({ get }) => {\n    const { branchMessage, branchPrefix, casePreference } = get(gitAtom);\n    const storyID = get(storyIdGitAtom);\n\n    const prefix = branchPrefix ? `${branchPrefix}/` : \"\";\n    let msg = \"\";\n    switch (casePreference) {\n      case \"snake_case\":\n        msg = `${storyID && `${storyID}_`}${snakeCase(branchMessage)}`;\n        break;\n      case \"kebab-case\":\n        msg = `${storyID && `${storyID}-`}${kebabCase(branchMessage)}`;\n        break;\n      case \"camelCase\":\n        msg = `${storyID}${camelCase(branchMessage)}`;\n        break;\n      default:\n        msg = `${storyID}${branchMessage}`;\n    }\n    return `${prefix}${msg}`;\n  },\n});\n\nexport default branchNameGitSelector;\n","import * as React from \"react\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport Chip from \"@mui/material/Chip\";\nimport useOpenState from \"../../../hooks/useOpenState\";\n\ninterface CopyTextDisplayProps {\n  copyText?: string;\n  handleCopy: (text: string) => boolean;\n  text: string;\n}\n\nconst chipStyles: React.CSSProperties = {\n  height: \"auto\",\n  paddingTop: 7,\n  paddingBottom: 7,\n};\n\nconst CopyTextDisplay: React.FC<CopyTextDisplayProps> = (\n  props: CopyTextDisplayProps\n) => {\n  const [isOpen, handleOpen, handleClose] = useOpenState(false);\n  const { handleCopy, copyText, text } = props;\n\n  /** copies text to clipboard and opens prompt to tell the user */\n  const handleCopyText = React.useCallback((): void => {\n    handleOpen();\n    const toCopy = copyText || text;\n    handleCopy(toCopy);\n  }, [copyText, handleCopy, handleOpen, text]);\n\n  return (\n    <>\n      <Chip\n        onClick={handleCopyText}\n        style={chipStyles}\n        label={<div>{text}</div>}\n        aria-label={`copy to clipboard ${text}`}\n      />\n      <Snackbar\n        action={[\n          <IconButton\n            key=\"close\"\n            onClick={handleClose}\n            size=\"large\"\n            aria-label=\"close copy to clipboard confirmation\"\n          >\n            <CloseIcon />\n          </IconButton>,\n        ]}\n        autoHideDuration={4000}\n        message=\"Copied Commit Text to clipboard!\"\n        onClose={handleClose}\n        open={isOpen}\n      />\n    </>\n  );\n};\n\nexport default CopyTextDisplay;\n","import * as React from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport Input from \"@mui/material/Input\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Clear from \"@mui/icons-material/Clear\";\nimport Grid from \"@mui/material/Grid\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport { useRecoilValue, useRecoilState } from \"recoil\";\nimport gitSelector from \"../../../recoil/git-selector\";\nimport CopyTextDisplay from \"./CopyTextDisplay\";\nimport gitAtom, {\n  branchPrefixes,\n  BranchPrefixes,\n  casePreferences,\n  CasePreferences,\n} from \"../../../recoil/git-atom\";\n\ninterface BranchNameProps {\n  getSelectOptions: (arr: string[]) => React.ReactNode;\n  gitTheme: string;\n  handleCopy: (text: string) => boolean;\n}\n\nconst wrapperStyles: React.CSSProperties = {\n  paddingLeft: 20,\n  paddingRight: 20,\n  width: \"100%\",\n};\nconst topSpacing: React.CSSProperties = { marginTop: 12 };\n\nconst BranchName: React.FC<BranchNameProps> = (props: BranchNameProps) => {\n  const [state, setState] = useRecoilState(gitAtom);\n  const branchName = useRecoilValue(gitSelector);\n\n  const { getSelectOptions, gitTheme, handleCopy } = props;\n  const { branchMessage, branchPrefix, casePreference } = state;\n\n  /** function to update text state based on value */\n  const handleBranchMessageChange: React.ChangeEventHandler<\n    HTMLInputElement | HTMLTextAreaElement\n  > = (e) => setState({ ...state, branchMessage: e.target.value });\n  /** function to clear text state based on value */\n  const handleBranchMessageClear = (): void =>\n    setState({ ...state, branchMessage: \"\" });\n  /** function to update text state based on value */\n  const setBranchPrefix = (newBranchPrefix: BranchPrefixes): void =>\n    setState({ ...state, branchPrefix: newBranchPrefix });\n  /** function to update case pref based on value */\n  const setCasePreference = (newCasePreference: CasePreferences): void =>\n    setState({ ...state, casePreference: newCasePreference });\n\n  /** function to generate select items for branch prefixes */\n  const getBranchPrefixOptions = (): React.ReactNode =>\n    getSelectOptions([...branchPrefixes]);\n\n  /** function to generate select items for case preference */\n  const getCasePreferenceOptions = (): React.ReactNode =>\n    getSelectOptions([...casePreferences]);\n\n  /** function to update select state based on value */\n  const handleBranchPrefixSelect = (e: SelectChangeEvent): void =>\n    setBranchPrefix(e.target.value as BranchPrefixes);\n\n  /** function to update text state based on value */\n  const handleCasePrefSelect = (e: SelectChangeEvent): void =>\n    setCasePreference(e.target.value as CasePreferences);\n\n  const gitThemeStyles: React.CSSProperties = React.useMemo(\n    () => ({ color: gitTheme }),\n    [gitTheme]\n  );\n\n  return (\n    <div style={wrapperStyles}>\n      <Grid container spacing={2} style={{ marginBottom: 16 }}>\n        <Grid item sm={3} xs={12} style={{ marginTop: 16 }}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"branch-prefix\" style={gitThemeStyles}>\n              Branch Prefix\n            </InputLabel>\n            <Select\n              input={<Input id=\"branch-prefix\" />}\n              onChange={handleBranchPrefixSelect}\n              value={branchPrefix}\n            >\n              {getBranchPrefixOptions() || (\n                <MenuItem value=\"features\">features</MenuItem>\n              )}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item sm={3} xs={12} style={{ marginTop: 16 }}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"case-preference\" style={gitThemeStyles}>\n              Case Preference\n            </InputLabel>\n            <Select\n              input={<Input id=\"case-preference\" />}\n              onChange={handleCasePrefSelect}\n              value={casePreference}\n            >\n              {getCasePreferenceOptions() || (\n                <MenuItem value=\"snake_case\">snake_case</MenuItem>\n              )}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item sm={5} xs={10} style={{ marginTop: 16 }}>\n          <TextField\n            fullWidth\n            InputLabelProps={{ style: gitThemeStyles }}\n            label=\"Branch Name\"\n            multiline\n            onChange={handleBranchMessageChange}\n            placeholder=\"Summary of User Story\"\n            value={branchMessage}\n          />\n        </Grid>\n        <Grid item sm={1} xs={2} style={{ marginTop: 16 }}>\n          <IconButton\n            onClick={handleBranchMessageClear}\n            style={topSpacing}\n            size=\"large\"\n            aria-label=\"Clear Branch Name\"\n          >\n            <Clear />\n          </IconButton>\n        </Grid>\n      </Grid>\n      <CopyTextDisplay handleCopy={handleCopy} text={branchName} />\n    </div>\n  );\n};\n\nexport default BranchName;\n","import * as React from \"react\";\nimport { SelectChangeEvent } from \"@mui/material/Select\";\n\ninterface UseCommitTextReturns {\n  commitPrefix: string;\n  commitMessage: string;\n  commitDescription: string;\n  finishes: boolean;\n  getCommitText: () => string;\n  handleCommitPrefixSelect: (\n    event: SelectChangeEvent,\n    child: React.ReactNode\n  ) => void;\n  handleCommitMessageChange: React.ChangeEventHandler;\n  handleCommitDescriptionChange: React.ChangeEventHandler;\n  clearCommitMessage: React.MouseEventHandler;\n  clearCommitDescription: React.MouseEventHandler;\n  handleFinishesToggle: (\n    event: React.ChangeEvent<HTMLInputElement>,\n    checked: boolean\n  ) => void;\n}\n\nfunction useCommitText(\n  storyID?: string,\n  hasCommitPrefix?: boolean\n): UseCommitTextReturns {\n  const [commitPrefix, setLocalCommitPrefix] = React.useState(\"feat\");\n  const [commitMessage, setCommitMessage] = React.useState(\"\");\n  const [commitDescription, setCommitDescription] = React.useState(\"\");\n  const [finishes, setFinishes] = React.useState(false);\n\n  /** function to generate the commit message from inputs\n   * @return {string} format Prefix: Message [?Finishes? ID] */\n  const getCommitText = (): string => {\n    // prefix\n    const prefix = `${commitPrefix}: `;\n\n    // description\n    let desc = \" \";\n    if (commitDescription && storyID) {\n      desc = `\\n\\n${commitDescription}\\n\\n`;\n    } else if (commitDescription) {\n      desc = `\\n\\n${commitDescription}`;\n    }\n\n    // postfix\n    let postfix = \"\";\n    if (finishes && storyID) {\n      postfix = `[${storyID} #finish]`;\n    } else if (storyID) {\n      postfix = `[${storyID}]`;\n    }\n\n    // compile all components together\n    const gitMessage = `${prefix}${commitMessage}${desc}${postfix}`;\n\n    // add syntax wrapper\n    return hasCommitPrefix ? `git commit -m \"${gitMessage}\"` : gitMessage;\n  };\n\n  /** function to update select state based on value */\n  const handleCommitPrefixSelect = (e: SelectChangeEvent): void => {\n    setLocalCommitPrefix(e.target.value);\n  };\n\n  /** function to update text state based on value */\n  const handleCommitMessageChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setCommitMessage(e.target.value);\n  };\n\n  const handleCommitDescriptionChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setCommitDescription(e.target.value);\n  };\n\n  /** function to update text state based on value */\n  const clearCommitMessage = (): void => {\n    setCommitMessage(\"\");\n  };\n\n  const clearCommitDescription = (): void => {\n    setCommitDescription(\"\");\n  };\n\n  const handleFinishesToggle = (\n    _e: React.ChangeEvent<HTMLInputElement>,\n    isC: boolean\n  ): void => {\n    setFinishes(isC);\n  };\n\n  return {\n    commitPrefix,\n    commitMessage,\n    commitDescription,\n    finishes,\n    getCommitText,\n    handleCommitPrefixSelect,\n    handleCommitMessageChange,\n    handleCommitDescriptionChange,\n    clearCommitMessage,\n    clearCommitDescription,\n    handleFinishesToggle,\n  };\n}\n\nexport default useCommitText;\n","import * as React from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Switch from \"@mui/material/Switch\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport Input from \"@mui/material/Input\";\nimport Select from \"@mui/material/Select\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Clear from \"@mui/icons-material/Clear\";\nimport Grid from \"@mui/material/Grid\";\nimport nl2br from \"react-newline-to-break\";\nimport { useRecoilState } from \"recoil\";\nimport CopyTextDisplay from \"./CopyTextDisplay\";\nimport { commitPrefixGitAtom } from \"../../../recoil/git-atom\";\nimport useCommitText from \"./useCommitText\";\n\ninterface CommitTextProps {\n  getSelectOptions: (arr: string[]) => React.ReactNode;\n  gitTheme: string;\n  handleCopy: (text: string) => boolean;\n  storyID?: string;\n}\n\nconst wrapperStyles: React.CSSProperties = {\n  paddingLeft: 20,\n  paddingRight: 20,\n  width: \"100%\",\n};\nconst marginTopStyles: React.CSSProperties = { marginTop: 12 };\n\nconst CommitText: React.FC<CommitTextProps> = (props: CommitTextProps) => {\n  const [hasCommitPrefix, setHasCommitPrefix] =\n    useRecoilState(commitPrefixGitAtom);\n\n  const { getSelectOptions, storyID, handleCopy, gitTheme } = props;\n\n  const {\n    commitPrefix,\n    commitMessage,\n    commitDescription,\n    finishes,\n    getCommitText,\n    handleCommitPrefixSelect,\n    handleCommitMessageChange,\n    handleCommitDescriptionChange,\n    clearCommitMessage,\n    clearCommitDescription,\n    handleFinishesToggle,\n  } = useCommitText(storyID, hasCommitPrefix);\n\n  /** function to generate select items based of input */\n  const getCommitPrefixOptions = React.useCallback(\n    (): React.ReactNode =>\n      getSelectOptions([\n        \"build\",\n        \"chore\",\n        \"ci\",\n        \"docs\",\n        \"feat\",\n        \"fix\",\n        \"perf\",\n        \"refactor\",\n        \"revert\",\n        \"style\",\n        \"test\",\n      ]),\n    [getSelectOptions]\n  );\n\n  const handleGitCommitToggle = (\n    _e: React.ChangeEvent<HTMLInputElement>,\n    isC: boolean\n  ): void => {\n    setHasCommitPrefix(isC);\n  };\n\n  const commitText = getCommitText();\n  const displayText = commitText && nl2br(getCommitText());\n\n  return (\n    <div style={wrapperStyles}>\n      <Grid container spacing={2} style={{ marginBottom: 16 }}>\n        <Grid item sm={4} xs={12} style={{ marginTop: 16 }}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"commit-prefix\" style={{ color: gitTheme }}>\n              Commit Prefix\n            </InputLabel>\n            <Select\n              input={<Input id=\"commit-prefix\" />}\n              onChange={handleCommitPrefixSelect}\n              value={commitPrefix}\n            >\n              {getCommitPrefixOptions()}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item sm={4} xs={12} style={{ marginTop: 16 }}>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={finishes}\n                onChange={handleFinishesToggle}\n                value=\"Finishes User Story\"\n              />\n            }\n            label=\"Finishes User Story\"\n          />\n        </Grid>\n        <Grid item sm={4} xs={12} style={{ marginTop: 16 }}>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={hasCommitPrefix}\n                onChange={handleGitCommitToggle}\n                value=\"Add git commit -m\"\n              />\n            }\n            label=\"Add git commit -m\"\n          />\n        </Grid>\n        <Grid item sm={5} xs={10}>\n          <TextField\n            fullWidth\n            InputLabelProps={{ style: { color: gitTheme } }}\n            label=\"Commit Message\"\n            onChange={handleCommitMessageChange}\n            placeholder=\"Summary of Work Done (Message)\"\n            value={commitMessage}\n          />\n        </Grid>\n        <Grid item sm={1} xs={2}>\n          <IconButton\n            onClick={clearCommitMessage}\n            style={marginTopStyles}\n            size=\"large\"\n            aria-label=\"Clear Commit Message\"\n          >\n            <Clear />\n          </IconButton>\n        </Grid>\n        <Grid item sm={5} xs={10}>\n          <TextField\n            fullWidth\n            InputLabelProps={{ style: { color: gitTheme } }}\n            label=\"Commit Description\"\n            multiline\n            onChange={handleCommitDescriptionChange}\n            placeholder=\"Summary of Work Done (Description)\"\n            value={commitDescription}\n          />\n        </Grid>\n        <Grid item sm={1} xs={2}>\n          <IconButton\n            onClick={clearCommitDescription}\n            style={marginTopStyles}\n            size=\"large\"\n            aria-label=\"Clear Commit Description\"\n          >\n            <Clear />\n          </IconButton>\n        </Grid>\n      </Grid>\n      <CopyTextDisplay\n        copyText={commitText}\n        handleCopy={handleCopy}\n        text={displayText}\n      />\n    </div>\n  );\n};\n\nexport default CommitText;\n","import * as React from \"react\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport Input from \"@mui/material/Input\";\nimport Grid from \"@mui/material/Grid\";\nimport { useRecoilValue } from \"recoil\";\nimport gitSelector from \"../../../recoil/git-selector\";\nimport CopyTextDisplay from \"./CopyTextDisplay\";\n\ninterface DeployBranchProps {\n  getSelectOptions: (arr: string[]) => React.ReactNode;\n  gitTheme: string;\n  handleCopy: (text: string) => boolean;\n}\n\nconst DeployBranch: React.FC<DeployBranchProps> = React.memo(\n  (props: DeployBranchProps) => {\n    const branchName = useRecoilValue(gitSelector);\n    const [targetBranch, setTargetBranch] = React.useState(\"test-pipeline\");\n\n    const { gitTheme, handleCopy, getSelectOptions } = props;\n    const handleSelect = (e: SelectChangeEvent): void =>\n      setTargetBranch(e.target.value);\n\n    return (\n      <div style={{ paddingLeft: 20, paddingRight: 20, width: \"100%\" }}>\n        <Grid\n          container\n          spacing={1}\n          style={{ display: \"flex\", alignItems: \"center\" }}\n        >\n          <Grid item sm={3} xs={12} style={{ marginTop: 16 }}>\n            <FormControl fullWidth>\n              <InputLabel htmlFor=\"target-branch\" style={{ color: gitTheme }}>\n                Target Branch\n              </InputLabel>\n              <Select\n                input={<Input id=\"target-branch\" />}\n                onChange={handleSelect}\n                value={targetBranch}\n              >\n                {getSelectOptions([\"test-pipeline\", \"sandbox-pipeline\"])}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item sm={9} xs={12} style={{ marginTop: 16 }}>\n            <CopyTextDisplay\n              handleCopy={handleCopy}\n              text={`git push -f origin ${branchName}:${targetBranch}`}\n            />\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n);\n\nexport default DeployBranch;\n","import * as React from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Typography from \"@mui/material/Typography\";\n\ninterface HeaderProps {\n  gitTheme: string;\n  onIdChange: React.ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n  storyID?: string;\n}\n\nconst validId = /[A-Z]{4}-[a-zA-Z0-9]+/;\n\nconst Header: React.FC<HeaderProps> = React.memo((props: HeaderProps) => {\n  const { onIdChange, storyID, gitTheme } = props;\n\n  const isIdValid = storyID && validId.test(storyID);\n\n  return (\n    <>\n      <Typography variant=\"h2\" component=\"h1\">\n        Git Tools\n      </Typography>\n      <TextField\n        InputLabelProps={{ style: { color: gitTheme } }}\n        label=\"User Story ID\"\n        onChange={onIdChange}\n        placeholder=\"GNAP-12345\"\n        style={{ marginLeft: 20 }}\n        value={storyID}\n        error={!isIdValid}\n      />\n      <br />\n    </>\n  );\n});\n\nexport default Header;\n","import * as React from \"react\";\nimport MenuItem from \"@mui/material/MenuItem\";\n\nexport const validTypingId = /[A-Z]{1,4}-?[a-zA-Z0-9]*/;\n\n/** function to generate select items based of input */\nexport const getSelectOptions = (arr: string[]): React.ReactNode =>\n  arr.map((t, i) => (\n    <MenuItem key={i} value={t}>\n      {t}\n    </MenuItem>\n  ));\n","import * as React from \"react\";\nimport { deepOrange } from \"@mui/material/colors\";\nimport handleCopy from \"copy-to-clipboard\";\nimport { useRecoilState } from \"recoil\";\nimport { storyIdGitAtom } from \"../../../recoil/git-atom\";\nimport BranchName from \"./BranchName\";\nimport CommitText from \"./CommitText\";\nimport DeployBranch from \"./DeployBranch\";\nimport Header from \"./Header\";\nimport ExpandableCard from \"../../common/expandable-card\";\n\nimport { getSelectOptions, validTypingId } from \"./helpers\";\n\nconst gitTheme = deepOrange[900];\n\n/* GitTools  ->  Header\n *          |->  BranchName    -|\n *          |->  CommitText    -|->  CopyTextDisplay\n *          |->  DeployBranch  -|    */\nconst GitTools: React.FC = () => {\n  const [storyID, setStoryId] = useRecoilState(storyIdGitAtom);\n\n  /** function to update text state based on value */\n  const handleIDChange: React.ChangeEventHandler<\n    HTMLInputElement | HTMLTextAreaElement\n  > = (e) => {\n    const [value] = validTypingId.exec(e.target.value) || [\"\"];\n    setStoryId(value);\n  };\n\n  return (\n    <>\n      <Header\n        gitTheme={gitTheme}\n        onIdChange={handleIDChange}\n        storyID={storyID}\n      />\n      <ExpandableCard backgroundColor={gitTheme} title=\"Create Branch Name\">\n        <BranchName\n          getSelectOptions={getSelectOptions}\n          gitTheme={gitTheme}\n          handleCopy={handleCopy}\n        />\n      </ExpandableCard>\n      <ExpandableCard backgroundColor={gitTheme} title=\"Create Commit Message\">\n        <CommitText\n          getSelectOptions={getSelectOptions}\n          gitTheme={gitTheme}\n          handleCopy={handleCopy}\n          storyID={storyID}\n        />\n      </ExpandableCard>\n      <ExpandableCard\n        backgroundColor={gitTheme}\n        title=\"Deploy to Test Pipelines\"\n      >\n        <DeployBranch\n          getSelectOptions={getSelectOptions}\n          gitTheme={gitTheme}\n          handleCopy={handleCopy}\n        />\n      </ExpandableCard>\n    </>\n  );\n};\n\nexport default GitTools;\n","import * as React from \"react\";\n\ntype OpenStateHook = [boolean, () => void, () => void];\n\nconst useOpenState = (defaultVal = false): OpenStateHook => {\n  const [isOpen, setIsOpen] = React.useState(defaultVal);\n\n  const handleOpen = (): void => {\n    setIsOpen(true);\n  };\n  const handleClose = (): void => {\n    setIsOpen(false);\n  };\n\n  return [isOpen, handleOpen, handleClose];\n};\n\nexport default useOpenState;\n"],"names":["cardStyles","marginTop","overflow","headerStyles","borderRadius","marginLeft","marginRight","position","top","props","useToggleState","expanded","toggleExpanded","palette","useTheme","inverted","title","subtitle","children","backgroundColor","headerStyle","primary","dark","mode","boxShadow","grey","expandedHeaderStyle","marginBottom","titleStyle","color","contrastText","titleJSX","Typography","style","subtitleJSX","variant","Card","CardHeader","onClick","subheader","Collapse","in","timeout","unmountOnExit","CardContent","Grid","container","spacing","overflowY","branchPrefixes","casePreferences","gitAtom","atom","key","default","JSON","parse","localStorage","getItem","branchMessage","branchPrefix","casePreference","effects","onSet","state","setItem","stringify","storyIdGitAtom","commitPrefixGitAtom","selector","get","storyID","prefix","msg","snakeCase","kebabCase","camelCase","chipStyles","height","paddingTop","paddingBottom","useOpenState","isOpen","handleOpen","handleClose","handleCopy","copyText","text","handleCopyText","React","Chip","label","Snackbar","action","IconButton","size","Close","autoHideDuration","message","onClose","open","wrapperStyles","paddingLeft","paddingRight","width","topSpacing","useRecoilState","setState","branchName","useRecoilValue","gitSelector","getSelectOptions","gitTheme","gitThemeStyles","item","sm","xs","FormControl","fullWidth","InputLabel","htmlFor","Select","input","Input","id","onChange","e","newBranchPrefix","target","value","MenuItem","newCasePreference","TextField","InputLabelProps","multiline","placeholder","Clear","hasCommitPrefix","commitPrefix","setLocalCommitPrefix","commitMessage","setCommitMessage","commitDescription","setCommitDescription","finishes","setFinishes","getCommitText","desc","postfix","gitMessage","handleCommitPrefixSelect","handleCommitMessageChange","handleCommitDescriptionChange","clearCommitMessage","clearCommitDescription","handleFinishesToggle","_e","isC","marginTopStyles","setHasCommitPrefix","useCommitText","getCommitPrefixOptions","commitText","displayText","nl2br","FormControlLabel","control","Switch","checked","DeployBranch","targetBranch","setTargetBranch","display","alignItems","validId","Header","onIdChange","isIdValid","test","component","error","validTypingId","arr","map","t","i","deepOrange","setStoryId","exec","defaultVal","setIsOpen"],"sourceRoot":""}