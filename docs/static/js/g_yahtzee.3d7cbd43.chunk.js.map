{"version":3,"file":"static/js/g_yahtzee.3d7cbd43.chunk.js","mappings":"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","sources":["components/common/info-popover/InfoPopup.tsx","apis/Dice.ts","components/games/yahtzee/score-table/Header.tsx","components/games/yahtzee/score-table/TopScores.tsx","components/games/yahtzee/score-table/TopTable.tsx","components/games/yahtzee/types.ts","components/games/yahtzee/score-table/scoreTableHelper.ts","components/games/yahtzee/score-table/BottomScores.tsx","components/games/yahtzee/score-table/BottomTable.tsx","components/games/yahtzee/score-table/ScoreTable.tsx","components/games/yahtzee/ScoreGraph.tsx","components/games/yahtzee/Header.tsx","components/games/yahtzee/TableHeader.tsx","recoil/yahtzee-atom.ts","components/games/yahtzee/use-yahtzee-state.ts","recoil/yahtzee-selector.ts","components/games/yahtzee/Yahtzee.tsx","hooks/useOpenState.ts"],"sourcesContent":["import React from \"react\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport Button from \"@mui/material/Button\";\nimport useOpenState from \"../../../hooks/useOpenState\";\n\ninterface InfoPopupProps {\n  /** popup content */\n  children: React.ReactNode | React.ReactNodeArray;\n  /** title content */\n  title: string | React.ReactElement;\n  /** button content */\n  buttonText?: string | React.ReactElement;\n}\n\nconst InfoPopup = (props: InfoPopupProps): React.ReactElement => {\n  const [isOpen, handleOpen, handleClose] = useOpenState();\n  const { buttonText, title, children } = props;\n\n  return (\n    <>\n      <Button\n        color=\"primary\"\n        onClick={handleOpen as React.MouseEventHandler}\n        variant=\"contained\"\n      >\n        {buttonText || title}\n      </Button>\n      <Dialog\n        title=\"info-popup\"\n        onClose={handleClose as React.MouseEventHandler}\n        open={isOpen}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>{title}</DialogTitle>\n        <DialogContent>{children}</DialogContent>\n        <DialogActions>\n          <Button\n            color=\"primary\"\n            onClick={handleClose as React.MouseEventHandler}\n          >\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default InfoPopup;\n","import { Dice } from \"../recoil/yahtzee-atom\";\n\nexport const diceRoller = (): Dice =>\n  (Math.floor(Math.random() * 6) + 1) as Dice;\n\nexport default {\n  // randomize order of the cards\n  roll(): Dice {\n    return diceRoller();\n  },\n};\n\n// Dice as a react hook, seems kind of like an anti-pattern\nexport function useDice(): () => number {\n  function rollDice(): number {\n    return diceRoller();\n  }\n\n  return rollDice;\n}\n","import React from \"react\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\n\ninterface HeaderProps {\n  style: React.CSSProperties;\n}\n\nconst Header: React.FC<HeaderProps> = React.memo((props: HeaderProps) => (\n  <TableHead>\n    <TableRow>\n      <TableCell>Minimum Required for Bonus</TableCell>\n      <TableCell>How to Score</TableCell>\n      <TableCell style={props.style}>Game Score</TableCell>\n    </TableRow>\n  </TableHead>\n));\n\nexport default Header;\n","import React from \"react\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\n\ninterface TopScoresProps {\n  finalTopSum: number;\n  topSum: number;\n  style: React.CSSProperties;\n}\n\nconst TopScores: React.FC<TopScoresProps> = React.memo(\n  ({ topSum, finalTopSum, style }: TopScoresProps) => (\n    <>\n      <TableRow>\n        <TableCell colSpan={2}>Total == 63</TableCell>\n        <TableCell style={style}>{topSum}</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>Bonus if &gt;= 63</TableCell>\n        <TableCell>Score 35</TableCell>\n        <TableCell style={style}>{topSum >= 63 ? 35 : 0}</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell colSpan={2}>Upper Half Total</TableCell>\n        <TableCell style={style}>{finalTopSum}</TableCell>\n      </TableRow>\n      <TableRow />\n    </>\n  )\n);\n\nexport default TopScores;\n","import React from \"react\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { TopGameScore } from \"../types\";\nimport { Dice } from \"../../../../recoil/yahtzee-atom\";\nimport TopScores from \"./TopScores\";\n\ninterface TopTableProps {\n  finalTopSum: number;\n  getScoreButton: (\n    showButton: boolean,\n    points: number,\n    wasTop: boolean,\n    i: number\n  ) => React.ReactNode;\n  showScoreButtons: boolean;\n  style: React.CSSProperties;\n  top: TopGameScore[];\n  topSum: number;\n  values: Dice[];\n}\n\nconst TopTable: React.FC<TopTableProps> = (props: TopTableProps) => {\n  const { values, showScoreButtons, getScoreButton, top, style } = props;\n\n  const getButtonInfo = React.useCallback(\n    (d: number): [number, number] =>\n      values.reduce(\n        (count, val) => {\n          if (val === d) {\n            count[0] += 1;\n            count[1] += d;\n          }\n          return count;\n        },\n        [0, 0]\n      ),\n    [values]\n  );\n\n  const getTopTableButtons = React.useCallback(\n    (\n      score: number,\n      showButton: boolean,\n      sum: number,\n      i: number\n    ): React.ReactNode | null => {\n      if (score >= 0) {\n        return score;\n      }\n      return showScoreButtons ? getScoreButton(showButton, sum, true, i) : null;\n    },\n    [getScoreButton, showScoreButtons]\n  );\n\n  const generateTopTable = React.useCallback(\n    (): React.ReactNode =>\n      top.map(({ name, score }, i) => {\n        const d = i + 1;\n        const [count, sum] = getButtonInfo(i + 1);\n        const showButton = count >= 1;\n\n        return (\n          <TableRow key={name}>\n            <TableCell>{`${name}: ${d},${d},${d} = ${d * 3}`}</TableCell>\n            <TableCell>{`Add Only ${name}`}</TableCell>\n            <TableCell style={style}>\n              {getTopTableButtons(score, showButton, sum, i)}\n            </TableCell>\n          </TableRow>\n        );\n      }),\n    [getButtonInfo, getTopTableButtons, style, top]\n  );\n\n  const { topSum, finalTopSum } = props;\n\n  return (\n    <>\n      {generateTopTable()}\n      <TopScores topSum={topSum} finalTopSum={finalTopSum} style={style} />\n    </>\n  );\n};\n\nexport default TopTable;\n","export const ADD_DICE = \"Sum of Dice\";\ntype AddDice = \"Sum of Dice\";\n\nexport interface TopGameScore {\n  name: string;\n  score: number;\n}\nexport interface BottomGameScore {\n  name: string;\n  score: number;\n  hint: string;\n  points: number | AddDice;\n}\n\nexport default ADD_DICE;\n","import { TopGameScore } from \"../types\";\nimport { Dice } from \"../../../../recoil/yahtzee-atom\";\n\ninterface DiceHistogram {\n  0?: number;\n  1: number;\n  2: number;\n  3: number;\n  4: number;\n  5: number;\n  6: number;\n}\n\nexport const getHistogram =\n  () =>\n  (hist: DiceHistogram, val: Dice): DiceHistogram => {\n    if (!hist[val]) {\n      hist[val] = 1;\n    } else {\n      hist[val] += 1;\n    }\n    return hist;\n  };\n\nexport const hasXDice = (values: Dice[], n: number): boolean => {\n  const hist = values.reduce(getHistogram(), {} as DiceHistogram);\n  let hasDice = false;\n  Object.values(hist).forEach((value) => {\n    if (value >= n) {\n      hasDice = true;\n    }\n  });\n  return hasDice;\n};\n\nexport const isFullHouse = (values: Dice[]): boolean => {\n  const hist = values.reduce(getHistogram(), {} as DiceHistogram);\n\n  let has3 = false;\n  let has2 = false;\n\n  Object.values(hist).forEach((value) => {\n    if (value >= 3) {\n      has3 = true;\n    } else if (value >= 2) {\n      has2 = true;\n    }\n  });\n\n  return has3 && has2;\n};\n\nexport const isStraight = (values: Dice[], length: number): boolean => {\n  const hist = values.reduce(getHistogram(), {} as DiceHistogram);\n\n  let count = 0;\n  const dice: Dice[] = [1, 2, 3, 4, 5, 6];\n  dice.forEach((i: Dice) => {\n    if (count < length) {\n      const value = hist[i];\n      if (!value) {\n        count = 0;\n      } else {\n        count += 1;\n      }\n    }\n  });\n  return count >= length;\n};\n\nexport const canYahtzeeBonus = (values: Dice[], top: TopGameScore[]): boolean =>\n  Object.entries(values.reduce(getHistogram(), {} as DiceHistogram)).reduce(\n    (acc: boolean, [key, value]) => {\n      if (value === 5 && top[Number(key) - 1].score >= 0) {\n        return true;\n      }\n      return acc;\n    },\n    false\n  );\n","import React from \"react\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\n\ninterface BottomScoresProps {\n  bottomSum: number;\n  finalTopSum: number;\n  style: React.CSSProperties;\n}\n\nconst BottomScores: React.FC<BottomScoresProps> = React.memo(\n  ({ finalTopSum, bottomSum, style }: BottomScoresProps) => (\n    <>\n      <TableRow>\n        <TableCell colSpan={2}>Lower Half Total</TableCell>\n        <TableCell style={style}>{bottomSum}</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell colSpan={2}>Upper Half Total</TableCell>\n        <TableCell style={style}>{finalTopSum}</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell colSpan={2}>Grand Total</TableCell>\n        <TableCell style={style}>{finalTopSum + bottomSum}</TableCell>\n      </TableRow>\n    </>\n  )\n);\n\nexport default BottomScores;\n","import React from \"react\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { TopGameScore, BottomGameScore, ADD_DICE } from \"../types\";\nimport { Dice } from \"../../../../recoil/yahtzee-atom\";\nimport {\n  hasXDice,\n  isFullHouse,\n  isStraight,\n  canYahtzeeBonus,\n} from \"./scoreTableHelper\";\nimport BottomScores from \"./BottomScores\";\n\ninterface BottomTableProps {\n  bottom: BottomGameScore[];\n  bottomSum: number;\n  finalTopSum: number;\n  getScoreButton: (\n    showButton: boolean,\n    points: number,\n    wasTop: boolean,\n    i: number\n  ) => React.ReactNode;\n  showScoreButtons: boolean;\n  style: React.CSSProperties;\n  top: TopGameScore[];\n  values: Dice[];\n}\n\nconst getDiceValue = (values: Dice[]): number =>\n  values.reduce((sum: number, d) => sum + d, 0);\n\nconst showButton = (i: number, values: Dice[]): boolean => {\n  switch (i) {\n    case 0: // 3 of a kind\n      return hasXDice(values, 3);\n    case 1: // 4 of a kind\n      return hasXDice(values, 4);\n    case 2: // Full House\n      return isFullHouse(values);\n    case 3: // Sm. Straight\n      return isStraight(values, 4);\n    case 4: // Lg. Straight\n      return isStraight(values, 5);\n    case 5: // Yahtzee\n      return hasXDice(values, 5);\n    case 6: // Chance\n      return true;\n    default:\n      // eslint-disable-next-line no-console\n      console.error(\"Unexpected Value\");\n      return false;\n  }\n};\n\nconst BottomTable: React.FC<BottomTableProps> = (props: BottomTableProps) => {\n  const { values, showScoreButtons, getScoreButton, top } = props;\n  const getBottomTableButtons = React.useCallback(\n    (\n      score: number,\n      points: number,\n      hasYahtzee: boolean,\n      i: number\n    ): React.ReactNode | null => {\n      if (score >= 0) {\n        return score;\n      }\n      if (showScoreButtons) {\n        // Yahtzee Bonus\n        if (hasYahtzee) {\n          if (canYahtzeeBonus(values, top)) {\n            return getScoreButton(true, points + 100, false, i);\n          }\n        }\n        return getScoreButton(showButton(i, values), points, false, i);\n      }\n      return null;\n    },\n    [getScoreButton, showScoreButtons, top, values]\n  );\n\n  const { bottom, style } = props;\n  const generateBottomTable = React.useCallback((): React.ReactNode => {\n    const hasYahtzee = bottom[5].score > 0;\n    return bottom.map((gameScore, i) => {\n      const { name, hint, points, score } = gameScore;\n\n      const parsedPoints = points === ADD_DICE ? getDiceValue(values) : points;\n\n      return (\n        <TableRow key={name}>\n          <TableCell>{name}</TableCell>\n          <TableCell>{hint}</TableCell>\n          <TableCell style={style}>\n            {getBottomTableButtons(score, parsedPoints, hasYahtzee, i)}\n          </TableCell>\n        </TableRow>\n      );\n    });\n  }, [bottom, getBottomTableButtons, style, values]);\n\n  const { finalTopSum, bottomSum } = props;\n\n  return (\n    <>\n      {generateBottomTable()}\n      <BottomScores\n        bottomSum={bottomSum}\n        finalTopSum={finalTopSum}\n        style={style}\n      />\n    </>\n  );\n};\n\nexport default BottomTable;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport { TopGameScore, BottomGameScore } from \"../types\";\nimport { Dice } from \"../../../../recoil/yahtzee-atom\";\nimport Header from \"./Header\";\nimport TopTable from \"./TopTable\";\nimport BottomTable from \"./BottomTable\";\n\ninterface ScoreTableProps {\n  bottom: BottomGameScore[];\n  bottomSum: number;\n  finalTopSum: number;\n  onTopScore: (points: number, i: number) => void;\n  onBottomScore: (points: number, i: number) => void;\n  showScoreButtons: boolean;\n  top: TopGameScore[];\n  topSum: number;\n  values: Dice[];\n}\n\nconst centerStyle: React.CSSProperties = { textAlign: \"center\" };\n\nconst ScoreTable: React.FC<ScoreTableProps> = (props: ScoreTableProps) => {\n  const {\n    bottom,\n    bottomSum,\n    finalTopSum,\n    showScoreButtons,\n    top,\n    topSum,\n    values,\n    onTopScore,\n    onBottomScore,\n  } = props;\n\n  const getScoreButton = React.useCallback(\n    (\n      showButton: boolean,\n      points: number,\n      wasTop: boolean,\n      i: number\n    ): React.ReactNode =>\n      showButton ? (\n        <Button\n          color=\"primary\"\n          variant=\"outlined\"\n          onClick={\n            wasTop\n              ? (): void => onTopScore(points, i)\n              : (): void => onBottomScore(points, i)\n          }\n        >\n          {`Add ${points} Points`}\n        </Button>\n      ) : (\n        <Button\n          color=\"primary\"\n          variant=\"outlined\"\n          onClick={\n            wasTop\n              ? (): void => onTopScore(0, i)\n              : (): void => onBottomScore(0, i)\n          }\n        >\n          0\n        </Button>\n      ),\n    [onBottomScore, onTopScore]\n  );\n\n  return (\n    <Table size=\"small\">\n      <Header style={centerStyle} />\n      <TableBody>\n        <TopTable\n          finalTopSum={finalTopSum}\n          getScoreButton={getScoreButton}\n          showScoreButtons={showScoreButtons}\n          style={centerStyle}\n          top={top}\n          values={values}\n          topSum={topSum}\n        />\n        <BottomTable\n          finalTopSum={finalTopSum}\n          getScoreButton={getScoreButton}\n          showScoreButtons={showScoreButtons}\n          style={centerStyle}\n          top={top}\n          values={values}\n          bottom={bottom}\n          bottomSum={bottomSum}\n        />\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default ScoreTable;\n","import React from \"react\";\nimport maxBy from \"lodash/maxBy\";\nimport {\n  ResponsiveContainer,\n  XAxis,\n  YAxis,\n  Tooltip,\n  AreaChart,\n  Area,\n} from \"recharts\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { Typography } from \"@mui/material\";\nimport InfoPopup from \"../../common/info-popover/InfoPopup\";\n\ninterface ScoreGraphProps {\n  scores: number[];\n}\ninterface ScoreGraphEntry {\n  value: number;\n}\n\nconst generateScoreGraph = (scores: number[]): ScoreGraphEntry[] =>\n  scores.map((value) => ({ value }));\n\nconst ScoreGraph: React.FC<ScoreGraphProps> = (props: ScoreGraphProps) => {\n  const {\n    palette: {\n      secondary: { main },\n    },\n  } = useTheme();\n  const { scores: dBScores } = props;\n\n  const scores = React.useMemo(() => generateScoreGraph(dBScores), [dBScores]);\n  const recent = scores[scores.length - 1] || { value: 0 };\n  const mostRecent = recent.value;\n  const top = maxBy(scores, \"value\") || { value: 0 };\n  const topScore = top.value;\n\n  return (\n    <InfoPopup title=\"Yahtzee Score History\" buttonText=\"Score History\">\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <AreaChart data={scores}>\n          <defs>\n            <linearGradient id=\"mainColor\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"20%\" stopColor={main} stopOpacity={0.8} />\n              <stop offset=\"100%\" stopColor={main} stopOpacity={0} />\n            </linearGradient>\n          </defs>\n          <XAxis dataKey=\"name\" interval=\"preserveStartEnd\" />\n          <YAxis width={40} orientation=\"right\" tickLine={false} />\n          <Tooltip />\n          <Area\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke={main}\n            fillOpacity={1}\n            fill=\"url(#mainColor)\"\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n      <Typography variant=\"h4\">{`Most Recent: ${mostRecent}`}</Typography>\n      <Typography variant=\"h4\">{`Top Score: ${topScore}`}</Typography>\n    </InfoPopup>\n  );\n};\n\nexport default ScoreGraph;\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport ScoreGraph from \"./ScoreGraph\";\n\ninterface HeaderProps {\n  scores: number[];\n}\n\nconst Header: React.FC<HeaderProps> = ({ scores }: HeaderProps) => (\n  <div className=\"flex-container\">\n    <Typography variant=\"h2\">Yahtzee</Typography>\n    <ScoreGraph scores={scores} />\n  </div>\n);\n\nexport default Header;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport { Dice } from \"../../../recoil/yahtzee-atom\";\n\ninterface TableHeaderProps {\n  roll: Dice;\n  values: Dice[];\n  saved: Dice[];\n  handleUnsave: (i: number) => void;\n  handleSave: (i: number) => void;\n  handleDiceRoll: React.MouseEventHandler;\n  getButtonText: (roll: Dice) => string;\n}\n\nconst wrapperStyles: React.CSSProperties = {\n  display: \"block\",\n  margin: \"auto\",\n  width: 320,\n};\n\nconst TableHeader: React.FC<TableHeaderProps> = (props: TableHeaderProps) => {\n  const {\n    values,\n    saved,\n    roll,\n    handleUnsave,\n    handleSave,\n    handleDiceRoll,\n    getButtonText,\n  } = props;\n\n  return (\n    <div className=\"flex-container\">\n      <Typography variant=\"h4\">{`Roll #${roll}/3`}</Typography>\n      <div style={wrapperStyles}>\n        {saved.map((val, i) => (\n          <Button\n            color=\"secondary\"\n            onClick={(): void => handleUnsave(i)}\n            variant=\"outlined\"\n            key={i}\n          >\n            {val}\n          </Button>\n        ))}\n        {values.map((val, i) => (\n          <Button\n            color=\"primary\"\n            onClick={(): void => handleSave(i)}\n            variant=\"outlined\"\n            key={i}\n          >\n            {val}\n          </Button>\n        ))}\n      </div>\n      <Button\n        color=\"primary\"\n        onClick={handleDiceRoll}\n        variant=\"contained\"\n        disabled={roll === 3}\n      >\n        {getButtonText(roll)}\n      </Button>\n    </div>\n  );\n};\n\nexport default TableHeader;\n","import { atom } from \"recoil\";\n\nexport const dice = [0, 1, 2, 3, 4, 5, 6] as const;\nexport type Dice = typeof dice[number];\nexport interface YahtzeeState {\n  roll: Dice;\n  values: Dice[];\n  saved: Dice[];\n  turn: number;\n  showScoreButtons: boolean;\n  topScores: number[];\n  bottomScores: number[];\n  scores: number[];\n}\n\nexport const newYahtzee = (): Omit<YahtzeeState, \"scores\"> => ({\n  roll: 0,\n  values: [0, 0, 0, 0, 0],\n  saved: [],\n  turn: 0,\n  showScoreButtons: false,\n  topScores: [-1, -1, -1, -1, -1, -1],\n  bottomScores: [-1, -1, -1, -1, -1, -1, -1],\n});\n\nconst yahtzeeAtom = atom({\n  key: \"yahtzeeAtom\",\n  default: (JSON.parse(\n    localStorage.getItem(\"yahtzee-atom\") || \"null\"\n  ) as YahtzeeState) || { ...newYahtzee(), scores: [] },\n  effects: [\n    ({ onSet }) => {\n      onSet((newState) => {\n        localStorage.setItem(\"yahtzee-atom\", JSON.stringify(newState));\n      });\n    },\n  ],\n});\n\nexport default yahtzeeAtom;\n","import { useRecoilState } from \"recoil\";\nimport yahtzeeAtom, { newYahtzee, Dice } from \"../../../recoil/yahtzee-atom\";\n\nconst useYahtzeeState = () => {\n  const [state, setState] = useRecoilState(yahtzeeAtom);\n\n  const newGame = (score: number) =>\n    setState({ ...newYahtzee(), scores: [...state.scores, score] });\n  const diceClick = (values: Dice[], saved: Dice[]) =>\n    setState({\n      ...state,\n      values,\n      saved,\n    });\n  const updateTop = (topScores: number[]) =>\n    setState({\n      ...state,\n      topScores,\n      showScoreButtons: false,\n      roll: 0,\n      values: [0, 0, 0, 0, 0],\n      saved: [],\n    });\n  const updateBottom = (bottomScores: number[]) =>\n    setState({\n      ...state,\n      bottomScores,\n      showScoreButtons: false,\n      roll: 0,\n      values: [0, 0, 0, 0, 0],\n      saved: [],\n    });\n  const updateRoll = (values: Dice[], saved: Dice[], roll: Dice) =>\n    setState({\n      ...state,\n      values,\n      saved,\n      roll,\n      showScoreButtons: true,\n    });\n\n  return {\n    state,\n    newGame,\n    diceClick,\n    updateTop,\n    updateBottom,\n    updateRoll,\n  };\n};\n\nexport default useYahtzeeState;\n","import { selector } from \"recoil\";\nimport yahtzeeAtom from \"./yahtzee-atom\";\n\nconst sumsYahtzeeSelector = selector({\n  key: \"sumsYahtzeeSelector\",\n  get: ({ get }) => {\n    const { topScores, bottomScores } = get(yahtzeeAtom);\n\n    let count = 0;\n\n    const topSum = topScores.reduce((sum, score) => {\n      if (score >= 0) {\n        count += 1;\n        sum += score;\n      }\n      return sum;\n    }, 0);\n\n    const bottomSum = bottomScores.reduce((sum, score) => {\n      if (score >= 0) {\n        count += 1;\n        sum += score;\n      }\n      return sum;\n    }, 0);\n\n    let finalTopSum = topSum;\n    if (topSum >= 63) {\n      finalTopSum += 35;\n    }\n\n    const finish = count >= 13;\n\n    return {\n      topSum,\n      bottomSum,\n      finalTopSum,\n      finish,\n    };\n  },\n});\n\nexport default sumsYahtzeeSelector;\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { useRecoilValue } from \"recoil\";\nimport DiceAPI from \"../../../apis/Dice\";\nimport ScoreTable from \"./score-table/ScoreTable\";\nimport { ADD_DICE, BottomGameScore } from \"./types\";\nimport Header from \"./Header\";\nimport TableHeader from \"./TableHeader\";\nimport { Dice } from \"../../../recoil/yahtzee-atom\";\nimport useYahtzeeState from \"./use-yahtzee-state\";\nimport yahtzeeSelector from \"../../../recoil/yahtzee-selector\";\n\nconst topConstants = [\n  { name: \"Aces\" },\n  { name: \"Twos\" },\n  { name: \"Threes\" },\n  { name: \"Fours\" },\n  { name: \"Fives\" },\n  { name: \"Sixes\" },\n];\nconst bottomConstants = [\n  { name: \"3 of a kind\", hint: ADD_DICE, points: ADD_DICE },\n  { name: \"4 of a kind\", hint: ADD_DICE, points: ADD_DICE },\n  { name: \"Full House\", hint: \"Score 25\", points: 25 },\n  { name: \"Sm. Straight (4)\", hint: \"Score 30\", points: 30 },\n  { name: \"Lg. Straight (5)\", hint: \"Score 40\", points: 40 },\n  { name: \"Yahtzee\", hint: \"Score 50\", points: 50 },\n  { name: \"Chance\", hint: ADD_DICE, points: ADD_DICE },\n];\n\nconst Yahtzee: React.FC = () => {\n  const { state, diceClick, newGame, updateTop, updateBottom, updateRoll } =\n    useYahtzeeState();\n\n  const {\n    topScores,\n    bottomScores,\n    values,\n    saved,\n    roll,\n    showScoreButtons,\n    scores,\n  } = state;\n\n  const { topSum, bottomSum, finalTopSum, finish } =\n    useRecoilValue(yahtzeeSelector);\n\n  const newYGame = (): void => {\n    console.log(finalTopSum + bottomSum);\n    newGame(finalTopSum + bottomSum);\n  };\n\n  const handleDiceRoll = (): void => {\n    if (finish) {\n      newYGame();\n      return;\n    }\n    if (roll >= 3) {\n      return;\n    }\n\n    const newValues = [...values];\n    const newSaved = [...saved];\n\n    for (let i = 0; i < newValues.length; i += 1) {\n      newValues[i] = DiceAPI.roll();\n    }\n    newValues.sort();\n    newSaved.sort();\n    updateRoll(newValues, newSaved, (roll + 1) as Dice);\n  };\n\n  const handleSave = (i: number): void => {\n    if (values[i] === 0) {\n      return;\n    }\n    const newValues = [...values];\n    const newSaved = [...saved];\n    newSaved.push(newValues.splice(i, 1)[0]);\n    newSaved.sort();\n    diceClick(newValues, newSaved);\n  };\n\n  const handleUnsave = (i: number): void => {\n    const newValues = [...values];\n    const newSaved = [...saved];\n    newValues.push(newSaved.splice(i, 1)[0]);\n    newValues.sort();\n    diceClick(newValues, newSaved);\n  };\n\n  const getButtonText = React.useCallback(\n    (rollNum: Dice): string => {\n      if (finish) {\n        return \"New Game\";\n      }\n\n      switch (rollNum) {\n        case 0:\n          return \"First Roll\";\n        case 1:\n          return \"Second Roll\";\n        case 2:\n          return \"Last Roll\";\n        case 3:\n          return \"Score\";\n        default:\n          return \"Error\";\n      }\n    },\n    [finish]\n  );\n\n  const handleTopScore = (points: number, i: number): void => {\n    const newTopScores = [...topScores];\n    newTopScores[i] = points;\n    updateTop(newTopScores);\n  };\n\n  const handleBottomScore = (points: number, i: number): void => {\n    const newBottomScores = [...bottomScores];\n    newBottomScores[i] = points;\n    updateBottom(newBottomScores);\n  };\n\n  const top = topScores.map((score, i) => ({ ...topConstants[i], score }));\n  const bottom = bottomScores.map((score, i) => ({\n    ...bottomConstants[i],\n    score,\n  })) as BottomGameScore[];\n\n  return (\n    <>\n      <Header scores={scores} />\n      <hr />\n      <TableHeader\n        values={values}\n        saved={saved}\n        roll={roll}\n        handleUnsave={handleUnsave}\n        handleSave={handleSave}\n        handleDiceRoll={handleDiceRoll}\n        getButtonText={getButtonText}\n      />\n      <hr />\n      <Typography variant=\"h4\">{`Total: ${\n        finalTopSum + bottomSum\n      }`}</Typography>\n      <ScoreTable\n        values={[...saved, ...values]}\n        bottom={bottom}\n        top={top}\n        onTopScore={handleTopScore}\n        onBottomScore={handleBottomScore}\n        showScoreButtons={showScoreButtons}\n        topSum={topSum}\n        finalTopSum={finalTopSum}\n        bottomSum={bottomSum}\n      />\n    </>\n  );\n};\n\nexport default Yahtzee;\n","import React from \"react\";\n\ntype OpenStateHook = [boolean, () => void, () => void];\n\nconst useOpenState = (defaultVal = false): OpenStateHook => {\n  const [isOpen, setIsOpen] = React.useState(defaultVal);\n\n  const handleOpen = (): void => {\n    setIsOpen(true);\n  };\n  const handleClose = (): void => {\n    setIsOpen(false);\n  };\n\n  return [isOpen, handleOpen, handleClose];\n};\n\nexport default useOpenState;\n"],"names":["props","useOpenState","isOpen","handleOpen","handleClose","buttonText","title","children","color","onClick","variant","onClose","open","maxWidth","fullWidth","diceRoller","Math","floor","random","React","TableHead","TableRow","TableCell","style","topSum","finalTopSum","colSpan","values","showScoreButtons","getScoreButton","top","getButtonInfo","d","reduce","count","val","getTopTableButtons","score","showButton","sum","i","generateTopTable","map","name","ADD_DICE","hasXDice","n","hist","hasDice","Object","forEach","value","isStraight","length","bottomSum","has3","has2","isFullHouse","console","error","getBottomTableButtons","points","hasYahtzee","entries","acc","key","Number","canYahtzeeBonus","bottom","generateBottomTable","gameScore","hint","parsedPoints","getDiceValue","centerStyle","textAlign","onTopScore","onBottomScore","wasTop","Button","Table","size","TableBody","main","useTheme","palette","secondary","dBScores","scores","generateScoreGraph","mostRecent","topScore","maxBy","InfoPopup","ResponsiveContainer","width","height","AreaChart","data","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","XAxis","dataKey","interval","YAxis","orientation","tickLine","Tooltip","Area","type","stroke","fillOpacity","fill","Typography","className","wrapperStyles","display","margin","saved","roll","handleUnsave","handleSave","handleDiceRoll","getButtonText","disabled","atom","default","JSON","parse","localStorage","getItem","turn","topScores","bottomScores","effects","onSet","newState","setItem","stringify","useRecoilState","yahtzeeAtom","state","setState","newGame","diceClick","updateTop","updateBottom","updateRoll","selector","get","finish","topConstants","bottomConstants","useYahtzeeState","useRecoilValue","yahtzeeSelector","rollNum","newValues","newSaved","push","splice","sort","log","DiceAPI","newTopScores","newBottomScores","defaultVal","setIsOpen"],"sourceRoot":""}