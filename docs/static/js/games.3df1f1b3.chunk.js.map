{"version":3,"sources":["hooks/useToggle.ts","apis/noop.ts","helpers/lazyWithPreload.ts","hooks/useAnchorEl.ts","components/common/header/ButtonPopover.tsx","components/common/header/PlayerMenu.tsx","components/common/header/TopBar.tsx","components/common/header/Header.tsx","components/games/Menu.tsx","components/games/Routes.tsx"],"names":["useToggleState","defaultVal","React","useState","isToggled","setIsToggled","handleToggle","lazyWithPreload","ComponentPromise","lazy","useAnchorEl","anchorEl","setAnchorEl","setAnchor","e","currentTarget","clearAnchor","contentStyle","padding","ButtonPopover","props","children","buttonText","open","Boolean","Button","aria-haspopup","variant","component","onClick","Popover","id","onClose","anchorOrigin","vertical","horizontal","transformOrigin","title","style","namePadStyles","maxWidth","width","display","margin","PlayerMenu","players","useSelector","state","dispatch","useDispatch","isBot","useMemo","map","a","useCallback","isChecked","updateBot","handleBlur","updateName","target","value","handleKeyPress","key","Grid","container","spacing","item","xs","Typography","p","i","TextField","defaultValue","name","onBlur","onKeyPress","placeholder","Switch","checked","color","onChange","_e","isC","disabled","cursorStyles","cursor","flexLeftStyles","alignItems","flexRightStyles","marginRight","spanTopStyles","left","right","top","TopBar","theme","type","setChecked","toggleTheme","displayDarkTheme","displayLightTheme","toggleOpen","showPlayers","fontColor","iconColor","AppBar","className","Toolbar","disableGutters","IconButton","aria-label","memo","Header","isOpen","setIsOpen","useTheme","palette","handleNav","noop","handleNavigation","loc","Drawer","position","Menu","onItemClick","menu","route","divider","index","Divider","MenuItem","home","GameHome","BlackJack","Connect4","DealOrNoDeal","Poker","Slots","TicTacToe","Yahtzee","Routes","url","match","paths","reduce","acc","obj","path","push","exact","from","to","Suspense","fallback"],"mappings":"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","file":"static/js/games.3df1f1b3.chunk.js","sourcesContent":["import React from 'react';\n\ntype ToggleStateHook = [ boolean, React.MouseEventHandler, React.Dispatch<React.SetStateAction<boolean>> ];\n\nconst useToggleState = (defaultVal = false): ToggleStateHook => {\n  const [isToggled, setIsToggled] = React.useState(defaultVal);\n\n  const handleToggle = (): void => { setIsToggled(!isToggled); };\n\n  return [isToggled, handleToggle, setIsToggled];\n};\n\nexport default useToggleState;\n","export default (): void => { /* do nothing */ };\n","import React from 'react';\n\ntype ImportPromise = Promise<{ default: React.ComponentType }>;\ntype LazyComponent = React.LazyExoticComponent<React.ComponentType>;\n\nexport default function lazyWithPreload(ComponentPromise: ImportPromise): LazyComponent {\n  return React.lazy(() => ComponentPromise);\n}\n","import React from 'react';\n\ninterface AnchorElHook {\n  anchorEl: null | HTMLElement;\n  setAnchor: React.MouseEventHandler;\n  clearAnchor: React.MouseEventHandler;\n}\n\nconst useAnchorEl = (): AnchorElHook => {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const setAnchor = (e: React.MouseEvent<HTMLButtonElement>): void => {\n    setAnchorEl(e.currentTarget);\n  };\n  const clearAnchor = (): void => {\n    setAnchorEl(null);\n  };\n  return { anchorEl, setAnchor, clearAnchor };\n};\n\nexport default useAnchorEl;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Popover from '@material-ui/core/Popover';\nimport useAnchorEl from '../../../hooks/useAnchorEl';\n\ninterface ButtonPopoverProps {\n  children: React.ReactElement;\n  buttonText: string;\n}\n\nconst contentStyle: React.CSSProperties = { padding: 15 };\n\nconst ButtonPopover = (props: ButtonPopoverProps): React.ReactElement => {\n  const { anchorEl, setAnchor, clearAnchor } = useAnchorEl();\n  const { children, buttonText } = props;\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <Button\n        aria-haspopup=\"true\"\n        variant=\"contained\"\n        component=\"button\"\n        onClick={setAnchor}\n      >\n        {buttonText}\n      </Button>\n      <Popover\n        id=\"player-popover\"\n        open={open}\n        anchorEl={anchorEl}\n        onClose={clearAnchor}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'center' }}\n        title=\"player-popover\"\n      >\n        <div style={contentStyle}>\n          {children}\n        </div>\n      </Popover>\n    </>\n  );\n};\n\nexport default ButtonPopover;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Switch from '@material-ui/core/Switch';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { updateName, updateBot } from '../../../store/modules/players';\nimport { DBRootState } from '../../../store/types';\n\nconst namePadStyles: React.CSSProperties = {\n  maxWidth: '420px',\n  width: '100%',\n  display: 'block',\n  margin: 'auto',\n};\n\nconst PlayerMenu: React.FC = () => {\n  const players = useSelector((state: DBRootState) => state.players);\n  const dispatch = useDispatch();\n\n  const isBot = React.useMemo(() => players.map((a) => a.isBot), [players]);\n\n  /** toggle between bot and human player - dispatch to redux */\n  const handleToggle = React.useCallback(\n    (id: number, isChecked: boolean): void => {\n      dispatch(updateBot(id, isChecked));\n    },\n    [dispatch],\n  );\n\n  /** update player name onBlur - dispatch to redux */\n  const handleBlur = React.useCallback(\n    (id: number) => (e: React.FocusEvent<HTMLInputElement>): void => {\n      dispatch(updateName(id, e.target.value || ''));\n    },\n    [dispatch],\n  );\n\n  /** if enter key was pressed in textfield, update name - dispatch to redux */\n  const handleKeyPress = React.useCallback(\n    (id: number) => (e: React.KeyboardEvent<HTMLDivElement>): void => {\n      if (e.key === 'Enter') {\n        dispatch(updateName(id, (e.target as HTMLInputElement).value || ''));\n      }\n    },\n    [dispatch],\n  );\n\n  return (\n    <div style={namePadStyles}>\n      <Grid container spacing={1}>\n        <Grid item xs={9}>\n          <Typography variant=\"h5\">\n            Edit Player Names\n          </Typography>\n        </Grid>\n        <Grid item xs={3}>\n          <Typography variant=\"h5\">\n            Is Bot?\n          </Typography>\n        </Grid>\n      </Grid>\n      {players.map((p, i) => (p.id !== 0\n        ? (\n          <Grid key={`${p.name},${i}`} container spacing={1}>\n            <Grid item xs={9}>\n              <TextField\n                defaultValue={p.name}\n                onBlur={handleBlur(p.id)}\n                onKeyPress={handleKeyPress(p.id)}\n                placeholder=\"Enter Player Name\"\n                title={`player ${i} name`}\n              />\n            </Grid>\n            <Grid item xs={3}>\n              <Switch\n                checked={isBot[i]}\n                value={isBot[i]}\n                color=\"primary\"\n                onChange={(_e, isC): void => handleToggle(p.id, isC)}\n                title={`isBot-switch-${i}`}\n              />\n            </Grid>\n          </Grid>\n        ) : (\n          <Grid key={`${p.name},${i}`} container spacing={1}>\n            <Grid item xs={9}>\n              <Typography variant=\"h5\">\n                {p.name}\n              </Typography>\n            </Grid>\n            <Grid item xs={3}>\n              <Switch checked disabled />\n            </Grid>\n          </Grid>\n        )\n      ))}\n    </div>\n  );\n};\n\nexport default PlayerMenu;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Switch from '@material-ui/core/Switch';\nimport SimplePopover from './ButtonPopover';\nimport PlayerMenu from './PlayerMenu';\nimport {\n  displayDarkTheme,\n  displayLightTheme,\n} from '../../../store/modules/theme';\nimport { DBRootState } from '../../../store/types';\n\nconst cursorStyles: React.CSSProperties = { cursor: 'pointer' };\nconst flexLeftStyles: React.CSSProperties = { display: 'flex', alignItems: 'center' };\nconst flexRightStyles: React.CSSProperties = { display: 'flex', marginRight: 15 };\nconst spanTopStyles: React.CSSProperties = { left: 0, right: 0, top: 0 };\n\ninterface TopBarProps {\n  /** change the color scheme of the Menu text */\n  fontColor: TypographyProps['color'];\n  /** change the color scheme of the icon */\n  iconColor: 'inherit' | 'primary' | 'secondary' | 'default' | undefined;\n  /** show/hide the player editor button */\n  showPlayers?: boolean;\n  /** callback called onClick of Icon or Menu text */\n  toggleOpen: React.MouseEventHandler;\n}\n\nconst TopBar = (props: TopBarProps): React.ReactElement => {\n  const theme = useSelector((state: DBRootState) => state.theme);\n  const dispatch = useDispatch();\n  const [checked, setChecked] = React.useState(theme.type !== 'dark');\n\n  /** function toggle between site's light and dark theme - dispatch to Redux */\n  const toggleTheme = React.useCallback(\n    (): void => {\n      checked\n        ? dispatch(displayDarkTheme())\n        : dispatch(displayLightTheme());\n      setChecked(!checked);\n    },\n    [checked, dispatch],\n  );\n\n  const {\n    toggleOpen, showPlayers = false, fontColor, iconColor,\n  } = props;\n\n  return (\n    <AppBar style={spanTopStyles} className={`header-${theme.type}-theme`}>\n      <Toolbar disableGutters>\n        <div className=\"flex-container\">\n          <div style={flexLeftStyles}>\n            <IconButton\n              aria-label=\"Menu\"\n              onClick={toggleOpen}\n              color={iconColor}\n              title=\"Icon Menu Button\"\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography\n              onClick={toggleOpen}\n              style={cursorStyles}\n              variant=\"h6\"\n              color={fontColor}\n            >\n              Menu\n            </Typography>\n          </div>\n          {showPlayers && (\n            <div style={flexRightStyles}>\n              <SimplePopover buttonText=\"Players\">\n                <PlayerMenu />\n              </SimplePopover>\n            </div>\n          )}\n          <div style={flexRightStyles}>\n            <Switch checked={checked} value={checked} onChange={toggleTheme} title=\"Theme Toggle Switch\" />\n          </div>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default React.memo(TopBar);\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Drawer from '@material-ui/core/Drawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport NavigationClose from '@material-ui/icons/Close';\nimport { useTheme } from '@material-ui/core/styles';\nimport TopBar from './TopBar';\nimport useToggleState from '../../../hooks/useToggle';\nimport noop from '../../../apis/noop';\n\ntype ItemClick = (loc: string) => void;\n\nexport interface NavProps {\n  onItemClick: ItemClick;\n}\n\ninterface HeaderProps {\n  /** content of the header bar via render props */\n  children: (onItemClick: ItemClick) => React.ReactElement<NavProps>;\n  /** callback function, wrapped with logic, then passed as onItemClick to children */\n  handleNav?: (loc: string) => void;\n  /** show/hide the player editor button */\n  showPlayers?: boolean;\n}\n\nconst Header = (props: HeaderProps): React.ReactElement => {\n  const [isOpen, toggleOpen, setIsOpen] = useToggleState();\n  const { palette: { type }} = useTheme();\n  const { children, handleNav = noop, showPlayers = false } = props;\n\n  /** close the menu and call the passed callback */\n  const handleNavigation = React.useCallback((loc: string): void => {\n    setIsOpen(false);\n    handleNav(loc);\n  }, [handleNav, setIsOpen]);\n\n  const iconColor = type === 'light' ? 'inherit' : 'default';\n  const fontColor = type === 'light' ? 'inherit' : 'initial';\n\n  return (\n    <>\n      <TopBar toggleOpen={toggleOpen} showPlayers={showPlayers} fontColor={fontColor} iconColor={iconColor} />\n      <Drawer onClose={toggleOpen} open={isOpen}>\n        <AppBar position=\"sticky\">\n          <Toolbar disableGutters>\n            <IconButton\n              aria-label=\"Menu Close\"\n              onClick={toggleOpen}\n              color={iconColor}\n              title=\"Close Side Menu\"\n            >\n              <NavigationClose />\n            </IconButton>\n            <Typography variant=\"h6\" color={fontColor}>\n              Menu\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        {children(handleNavigation)}\n      </Drawer>\n    </>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Divider from '@material-ui/core/Divider';\n\ninterface MenuProps {\n  onItemClick?: (loc: string) => void;\n}\n\nconst Menu: React.FC<MenuProps> = React.memo((props: MenuProps) => {\n  const { onItemClick } = props;\n  const baseUrl = '/games';\n\n  // internal routes\n  const menu = React.useMemo(() => [\n    { name: 'Home - Games', route: '' },\n    { divider: true },\n    { name: 'BlackJack', route: 'blackjack' },\n    { name: 'Connect4', route: 'connect4' },\n    { name: 'Deal or No Deal', route: 'deal' },\n    { name: 'Poker', route: 'poker' },\n    { name: 'Slot Machine', route: 'slots' },\n    { name: 'Tic-Tac-Toe', route: 'tictactoe' },\n    { name: 'Yahtzee', route: 'yahtzee' },\n  ].map((item, index) => (item.divider\n    ? (\n      <Divider key={index} />\n    ) : (\n      <MenuItem\n        key={item.name}\n        onClick={(): void => onItemClick && onItemClick(`${baseUrl}/${item.route}`)}\n      >\n        {item.name}\n      </MenuItem>\n    )\n  )), [onItemClick]);\n\n  // navigation\n  const home = React.useCallback(\n    (): void => onItemClick && onItemClick('/'),\n    [onItemClick],\n  );\n\n  // render menu\n  return (\n    <>\n      <MenuItem onClick={home}>\n        Back to Resume\n      </MenuItem>\n      {menu}\n    </>\n  );\n});\n\nexport default Menu;\n","import React from 'react';\nimport {\n  Switch, Route, Redirect, match as Match,\n} from 'react-router-dom';\nimport lazyWithPreload from '../../helpers/lazyWithPreload';\nimport Header, { NavProps } from '../common/header/Header';\nimport Menu from './Menu';\nimport LoadingSpinner from '../common/loading-spinner';\n\ninterface RoutesProps {\n  handleNav: (loc: string) => void;\n  match: Match;\n}\n\n// lazy load page components\nconst GameHome = lazyWithPreload(import(/* webpackChunkName: \"g_home\" */ './Home'));\nconst BlackJack = lazyWithPreload(import(/* webpackChunkName: \"g_bj\" */ './blackjack'));\nconst Connect4 = lazyWithPreload(import(/* webpackChunkName: \"g_connect4\" */ './connect4'));\nconst DealOrNoDeal = lazyWithPreload(import(/* webpackChunkName: \"g_dond\" */ './deal-or-no-deal'));\nconst Poker = lazyWithPreload(import(/* webpackChunkName: \"g_poker\" */ './poker'));\nconst Slots = lazyWithPreload(import(/* webpackChunkName: \"g_slots\" */ './slots'));\nconst TicTacToe = lazyWithPreload(import(/* webpackChunkName: \"g_tictactoe\" */ './tictactoe'));\nconst Yahtzee = lazyWithPreload(import(/* webpackChunkName: \"g_yahtzee\" */ './yahtzee'));\n\nconst Routes: React.FC<RoutesProps> = (props: RoutesProps) => {\n  const { match: { url }, handleNav } = props;\n\n  const paths = React.useMemo(() => [\n    { name: 'blackjack', component: BlackJack },\n    { name: 'connect4', component: Connect4 },\n    { name: 'deal', component: DealOrNoDeal },\n    { name: 'poker', component: Poker },\n    { name: 'slots', component: Slots },\n    { name: 'tictactoe', component: TicTacToe },\n    { name: 'yahtzee', component: Yahtzee },\n  ].reduce((acc: React.ReactNode[], obj) => {\n    const { name, component } = obj;\n    const path = `${url}/${name}`;\n    acc.push(<Route key={`${path}r`} exact {...{ path, component }} />);\n    acc.push(<Redirect key={`${path}d`} from={`${path}*`} to={path} />);\n    return acc;\n  },\n  []), [url]);\n\n  return (\n    <>\n      <Header handleNav={handleNav} showPlayers>\n        {(onItemClick): React.ReactElement<NavProps> => <Menu onItemClick={onItemClick} />}\n      </Header>\n      <React.Suspense fallback={<LoadingSpinner />}>\n        <Switch>\n          <Route component={GameHome} exact path={`${url}`} />\n          {paths}\n          <Redirect from={`${url}/*`} to={`${url}`} />\n          <Route component={GameHome} />\n        </Switch>\n      </React.Suspense>\n    </>\n  );\n};\n\nexport default Routes;\n"],"sourceRoot":""}