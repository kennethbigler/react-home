{"version":3,"sources":["components/common/DarkTableCell.js","components/resume/travel-map/TravelTable.styles.js","constants/countries.js","components/resume/travel-map/TravelTable.jsx","components/resume/travel-map/Popover.jsx","components/resume/travel-map/WorldMap.jsx","components/resume/travel-map/TravelMap.jsx","components/resume/travel-map/index.js"],"names":["DarkTableCell","withStyles","theme","head","backgroundColor","palette","common","black","color","white","TableCell","styles","margins","marginTop","marginBottom","cell","padding","textAlign","whiteSpace","overflow","separator","borderRight","grey","countries","Austria","deepOrange","continent","Bahamas","amber","Canada","blue","Denmark","deepPurple","Estonia","green","Finland","indigo","France","lightBlue","Germany","lightGreen","Greece","lime","Iceland","orange","Ireland","pink","Italy","purple","Mexico","brown","Netherlands","red","Norway","teal","Poland","yellow","Portugal","Russia","Spain","cyan","Sweden","Switzerland","Turkey","Gibraltar","Malta","Monaco","Vatican","NA","EU","forEach","country","name","push","TravelMap","memo","len","Math","max","length","ceil","i","row","key","style","j","countryRow","TableRow","Typography","variant","Table","TableHead","colSpan","TableBody","Popover","props","x","y","hide","content","popoverStyle","position","left","top","display","borderRadius","STROKE","blueGrey","HOVER","VISITED_HOVER","FILL","PRESSED","WorldMap","useState","setX","setY","setContent","setHide","handleMove","geography","evt","clientX","clientY","window","pageYOffset","properties","NAME","handleLeave","useWorldMap","screenWidth","document","body","clientWidth","width","height","projectionConfig","scale","rotation","geographies","projection","map","onMouseMove","onMouseLeave","default","fill","stroke","strokeWidth","outline","hover","pressed","TravelTable"],"mappings":"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","file":"static/js/r_travel.e1dd1d48.chunk.js","sourcesContent":["import { withStyles } from '@material-ui/core/styles';\nimport TableCell from '@material-ui/core/TableCell';\n\nconst DarkTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n}))(TableCell);\n\nexport default DarkTableCell;\n","import grey from '@material-ui/core/colors/grey';\n\nconst styles = {\n  margins: { marginTop: 24, marginBottom: 16 },\n  cell: {\n    padding: 5,\n    textAlign: 'center',\n    whiteSpace: 'normal',\n    overflow: 'visible',\n  },\n  separator: { borderRight: `1px solid ${grey[400]}` },\n};\n\nexport default styles;\n","import forEach from 'lodash/forEach';\nimport {\n  amber, blue, brown, cyan, deepOrange, deepPurple, green, indigo, lightBlue, lightGreen, lime, orange, pink, purple, red, teal, yellow,\n} from '@material-ui/core/colors/';\n\nconst countries = {\n  Austria: { color: deepOrange[500], continent: 'EU' },\n  Bahamas: { color: amber[500], continent: 'NA' },\n  Canada: { color: blue[500], continent: 'NA' },\n  Denmark: { color: deepPurple[500], continent: 'EU' },\n  Estonia: { color: green[500], continent: 'EU' },\n  Finland: { color: indigo[500], continent: 'EU' },\n  France: { color: lightBlue[500], continent: 'EU' },\n  Germany: { color: lightGreen[500], continent: 'EU' },\n  Greece: { color: lime[500], continent: 'EU' },\n  Iceland: { color: orange[500], continent: 'EU' },\n  Ireland: { color: pink[500], continent: 'EU' },\n  Italy: { color: purple[500], continent: 'EU' },\n  Mexico: { color: brown[500], continent: 'NA' },\n  Netherlands: { color: red[500], continent: 'EU' },\n  Norway: { color: teal[500], continent: 'EU' },\n  Poland: { color: yellow[500], continent: 'EU' },\n  Portugal: { color: amber[800], continent: 'EU' },\n  Russia: { color: blue[800], continent: 'EU' },\n  Spain: { color: cyan[800], continent: 'EU' },\n  Sweden: { color: deepOrange[800], continent: 'EU' },\n  Switzerland: { color: deepPurple[800], continent: 'EU' },\n  Turkey: { color: green[800], continent: 'EU' },\n  'United Kingdom': { color: indigo[800], continent: 'EU' },\n  'United States of America': { color: cyan[500], continent: 'NA' },\n  'British Virgin Islands': { continent: 'NA' },\n  'Cayman Islands': { continent: 'NA' },\n  'U.S. Virgin Islands': { continent: 'NA' },\n  Gibraltar: { continent: 'EU' },\n  Malta: { continent: 'EU' },\n  Monaco: { continent: 'EU' },\n  Vatican: { continent: 'EU' },\n};\n\nexport const NA = [];\nexport const EU = [];\n\nforEach(countries, (country, name) => {\n  country.continent === 'NA' && NA.push(name);\n  country.continent === 'EU' && EU.push(name);\n});\n\nexport default countries;\n","import React, { memo, Fragment } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Typography } from '@material-ui/core';\nimport DarkTableCell from '../../common/DarkTableCell';\nimport styles from './TravelTable.styles';\nimport { NA, EU } from '../../../constants/countries';\n// Parents: Main\n\nconst TravelMap = memo(() => {\n  // ratio to display on table, 2:1 seemed to look best\n  const EURatio = 3;\n\n  // export array of <li> elements for display\n  const countries = [];\n  // iterate to the end of the longer list\n  const len = Math.max(NA.length, Math.ceil(EU.length / EURatio));\n  for (let i = 0; i < len; i += 1) {\n    const row = [];\n    // add NA Country\n    row.push(\n      <TableCell\n        key={`tmc${i}`}\n        style={{ ...styles.cell, ...styles.separator }}\n      >\n        {NA[i]}\n      </TableCell>,\n    );\n    // add EU Countries\n    for (let j = 0; j < EURatio; j += 1) {\n      row.push(\n        <TableCell key={`tmc${i}${j}`} style={styles.cell}>\n          {EU[EURatio * i + j]}\n        </TableCell>,\n      );\n    }\n    // form the row\n    const countryRow = (\n      <TableRow key={`tmr${i}`}>\n        {row}\n      </TableRow>\n    );\n    countries.push(countryRow);\n  }\n\n  return (\n    <Fragment>\n      <Typography variant=\"h4\" style={styles.margins}>\n        {`I have been to ${NA.length + EU.length} countries:`}\n      </Typography>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <DarkTableCell style={{ ...styles.cell, ...styles.separator }}>\n              North America\n            </DarkTableCell>\n            <DarkTableCell colSpan={EURatio} style={styles.cell}>\n              Europe\n            </DarkTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {countries}\n        </TableBody>\n      </Table>\n    </Fragment>\n  );\n});\n\nexport default TravelMap;\n","import React, { memo } from 'react';\nimport types from 'prop-types';\nimport grey from '@material-ui/core/colors/grey';\n\nconst Popover = memo((props) => {\n  const {\n    x, y, hide, content,\n  } = props;\n\n  const popoverStyle = {\n    position: 'absolute',\n    left: x + 2,\n    top: y - 35,\n    display: hide ? 'none' : 'block',\n    backgroundColor: grey[800],\n    color: 'white',\n    padding: 5,\n    borderRadius: 2,\n  };\n\n\n  return (\n    <div style={popoverStyle}>{content}</div>\n  );\n});\n\nPopover.propTypes = {\n  x: types.number.isRequired,\n  y: types.number.isRequired,\n  hide: types.bool.isRequired,\n  content: types.string.isRequired,\n};\n\nexport default Popover;\n","import React, { useState, memo, Fragment } from 'react';\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n} from 'react-simple-maps';\nimport map from 'lodash/map';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport red from '@material-ui/core/colors/red';\nimport Popover from './Popover';\nimport countries from '../../../constants/countries';\n\nconst STROKE = blueGrey[900];\nconst HOVER = blueGrey[500];\nconst VISITED_HOVER = red[800];\nconst FILL = blueGrey[100];\nconst PRESSED = blueGrey[800];\nconst RATIO = 100 / 465.33;\n\nfunction useWorldMap() {\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n  const [content, setContent] = useState('');\n  const [hide, setHide] = useState(true);\n\n  const handleMove = (geography, evt) => {\n    setX(evt.clientX);\n    setY(evt.clientY + window.pageYOffset);\n    setContent(geography.properties.NAME);\n    setHide(false);\n  };\n\n  const handleLeave = () => {\n    setHide(true);\n  };\n\n  return {\n    x,\n    y,\n    content,\n    hide,\n    handleMove,\n    handleLeave,\n  };\n}\n\nconst WorldMap = memo(() => {\n  const {\n    x,\n    y,\n    content,\n    hide,\n    handleMove,\n    handleLeave,\n  } = useWorldMap();\n\n  const screenWidth = document.body.clientWidth - 32;\n\n  return (\n    <Fragment>\n      <ComposableMap width={screenWidth} height={(screenWidth * 546) / 744} projectionConfig={{ scale: screenWidth * RATIO, rotation: [-10, 0, 0]}}>\n        <ZoomableGroup>\n          <Geographies geography=\"/world-110m.json\">\n            {(geographies, projection) => map(geographies, (geography, i) => (\n              <Geography\n                key={i}\n                geography={geography}\n                projection={projection}\n                onMouseMove={handleMove}\n                onMouseLeave={handleLeave}\n                style={{\n                  default: {\n                    fill: countries[geography.properties.NAME] ? countries[geography.properties.NAME].color : FILL,\n                    stroke: STROKE,\n                    strokeWidth: 0.75,\n                    outline: 'none',\n                  },\n                  hover: {\n                    fill: countries[geography.properties.NAME] ? VISITED_HOVER : HOVER,\n                    stroke: STROKE,\n                    strokeWidth: 0.75,\n                    outline: 'none',\n                  },\n                  pressed: {\n                    fill: PRESSED,\n                    stroke: STROKE,\n                    strokeWidth: 0.75,\n                    outline: 'none',\n                  },\n                }}\n              />\n            ))}\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n      <Popover x={x} y={y} hide={hide} content={content} />\n    </Fragment>\n  );\n});\n\nexport default WorldMap;\n","import React, { memo, Fragment } from 'react';\nimport { Typography } from '@material-ui/core';\nimport TravelTable from './TravelTable';\nimport WorldMap from './WorldMap';\n\nconst TravelMap = memo(() => (\n  <Fragment>\n    <Typography variant=\"h2\">My Travel Map</Typography>\n    <WorldMap />\n    <TravelTable />\n  </Fragment>\n));\n\nexport default TravelMap;\n","// import TravelMap from './TravelMap';\nimport TravelMap from './TravelMap';\n\nexport default TravelMap;\n"],"sourceRoot":""}