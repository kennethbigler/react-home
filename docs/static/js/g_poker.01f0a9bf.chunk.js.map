{"version":3,"file":"static/js/g_poker.01f0a9bf.chunk.js","mappings":"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","sources":["apis/Deck.ts","components/games/game-table/board/card/Card.styles.ts","components/games/game-table/board/card/Card.tsx","components/games/game-table/board/Hand.tsx","components/games/game-table/board/player/Player.styles.ts","components/games/game-table/board/player/Player.tsx","components/games/game-table/board/Board.tsx","components/games/game-table/button-group/Button.tsx","components/games/game-table/button-group/ButtonGroup.tsx","components/games/game-table/GameTable.tsx","recoil/poker-state.ts","components/games/poker/helpers.ts","components/games/poker/Poker.tsx","helpers/asyncForEach.ts","recoil/turn-atom.ts"],"sourcesContent":["import localForage from \"localforage\";\n\nexport interface DBCard {\n  name: string;\n  suit: string;\n  weight: number;\n}\n\nconst NEW_DECK: DBCard[] = [\n  { name: \"2\", weight: 2, suit: \"♣\" },\n  { name: \"3\", weight: 3, suit: \"♣\" },\n  { name: \"4\", weight: 4, suit: \"♣\" },\n  { name: \"5\", weight: 5, suit: \"♣\" },\n  { name: \"6\", weight: 6, suit: \"♣\" },\n  { name: \"7\", weight: 7, suit: \"♣\" },\n  { name: \"8\", weight: 8, suit: \"♣\" },\n  { name: \"9\", weight: 9, suit: \"♣\" },\n  { name: \"10\", weight: 10, suit: \"♣\" },\n  { name: \"J\", weight: 11, suit: \"♣\" },\n  { name: \"Q\", weight: 12, suit: \"♣\" },\n  { name: \"K\", weight: 13, suit: \"♣\" },\n  { name: \"A\", weight: 14, suit: \"♣\" },\n  { name: \"2\", weight: 2, suit: \"♦\" },\n  { name: \"3\", weight: 3, suit: \"♦\" },\n  { name: \"4\", weight: 4, suit: \"♦\" },\n  { name: \"5\", weight: 5, suit: \"♦\" },\n  { name: \"6\", weight: 6, suit: \"♦\" },\n  { name: \"7\", weight: 7, suit: \"♦\" },\n  { name: \"8\", weight: 8, suit: \"♦\" },\n  { name: \"9\", weight: 9, suit: \"♦\" },\n  { name: \"10\", weight: 10, suit: \"♦\" },\n  { name: \"J\", weight: 11, suit: \"♦\" },\n  { name: \"Q\", weight: 12, suit: \"♦\" },\n  { name: \"K\", weight: 13, suit: \"♦\" },\n  { name: \"A\", weight: 14, suit: \"♦\" },\n  { name: \"2\", weight: 2, suit: \"♥\" },\n  { name: \"3\", weight: 3, suit: \"♥\" },\n  { name: \"4\", weight: 4, suit: \"♥\" },\n  { name: \"5\", weight: 5, suit: \"♥\" },\n  { name: \"6\", weight: 6, suit: \"♥\" },\n  { name: \"7\", weight: 7, suit: \"♥\" },\n  { name: \"8\", weight: 8, suit: \"♥\" },\n  { name: \"9\", weight: 9, suit: \"♥\" },\n  { name: \"10\", weight: 10, suit: \"♥\" },\n  { name: \"J\", weight: 11, suit: \"♥\" },\n  { name: \"Q\", weight: 12, suit: \"♥\" },\n  { name: \"K\", weight: 13, suit: \"♥\" },\n  { name: \"A\", weight: 14, suit: \"♥\" },\n  { name: \"2\", weight: 2, suit: \"♠\" },\n  { name: \"3\", weight: 3, suit: \"♠\" },\n  { name: \"4\", weight: 4, suit: \"♠\" },\n  { name: \"5\", weight: 5, suit: \"♠\" },\n  { name: \"6\", weight: 6, suit: \"♠\" },\n  { name: \"7\", weight: 7, suit: \"♠\" },\n  { name: \"8\", weight: 8, suit: \"♠\" },\n  { name: \"9\", weight: 9, suit: \"♠\" },\n  { name: \"10\", weight: 10, suit: \"♠\" },\n  { name: \"J\", weight: 11, suit: \"♠\" },\n  { name: \"Q\", weight: 12, suit: \"♠\" },\n  { name: \"K\", weight: 13, suit: \"♠\" },\n  { name: \"A\", weight: 14, suit: \"♠\" },\n];\n\n/** immutably get a copy of new deck O(N) */\nconst getNewDeck = (): DBCard[] => NEW_DECK.map((card) => ({ ...card }));\n\n/** get immutable copy of deck O(N) */\nconst getDeck = (): Promise<DBCard[]> =>\n  localForage\n    .getItem(\"deck\")\n    .then((data: unknown) => (data as DBCard[]) || getNewDeck())\n    .catch(() => getNewDeck());\n\n/** immutably update deck O(N) */\nconst setDeck = (deck: DBCard[]): Promise<DBCard[] | null> =>\n  localForage.setItem(\"deck\", deck).catch(() => null);\n\n/** randomize order of the cards O(N + M) */\nconst shuffleDeck = (deck: DBCard[]): DBCard[] => {\n  const shuffledDeck: DBCard[] = [];\n  // create immutable copy of deck\n  deck.map((card) => shuffledDeck.push(card));\n  // shuffle the cards\n  for (let i = 0; i < 100; i += 1) {\n    const j = Math.floor(Math.random() * shuffledDeck.length);\n    const k = Math.floor(Math.random() * shuffledDeck.length);\n    const temp = shuffledDeck[j];\n    shuffledDeck[j] = shuffledDeck[k];\n    shuffledDeck[k] = temp;\n  }\n  // update deck state\n  return shuffledDeck;\n};\n\n/** randomize order of the cards O(N + M) */\nconst shuffle = (): Promise<DBCard[] | null> =>\n  setDeck(shuffleDeck(getNewDeck()));\n\n/** return an array of a specified length O(2N) */\nconst deal = (num = 0): Promise<DBCard[]> => {\n  const cards: DBCard[] = [];\n  return getDeck()\n    .then((deck: DBCard[]): DBCard[] => {\n      // verify we have enough cards\n      if (num > deck.length) {\n        return deck;\n      }\n      // get the cards\n      for (let i = 0; i < num; i += 1) {\n        const card: DBCard | undefined = deck.pop();\n        card && cards.push(card);\n      }\n      return deck;\n    })\n    .then((deck: DBCard[]) => setDeck(deck))\n    .then(() => cards);\n};\n\n/** sort by card weight */\nconst rankSort = (a: DBCard, b: DBCard): number => a.weight - b.weight;\n\nexport default { shuffle, deal, rankSort };\n","const cardFace: React.CSSProperties = {\n  backgroundColor: \"white\",\n  borderRadius: 5,\n  cursor: \"pointer\",\n  display: \"inline-block\",\n  fontWeight: \"bold\",\n  height: 78,\n  margin: 5,\n  padding: 3,\n  width: 50,\n};\n\nconst cardTitle: React.CSSProperties = {\n  textAlign: \"left\",\n};\n\nconst suit: React.CSSProperties = {\n  margin: \"auto\",\n  marginTop: 5,\n  textAlign: \"center\",\n  width: \"100%\",\n};\n\nexport default {\n  cardFace,\n  cardTitle,\n  suit,\n};\n","import React from \"react\";\nimport { Typography } from \"@mui/material\";\nimport { red } from \"@mui/material/colors\";\nimport styles from \"./Card.styles\";\n\ninterface CardProps {\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardNo: number;\n  dropped: boolean;\n  handNo: number;\n  name: string;\n  playerNo: number;\n  suit: string;\n}\n\nconst Card = React.memo((props: CardProps) => {\n  const { dropped, suit, name, cardHandler, playerNo, handNo, cardNo } = props;\n  // handle click to for card\n  const handleClick = React.useCallback((): void => {\n    cardHandler && cardHandler(playerNo, handNo, cardNo);\n  }, [cardHandler, cardNo, handNo, playerNo]);\n  // checking color based off suits: ♣♦♥♠\n  const cardColor: React.CSSProperties = {\n    color: suit === \"♣\" || suit === \"♠\" ? \"black\" : red[500],\n    backgroundColor: dropped ? red[100] : \"white\",\n  };\n\n  return (\n    <div\n      style={{ ...styles.cardFace, ...cardColor }}\n      onClick={handleClick}\n      role=\"main\"\n    >\n      <div style={styles.cardTitle}>{name + suit}</div>\n      <Typography variant=\"h4\" style={{ ...styles.suit, ...cardColor }}>\n        {suit}\n      </Typography>\n    </div>\n  );\n});\n\nexport default Card;\n","import React from \"react\";\nimport { Typography } from \"@mui/material\";\nimport { purple } from \"@mui/material/colors\";\nimport Card from \"./card/Card\";\nimport { DBHand } from \"../../../../recoil/player-atom\";\n\nconst boldStyle: React.CSSProperties = {\n  fontWeight: \"bold\",\n  marginTop: \"0.5em\",\n};\nconst normalStyle: React.CSSProperties = {\n  fontWeight: \"normal\",\n  marginTop: \"0.5em\",\n};\n\ninterface HandProps {\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hand: DBHand;\n  handNo: number;\n  isBlackJack: boolean;\n  isHandTurn: boolean;\n  isMultiHand: boolean;\n  isPlayerTurn: boolean;\n  playerNo: number;\n}\n\nconst Hand: React.FC<HandProps> = (props: HandProps) => {\n  const {\n    cardHandler,\n    cardsToDiscard,\n    hand,\n    handNo,\n    isBlackJack,\n    isHandTurn,\n    isMultiHand,\n    isPlayerTurn,\n    playerNo,\n  } = props;\n\n  const styles = React.useMemo(\n    () =>\n      isPlayerTurn && (!isMultiHand || (isMultiHand && isHandTurn))\n        ? { ...boldStyle, color: purple[700] }\n        : normalStyle,\n    [isPlayerTurn, isMultiHand, isHandTurn]\n  );\n  const handWeight = hand.weight || 0;\n\n  return (\n    <>\n      <Typography variant=\"h4\" style={styles}>\n        {isBlackJack && `${handWeight > 21 ? \"Bust\" : \"Hand\"}: ${handWeight}`}\n      </Typography>\n      {hand.cards.map((card, i) => {\n        const dropped: boolean = cardsToDiscard.includes(i);\n        return card ? (\n          <Card\n            key={card.name + card.suit}\n            cardHandler={cardHandler}\n            cardNo={i}\n            dropped={dropped}\n            handNo={handNo}\n            name={card.name}\n            playerNo={playerNo}\n            suit={card.suit}\n          />\n        ) : null;\n      })}\n    </>\n  );\n};\n\nexport default Hand;\n","const player: React.CSSProperties = {\n  borderRadius: 5,\n  display: \"inline-block\",\n  margin: 10,\n  padding: 20,\n};\n\nconst width: React.CSSProperties = { minWidth: \"100px\" };\n\nexport default {\n  player,\n  width,\n};\n","import React from \"react\";\nimport Slider from \"@mui/material/Slider\";\nimport { Typography } from \"@mui/material\";\nimport Card from \"@mui/material/Card\";\nimport { cyan, green, blueGrey, red } from \"@mui/material/colors\";\nimport Hand from \"../Hand\";\nimport { DBPlayer } from \"../../../../../recoil/player-atom\";\nimport { TurnState } from \"../../../../../recoil/turn-atom\";\nimport styles from \"./Player.styles\";\n\ninterface PlayerProps {\n  betHandler?: (id: number, event: Event, value: number) => void;\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  player: DBPlayer;\n  playerNo: number;\n  turn: TurnState;\n}\n\nconst Player: React.FC<PlayerProps> = (props: PlayerProps) => {\n  // get vars from props\n  const {\n    betHandler,\n    cardHandler,\n    cardsToDiscard,\n    hideHands,\n    isBlackJack,\n    player,\n    playerNo,\n    turn,\n  } = props;\n  // set booleans\n  const isPlayerTurn: boolean = !!turn && playerNo === turn.player;\n  const isMultiHand: boolean = player.hands.length > 1;\n  const showSlider: boolean =\n    !!hideHands && isBlackJack && player.id !== 0 && !player.isBot;\n  // set slider variables\n  const minBet: number = Math.max(Math.min(player.money, 5), 0);\n  const maxBet: number = Math.max(Math.min(player.money, 100), 10);\n  const step = 5;\n  const onSliderChange = React.useCallback(\n    (event: Event, value: number | number[]): void => {\n      betHandler && betHandler(player.id, event, value as number);\n    },\n    [betHandler, player.id]\n  );\n  // set colors\n  let color: React.CSSProperties = isPlayerTurn\n    ? { background: cyan[200] }\n    : {};\n  const weight: React.CSSProperties = isPlayerTurn\n    ? { fontWeight: \"bold\" }\n    : { fontWeight: \"normal\" };\n  if (player.status === \"win\") {\n    color = { background: green[300] };\n  }\n  if (player.status === \"draw\") {\n    color = { background: blueGrey[300] };\n  }\n  if (player.status === \"lose\") {\n    color = { background: red[300] };\n  }\n\n  return (\n    <Card style={{ ...styles.player, ...color }}>\n      <Typography variant=\"h4\" style={{ ...weight }}>\n        {`${player.name}: $${player.money}`}\n      </Typography>\n      {showSlider && (\n        <Slider\n          max={maxBet}\n          min={minBet}\n          onChange={onSliderChange}\n          step={step}\n          style={styles.width}\n          value={player.bet}\n        />\n      )}\n      {isBlackJack && player.id !== 0 && (\n        <Typography variant=\"h5\">{`Bet: $${player.bet}`}</Typography>\n      )}\n      {player.hands.map((hand, i) => {\n        const isHandTurn: boolean = !!turn && turn.hand === i;\n        return (\n          <div key={`hand${i}`}>\n            {!hideHands && (\n              <Hand\n                cardHandler={cardHandler}\n                cardsToDiscard={cardsToDiscard}\n                hand={hand}\n                handNo={i}\n                isBlackJack={isBlackJack}\n                isHandTurn={isHandTurn}\n                isMultiHand={isMultiHand}\n                isPlayerTurn={isPlayerTurn}\n                playerNo={playerNo}\n              />\n            )}\n          </div>\n        );\n      })}\n    </Card>\n  );\n};\n\nexport default Player;\n","import React from \"react\";\nimport Player from \"./player/Player\";\nimport { DBPlayer } from \"../../../../recoil/player-atom\";\nimport { TurnState } from \"../../../../recoil/turn-atom\";\n// Parents: GameTable\n\ninterface BoardProps {\n  betHandler?: (id: number, event: Event, value: number) => void;\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  players: DBPlayer[];\n  turn: TurnState;\n}\n\nconst Board: React.FC<BoardProps> = (props: BoardProps) => {\n  const {\n    betHandler,\n    cardHandler,\n    cardsToDiscard,\n    hideHands,\n    isBlackJack,\n    players,\n    turn,\n  } = props;\n\n  return (\n    <>\n      {players.map((player, i) => (\n        <Player\n          key={`player${i}`}\n          betHandler={betHandler}\n          cardHandler={cardHandler}\n          cardsToDiscard={cardsToDiscard}\n          hideHands={hideHands}\n          isBlackJack={isBlackJack}\n          player={player}\n          playerNo={i}\n          turn={turn}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport MuiButton from \"@mui/material/Button\";\nimport { PropTypes } from \"@mui/material/\";\n\nconst buttonStyle: React.CSSProperties = { margin: 12 };\nconst color: PropTypes.Color = \"primary\";\n\nexport interface ButtonProps {\n  onClick: (name: string) => void;\n  name: string;\n}\n\nconst Button: React.FC<ButtonProps> = React.memo(\n  ({ onClick, name }: ButtonProps) => (\n    <MuiButton\n      color={color}\n      onClick={(): void => onClick(name)}\n      style={buttonStyle}\n      variant=\"contained\"\n    >\n      {name}\n    </MuiButton>\n  )\n);\n\nexport default Button;\n","import React from \"react\";\nimport Button from \"./Button\";\n\nexport interface ButtonGroupProps {\n  gameFunctions: string[];\n  onClick: (name: string) => void;\n}\n\nconst ButtonGroup: React.FC<ButtonGroupProps> = ({\n  gameFunctions,\n  onClick,\n}: ButtonGroupProps) => (\n  <div>\n    {gameFunctions.map((key) => (\n      <Button key={key} onClick={onClick} name={key} />\n    ))}\n  </div>\n);\n\nexport default ButtonGroup;\n","import React from \"react\";\nimport Board from \"./board/Board\";\nimport ButtonGroup from \"./button-group/ButtonGroup\";\nimport { DBPlayer } from \"../../../recoil/player-atom\";\nimport { TurnState } from \"../../../recoil/turn-atom\";\n\ninterface GameTableProps {\n  betHandler?: (id: number, event: Event, value: number) => void;\n  cardClickHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard?: number[];\n  gameFunctions?: string[];\n  gameOver?: boolean;\n  hideHands?: boolean;\n  isBlackJack?: boolean;\n  onClick: (name: string) => void;\n  players: DBPlayer[];\n  turn: TurnState;\n}\n\n/* GameTable ->  Board -> Player -> Hand -> Card\n *          |->  Button Group  ->  Button        */\nconst GameTable = (props: GameTableProps): React.ReactElement => {\n  const {\n    betHandler,\n    cardClickHandler,\n    cardsToDiscard = [],\n    gameFunctions = [],\n    gameOver = false,\n    hideHands = false,\n    isBlackJack = true,\n    players,\n    turn,\n    onClick,\n  } = props;\n\n  // move game buttons to make turn more obvious and support mobile\n  const played: DBPlayer[] = React.useMemo(\n    () => players.slice(0, turn.player + 1),\n    [players, turn.player]\n  );\n  const future: DBPlayer[] = React.useMemo(\n    () => players.slice(turn.player + 1),\n    [players, turn.player]\n  );\n  const playersToDisplay: DBPlayer[] = React.useMemo(\n    () =>\n      !hideHands && gameOver === false\n        ? players.slice(turn.player, turn.player + 1)\n        : players,\n    [hideHands, gameOver, players, turn.player]\n  );\n\n  return isBlackJack && !hideHands ? (\n    <>\n      <Board\n        players={played}\n        betHandler={betHandler}\n        cardHandler={cardClickHandler}\n        cardsToDiscard={cardsToDiscard}\n        hideHands={hideHands}\n        isBlackJack={isBlackJack}\n        turn={turn}\n      />\n      <ButtonGroup gameFunctions={gameFunctions} onClick={onClick} />\n      <Board\n        players={future}\n        betHandler={betHandler}\n        cardHandler={cardClickHandler}\n        cardsToDiscard={cardsToDiscard}\n        hideHands={hideHands}\n        isBlackJack={isBlackJack}\n        turn={{ player: -1, hand: -1 }}\n      />\n    </>\n  ) : (\n    <>\n      <Board\n        players={playersToDisplay}\n        betHandler={betHandler}\n        cardHandler={cardClickHandler}\n        cardsToDiscard={cardsToDiscard}\n        hideHands={hideHands}\n        isBlackJack={isBlackJack}\n        turn={turn}\n      />\n      <ButtonGroup gameFunctions={gameFunctions} onClick={onClick} />\n    </>\n  );\n};\n\nexport default GameTable;\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport turnAtom from \"./turn-atom\";\nimport playerAtom from \"./player-atom\";\n\nexport enum PokerGameFunctions {\n  DISCARD_CARDS = \"Discard Cards\",\n  END_TURN = \"End Turn\",\n  NEW_GAME = \"New Game\",\n  START_GAME = \"Start Game\",\n}\nexport interface PokerState {\n  gameFunctions: PokerGameFunctions[];\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  gameOver: boolean;\n}\n\n/** function to generate the state of a new game */\nexport const newPokerGameState = (): PokerState => ({\n  gameFunctions: [PokerGameFunctions.START_GAME],\n  cardsToDiscard: [],\n  hideHands: true,\n  gameOver: false,\n});\n\nexport const pokerAtom = atom({\n  key: \"pokerAtom\",\n  default:\n    (JSON.parse(localStorage.getItem(\"poker-atom\") || \"null\") as PokerState) ||\n    newPokerGameState(),\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"poker-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\nconst pokerState = selector({\n  key: \"pokerState\",\n  get: ({ get }) => {\n    const poker = get(pokerAtom);\n    const turn = get(turnAtom);\n    const players = get(playerAtom);\n\n    return { poker, turn, players };\n  },\n  set: ({ set }, state) => {\n    if (!(state instanceof DefaultValue)) {\n      const { poker, turn, players } = state;\n      set(pokerAtom, poker);\n      set(turnAtom, turn);\n      set(playerAtom, players);\n    }\n  },\n});\n\nexport default pokerState;\n","import { DBCard } from \"../../../apis/Deck\";\nimport { DBPlayer } from \"../../../recoil/player-atom\";\n\n/** Rankings:\n *   Straight Flush  8\n *   4 of a Kind     7\n *   Full House      6\n *   Flush           5\n *   Straight        4\n *   3 of a Kind     3\n *   2 Pair          2\n *   1 Pair          1\n *   High Card       0\n * @return {number} value is a base 14 string, to be converted into base 10 for comparison */\nexport const rankHand = (hand: DBCard[], hist: number[]): number => {\n  // iterate through and look for hands with multiple cards\n  if (hist.includes(4)) {\n    return 7; // 4 of a kind\n  }\n  // Check for hands with sets of 3 or 2 cards\n  const has3 = hist.includes(3);\n  const i = hist.indexOf(2);\n  const has2 = i !== -1;\n  if (has3 && has2) {\n    return 6; // full house\n  }\n  if (has3) {\n    return 3; // 3 of a kind\n  }\n  if (has2 && hist.includes(2, i + 1)) {\n    return 2; // 2 pair\n  }\n  if (has2) {\n    return 1; // 1 pair\n  }\n  // all single cards\n  // check for straight\n  const isStraight =\n    hist.lastIndexOf(1) - hist.indexOf(1) === 4 || // (end - start = 4)\n    (hist[12] && hist[0] && hist[1] && hist[2] && hist[3]); // (A,2,3,4,5)\n  // check for flush\n  let isFlush = true;\n  for (let j = 0; j < hand.length; j += 1) {\n    if (hand[j].suit !== hand[0].suit) {\n      isFlush = false;\n      break;\n    }\n  }\n  if (isStraight && isFlush) {\n    return 8; // straight flush\n  }\n  if (isFlush) {\n    return 5; // flush\n  }\n  if (isStraight) {\n    return 4; // straight\n  }\n  return 0; // high card\n};\n\nexport const getHistogram = (hand: DBCard[]): number[] => {\n  // Histogram for the cards\n  const hist = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  // put hand into the histogram\n  hand.forEach((card) => {\n    card && (hist[card.weight - 2] += 1); // 2-14 - 2 = 0-12\n  });\n  return hist;\n};\n\n/**\n * Compare hands to see who wins\n * @param {array} hand - array of card objects\n * Hands is assigned a weight based on hand, then card values\n * Compare values to see who wins\n * @return {number} value is a base 14 string, to be converted into base 10 for comparison\n */\nexport const evaluate = (hand: DBCard[]): string => {\n  const hist = getHistogram(hand);\n  const rank = rankHand(hand, hist);\n\n  const cards = [\"0\", \"0\", \"0\", \"0\", \"0\"];\n  let total = 0; // track number of cards counted\n  let numCards = 4; // number of same cards in a set\n  let i = 0; // iterator\n  let last = -1; // track location of last in numCards set\n\n  // get card values and display them in order of importance\n  while (total < 5) {\n    const num = hist.indexOf(numCards, last + 1);\n    if (num === -1) {\n      numCards -= 1;\n      last = -1;\n    } else {\n      cards[i] = num.toString(14);\n      i += 1;\n      total += numCards;\n      last = num;\n    }\n  }\n  return `${rank}${cards.reduce((a, c) => `${a}${c}`)}`;\n};\n\n/** function to remove n number of cards */\nexport const getCardsToDiscard = (\n  n: number,\n  hist: number[],\n  hand: DBCard[]\n): number[] => {\n  const nextCardsToDiscard: number[] = [];\n  const cardValues = [hist.indexOf(1)];\n  // find cards without pairs, starting with the smallest\n  for (let i = 1; i < n; i += 1) {\n    cardValues[i] = hist.indexOf(1, cardValues[i - 1] + 1);\n  }\n  // find hand index of individual cards\n  for (let i = 0; i < hand.length; i += 1) {\n    for (let j = 0; j < cardValues.length; j += 1) {\n      if (hand[i].weight - 2 === cardValues[j]) {\n        nextCardsToDiscard.push(i);\n        break;\n      }\n    }\n  }\n  return nextCardsToDiscard;\n};\n\n/** computer play algorithm:\n * PAIRS\n * draw 0 on 4 of a kind\n * draw 0 on full house\n * draw 1 on 3 of a kind, keep higher of 2\n * draw 1 on 2 pair\n * draw 3 on 2 of a kind\n *\n * This is a nice to have, for now we only follow the first half\n * STRAIGHT/FLUSH\n * draw 0 on straight\n * draw 0 on flush\n * draw 0 on straight flush\n * if 1 away from sf -> draw 1\n * if 1 away from S -> draw 1 if 5+ players, else regular hand\n * if 1 away from F -> draw 1 if 5+ players, else regular hand\n *\n * REGULAR HAND\n * if K / A -> draw 4\n * else draw 5\n */\nexport const computer = async (\n  player: DBPlayer,\n  discard: (cardsToDiscardInDB: number[], player: DBPlayer) => Promise<DBPlayer>\n): Promise<DBPlayer> => {\n  if (player.hands.length < 1) {\n    return player;\n  }\n  try {\n    const hand = player.hands[0].cards;\n    const hist = getHistogram(hand);\n    const rank = rankHand(hand, hist);\n\n    switch (rank) {\n      case 0: /* draw 4-5 on high card */ {\n        const nextCardsToDiscard =\n          hist.lastIndexOf(1) >= 11\n            ? getCardsToDiscard(4, hist, hand) // if ace || king draw 4\n            : [0, 1, 2, 3, 4]; // otherwise, draw all 5\n        const newPlayer = await discard(nextCardsToDiscard, player);\n        return newPlayer;\n      }\n      case 1: /* draw 3 on 2 of a kind */ {\n        const nextCardsToDiscard = getCardsToDiscard(3, hist, hand);\n        const newPlayer = await discard(nextCardsToDiscard, player);\n        return newPlayer;\n      }\n      case 2: /* draw 1 on 3 of a kind */\n      case 3: /* draw 1 on 2 Pair */ {\n        const nextCardsToDiscard = getCardsToDiscard(1, hist, hand);\n        const newPlayer = await discard(nextCardsToDiscard, player);\n        return newPlayer;\n      }\n      case 4: // draw 0 on straight\n      case 5: // draw 0 on flush\n      case 6: // draw 0 on full house\n      case 7: // draw 0 on 4 of a kind\n      case 8: // draw 0 on straight flush\n      default:\n        break;\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error(e);\n  }\n  return player;\n};\n\nexport const DEALER = 0;\nexport const LAST_PLAYER = 5;\n\nexport const findAndPayWinner = (players: DBPlayer[]): void => {\n  let winner = { val: 0, id: 0 };\n\n  players.forEach((player) => {\n    if (\n      player.id === DEALER ||\n      player.id > LAST_PLAYER ||\n      player.hands[0]?.cards.length < 1\n    ) {\n      return;\n    }\n\n    const playerScore = parseInt(evaluate(player.hands[0].cards), 14);\n    if (playerScore > winner.val) {\n      winner = { val: playerScore, id: player.id };\n    }\n  });\n\n  players.forEach((player, i) => {\n    if (player.id === DEALER || player.id > LAST_PLAYER) {\n      return;\n    }\n\n    if (player.id === winner.id) {\n      const newPlayer = { ...player, status: \"win\", money: player.money + 20 };\n      players[i] = newPlayer;\n    } else {\n      const newPlayer = { ...player, status: \"lose\", money: player.money - 5 };\n      players[i] = newPlayer;\n    }\n  });\n};\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { useRecoilState } from \"recoil\";\nimport GameTable from \"../game-table\";\nimport asyncForEach from \"../../../helpers/asyncForEach\";\nimport Deck from \"../../../apis/Deck\";\nimport { DEALER, LAST_PLAYER, computer, findAndPayWinner } from \"./helpers\";\nimport pokerState, {\n  PokerGameFunctions as PGF,\n  newPokerGameState,\n} from \"../../../recoil/poker-state\";\nimport { DBPlayer, defaultWeigh } from \"../../../recoil/player-atom\";\n\nconst Poker: React.FC = () => {\n  const [{ poker, turn, players }, setState] = useRecoilState(pokerState);\n  const { cardsToDiscard, gameFunctions, gameOver, hideHands } = poker;\n\n  // ----------     bot automation handlers     ---------- //\n  /** iterate through array, removing each index number from hand\n   * then add new cards to the hand */\n  const discard = async (\n    cardsToDiscardInDB: number[],\n    player: DBPlayer\n  ): Promise<DBPlayer> => {\n    const { hands } = player;\n    const newPlayer = { ...player };\n    const cards = [...hands[0].cards];\n\n    try {\n      // Swap Cards\n      const newCards = await Deck.deal(cardsToDiscardInDB.length);\n      cardsToDiscardInDB.forEach((discardIdx, i) => {\n        cards[discardIdx] = newCards[i];\n      });\n      cards.sort(Deck.rankSort);\n      const { weight, soft } = defaultWeigh(cards);\n      // Update Hand\n      newPlayer.hands = [{ cards, weight, soft }];\n    } catch (e) {\n      console.error(e); // eslint-disable-line no-console\n    }\n\n    return newPlayer;\n  };\n\n  const checkUpdate = async (): Promise<void> => {\n    try {\n      if (!hideHands && !gameOver && players[turn.player]?.isBot) {\n        const newPlayers = [...players];\n\n        // returns immutable new players\n        await asyncForEach(players, async (player: DBPlayer, i: number) => {\n          if (turn.player <= i && i < LAST_PLAYER) {\n            const newPlayer = await computer(player, discard);\n            newPlayers[i] = newPlayer;\n          }\n        });\n\n        // modifies money in newPlayers obj\n        findAndPayWinner(newPlayers);\n\n        // update state once\n        setState({\n          poker: {\n            cardsToDiscard,\n            gameFunctions: [PGF.NEW_GAME],\n            gameOver: true,\n            hideHands,\n          },\n          players: newPlayers,\n          turn: { player: 0, hand: 0 },\n        });\n      }\n    } catch (e) {\n      console.error(e); // eslint-disable-line no-console\n    }\n  };\n\n  // ----------     player handlers     ---------- //\n  /** function to finish betting and start the game */\n  const startGame = async (): Promise<void> => {\n    // shuffle the deck\n    await Deck.shuffle()\n      .then(async () => {\n        const newPlayers = [...players];\n        // deal the hands\n        await asyncForEach(players, async (player: DBPlayer) => {\n          if (player.id !== DEALER && player.id <= LAST_PLAYER) {\n            // New Hand\n            const cards = await Deck.deal(5);\n            cards.sort(Deck.rankSort);\n            const { weight, soft } = defaultWeigh(cards);\n\n            // Create New Hand\n            const pi = players.findIndex((p) => p.id === player.id);\n            if (pi !== -1) {\n              const newPlayer = {\n                ...newPlayers[pi],\n                hands: [{ cards, weight, soft }],\n              };\n              newPlayers[pi] = newPlayer;\n            }\n          }\n        });\n        setState({\n          players: newPlayers,\n          turn,\n          poker: {\n            cardsToDiscard,\n            gameFunctions: [PGF.DISCARD_CARDS],\n            gameOver,\n            hideHands: false,\n          },\n        });\n      })\n      .catch((e) => {\n        console.error(e); // eslint-disable-line no-console\n      });\n  };\n\n  /** helper function wrapping discard, meant for UI */\n  const handleDiscard = async (\n    tempPlayers: DBPlayer[],\n    tempTurn: number,\n    tempCardsToDiscard: number[]\n  ): Promise<void> => {\n    try {\n      const newPlayers = [...players];\n      const newPlayer = await discard(\n        tempCardsToDiscard,\n        tempPlayers[tempTurn]\n      );\n      newPlayers[tempTurn] = newPlayer;\n      setState({\n        poker: {\n          cardsToDiscard: [],\n          gameFunctions: [PGF.END_TURN],\n          gameOver,\n          hideHands,\n        },\n        turn,\n        players: newPlayers,\n      });\n    } catch (e) {\n      console.error(e); // eslint-disable-line no-console\n    }\n  };\n\n  /** function to route click actions */\n  const handleGameFunctionClick = async (type: string) => {\n    try {\n      const newPlayers: DBPlayer[] = [];\n\n      switch (type) {\n        case PGF.DISCARD_CARDS:\n          await handleDiscard(players, turn.player, cardsToDiscard);\n          break;\n        case PGF.END_TURN:\n          setState({\n            poker: {\n              cardsToDiscard: [],\n              gameFunctions: [PGF.DISCARD_CARDS],\n              gameOver,\n              hideHands,\n            },\n            turn: { player: turn.player + 1, hand: 0 },\n            players,\n          });\n          break;\n        case PGF.NEW_GAME:\n          players.forEach((player) =>\n            newPlayers.push({\n              ...player,\n              status: \"\",\n              hands: [],\n              bet: 5,\n            })\n          );\n          setState({\n            poker: newPokerGameState(),\n            turn: { player: 0, hand: 0 },\n            players: newPlayers,\n          });\n          break;\n        case PGF.START_GAME:\n          await startGame();\n          break;\n        default:\n          // eslint-disable-next-line no-console\n          console.error(\"Unknown Game Function: \", type);\n      }\n    } catch (e) {\n      console.error(e); // eslint-disable-line no-console\n    }\n  };\n\n  /** function to be called on card clicks */\n  const cardClickHandler = (\n    playerNo: number,\n    handNo: number,\n    cardNo: number\n  ): void => {\n    const newCardsToDiscard = [...cardsToDiscard];\n    // find card\n    const i = newCardsToDiscard.indexOf(cardNo);\n    // toggle in array\n    i === -1 ? newCardsToDiscard.push(cardNo) : newCardsToDiscard.splice(i, 1);\n    // update state\n    setState({\n      poker: {\n        cardsToDiscard: newCardsToDiscard,\n        gameFunctions,\n        gameOver,\n        hideHands,\n      },\n      turn,\n      players,\n    });\n  };\n\n  checkUpdate().catch(() => {\n    // eslint-disable-next-line no-console\n    console.error(\"check update failed\");\n  });\n\n  return (\n    <>\n      <Typography variant=\"h2\" gutterBottom>\n        5 Card Draw Poker\n      </Typography>\n      <GameTable\n        cardClickHandler={cardClickHandler}\n        cardsToDiscard={cardsToDiscard}\n        gameFunctions={gameFunctions}\n        onClick={handleGameFunctionClick as (name: string) => void}\n        gameOver={gameOver}\n        hideHands={hideHands}\n        isBlackJack={false}\n        players={players}\n        turn={turn}\n      />\n    </>\n  );\n};\n\nexport default Poker;\n","type ForEachCallback<T> = (item: T, index: number, array: T[]) => Promise<void>;\nasync function asyncForEach<T>(\n  array: T[],\n  callback: ForEachCallback<T>\n): Promise<void> {\n  for (let index = 0; index < array.length; index += 1) {\n    // eslint-disable-next-line no-await-in-loop\n    await callback(array[index], index, array);\n  }\n}\n\nexport default asyncForEach;\n","import { atom } from \"recoil\";\n\nexport interface TurnState {\n  player: number;\n  hand: number;\n}\n\nconst initialState: TurnState = { player: 0, hand: 0 };\n\nconst turnAtom = atom({\n  key: \"turnAtom\",\n  default:\n    (JSON.parse(localStorage.getItem(\"turn-atom\") || \"null\") as TurnState) ||\n    initialState,\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"turn-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\nexport default turnAtom;\n"],"names":["NEW_DECK","name","weight","suit","getNewDeck","map","card","getDeck","localForage","then","data","catch","setDeck","deck","shuffle","shuffledDeck","push","i","j","Math","floor","random","length","k","temp","shuffleDeck","deal","num","cards","pop","rankSort","a","b","cardFace","backgroundColor","borderRadius","cursor","display","fontWeight","height","margin","padding","width","cardTitle","textAlign","marginTop","Card","React","props","dropped","cardHandler","playerNo","handNo","cardNo","handleClick","cardColor","color","red","style","styles","onClick","role","Typography","variant","boldStyle","normalStyle","cardsToDiscard","hand","isBlackJack","isHandTurn","isMultiHand","isPlayerTurn","purple","handWeight","includes","player","minWidth","betHandler","hideHands","turn","hands","showSlider","id","isBot","minBet","max","min","money","maxBet","onSliderChange","event","value","background","cyan","status","green","blueGrey","Slider","onChange","step","bet","players","buttonStyle","gameFunctions","key","cardClickHandler","gameOver","played","slice","future","playersToDisplay","PokerGameFunctions","rankHand","hist","has3","indexOf","has2","isStraight","lastIndexOf","isFlush","getHistogram","forEach","getCardsToDiscard","n","nextCardsToDiscard","cardValues","computer","discard","rank","newPlayer","console","error","findAndPayWinner","winner","val","playerScore","parseInt","total","numCards","last","toString","reduce","c","evaluate","newPokerGameState","START_GAME","pokerAtom","atom","default","JSON","parse","localStorage","getItem","effects","onSet","state","setItem","stringify","selector","get","poker","turnAtom","playerAtom","set","DefaultValue","useRecoilState","pokerState","setState","cardsToDiscardInDB","Deck","newCards","discardIdx","sort","defaultWeigh","soft","checkUpdate","newPlayers","asyncForEach","PGF","startGame","pi","findIndex","p","e","handleDiscard","tempPlayers","tempTurn","tempCardsToDiscard","handleGameFunctionClick","type","gutterBottom","newCardsToDiscard","splice","array","callback","index"],"sourceRoot":""}