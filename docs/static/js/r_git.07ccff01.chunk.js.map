{"version":3,"file":"static/js/r_git.07ccff01.chunk.js","mappings":"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","sources":["components/common/expandable-card/ExpandableCard.tsx","components/resume/git-tools/CopyTextDisplay.tsx","components/resume/git-tools/BranchName.tsx","components/resume/git-tools/useCommitText.ts","components/resume/git-tools/CommitText.tsx","components/resume/git-tools/DeployBranch.tsx","components/resume/git-tools/Header.tsx","components/resume/git-tools/GitTools.tsx","hooks/useOpenState.ts"],"sourcesContent":["import React from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Collapse from \"@mui/material/Collapse\";\nimport Typography from \"@mui/material/Typography\";\nimport Grid from \"@mui/material/Grid\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { grey } from \"@mui/material/colors\";\nimport useToggleState from \"../../../hooks/useToggle\";\n\nconst cardStyles: React.CSSProperties = { marginTop: 40, overflow: \"visible\" };\nconst headerStyles: React.CSSProperties = {\n  borderRadius: 3,\n  marginLeft: 15,\n  marginRight: 15,\n  position: \"relative\",\n  top: -20,\n};\n\ninterface ExpandableCardProps {\n  /** change the background color of the title bar */\n  backgroundColor?: string;\n  /** content to be displayed in the main section of the card */\n  children?: React.ReactNode;\n  /** invert the color of the title and subtitle text */\n  inverted?: boolean;\n  /** subtitle content */\n  subtitle?: string | React.ReactNode;\n  /** title content */\n  title?: string | React.ReactNode;\n}\n\nconst ExpandableCard = (props: ExpandableCardProps): React.ReactElement => {\n  const [expanded, toggleExpanded] = useToggleState(true);\n  const { palette } = useTheme();\n  const {\n    title,\n    subtitle,\n    children,\n    backgroundColor,\n    inverted = false,\n  } = props;\n\n  const headerStyle = {\n    ...headerStyles,\n    backgroundColor: backgroundColor || palette.primary.main,\n  };\n  if (palette.mode !== \"dark\") {\n    headerStyle.boxShadow = `0px 15px 15px -10px ${grey[400]}`;\n  } else {\n    delete headerStyle.boxShadow;\n  }\n  const expandedHeaderStyle = { ...headerStyle, marginBottom: -20 };\n\n  const titleStyle = React.useMemo(\n    () => ({ color: inverted ? \"black\" : \"white\" }),\n    [inverted]\n  );\n  const subtitleStyle = React.useMemo(\n    () => ({ color: grey[inverted ? 800 : 300] }),\n    [inverted]\n  );\n\n  const titleJSX = (\n    <Typography style={titleStyle} variant=\"h6\">\n      {title}\n    </Typography>\n  );\n  const subtitleJSX = expanded ? (\n    <Typography style={subtitleStyle}>{subtitle}</Typography>\n  ) : null;\n\n  return (\n    <Card style={cardStyles}>\n      <CardHeader\n        onClick={toggleExpanded}\n        style={expanded ? expandedHeaderStyle : headerStyle}\n        subheader={subtitleJSX}\n        title={titleJSX}\n      />\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n          <Grid container spacing={1} style={{ overflowY: \"hidden\" }}>\n            {children}\n          </Grid>\n        </CardContent>\n      </Collapse>\n    </Card>\n  );\n};\n\nexport default ExpandableCard;\n","import React from \"react\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport Chip from \"@mui/material/Chip\";\nimport useOpenState from \"../../../hooks/useOpenState\";\n\ninterface CopyTextDisplayProps {\n  copyText?: string;\n  handleCopy: (text: string) => boolean;\n  text: string;\n}\n\nconst chipStyles: React.CSSProperties = {\n  height: \"auto\",\n  paddingTop: 7,\n  paddingBottom: 7,\n};\n\nconst CopyTextDisplay: React.FC<CopyTextDisplayProps> = (\n  props: CopyTextDisplayProps\n) => {\n  const [isOpen, handleOpen, handleClose] = useOpenState(false);\n  const { handleCopy, copyText, text } = props;\n\n  /** copies text to clipboard and opens prompt to tell the user */\n  const handleCopyText = React.useCallback((): void => {\n    handleOpen();\n    const toCopy = copyText || text;\n    handleCopy(toCopy);\n  }, [copyText, handleCopy, handleOpen, text]);\n\n  return (\n    <>\n      <Chip\n        onClick={handleCopyText}\n        style={chipStyles}\n        label={<div>{text}</div>}\n      />\n      <Snackbar\n        action={[\n          <IconButton key=\"close\" onClick={handleClose} size=\"large\">\n            <CloseIcon />\n          </IconButton>,\n        ]}\n        autoHideDuration={4000}\n        message=\"Copied Commit Text to clipboard!\"\n        onClose={handleClose}\n        open={isOpen}\n      />\n    </>\n  );\n};\n\nexport default CopyTextDisplay;\n","import React from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport Input from \"@mui/material/Input\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Clear from \"@mui/icons-material/Clear\";\nimport Grid from \"@mui/material/Grid\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport CopyTextDisplay from \"./CopyTextDisplay\";\nimport { BranchPrefixes, CasePreferences } from \"../../../store/types\";\n\ninterface BranchNameProps {\n  branchMessage?: string;\n  branchName: string;\n  branchPrefix: BranchPrefixes;\n  casePreference: CasePreferences;\n  getSelectOptions: (arr: string[]) => React.ReactNode;\n  gitTheme: string;\n  handleCopy: (text: string) => boolean;\n  onBranchMessageChange: React.ChangeEventHandler<\n    HTMLInputElement | HTMLTextAreaElement\n  >;\n  onBranchMessageClear: React.MouseEventHandler;\n  setBranchPrefix: (newBranchPrefix: BranchPrefixes) => void;\n  setCasePreference: (newCasePreference: CasePreferences) => void;\n}\n\nconst wrapperStyles: React.CSSProperties = {\n  paddingLeft: 20,\n  paddingRight: 20,\n  width: \"100%\",\n};\nconst topSpacing: React.CSSProperties = { marginTop: 12 };\n\nconst BranchName: React.FC<BranchNameProps> = (props: BranchNameProps) => {\n  const { getSelectOptions, setBranchPrefix, setCasePreference } = props;\n\n  /** function to generate select items for branch prefixes */\n  const getBranchPrefixOptions = React.useCallback(\n    (): React.ReactNode =>\n      getSelectOptions([\"chores\", \"epics\", \"features\", \"fixes\"]),\n    [getSelectOptions]\n  );\n\n  /** function to generate select items for case preference */\n  const getCasePreferenceOptions = React.useCallback(\n    (): React.ReactNode =>\n      getSelectOptions([\"snake_case\", \"kebab-case\", \"camelCase\", \"No Changes\"]),\n    [getSelectOptions]\n  );\n\n  /** function to update select state based on value */\n  const handleBranchPrefixSelect = React.useCallback(\n    (e: SelectChangeEvent): void => {\n      setBranchPrefix(e.target.value as BranchPrefixes);\n    },\n    [setBranchPrefix]\n  );\n\n  /** function to update text state based on value */\n  const handleCasePrefSelect = React.useCallback(\n    (e: SelectChangeEvent): void => {\n      setCasePreference(e.target.value as CasePreferences);\n    },\n    [setCasePreference]\n  );\n\n  const {\n    branchMessage,\n    branchName,\n    branchPrefix,\n    casePreference,\n    gitTheme,\n    handleCopy,\n    onBranchMessageChange,\n    onBranchMessageClear,\n  } = props;\n\n  const gitThemeStyles: React.CSSProperties = React.useMemo(\n    () => ({ color: gitTheme }),\n    [gitTheme]\n  );\n\n  return (\n    <div style={wrapperStyles}>\n      <Grid container spacing={2} style={{ marginBottom: 16 }}>\n        <Grid item sm={3} xs={12} style={{ marginTop: 16 }}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"branch-prefix\" style={gitThemeStyles}>\n              Branch Prefix\n            </InputLabel>\n            <Select\n              input={<Input id=\"branch-prefix\" />}\n              onChange={handleBranchPrefixSelect}\n              value={branchPrefix}\n            >\n              {getBranchPrefixOptions() || (\n                <MenuItem value=\"features\">features</MenuItem>\n              )}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item sm={3} xs={12} style={{ marginTop: 16 }}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"branch-prefix\" style={gitThemeStyles}>\n              Case Preference\n            </InputLabel>\n            <Select\n              input={<Input id=\"branch-prefix\" />}\n              onChange={handleCasePrefSelect}\n              value={casePreference}\n            >\n              {getCasePreferenceOptions() || (\n                <MenuItem value=\"snake_case\">snake_case</MenuItem>\n              )}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item sm={5} xs={10} style={{ marginTop: 16 }}>\n          <TextField\n            fullWidth\n            InputLabelProps={{ style: gitThemeStyles }}\n            label=\"Branch Name\"\n            multiline\n            onChange={onBranchMessageChange}\n            placeholder=\"Summary of User Story\"\n            value={branchMessage}\n          />\n        </Grid>\n        <Grid item sm={1} xs={2} style={{ marginTop: 16 }}>\n          <IconButton\n            onClick={onBranchMessageClear}\n            style={topSpacing}\n            size=\"large\"\n          >\n            <Clear />\n          </IconButton>\n        </Grid>\n      </Grid>\n      <CopyTextDisplay handleCopy={handleCopy} text={branchName} />\n    </div>\n  );\n};\n\nexport default BranchName;\n","import React from \"react\";\nimport { SelectChangeEvent } from \"@mui/material/Select\";\n\ninterface UseCommitTextReturns {\n  commitPrefix: string;\n  commitMessage: string;\n  commitDescription: string;\n  finishes: boolean;\n  getCommitText: () => string;\n  handleCommitPrefixSelect: (\n    event: SelectChangeEvent,\n    child: React.ReactNode\n  ) => void;\n  handleCommitMessageChange: React.ChangeEventHandler;\n  handleCommitDescriptionChange: React.ChangeEventHandler;\n  clearCommitMessage: React.MouseEventHandler;\n  clearCommitDescription: React.MouseEventHandler;\n  handleFinishesToggle: (\n    event: React.ChangeEvent<HTMLInputElement>,\n    checked: boolean\n  ) => void;\n}\n\nfunction useCommitText(\n  storyID?: string,\n  gitCommit?: boolean\n): UseCommitTextReturns {\n  const [commitPrefix, setLocalCommitPrefix] = React.useState(\"feat\");\n  const [commitMessage, setCommitMessage] = React.useState(\"\");\n  const [commitDescription, setCommitDescription] = React.useState(\"\");\n  const [finishes, setFinishes] = React.useState(false);\n\n  /** function to generate the commit message from inputs\n   * @return {string} format Prefix: Message [?Finishes? ID] */\n  const getCommitText = (): string => {\n    // prefix\n    const prefix = `${commitPrefix}: `;\n\n    // description\n    let desc = \" \";\n    if (commitDescription && storyID) {\n      desc = `\\n\\n${commitDescription}\\n\\n`;\n    } else if (commitDescription) {\n      desc = `\\n\\n${commitDescription}`;\n    }\n\n    // postfix\n    let postfix = \"\";\n    if (finishes && storyID) {\n      postfix = `[${storyID} #finish]`;\n    } else if (storyID) {\n      postfix = `[${storyID}]`;\n    }\n\n    // compile all components together\n    const gitMessage = `${prefix}${commitMessage}${desc}${postfix}`;\n\n    // add syntax wrapper\n    return gitCommit ? `git commit -m \"${gitMessage}\"` : gitMessage;\n  };\n\n  /** function to update select state based on value */\n  const handleCommitPrefixSelect = (e: SelectChangeEvent): void => {\n    setLocalCommitPrefix(e.target.value);\n  };\n\n  /** function to update text state based on value */\n  const handleCommitMessageChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setCommitMessage(e.target.value);\n  };\n\n  const handleCommitDescriptionChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    setCommitDescription(e.target.value);\n  };\n\n  /** function to update text state based on value */\n  const clearCommitMessage = (): void => {\n    setCommitMessage(\"\");\n  };\n\n  const clearCommitDescription = (): void => {\n    setCommitDescription(\"\");\n  };\n\n  const handleFinishesToggle = (\n    _e: React.ChangeEvent<HTMLInputElement>,\n    isC: boolean\n  ): void => {\n    setFinishes(isC);\n  };\n\n  return {\n    commitPrefix,\n    commitMessage,\n    commitDescription,\n    finishes,\n    getCommitText,\n    handleCommitPrefixSelect,\n    handleCommitMessageChange,\n    handleCommitDescriptionChange,\n    clearCommitMessage,\n    clearCommitDescription,\n    handleFinishesToggle,\n  };\n}\n\nexport default useCommitText;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport TextField from \"@mui/material/TextField\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Switch from \"@mui/material/Switch\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport Input from \"@mui/material/Input\";\nimport Select from \"@mui/material/Select\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Clear from \"@mui/icons-material/Clear\";\nimport Grid from \"@mui/material/Grid\";\nimport nl2br from \"react-newline-to-break\";\nimport CopyTextDisplay from \"./CopyTextDisplay\";\nimport { setCommitPrefix } from \"../../../store/modules/git\";\nimport { DBRootState } from \"../../../store/types\";\nimport useCommitText from \"./useCommitText\";\n\ninterface CommitTextProps {\n  getSelectOptions: (arr: string[]) => React.ReactNode;\n  gitTheme: string;\n  handleCopy: (text: string) => boolean;\n  storyID?: string;\n}\n\nconst wrapperStyles: React.CSSProperties = {\n  paddingLeft: 20,\n  paddingRight: 20,\n  width: \"100%\",\n};\nconst marginTopStyles: React.CSSProperties = { marginTop: 12 };\n\nconst CommitText: React.FC<CommitTextProps> = (props: CommitTextProps) => {\n  const gitCommit = useSelector((state: DBRootState) => state.git.commitPrefix);\n  const dispatch = useDispatch();\n\n  const { getSelectOptions, storyID, handleCopy, gitTheme } = props;\n\n  const {\n    commitPrefix,\n    commitMessage,\n    commitDescription,\n    finishes,\n    getCommitText,\n    handleCommitPrefixSelect,\n    handleCommitMessageChange,\n    handleCommitDescriptionChange,\n    clearCommitMessage,\n    clearCommitDescription,\n    handleFinishesToggle,\n  } = useCommitText(storyID, gitCommit);\n\n  /** function to generate select items based of input */\n  const getCommitPrefixOptions = React.useCallback(\n    (): React.ReactNode =>\n      getSelectOptions([\n        \"build\",\n        \"chore\",\n        \"ci\",\n        \"docs\",\n        \"feat\",\n        \"fix\",\n        \"perf\",\n        \"refactor\",\n        \"revert\",\n        \"style\",\n        \"test\",\n      ]),\n    [getSelectOptions]\n  );\n\n  const handleGitCommitToggle = React.useCallback(\n    (_e: React.ChangeEvent<HTMLInputElement>, isC: boolean): void => {\n      dispatch(setCommitPrefix(isC));\n    },\n    [dispatch]\n  );\n\n  const commitText = getCommitText();\n  const displayText = commitText && nl2br(getCommitText());\n\n  return (\n    <div style={wrapperStyles}>\n      <Grid container spacing={2} style={{ marginBottom: 16 }}>\n        <Grid item sm={4} xs={12} style={{ marginTop: 16 }}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"commit-prefix\" style={{ color: gitTheme }}>\n              Commit Prefix\n            </InputLabel>\n            <Select\n              input={<Input id=\"branch-prefix\" />}\n              onChange={handleCommitPrefixSelect}\n              value={commitPrefix}\n            >\n              {getCommitPrefixOptions()}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item sm={4} xs={12} style={{ marginTop: 16 }}>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={finishes}\n                onChange={handleFinishesToggle}\n                value=\"Finishes User Story\"\n              />\n            }\n            label=\"Finishes User Story\"\n          />\n        </Grid>\n        <Grid item sm={4} xs={12} style={{ marginTop: 16 }}>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={gitCommit}\n                onChange={handleGitCommitToggle}\n                value=\"Add git commit -m\"\n              />\n            }\n            label=\"Add git commit -m\"\n          />\n        </Grid>\n        <Grid item sm={5} xs={10}>\n          <TextField\n            fullWidth\n            InputLabelProps={{ style: { color: gitTheme } }}\n            label=\"Commit Message\"\n            onChange={handleCommitMessageChange}\n            placeholder=\"Summary of Work Done (Message)\"\n            value={commitMessage}\n          />\n        </Grid>\n        <Grid item sm={1} xs={2}>\n          <IconButton\n            onClick={clearCommitMessage}\n            style={marginTopStyles}\n            size=\"large\"\n          >\n            <Clear />\n          </IconButton>\n        </Grid>\n        <Grid item sm={5} xs={10}>\n          <TextField\n            fullWidth\n            InputLabelProps={{ style: { color: gitTheme } }}\n            label=\"Commit Description\"\n            multiline\n            onChange={handleCommitDescriptionChange}\n            placeholder=\"Summary of Work Done (Description)\"\n            value={commitDescription}\n          />\n        </Grid>\n        <Grid item sm={1} xs={2}>\n          <IconButton\n            onClick={clearCommitDescription}\n            style={marginTopStyles}\n            size=\"large\"\n          >\n            <Clear />\n          </IconButton>\n        </Grid>\n      </Grid>\n      <CopyTextDisplay\n        copyText={commitText}\n        handleCopy={handleCopy}\n        text={displayText}\n      />\n    </div>\n  );\n};\n\nexport default CommitText;\n","import React from \"react\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport Input from \"@mui/material/Input\";\nimport Grid from \"@mui/material/Grid\";\nimport CopyTextDisplay from \"./CopyTextDisplay\";\n\ninterface DeployBranchProps {\n  branchName: string;\n  getSelectOptions: (arr: string[]) => React.ReactNode;\n  gitTheme: string;\n  handleCopy: (text: string) => boolean;\n}\n\nconst DeployBranch: React.FC<DeployBranchProps> = React.memo(\n  (props: DeployBranchProps) => {\n    const [targetBranch, setTargetBranch] = React.useState(\"test-pipeline\");\n\n    const handleSelect = React.useCallback(\n      (e: SelectChangeEvent): void => {\n        setTargetBranch(e.target.value);\n      },\n      [setTargetBranch]\n    );\n\n    const { gitTheme, handleCopy, getSelectOptions, branchName } = props;\n\n    return (\n      <div style={{ paddingLeft: 20, paddingRight: 20, width: \"100%\" }}>\n        <Grid\n          container\n          spacing={1}\n          style={{ display: \"flex\", alignItems: \"center\" }}\n        >\n          <Grid item sm={3} xs={12} style={{ marginTop: 16 }}>\n            <FormControl fullWidth>\n              <InputLabel htmlFor=\"target-branch\" style={{ color: gitTheme }}>\n                Target Branch\n              </InputLabel>\n              <Select\n                input={<Input id=\"target-branch\" />}\n                onChange={handleSelect}\n                value={targetBranch}\n              >\n                {getSelectOptions([\"test-pipeline\", \"sandbox-pipeline\"])}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item sm={9} xs={12} style={{ marginTop: 16 }}>\n            <CopyTextDisplay\n              handleCopy={handleCopy}\n              text={`git push -f origin ${branchName}:${targetBranch}`}\n            />\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n);\n\nexport default DeployBranch;\n","import React from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Typography from \"@mui/material/Typography\";\n\ninterface HeaderProps {\n  gitTheme: string;\n  onIdChange: React.ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n  storyID?: string;\n}\n\nconst validId = /[A-Z]{4}-[a-zA-Z0-9]+/;\n\nconst Header: React.FC<HeaderProps> = React.memo((props: HeaderProps) => {\n  const { onIdChange, storyID, gitTheme } = props;\n\n  const isIdValid = storyID && validId.test(storyID);\n\n  return (\n    <>\n      <Typography variant=\"h2\">Git Tools</Typography>\n      <TextField\n        InputLabelProps={{ style: { color: gitTheme } }}\n        label=\"User Story ID\"\n        onChange={onIdChange}\n        placeholder=\"GNAP-12345\"\n        style={{ marginLeft: 20 }}\n        value={storyID}\n        error={!isIdValid}\n      />\n      <br />\n    </>\n  );\n});\n\nexport default Header;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport { deepOrange } from \"@mui/material/colors\";\nimport handleCopy from \"copy-to-clipboard\";\nimport snakeCase from \"lodash/snakeCase\";\nimport kebabCase from \"lodash/kebabCase\";\nimport camelCase from \"lodash/camelCase\";\nimport {\n  setBranchMessage,\n  setBranchPrefix,\n  setCasePreference,\n  setKey,\n} from \"../../../store/modules/git\";\nimport BranchName from \"./BranchName\";\nimport CommitText from \"./CommitText\";\nimport DeployBranch from \"./DeployBranch\";\nimport Header from \"./Header\";\nimport ExpandableCard from \"../../common/expandable-card\";\nimport {\n  DBRootState,\n  BranchPrefixes,\n  CasePreferences,\n} from \"../../../store/types\";\n\nconst gitTheme = deepOrange[600];\nexport const validTypingId = /[A-Z]{1,4}-?[a-zA-Z0-9]*/;\n\n/** function to generate select items based of input */\nexport const getSelectOptions = (arr: string[]): React.ReactNode =>\n  arr.map((t, i) => (\n    <MenuItem key={i} value={t}>\n      {t}\n    </MenuItem>\n  ));\n\n/** function to generate the branch name from inputs\n * @return {string} format prefix/<story_id>_name_lower_cased */\nexport const getBranchName = (\n  branchMessage: string,\n  branchPrefix: BranchPrefixes,\n  casePreference: CasePreferences,\n  storyID: string\n): string => {\n  const prefix = branchPrefix ? `${branchPrefix}/` : \"\";\n  let msg = \"\";\n  switch (casePreference) {\n    case \"snake_case\":\n      msg = `${storyID && `${storyID}_`}${snakeCase(branchMessage)}`;\n      break;\n    case \"kebab-case\":\n      msg = `${storyID && `${storyID}-`}${kebabCase(branchMessage)}`;\n      break;\n    case \"camelCase\":\n      msg = `${storyID}${camelCase(branchMessage)}`;\n      break;\n    default:\n      msg = `${storyID}${branchMessage}`;\n  }\n  return `${prefix}${msg}`;\n};\n\n/* GitTools  ->  Header\n *          |->  BranchName    -|\n *          |->  CommitText    -|->  CopyTextDisplay\n *          |->  DeployBranch  -|    */\nconst GitTools: React.FC = () => {\n  const { branchMessage, branchPrefix, casePreference, storyID } = useSelector(\n    (state: DBRootState) => state.git\n  );\n  const dispatch = useDispatch();\n\n  /** function to update text state based on value */\n  const handleIDChange: React.ChangeEventHandler<\n    HTMLInputElement | HTMLTextAreaElement\n  > = React.useCallback(\n    (e) => {\n      const [value] = validTypingId.exec(e.target.value) || [\"\"];\n      dispatch(setKey(value));\n    },\n    [dispatch]\n  );\n  /** function to update text state based on value */\n  const handleBranchMessageChange: React.ChangeEventHandler<\n    HTMLInputElement | HTMLTextAreaElement\n  > = React.useCallback(\n    (e) => {\n      dispatch(setBranchMessage(e.target.value));\n    },\n    [dispatch]\n  );\n  /** function to clear text state based on value */\n  const handleBranchMessageClear = React.useCallback((): void => {\n    dispatch(setBranchMessage(\"\"));\n  }, [dispatch]);\n  /** function to update text state based on value */\n  const handleBranchPrefix = React.useCallback(\n    (newBranchPrefix: BranchPrefixes): void => {\n      dispatch(setBranchPrefix(newBranchPrefix));\n    },\n    [dispatch]\n  );\n  /** function to update case pref based on value */\n  const handleCasePreference = React.useCallback(\n    (newCasePreference: CasePreferences): void => {\n      dispatch(setCasePreference(newCasePreference));\n    },\n    [dispatch]\n  );\n\n  const branchName = getBranchName(\n    branchMessage,\n    branchPrefix,\n    casePreference,\n    storyID\n  );\n\n  return (\n    <>\n      <Header\n        {...{\n          gitTheme,\n          onIdChange: handleIDChange,\n          storyID,\n        }}\n      />\n      <ExpandableCard backgroundColor={gitTheme} title=\"Create Branch Name\">\n        <BranchName\n          {...{\n            branchMessage,\n            branchName,\n            branchPrefix,\n            casePreference,\n            getSelectOptions,\n            gitTheme,\n            handleCopy,\n            onBranchMessageChange: handleBranchMessageChange,\n            onBranchMessageClear: handleBranchMessageClear,\n            setBranchPrefix: handleBranchPrefix,\n            setCasePreference: handleCasePreference,\n          }}\n        />\n      </ExpandableCard>\n      <ExpandableCard backgroundColor={gitTheme} title=\"Create Commit Message\">\n        <CommitText\n          {...{\n            getSelectOptions,\n            gitTheme,\n            handleCopy,\n            storyID,\n          }}\n        />\n      </ExpandableCard>\n      <ExpandableCard\n        backgroundColor={gitTheme}\n        title=\"Deploy to Test Pipelines\"\n      >\n        <DeployBranch\n          {...{\n            branchName,\n            getSelectOptions,\n            gitTheme,\n            handleCopy,\n          }}\n        />\n      </ExpandableCard>\n    </>\n  );\n};\n\nexport default GitTools;\n","import React from \"react\";\n\ntype OpenStateHook = [boolean, () => void, () => void];\n\nconst useOpenState = (defaultVal = false): OpenStateHook => {\n  const [isOpen, setIsOpen] = React.useState(defaultVal);\n\n  const handleOpen = (): void => {\n    setIsOpen(true);\n  };\n  const handleClose = (): void => {\n    setIsOpen(false);\n  };\n\n  return [isOpen, handleOpen, handleClose];\n};\n\nexport default useOpenState;\n"],"names":["cardStyles","marginTop","overflow","headerStyles","borderRadius","marginLeft","marginRight","position","top","props","useToggleState","expanded","toggleExpanded","palette","useTheme","title","subtitle","children","backgroundColor","inverted","headerStyle","primary","main","mode","boxShadow","grey","expandedHeaderStyle","marginBottom","titleStyle","React","color","subtitleStyle","titleJSX","Typography","style","variant","subtitleJSX","Card","CardHeader","onClick","subheader","Collapse","in","timeout","unmountOnExit","CardContent","Grid","container","spacing","overflowY","chipStyles","height","paddingTop","paddingBottom","useOpenState","isOpen","handleOpen","handleClose","handleCopy","copyText","text","handleCopyText","Chip","label","Snackbar","action","IconButton","size","Close","autoHideDuration","message","onClose","open","wrapperStyles","paddingLeft","paddingRight","width","topSpacing","getSelectOptions","setBranchPrefix","setCasePreference","getBranchPrefixOptions","getCasePreferenceOptions","handleBranchPrefixSelect","e","target","value","handleCasePrefSelect","branchMessage","branchName","branchPrefix","casePreference","gitTheme","onBranchMessageChange","onBranchMessageClear","gitThemeStyles","item","sm","xs","FormControl","fullWidth","InputLabel","htmlFor","Select","input","Input","id","onChange","MenuItem","TextField","InputLabelProps","multiline","placeholder","Clear","storyID","gitCommit","commitPrefix","setLocalCommitPrefix","commitMessage","setCommitMessage","commitDescription","setCommitDescription","finishes","setFinishes","getCommitText","prefix","desc","postfix","gitMessage","handleCommitPrefixSelect","handleCommitMessageChange","handleCommitDescriptionChange","clearCommitMessage","clearCommitDescription","handleFinishesToggle","_e","isC","marginTopStyles","useSelector","state","git","dispatch","useDispatch","useCommitText","getCommitPrefixOptions","handleGitCommitToggle","setCommitPrefix","commitText","displayText","nl2br","FormControlLabel","control","Switch","checked","DeployBranch","targetBranch","setTargetBranch","handleSelect","display","alignItems","validId","Header","onIdChange","isIdValid","test","error","deepOrange","validTypingId","arr","map","t","i","handleIDChange","exec","setKey","handleBranchMessageChange","setBranchMessage","handleBranchMessageClear","handleBranchPrefix","newBranchPrefix","handleCasePreference","newCasePreference","msg","snakeCase","kebabCase","camelCase","getBranchName","defaultVal","setIsOpen"],"sourceRoot":""}