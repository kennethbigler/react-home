{"version":3,"file":"static/js/r_travel.21cef5f9.chunk.js","mappings":"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","sources":["constants/countries.ts","components/resume/travel-map/TravelTable.tsx","components/resume/travel-map/WorldMap.tsx","components/resume/travel-map/TravelMap.tsx"],"sourcesContent":["interface Country {\n  continent: string;\n  flag: string;\n  code: string;\n}\nexport type Countries = Record<string, Country>;\n\nconst countries: Countries = {\n  Austria: { continent: \"EU\", flag: \"ðŸ‡¦ðŸ‡¹\", code: \"at\" },\n  Bahamas: { continent: \"NA\", flag: \"ðŸ‡§ðŸ‡¸\", code: \"bs\" },\n  Canada: { continent: \"NA\", flag: \"ðŸ‡¨ðŸ‡¦\", code: \"ca\" },\n  Denmark: { continent: \"EU\", flag: \"ðŸ‡©ðŸ‡°\", code: \"dk\" },\n  Estonia: { continent: \"EU\", flag: \"ðŸ‡ªðŸ‡ª\", code: \"ee\" },\n  Finland: { continent: \"EU\", flag: \"ðŸ‡«ðŸ‡®\", code: \"fi\" },\n  France: { continent: \"EU\", flag: \"ðŸ‡«ðŸ‡·\", code: \"fr\" },\n  Germany: { continent: \"EU\", flag: \"ðŸ‡©ðŸ‡ª\", code: \"de\" },\n  Greece: { continent: \"EU\", flag: \"ðŸ‡¬ðŸ‡·\", code: \"gr\" },\n  Iceland: { continent: \"EU\", flag: \"ðŸ‡®ðŸ‡¸\", code: \"is\" },\n  Ireland: { continent: \"EU\", flag: \"ðŸ‡®ðŸ‡ª\", code: \"ie\" },\n  Italy: { continent: \"EU\", flag: \"ðŸ‡®ðŸ‡¹\", code: \"it\" },\n  Jamaica: { continent: \"NA\", flag: \"ðŸ‡¯ðŸ‡²\", code: \"jm\" },\n  Mexico: { continent: \"NA\", flag: \"ðŸ‡²ðŸ‡½\", code: \"mx\" },\n  Netherlands: { continent: \"EU\", flag: \"ðŸ‡³ðŸ‡±\", code: \"nl\" },\n  Norway: { continent: \"EU\", flag: \"ðŸ‡³ðŸ‡´\", code: \"no\" },\n  Poland: { continent: \"EU\", flag: \"ðŸ‡µðŸ‡±\", code: \"pl\" },\n  Portugal: { continent: \"EU\", flag: \"ðŸ‡µðŸ‡¹\", code: \"pt\" },\n  Russia: { continent: \"EU\", flag: \"ðŸ‡·ðŸ‡º\", code: \"ru\" },\n  Spain: { continent: \"EU\", flag: \"ðŸ‡ªðŸ‡¸\", code: \"es\" },\n  Sweden: { continent: \"EU\", flag: \"ðŸ‡¸ðŸ‡ª\", code: \"se\" },\n  Switzerland: { continent: \"EU\", flag: \"ðŸ‡¨ðŸ‡­\", code: \"ch\" },\n  Turkey: { continent: \"EU\", flag: \"ðŸ‡¹ðŸ‡·\", code: \"tr\" },\n  \"United Kingdom\": { continent: \"EU\", flag: \"ðŸ‡¬ðŸ‡§\", code: \"gb\" },\n  \"United States of America\": { continent: \"NA\", flag: \"ðŸ‡ºðŸ‡¸\", code: \"us\" },\n  \"British Virgin Islands\": { continent: \"NA\", flag: \"ðŸ‡»ðŸ‡¬\", code: \"vg\" },\n  \"Cayman Islands\": { continent: \"NA\", flag: \"ðŸ‡°ðŸ‡¾\", code: \"ky\" },\n  \"U.S. Virgin Islands\": { continent: \"NA\", flag: \"ðŸ‡»ðŸ‡®\", code: \"vi\" },\n  Gibraltar: { continent: \"EU\", flag: \"ðŸ‡¬ðŸ‡®\", code: \"gi\" },\n  Malta: { continent: \"EU\", flag: \"ðŸ‡²ðŸ‡¹\", code: \"mt\" },\n  Monaco: { continent: \"EU\", flag: \"ðŸ‡²ðŸ‡¨\", code: \"mc\" },\n  Vatican: { continent: \"EU\", flag: \"ðŸ‡»ðŸ‡¦\", code: \"va\" },\n};\n\nexport const NA: string[] = [];\nexport const EU: string[] = [];\n\nObject.entries(countries).forEach(([name, country]): void => {\n  country.continent === \"NA\" && NA.push(`${name} ${country.flag}`);\n  country.continent === \"EU\" && EU.push(`${name} ${country.flag}`);\n});\n\nexport default countries;\n","import React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { Typography } from \"@mui/material\";\nimport { grey } from \"@mui/material/colors\";\nimport { NA, EU } from \"../../../constants/countries\";\n\nconst marginStyles: React.CSSProperties = { marginTop: 24, marginBottom: 16 };\nconst separatorStyles: React.CSSProperties = {\n  borderRight: `1px solid ${grey[400]}`,\n};\nconst cellStyles: React.CSSProperties = {\n  padding: 5,\n  textAlign: \"center\",\n  whiteSpace: \"normal\",\n  overflow: \"visible\",\n};\n\n// ratio to display on table, 2:1 seemed to look best\nconst EURatio = 3;\n// export array of <li> elements for display\nconst countries: React.ReactNode[] = [];\n// iterate to the end of the longer list\nconst len = Math.max(NA.length, Math.ceil(EU.length / EURatio));\nfor (let i = 0; i < len; i += 1) {\n  const row = [];\n  // add NA Country\n  row.push(\n    <TableCell key={`tmc${i}`} style={{ ...cellStyles, ...separatorStyles }}>\n      {NA[i]}\n    </TableCell>\n  );\n  // add EU Countries\n  for (let j = 0; j < EURatio; j += 1) {\n    row.push(\n      <TableCell key={`tmc${i}${j}`} style={cellStyles}>\n        {EU[EURatio * i + j]}\n      </TableCell>\n    );\n  }\n  // form the row\n  const countryRow = <TableRow key={`tmr${i}`}>{row}</TableRow>;\n  countries.push(countryRow);\n}\n\nconst TravelMap: React.FC = React.memo(() => (\n  <>\n    <Typography variant=\"h4\" style={marginStyles}>\n      {`I have been to ${NA.length + EU.length} countries:`}\n    </Typography>\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell style={{ ...cellStyles, ...separatorStyles }}>\n            North America\n          </TableCell>\n          <TableCell colSpan={EURatio} style={cellStyles}>\n            Europe\n          </TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>{countries}</TableBody>\n    </Table>\n  </>\n));\n\nexport default TravelMap;\n","import React from \"react\";\nimport Map, { DataItem } from \"react-svg-worldmap\";\nimport { blueGrey } from \"@mui/material/colors\";\nimport { useAppSelector } from \"../../../store/store\";\nimport countries from \"../../../constants/countries\";\n\nconst data: DataItem[] = Object.keys(countries).map((k) => ({\n  country: countries[k].code,\n  value: 1,\n}));\n\nconst WorldMap = () => {\n  const { theme } = useAppSelector((state) => ({ theme: state.theme.mode }));\n  const screenWidth = Math.min(document.body.clientWidth - 32, 2000);\n\n  return (\n    <Map\n      color={blueGrey[500]}\n      data={data}\n      size={screenWidth}\n      backgroundColor=\"transparent\"\n      borderColor={theme === \"dark\" ? \"white\" : \"black\"}\n    />\n  );\n};\n\nexport default WorldMap;\n","import React from \"react\";\nimport { Typography } from \"@mui/material\";\nimport TravelTable from \"./TravelTable\";\nimport WorldMap from \"./WorldMap\";\n\n/* TravelMap  ->  WorldMap  ->  Popover\n *           |->  TravelTable */\nconst TravelMap: React.FC = React.memo(() => (\n  <>\n    <Typography variant=\"h2\">My Travel Map</Typography>\n    <WorldMap />\n    <TravelTable />\n  </>\n));\n\nexport default TravelMap;\n"],"names":["countries","Austria","continent","flag","code","Bahamas","Canada","Denmark","Estonia","Finland","France","Germany","Greece","Iceland","Ireland","Italy","Jamaica","Mexico","Netherlands","Norway","Poland","Portugal","Russia","Spain","Sweden","Switzerland","Turkey","Gibraltar","Malta","Monaco","Vatican","NA","EU","Object","entries","forEach","name","country","push","marginStyles","marginTop","marginBottom","separatorStyles","borderRight","grey","cellStyles","padding","textAlign","whiteSpace","overflow","len","Math","max","length","ceil","i","row","TableCell","style","j","countryRow","TableRow","React","Typography","variant","Table","TableHead","colSpan","TableBody","data","keys","map","k","value","theme","useAppSelector","state","mode","screenWidth","min","document","body","clientWidth","color","blueGrey","size","backgroundColor","borderColor","TravelTable"],"sourceRoot":""}