{"version":3,"sources":["components/games/gametable/Card.styles.js","components/games/gametable/Card.jsx","components/games/gametable/Hand.jsx","components/games/gametable/Player.styles.js","components/games/gametable/Player.jsx","components/games/gametable/Board.jsx","components/games/gametable/Button.jsx","components/games/gametable/ButtonGroup.jsx","components/games/gametable/GameTable.jsx","components/games/gametable/index.js","components/games/poker/Poker.jsx","components/games/poker/index.js"],"names":["styles","cardFace","backgroundColor","borderRadius","cursor","display","fontWeight","height","margin","padding","width","cardTitle","textAlign","suit","maxWidth","Card","memo","props","dropped","name","cardColor","color","red","style","onClick","cardHandler","playerNo","handNo","cardNo","role","Typography","variant","Hand","cardsToDiscard","hand","isBlackJack","isHandTurn","isMultiHand","isPlayerTurn","bold","purple","marginTop","weight","map","cards","card","i","includes","key","player","minWidth","Player","betHandler","hideHands","turn","hands","length","showSlider","id","isBot","minBet","Math","max","min","money","maxBet","background","cyan","status","green","blueGrey","Slider","onChange","event","value","step","bet","Board","players","Button","func","ButtonGroup","gameFunctions","obj","GameTable","cardClickHandler","gameOver","played","slice","future","playersToDisplay","passProps","defaultProps","DEALER","LAST_PLAYER","Poker","setNewGameRedux","turnActions","playerActions","resetTurn","forEach","resetStatus","getNewGameState","startGame","getHand","get","getHistogram","hist","newGame","setState","handleDiscard","dealHands","endTurn","incrPlayerTurn","endGame","winner","val","playerScore","parseInt","evaluate","payout","rankHand","has3","indexOf","has2","isStraight","lastIndexOf","isFlush","j","discard","swapCards","state","discardHelper","n","discardCards","cardVals","push","computer","splice","rank","total","numCards","last","num","toString","reduce","a","c","Deck","shuffle","then","asyncForEach","newHand","this","canPlay","gutterBottom","Component","connect","dispatch","bindActionCreators"],"mappings":"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","file":"static/js/g_poker.c6f81937.chunk.js","sourcesContent":["const styles = {\n  cardFace: {\n    backgroundColor: 'white',\n    borderRadius: 5,\n    cursor: 'pointer',\n    display: 'inline-block',\n    fontWeight: 'bold',\n    height: 78,\n    margin: 5,\n    padding: 3,\n    width: 50,\n  },\n  cardTitle: { textAlign: 'left' },\n  suit: {\n    margin: 'auto',\n    maxWidth: 30,\n    textAlign: 'center',\n    width: '100%',\n  },\n};\n\nexport default styles;\n","import React, { memo } from 'react';\nimport types from 'prop-types';\nimport red from '@material-ui/core/colors/red';\nimport { Typography } from '@material-ui/core';\nimport styles from './Card.styles';\n// Parents: Hand\n\n/* --------------------------------------------------\n * Card\n * -------------------------------------------------- */\nconst Card = memo((props) => {\n  const { dropped, suit, name } = props;\n  // handle click to for card\n  const handleClick = () => {\n    const {\n      cardHandler, playerNo, handNo, cardNo,\n    } = props;\n    cardHandler(playerNo, handNo, cardNo);\n  };\n  // checking color based off suits: ♣♦♥♠\n  const cardColor = {\n    color: suit === '♣' || suit === '♠' ? 'black' : red[500],\n    backgroundColor: dropped ? red[100] : 'white',\n  };\n\n  // display in view\n  return (\n    <div style={{ ...styles.cardFace, ...cardColor }} onClick={handleClick} role=\"main\">\n      <div style={styles.cardTitle}>\n        {name + suit}\n      </div>\n      <Typography variant=\"h3\" style={{ ...styles.suit, ...cardColor }}>\n        {suit}\n      </Typography>\n    </div>\n  );\n});\n\nCard.propTypes = {\n  cardHandler: types.func,\n  cardNo: types.number.isRequired,\n  dropped: types.bool,\n  handNo: types.number.isRequired,\n  name: types.string.isRequired,\n  playerNo: types.number.isRequired,\n  suit: types.string.isRequired,\n};\n\nexport default Card;\n","import React, { Fragment } from 'react';\nimport types from 'prop-types';\nimport purple from '@material-ui/core/colors/purple';\nimport map from 'lodash/map';\nimport includes from 'lodash/includes';\nimport { Typography } from '@material-ui/core';\nimport Card from './Card';\n// Parents: Player\n\n/* --------------------------------------------------\n * Hand\n * -------------------------------------------------- */\nconst Hand = (props) => {\n  const {\n    cardHandler,\n    cardsToDiscard,\n    hand,\n    handNo,\n    isBlackJack,\n    isHandTurn,\n    isMultiHand,\n    isPlayerTurn,\n    playerNo,\n  } = props;\n\n  const bold = (isHandTurn && isMultiHand && isPlayerTurn)\n    || (!isMultiHand && isPlayerTurn)\n    ? { fontWeight: 'bold', color: purple[700] }\n    : { fontWeight: 'normal' };\n\n  return (\n    <Fragment>\n      <Typography variant=\"h4\" style={{ ...bold, marginTop: '0.5em' }}>\n        {isBlackJack\n          && (hand.weight > 21 ? 'Bust: ' : 'Hand Weight: ') + hand.weight}\n      </Typography>\n      {map(hand.cards, (card, i) => {\n        const dropped = includes(cardsToDiscard, i);\n        return (\n          <Card\n            key={card.name + card.suit}\n            cardHandler={cardHandler}\n            cardNo={i}\n            dropped={dropped}\n            handNo={handNo}\n            name={card.name}\n            playerNo={playerNo}\n            suit={card.suit}\n          />\n        );\n      })}\n    </Fragment>\n  );\n};\n\nHand.propTypes = {\n  cardHandler: types.func,\n  cardsToDiscard: types.arrayOf(types.number),\n  hand: types.shape({\n    weight: types.number,\n    cards: types.arrayOf(\n      types.shape({\n        name: types.string.isRequired,\n        suit: types.string.isRequired,\n      }),\n    ).isRequired,\n  }).isRequired,\n  handNo: types.number.isRequired,\n  isBlackJack: types.bool.isRequired,\n  isHandTurn: types.bool.isRequired,\n  isMultiHand: types.bool.isRequired,\n  isPlayerTurn: types.bool.isRequired,\n  playerNo: types.number.isRequired,\n};\n\nexport default Hand;\n","const styles = {\n  player: {\n    borderRadius: 5,\n    display: 'inline-block',\n    margin: 10,\n    padding: 20,\n  },\n  width: { minWidth: '100px' },\n};\n\nexport default styles;\n","import React from 'react';\nimport types from 'prop-types';\nimport Slider from '@material-ui/core/Slider';\nimport cyan from '@material-ui/core/colors/cyan';\nimport green from '@material-ui/core/colors/green';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport red from '@material-ui/core/colors/red';\nimport map from 'lodash/map';\nimport { Typography } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport Hand from './Hand';\nimport styles from './Player.styles';\n// Parents: Board\n\n/* --------------------------------------------------\n * Player\n * -------------------------------------------------- */\nconst Player = (props) => {\n  // get vars from props\n  const {\n    betHandler,\n    cardHandler,\n    cardsToDiscard,\n    hideHands,\n    isBlackJack,\n    player,\n    playerNo,\n    turn,\n  } = props;\n  // set booleans\n  const isPlayerTurn = !!turn && playerNo === turn.player;\n  const isMultiHand = player.hands.length > 1;\n  const showSlider = !!hideHands && isBlackJack && player.id !== 0 && !player.isBot;\n  // set slider variables\n  const minBet = Math.max(Math.min(player.money, 5), 0);\n  const maxBet = Math.max(Math.min(player.money, 100), 10);\n  const step = 5;\n  const onSliderChange = (event, value) => betHandler(player.id, event, value);\n  // set colors\n  let color = isPlayerTurn ? { background: cyan[200] } : {};\n  const weight = isPlayerTurn ? { fontWeight: 'bold' } : { fontWeight: 'normal' };\n  if (player.status === 'win') {\n    color = { background: green[300] };\n  }\n  if (player.status === 'draw') {\n    color = { background: blueGrey[300] };\n  }\n  if (player.status === 'lose') {\n    color = { background: red[300] };\n  }\n\n  return (\n    <Card style={{ ...styles.player, ...color }}>\n      <Typography variant=\"h4\" style={{ ...weight }}>\n        {player.name}\n        : $\n        {player.money}\n      </Typography>\n      {showSlider && (\n        <Slider\n          max={maxBet}\n          min={minBet}\n          onChange={onSliderChange}\n          step={step}\n          style={styles.width}\n          value={player.bet}\n        />\n      )}\n      {isBlackJack\n        && player.id !== 0 && (\n          <Typography variant=\"h5\">\n            Bet: $\n            {player.bet}\n          </Typography>\n      )}\n      {map(player.hands, (hand, i) => {\n        const isHandTurn = !!turn && turn.hand === i;\n        return (\n          <div key={`hand${i}`}>\n            {!hideHands && (\n              <Hand\n                cardHandler={cardHandler}\n                cardsToDiscard={cardsToDiscard}\n                hand={hand}\n                handNo={i}\n                isBlackJack={isBlackJack}\n                isHandTurn={isHandTurn}\n                isMultiHand={isMultiHand}\n                isPlayerTurn={isPlayerTurn}\n                playerNo={playerNo}\n              />\n            )}\n          </div>\n        );\n      })}\n    </Card>\n  );\n};\n\nPlayer.propTypes = {\n  betHandler: types.func,\n  cardHandler: types.func,\n  cardsToDiscard: types.arrayOf(types.number),\n  hideHands: types.bool,\n  isBlackJack: types.bool.isRequired,\n  player: types.shape({\n    hands: types.arrayOf(types.object).isRequired,\n    id: types.number.isRequired,\n    isBot: types.bool.isRequired,\n    money: types.number.isRequired,\n    status: types.string.isRequired,\n    name: types.string.isRequired,\n    bet: types.number.isRequired,\n  }).isRequired,\n  playerNo: types.number.isRequired,\n  turn: types.shape({\n    player: types.number.isRequired,\n    hand: types.number.isRequired,\n  }),\n};\n\nexport default Player;\n","import React, { Fragment } from 'react';\nimport types from 'prop-types';\nimport map from 'lodash/map';\nimport Player from './Player';\n// Parents: GameTable\n\n/* --------------------------------------------------\n * Board\n * -------------------------------------------------- */\nconst Board = (props) => {\n  const {\n    betHandler,\n    cardHandler,\n    cardsToDiscard,\n    hideHands,\n    isBlackJack,\n    players,\n    turn,\n  } = props;\n\n  return (\n    <Fragment>\n      {map(players, (player, i) => (\n        <Player\n          key={`player${i}`}\n          betHandler={betHandler}\n          cardHandler={cardHandler}\n          cardsToDiscard={cardsToDiscard}\n          hideHands={hideHands}\n          isBlackJack={isBlackJack}\n          player={player}\n          playerNo={i}\n          turn={turn}\n        />\n      ))}\n    </Fragment>\n  );\n};\n\nBoard.propTypes = {\n  betHandler: types.func,\n  cardHandler: types.func,\n  cardsToDiscard: types.arrayOf(types.number),\n  hideHands: types.bool,\n  isBlackJack: types.bool.isRequired,\n  players: types.arrayOf(types.object).isRequired,\n  turn: types.shape({\n    player: types.number.isRequired,\n    hand: types.number.isRequired,\n  }),\n};\n\nexport default Board;\n","import React, { memo } from 'react';\nimport types from 'prop-types';\nimport MuiButton from '@material-ui/core/Button';\n// Parents: ButtonGroup\n\n/* --------------------------------------------------\n * Button\n * -------------------------------------------------- */\n\nconst Button = memo((props) => {\n  const { func, name } = props;\n\n  return (\n    <MuiButton\n      color=\"primary\"\n      onClick={func}\n      style={{ margin: 12 }}\n      variant=\"contained\"\n    >\n      {name}\n    </MuiButton>\n  );\n});\n\nButton.propTypes = {\n  func: types.func.isRequired,\n  name: types.string.isRequired,\n};\n\nexport default Button;\n","import React from 'react';\nimport types from 'prop-types';\nimport map from 'lodash/map';\nimport Button from './Button';\n// Parents: GameTable\n\n/* --------------------------------------------------\n * ButtonGroup\n * -------------------------------------------------- */\n\nconst ButtonGroup = (props) => {\n  const { gameFunctions } = props;\n  return (\n    <div>\n      {map(gameFunctions, (obj) => (\n        <Button key={obj.name} func={obj.func} name={obj.name} />\n      ))}\n    </div>\n  );\n};\n\nButtonGroup.propTypes = {\n  gameFunctions: types.arrayOf(\n    types.shape({\n      name: types.string.isRequired,\n      func: types.func.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default ButtonGroup;\n","import React, { Fragment } from 'react';\nimport types from 'prop-types';\nimport Board from './Board';\nimport ButtonGroup from './ButtonGroup';\n// Parents: BlackJack\n\n/*\n * MAP:\n * GameTable ->  Board -> Player -> Hand -> Card\n *          |->  Button Group  ->  Button\n */\nconst GameTable = (props) => {\n  const {\n    betHandler,\n    cardClickHandler,\n    cardsToDiscard,\n    gameFunctions,\n    gameOver,\n    hideHands,\n    isBlackJack,\n    players,\n    turn,\n  } = props;\n\n  // move game buttons to make turn more obvious and support mobile\n  const played = players.slice(0, turn.player + 1);\n  const future = players.slice(turn.player + 1);\n  const playersToDisplay = !hideHands && gameOver === false\n    ? players.slice(turn.player, turn.player + 1)\n    : players;\n  // pass common props\n  const passProps = {\n    betHandler,\n    cardsToDiscard,\n    hideHands,\n    isBlackJack,\n    turn,\n    cardHandler: cardClickHandler,\n  };\n  return (\n    <Fragment>\n      {isBlackJack && !hideHands\n        ? (\n          <Fragment>\n            <Board players={played} {...passProps} />\n            <ButtonGroup gameFunctions={gameFunctions} />\n            <Board players={future} {...passProps} />\n          </Fragment>\n        ) : (\n          <Fragment>\n            <Board players={playersToDisplay} {...passProps} />\n            <ButtonGroup gameFunctions={gameFunctions} />\n          </Fragment>\n        )}\n    </Fragment>\n  );\n};\n\nGameTable.propTypes = {\n  betHandler: types.func,\n  cardClickHandler: types.func,\n  cardsToDiscard: types.arrayOf(types.number),\n  gameFunctions: types.arrayOf(types.object).isRequired,\n  gameOver: types.bool,\n  hideHands: types.bool,\n  isBlackJack: types.bool,\n  players: types.arrayOf(types.object).isRequired,\n  turn: types.shape({\n    player: types.number.isRequired,\n  }).isRequired,\n};\n\nGameTable.defaultProps = {\n  isBlackJack: true,\n};\n\nexport default GameTable;\n","import GameTable from './GameTable';\n\nexport default GameTable;\n","import React, { Component, Fragment } from 'react';\nimport types from 'prop-types';\nimport forEach from 'lodash/forEach';\nimport includes from 'lodash/includes';\nimport reduce from 'lodash/reduce';\nimport get from 'lodash/get';\nimport Typography from '@material-ui/core/Typography';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport asyncForEach from '../../../helpers/asyncForEach';\nimport {\n  swapCards,\n  newHand,\n  payout,\n  resetStatus,\n} from '../../../store/modules/players';\nimport { incrPlayerTurn, resetTurn } from '../../../store/modules/turn';\nimport GameTable from '../gametable';\nimport Deck from '../../../apis/Deck';\n// Parents: Main\n\nconst DEALER = 0;\nconst LAST_PLAYER = 5;\n\n/* --------------------------------------------------\n* Poker\n* -------------------------------------------------- */\nclass Poker extends Component {\n  constructor(props) {\n    super(props);\n    this.setNewGameRedux();\n    this.state = this.getNewGameState();\n  }\n\n  componentDidUpdate() {\n    const { players, turn } = this.props;\n    const { hideHands, gameOver } = this.state;\n    const player = players[turn.player];\n    const canPlay = player.id !== DEALER && player.id <= LAST_PLAYER;\n\n    if (!hideHands && !gameOver && player.isBot) {\n      canPlay ? this.computer() : this.endGame();\n    }\n  }\n\n  /** function to reset turn and player status */\n  setNewGameRedux = () => {\n    const { turnActions, playerActions, players } = this.props;\n    // reset redux actions\n    turnActions.resetTurn();\n    // reset player statuses\n    forEach(players, (player) => playerActions.resetStatus(player.id));\n  };\n\n  /** function to generate the state of a new game\n   * @return {Object}\n   */\n  getNewGameState = () => ({\n    gameFunctions: [{ name: 'Start Game', func: this.startGame }],\n    cardsToDiscard: [],\n    hideHands: true,\n    gameOver: false,\n  });\n\n  /** get hand from props\n   * @return {Array}\n   */\n  getHand = () => {\n    // get state vars\n    const { turn, players } = this.props;\n    return get(players[turn.player], 'hands[0].cards', null);\n  };\n\n  getHistogram = (hand) => {\n    // Histogram for the cards\n    const hist = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    // put hand into the histrogram\n    forEach(hand, (card) => {\n      hist[card.weight - 2] += 1; // 2-14 - 2 = 0-12\n    });\n    return hist;\n  };\n\n  newGame = () => {\n    this.setNewGameRedux();\n    this.setState(this.getNewGameState());\n  };\n\n  /** function to finish betting and start the game\n   * stateChanges: hideHands\n   */\n  startGame = () => {\n    this.setState({\n      gameFunctions: [{ name: 'Discard Cards', func: this.handleDiscard }],\n      hideHands: false,\n    });\n    this.dealHands();\n  };\n\n  /** increment player turn and reset state */\n  endTurn = () => {\n    const { turnActions } = this.props;\n    turnActions.incrPlayerTurn();\n    this.setState({\n      gameFunctions: [{ name: 'Discard Cards', func: this.handleDiscard }],\n      cardsToDiscard: [],\n    });\n  };\n\n  endGame = () => {\n    const { players, playerActions } = this.props;\n    let winner = { val: 0, id: 0 };\n    forEach(players, (player) => {\n      if (player.id === DEALER || player.id > LAST_PLAYER) {\n        return;\n      }\n      const playerScore = parseInt(this.evaluate(player.hands[0].cards), 14);\n      if (playerScore > winner.val) {\n        winner = { val: playerScore, id: player.id };\n      }\n    });\n    forEach(players, (player) => {\n      if (player.id === DEALER || player.id > LAST_PLAYER) {\n        // do nothing\n      } else if (player.id === winner.id) {\n        playerActions.payout(player.id, 'win', 20);\n      } else {\n        playerActions.payout(player.id, 'lose', -5);\n      }\n    });\n    this.setState({\n      gameFunctions: [{ name: 'New Game', func: this.newGame }],\n      gameOver: true,\n    });\n  };\n\n  /** Rankings:\n   *   Straight Flush  8\n   *   4 of a Kind     7\n   *   Full House      6\n   *   Flush           5\n   *   Straight        4\n   *   3 of a Kind     3\n   *   2 Pair          2\n   *   1 Pair          1\n   *   High Card       0\n   *\n   * @param {Array} hand\n   * @param {Object} hist\n   * @return {number} value is a base 14 string, to be converted into base 10 for comparison\n   */\n  rankHand = (hand, hist) => {\n    // iterate through and look for hands with multiple cards\n    if (includes(hist, 4)) {\n      return 7; // 4 of a kind\n    }\n    // Check for hands with sets of 3 or 2 cards\n    const has3 = includes(hist, 3);\n    const i = hist.indexOf(2);\n    const has2 = i !== -1;\n    if (has3 && has2) {\n      return 6; // full house\n    }\n    if (has3) {\n      return 3; // 3 of a kind\n    }\n    if (has2 && includes(hist, 2, i + 1)) {\n      return 2; // 2 pair\n    }\n    if (has2) {\n      return 1; // 1 pair\n    }\n    // all single cards\n    // check for straight\n    const isStraight = hist.lastIndexOf(1) - hist.indexOf(1) === 4 // (end - start = 4)\n      || (hist[12] && hist[0] && hist[1] && hist[2] && hist[3]); // (A,2,3,4,5)\n    // check for flush\n    let isFlush = true;\n    for (let j = 0; j < hand.length; j += 1) {\n      if (hand[j].suit !== hand[0].suit) {\n        isFlush = false;\n        break;\n      }\n    }\n    if (isStraight && isFlush) {\n      return 8; // straight flush\n    }\n    if (isFlush) {\n      return 5; // flush\n    }\n    if (isStraight) {\n      return 4; // straight\n    }\n    return 0; // high card\n  };\n\n  /** iterate through array, removing each index number from hand\n   * then add new cards to the hand\n   * @param {array} cards - array of index numbers\n   */\n  discard = (cards) => {\n    // get state values\n    const { turn, playerActions, players } = this.props;\n    const { id, hands } = players[turn.player];\n    // logic to swap cards\n    playerActions.swapCards(hands, id, cards);\n  };\n\n  /** helper function wrapping discard, meant for UI */\n  handleDiscard = () => {\n    const { cardsToDiscard } = this.state;\n    this.discard(cardsToDiscard);\n    this.setState({\n      gameFunctions: [{ name: 'End Turn', func: this.endTurn }],\n      cardsToDiscard: [],\n    });\n  };\n\n  /** function to remove n number of cards\n   * @param {number} n - number of cards to remove\n   * @param {[number]} hist - number of each respective card in hand\n   */\n  discardHelper = (n, hist) => {\n    const hand = this.getHand();\n    const discardCards = [];\n    const cardVals = [hist.indexOf(1)];\n    // find cards without pairs, starting with the smallest\n    for (let i = 1; i < n; i += 1) {\n      cardVals[i] = hist.indexOf(1, cardVals[i - 1] + 1);\n    }\n    // find hand indecies of individual cards\n    for (let i = 0; i < hand.length; i += 1) {\n      for (let j = 0; j < cardVals.length; j += 1) {\n        if (hand[i].weight - 2 === cardVals[j]) {\n          discardCards.push(i);\n          break;\n        }\n      }\n    }\n\n    // discard lowest, non-pair n cards\n    this.discard(discardCards);\n  };\n\n  /** computer play algorithm:\n   * PAIRS\n   * draw 0 on 4 of a kind\n   * draw 0 on full house\n   * draw 1 on 3 of a kind, keep higher of 2\n   * draw 1 on 2 pair\n   * draw 3 on 2 of a kind\n   *\n   * This is a nice to have, for now we only follow the first half\n   * STRAIGHT/FLUSH\n   * draw 0 on straight\n   * draw 0 on flush\n   * draw 0 on straight flush\n   * if 1 away from sf -> draw 1\n   * if 1 away from S -> draw 1 if 5+ players, else regular hand\n   * if 1 away from F -> draw 1 if 5+ players, else regular hand\n   *\n   * REGULAR HAND\n   * if K / A -> draw 4\n   * else draw 5\n   */\n  computer = () => {\n    const hand = this.getHand();\n    const hist = this.getHistogram(hand);\n    const rank = this.rankHand(hand, hist);\n\n    switch (rank) {\n      case 0: // draw 4-5 on high card\n        hist.lastIndexOf(1) >= 11\n          ? this.discardHelper(4, hist) // if ace || king draw 4\n          : this.discard([0, 1, 2, 3, 4]); // otherwise, draw all 5\n        break;\n      case 1: // draw 3 on 2 of a kind\n        this.discardHelper(3, hist);\n        break;\n      case 2: // draw 1 on 3 of a kind\n      case 3: // draw 1 on 2 Pair\n        this.discardHelper(1, hist);\n        break;\n      case 4: // draw 0 on straight\n      case 5: // draw 0 on flush\n      case 6: // draw 0 on full house\n      case 7: // draw 0 on 4 of a kind\n      case 8: // draw 0 on straight flush\n      default:\n        break;\n    }\n    this.endTurn();\n  };\n\n  /** function to be called on card clicks\n   * @param {number} playerNo - player number\n   * @param {number} handNo - hand number\n   * @param {number} cardNo - card number\n   */\n  cardClickHandler = (playerNo, handNo, cardNo) => {\n    const { cardsToDiscard } = this.state;\n    // find card\n    const i = cardsToDiscard.indexOf(cardNo);\n    // toggle in array\n    i === -1 ? cardsToDiscard.push(cardNo) : cardsToDiscard.splice(i, 1);\n    // update state\n    this.setState({ cardsToDiscard });\n  };\n\n  /** Compare hands to see who wins\n   * @param {array} hand - array of card objects\n   * Hands is assigned a weight based on hand, then card values\n   * Compare values to see who wins\n   * @return {number} value is a base 14 string, to be converted into base 10 for comparison\n   */\n  evaluate = (hand) => {\n    const hist = this.getHistogram(hand);\n    const rank = this.rankHand(hand, hist);\n\n    const cards = [0, 0, 0, 0, 0]; // placeholder for card value\n    let total = 0; // track number of cards counted\n    let numCards = 4; // number of same cards in a set\n    let i = 0; // iterator\n    let last = -1; // track location of last in numCards set\n\n    // get card values and display them in order of importance\n    while (total < 5) {\n      const num = hist.indexOf(numCards, last + 1);\n      if (num === -1) {\n        numCards -= 1;\n        last = -1;\n      } else {\n        cards[i] = num.toString(14);\n        i += 1;\n        total += numCards;\n        last = num;\n      }\n    }\n    return `${rank}${reduce(cards, (a, c) => `${a}${c}`)}`;\n  };\n\n  /** Start a new round of hands\n   * stateChanges: turn, players\n   */\n  dealHands = () => {\n    const { playerActions, players } = this.props;\n    // shuffle the deck\n    Deck.shuffle().then(() => {\n      // deal the hands\n      asyncForEach(players, async (player) => {\n        if (player.id !== DEALER && player.id <= LAST_PLAYER) {\n          await playerActions.newHand(player.id, 5);\n        }\n      });\n    });\n  };\n\n  render() {\n    const { turn, players } = this.props;\n    const {\n      cardsToDiscard, gameFunctions, gameOver, hideHands,\n    } = this.state;\n    return (\n      <Fragment>\n        <Typography variant=\"h2\" gutterBottom>\n          5 Card Draw Poker\n        </Typography>\n        <GameTable\n          cardClickHandler={this.cardClickHandler}\n          cardsToDiscard={cardsToDiscard}\n          gameFunctions={gameFunctions}\n          gameOver={gameOver}\n          hideHands={hideHands}\n          isBlackJack={false}\n          players={players}\n          turn={turn}\n        />\n      </Fragment>\n    );\n  }\n}\n\nPoker.propTypes = {\n  playerActions: types.shape({\n    swapCards: types.func.isRequired,\n    newHand: types.func.isRequired,\n    payout: types.func.isRequired,\n    resetStatus: types.func.isRequired,\n  }).isRequired,\n  players: types.arrayOf(\n    types.shape({\n      id: types.number.isRequired,\n      hands: types.arrayOf(\n        types.shape({\n          cards: types.arrayOf(\n            types.shape({\n              weight: types.number.isRequired,\n              suit: types.string.isRequired,\n            }),\n          ).isRequired,\n        }).isRequired,\n      ).isRequired,\n    }),\n  ).isRequired,\n  turn: types.shape({\n    player: types.number.isRequired,\n    hand: types.number.isRequired,\n  }).isRequired,\n  turnActions: types.shape({\n    incrPlayerTurn: types.func.isRequired,\n    resetTurn: types.func.isRequired,\n  }).isRequired,\n};\n\n// react-redux export\nfunction mapStateToProps(state /* , ownProps */) {\n  return {\n    turn: state.turn,\n    players: state.players,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    turnActions: bindActionCreators({ incrPlayerTurn, resetTurn }, dispatch),\n    playerActions: bindActionCreators(\n      {\n        swapCards,\n        newHand,\n        payout,\n        resetStatus,\n      },\n      dispatch,\n    ),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Poker);\n","import Poker from './Poker';\n\nexport default Poker;\n"],"sourceRoot":""}