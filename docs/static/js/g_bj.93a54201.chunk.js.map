{"version":3,"file":"static/js/g_bj.93a54201.chunk.js","mappings":"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","sources":["apis/Deck.ts","components/common/info-popover/InfoPopup.tsx","recoil/blackjack-state.ts","components/games/blackjack/blackjackHelpers.ts","components/games/blackjack/Rules.tsx","components/games/blackjack/help/Cell.tsx","components/games/blackjack/help/Row.tsx","components/games/blackjack/help/BlackjackTable.tsx","components/games/blackjack/help/Help.tsx","components/games/blackjack/Header.tsx","components/games/blackjack/Blackjack.tsx","components/games/game-table/board/card/Card.styles.ts","components/games/game-table/board/card/Card.tsx","components/games/game-table/board/Hand.tsx","components/games/game-table/board/player/Player.styles.ts","components/games/game-table/board/player/Player.tsx","components/games/game-table/board/Board.tsx","components/games/game-table/button-group/Button.tsx","components/games/game-table/button-group/ButtonGroup.tsx","components/games/game-table/GameTable.tsx","helpers/asyncForEach.ts","hooks/useOpenState.ts","recoil/turn-atom.ts","../node_modules/@mui/material/TableHead/tableHeadClasses.js","../node_modules/@mui/material/TableHead/TableHead.js"],"sourcesContent":["import localForage from \"localforage\";\n\nexport interface DBCard {\n  name: string;\n  suit: string;\n  weight: number;\n}\n\nconst NEW_DECK: DBCard[] = [\n  { name: \"2\", weight: 2, suit: \"♣\" },\n  { name: \"3\", weight: 3, suit: \"♣\" },\n  { name: \"4\", weight: 4, suit: \"♣\" },\n  { name: \"5\", weight: 5, suit: \"♣\" },\n  { name: \"6\", weight: 6, suit: \"♣\" },\n  { name: \"7\", weight: 7, suit: \"♣\" },\n  { name: \"8\", weight: 8, suit: \"♣\" },\n  { name: \"9\", weight: 9, suit: \"♣\" },\n  { name: \"10\", weight: 10, suit: \"♣\" },\n  { name: \"J\", weight: 11, suit: \"♣\" },\n  { name: \"Q\", weight: 12, suit: \"♣\" },\n  { name: \"K\", weight: 13, suit: \"♣\" },\n  { name: \"A\", weight: 14, suit: \"♣\" },\n  { name: \"2\", weight: 2, suit: \"♦\" },\n  { name: \"3\", weight: 3, suit: \"♦\" },\n  { name: \"4\", weight: 4, suit: \"♦\" },\n  { name: \"5\", weight: 5, suit: \"♦\" },\n  { name: \"6\", weight: 6, suit: \"♦\" },\n  { name: \"7\", weight: 7, suit: \"♦\" },\n  { name: \"8\", weight: 8, suit: \"♦\" },\n  { name: \"9\", weight: 9, suit: \"♦\" },\n  { name: \"10\", weight: 10, suit: \"♦\" },\n  { name: \"J\", weight: 11, suit: \"♦\" },\n  { name: \"Q\", weight: 12, suit: \"♦\" },\n  { name: \"K\", weight: 13, suit: \"♦\" },\n  { name: \"A\", weight: 14, suit: \"♦\" },\n  { name: \"2\", weight: 2, suit: \"♥\" },\n  { name: \"3\", weight: 3, suit: \"♥\" },\n  { name: \"4\", weight: 4, suit: \"♥\" },\n  { name: \"5\", weight: 5, suit: \"♥\" },\n  { name: \"6\", weight: 6, suit: \"♥\" },\n  { name: \"7\", weight: 7, suit: \"♥\" },\n  { name: \"8\", weight: 8, suit: \"♥\" },\n  { name: \"9\", weight: 9, suit: \"♥\" },\n  { name: \"10\", weight: 10, suit: \"♥\" },\n  { name: \"J\", weight: 11, suit: \"♥\" },\n  { name: \"Q\", weight: 12, suit: \"♥\" },\n  { name: \"K\", weight: 13, suit: \"♥\" },\n  { name: \"A\", weight: 14, suit: \"♥\" },\n  { name: \"2\", weight: 2, suit: \"♠\" },\n  { name: \"3\", weight: 3, suit: \"♠\" },\n  { name: \"4\", weight: 4, suit: \"♠\" },\n  { name: \"5\", weight: 5, suit: \"♠\" },\n  { name: \"6\", weight: 6, suit: \"♠\" },\n  { name: \"7\", weight: 7, suit: \"♠\" },\n  { name: \"8\", weight: 8, suit: \"♠\" },\n  { name: \"9\", weight: 9, suit: \"♠\" },\n  { name: \"10\", weight: 10, suit: \"♠\" },\n  { name: \"J\", weight: 11, suit: \"♠\" },\n  { name: \"Q\", weight: 12, suit: \"♠\" },\n  { name: \"K\", weight: 13, suit: \"♠\" },\n  { name: \"A\", weight: 14, suit: \"♠\" },\n];\n\n/** immutably get a copy of new deck O(N) */\nconst getNewDeck = (): DBCard[] => NEW_DECK.map((card) => ({ ...card }));\n\n/** get immutable copy of deck O(N) */\nconst getDeck = (): Promise<DBCard[]> =>\n  localForage\n    .getItem(\"deck\")\n    .then((data: unknown) => (data as DBCard[]) || getNewDeck())\n    .catch(() => getNewDeck());\n\n/** immutably update deck O(N) */\nconst setDeck = (deck: DBCard[]): Promise<DBCard[] | null> =>\n  localForage.setItem(\"deck\", deck).catch(() => null);\n\n/** randomize order of the cards O(N + M) */\nconst shuffleDeck = (deck: DBCard[]): DBCard[] => {\n  const shuffledDeck: DBCard[] = [];\n  // create immutable copy of deck\n  deck.map((card) => shuffledDeck.push(card));\n  // shuffle the cards\n  for (let i = 0; i < 100; i += 1) {\n    const j = Math.floor(Math.random() * shuffledDeck.length);\n    const k = Math.floor(Math.random() * shuffledDeck.length);\n    const temp = shuffledDeck[j];\n    shuffledDeck[j] = shuffledDeck[k];\n    shuffledDeck[k] = temp;\n  }\n  // update deck state\n  return shuffledDeck;\n};\n\n/** randomize order of the cards O(N + M) */\nconst shuffle = (): Promise<DBCard[] | null> =>\n  setDeck(shuffleDeck(getNewDeck()));\n\n/** return an array of a specified length O(2N) */\nconst deal = (num = 0): Promise<DBCard[]> => {\n  const cards: DBCard[] = [];\n  return getDeck()\n    .then((deck: DBCard[]): DBCard[] => {\n      // verify we have enough cards\n      if (num > deck.length) {\n        return deck;\n      }\n      // get the cards\n      for (let i = 0; i < num; i += 1) {\n        const card: DBCard | undefined = deck.pop();\n        card && cards.push(card);\n      }\n      return deck;\n    })\n    .then((deck: DBCard[]) => setDeck(deck))\n    .then(() => cards);\n};\n\n/** sort by card weight */\nconst rankSort = (a: DBCard, b: DBCard): number => a.weight - b.weight;\n\nexport default { shuffle, deal, rankSort };\n","import React from \"react\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport Button from \"@mui/material/Button\";\nimport useOpenState from \"../../../hooks/useOpenState\";\n\ninterface InfoPopupProps {\n  /** popup content */\n  children: React.ReactNode | React.ReactNodeArray;\n  /** title content */\n  title: string | React.ReactElement;\n  /** button content */\n  buttonText?: string | React.ReactElement;\n}\n\nconst InfoPopup = (props: InfoPopupProps): React.ReactElement => {\n  const [isOpen, handleOpen, handleClose] = useOpenState();\n  const { buttonText, title, children } = props;\n\n  return (\n    <>\n      <Button\n        onClick={handleOpen as React.MouseEventHandler}\n        variant=\"contained\"\n      >\n        {buttonText || title}\n      </Button>\n      <Dialog\n        title=\"info-popup\"\n        onClose={handleClose as React.MouseEventHandler}\n        open={isOpen}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>{title}</DialogTitle>\n        <DialogContent>{children}</DialogContent>\n        <DialogActions>\n          <Button\n            color=\"secondary\"\n            onClick={handleClose as React.MouseEventHandler}\n          >\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default InfoPopup;\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport playerAtom from \"./player-atom\";\nimport turnAtom from \"./turn-atom\";\n\nexport enum GameFunctions {\n  NEW_GAME = \"New Game\",\n  FINISH_BETTING = \"Finish Betting\",\n  STAY = \"Stay\",\n  HIT = \"Hit\",\n  DOUBLE = \"Double\",\n  SPLIT = \"Split\",\n}\n\nexport interface BlackjackState {\n  gameFunctions: string[];\n  hideHands: boolean;\n}\n\nexport const newBlackjackGame = (): BlackjackState => ({\n  gameFunctions: [GameFunctions.FINISH_BETTING],\n  hideHands: true,\n});\n\nexport const blackjackAtom = atom({\n  key: \"blackjackAtom\",\n  default:\n    (JSON.parse(\n      localStorage.getItem(\"blackjack-atom\") || \"null\"\n    ) as BlackjackState) || newBlackjackGame(),\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"blackjack-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\nconst blackjackState = selector({\n  key: \"blackjackState\",\n  get: ({ get }) => {\n    const bj = get(blackjackAtom);\n    const players = get(playerAtom);\n    const turn = get(turnAtom);\n\n    return { bj, players, turn };\n  },\n  set: ({ set }, state) => {\n    if (!(state instanceof DefaultValue)) {\n      const { bj, turn, players } = state;\n      set(blackjackAtom, bj);\n      set(turnAtom, turn);\n      set(playerAtom, players);\n    }\n  },\n});\n\nexport default blackjackState;\n","import { DBCard } from \"../../../apis/Deck\";\nimport { GameFunctions } from \"../../../recoil/blackjack-state\";\nimport { DBHand, DBPlayer } from \"../../../recoil/player-atom\";\n\n/** calculate the weight of a hand */\nexport function weighHand(hand: DBCard[] = []): {\n  weight: number;\n  soft: boolean;\n} {\n  // set return values\n  let weight = 0;\n  let soft = false;\n\n  // find the weight of the hand\n  hand.forEach((card) => {\n    const cardWeight = card.weight || 0;\n    if (cardWeight === 14) {\n      // A\n      if (weight <= 10) {\n        weight += 11;\n        soft = true;\n      } else {\n        weight += 1;\n      }\n    } else if (cardWeight > 10) {\n      // J - K\n      weight += 10;\n    } else {\n      // 2 - 10\n      weight += cardWeight;\n    }\n    // reduce by 10 if bust and soft\n    if (weight > 21 && soft) {\n      weight -= 10;\n      soft = false;\n    }\n  });\n\n  // return object w/ useful information\n  return { weight, soft };\n}\n\n// AI: https://www.blackjackinfo.com/blackjack-basic-strategy-engine/\nexport const playBot = async (\n  hand: DBHand,\n  dealer: DBHand,\n  double: () => Promise<void>,\n  hit: () => Promise<void>,\n  split: () => Promise<void>,\n  stay: () => void\n): Promise<void> => {\n  // validate hand exists\n  if (!hand) {\n    return;\n  }\n  const n = hand.weight || 0;\n  const { soft } = hand;\n  // card / dealer weight\n  const { weight: d } = weighHand([dealer.cards[0]]);\n  const { weight: x } = weighHand([hand.cards[0]]);\n  const { weight: y } = weighHand([hand.cards[1]]);\n\n  // play AI logic\n  if (n < 22) {\n    // split algorithm\n    if (x === y) {\n      if (x === 2 || x === 3 || x === 7) {\n        // 2,3,7, split d2-7, hit d8+\n        d <= 7 ? await split() : await hit();\n      } else if (x === 4) {\n        // 4, split d5-6, else hit\n        d === 5 || d === 6 ? await split() : await hit();\n      } else if (x === 5) {\n        // 5, double d2-9, hit d10+\n        d <= 9 ? await double() : await hit();\n      } else if (x === 6) {\n        // 6, split d2-6, else hit\n        d <= 6 ? await split() : await hit();\n      } else if (x === 9) {\n        // 9, d7,10+ stay, else split\n        d === 7 || d >= 10 ? stay() : await split();\n      } else if (x === 8 || x === 11) {\n        // 8,A split\n        await split();\n      } else {\n        // 10 Stay\n        stay();\n      }\n    } else if (n < 20 && soft) {\n      // soft hands, A9+ stays\n      if (n === 13 || n === 14) {\n        // A2-A3 double d5-6, hit d2-4, d7-A\n        d === 5 || d === 6 ? await double() : await hit();\n      } else if (n === 15 || n === 16) {\n        // A4-A5 double d4-6, hit d2-3, d7-A\n        d >= 4 && d <= 6 ? await double() : await hit();\n      } else if (n === 17) {\n        // A6 double d3-6, hit d2, d7-A\n        d >= 3 && d <= 6 ? await double() : await hit();\n      } else if (n === 18) {\n        // A7 double d2-6, stay d7-8, hit d9-A\n        if (d >= 2 && d <= 6) {\n          await double();\n        } else if (d === 7 || d === 8) {\n          stay();\n        } else {\n          await hit();\n        }\n      } else if (n === 19) {\n        // A8 double d6, else stay\n        d === 6 ? await double() : stay();\n      }\n    } else if (n < 17 && !soft) {\n      // hard hands, 17+ stays\n      if (n >= 5 && n <= 8) {\n        // 5-8 hit\n        await hit();\n      } else if (n === 9) {\n        // 9 double d3-6, hit d2, d7-A\n        d >= 3 && d <= 6 ? await double() : await hit();\n      } else if (n === 10) {\n        // 10 double d2-9, hit d10-A\n        d >= 2 && d <= 9 ? await double() : await hit();\n      } else if (n === 11) {\n        // 11 double\n        await double();\n      } else if (n === 12) {\n        // 12 hit d2-3, stay d4-6, hit 7-A\n        d >= 4 && d <= 6 ? stay() : await hit();\n      } else if (n >= 13 && n <= 16) {\n        // 13-16 stay d2-6, hit 7-A\n        d >= 2 && d <= 6 ? stay() : await hit();\n      }\n    } else {\n      stay();\n    }\n  } else {\n    // bust\n    stay();\n  }\n};\n\nexport interface PlayerStats {\n  house: number;\n  payout: number;\n  status: string;\n}\n\n// Dealer constant\nexport const DEALER = 0;\n\n/** finish the game and check for a winner */\nexport const banking = (players: DBPlayer[]): DBPlayer[] => {\n  // state variables\n  const dealer = players.filter((p) => p.id === DEALER)[0];\n  const dWeight = dealer.hands[0].weight || 0;\n  const dLength = dealer.hands[0].cards.length;\n  // track and find the winners\n  const playerStats: PlayerStats = { house: 0, payout: 0, status: \"\" };\n  // helper functions\n  const win = (ps: PlayerStats, bet: number, mul = 1): void => {\n    ps.house -= Math.floor(mul * bet);\n    ps.payout = Math.floor(mul * bet);\n    ps.status = \"win\";\n  };\n  const loss = (ps: PlayerStats, bet: number): void => {\n    ps.house += bet;\n    ps.payout = -bet;\n    ps.status = \"lose\";\n  };\n  return players.map((player) => {\n    const { id, bet } = player;\n    if (id === DEALER) {\n      if (playerStats.house > 0) {\n        playerStats.status = \"win\";\n      } else if (playerStats.house < 0) {\n        playerStats.status = \"lose\";\n      } else {\n        playerStats.status = \"push\";\n      }\n      return {\n        ...player,\n        status: playerStats.status,\n        money: player.money + playerStats.house,\n      };\n    }\n    player.hands.forEach((hand) => {\n      const { weight = 0, cards } = hand;\n      if (dWeight === 21 && dLength === 2) {\n        // dealer BlackJack\n        loss(playerStats, bet);\n      } else if (weight === 21 && cards.length === 2) {\n        // player BlackJack\n        win(playerStats, bet, 6 / 5);\n      } else if (weight <= 21 && (weight > dWeight || dWeight > 21)) {\n        win(playerStats, bet);\n      } else if (weight <= 21 && weight === dWeight) {\n        playerStats.payout = 0;\n        playerStats.status = \"push\";\n      } else {\n        loss(playerStats, bet);\n      }\n    });\n    return {\n      ...player,\n      status: playerStats.status,\n      money: player.money + playerStats.payout,\n    };\n  });\n};\n\n/** get the game functions for the present hand */\nexport const getGameFunctions = (hand: DBHand): GameFunctions[] => {\n  if (!hand) {\n    return [];\n  }\n\n  // reset game functions\n  const newGameFunctions = [GameFunctions.STAY];\n  const handWeight = hand.weight || 0;\n\n  // check if not a bust\n  if (handWeight < 21) {\n    newGameFunctions.push(GameFunctions.HIT);\n    // check if you only have 2 cards\n    if (hand.cards.length === 2) {\n      newGameFunctions.push(GameFunctions.DOUBLE);\n      // check if card1 and card2 have equal weight\n      const { weight: weight1 } = weighHand([hand.cards[0]]);\n      const { weight: weight2 } = weighHand([hand.cards[1]]);\n      if (weight1 === weight2) {\n        newGameFunctions.push(GameFunctions.SPLIT);\n      }\n    }\n  }\n\n  return newGameFunctions;\n};\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\n\nconst Rules: React.FC = React.memo(() => (\n  <>\n    <Typography variant=\"h5\">Objective:</Typography>\n    <Typography>\n      Get as close to 21 as you can, without going over. Each card is worth\n      it&apos;s number, J/Q/K are worth 10, and an Ace is worth 11 unless you go\n      over 21, then it is worth 1.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">Blackjack:</Typography>\n    <Typography>\n      Delt an Ace and a 10/J/Q/K, this casino pays 3:2, but Vegas casinos do\n      6:5.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">Hit:</Typography>\n    <Typography>Get an extra card which adds to your total.</Typography>\n    <br />\n    <Typography variant=\"h5\">Stay:</Typography>\n    <Typography>Move to the next player.</Typography>\n    <br />\n    <Typography variant=\"h5\">Double Down:</Typography>\n    <Typography>\n      This option is available with a two card hand; before another card has\n      been drawn double your bet and receive one (and only one) additional card\n      to your hand. Play then moves to the next player.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">Splitting Pairs:</Typography>\n    <Typography>\n      When you are dealt a pair of cards of the same rank, you are allowed to\n      split into two separate hands and play them independently. You will match\n      your bet for the second hand. A double after a split is ok\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">Resplitting:</Typography>\n    <Typography>\n      When you get additional pairs in the first two cards of a hand you can\n      resplit. Typically a player is allowed to split up to 3 times (delt 4 of a\n      kind).\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">Splitting Aces:</Typography>\n    <Typography>\n      Player is limited to drawing only one additional card on each Ace. If you\n      draw a ten-valued card on one of your split Aces, the hand is not\n      considered a Blackjack (it is treated as a normal 21). You can re-split\n      Aces.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">Other Rules:</Typography>\n    <ul>\n      <Typography>\n        <li>Dealer hits on 16 or less and soft 17</li>\n      </Typography>\n      <Typography>\n        <li>Minimum bet is $5</li>\n      </Typography>\n    </ul>\n    <Typography variant=\"h5\">AI Algorithm:</Typography>\n    <ul>\n      <Typography>\n        <li>House Rules: 6 decks, H17, DAS, No Surrender, Peek</li>\n      </Typography>\n      <Typography>\n        <li>Estimated casino edge for these rules: 0.66%</li>\n      </Typography>\n    </ul>\n  </>\n));\n\nexport default Rules;\n","import React from \"react\";\nimport TableCell from \"@mui/material/TableCell\";\n\nexport interface CellProps {\n  color?: string;\n  style?: React.CSSProperties;\n  text: string;\n  rowSpan?: number;\n  colSpan?: number;\n}\n\nconst Cell: React.FC<CellProps> = React.memo((props: CellProps) => {\n  const { color, text, style, ...otherProps } = props;\n\n  const stl: React.CSSProperties = {\n    ...style,\n    textAlign: \"center\",\n    paddingLeft: 0,\n    paddingRight: 0,\n    backgroundColor: color,\n  };\n\n  return (\n    <TableCell size=\"small\" style={stl} {...otherProps}>\n      {text}\n    </TableCell>\n  );\n});\n\nexport default Cell;\n","import React from \"react\";\nimport TableRow from \"@mui/material/TableRow\";\nimport TableCell from \"@mui/material/TableCell\";\nimport Cell, { CellProps } from \"./Cell\";\n\nexport interface RowProps {\n  data: CellProps[];\n  name: string;\n}\n\nconst tableCellStyle: React.CSSProperties = { textAlign: \"center\", padding: 0 };\n\nconst Row: React.FC<RowProps> = ({ name, data }: RowProps) => (\n  <TableRow>\n    <TableCell style={tableCellStyle}>{name}</TableCell>\n    {data.map((text, i) => (\n      <Cell key={i} {...text} />\n    ))}\n  </TableRow>\n);\n\nexport default Row;\n","import React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Cell from \"./Cell\";\nimport Row, { RowProps } from \"./Row\";\n\ninterface BlackjackTableProps {\n  data: RowProps[];\n  title: string;\n}\n\nconst cards: string[] = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"T\", \"A\"];\nconst cellStyle: React.CSSProperties = { width: 60 };\n\nconst BlackjackTable: React.FC<BlackjackTableProps> = ({ title, data }) => (\n  <Table>\n    <TableHead>\n      <TableRow>\n        <TableCell colSpan={11}>{title}</TableCell>\n      </TableRow>\n    </TableHead>\n    <TableBody>\n      <TableRow>\n        <Cell rowSpan={2} style={cellStyle} text=\"Hand\" />\n        <Cell colSpan={10} text=\"Dealer\" />\n      </TableRow>\n      <TableRow>\n        {cards.map((c) => (\n          <Cell key={c} text={c} />\n        ))}\n      </TableRow>\n      {data.map((obj) => (\n        <Row key={obj.name} name={obj.name} data={obj.data} />\n      ))}\n    </TableBody>\n  </Table>\n);\n\nexport default BlackjackTable;\n","// react\nimport React from \"react\";\n// material-ui\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { green, teal, red, orange, deepPurple } from \"@mui/material/colors\";\n// components\nimport Cell, { CellProps } from \"./Cell\";\nimport { RowProps } from \"./Row\";\nimport BlackjackTable from \"./BlackjackTable\";\n// Parents: blackjack/Header\n\n/* Help  ->  BlackJackTable  ->  Row  -->  Cell */\nconst Help: React.FC = React.memo(() => {\n  // options\n  const h: CellProps = { color: green[200], text: \"H\" };\n  const d: CellProps = { color: teal[200], text: \"D\" };\n  const s: CellProps = { color: red[200], text: \"S\" };\n  const p: CellProps = { color: orange[200], text: \"P\" };\n  const ds: CellProps = { color: deepPurple[200], text: \"DS\" };\n\n  // algorithms for options\n  const hardTtl: RowProps[] = [\n    { name: \"Hard 5\", data: [h, h, h, h, h, h, h, h, h, h] },\n    { name: \"Hard 6\", data: [h, h, h, h, h, h, h, h, h, h] },\n    { name: \"Hard 7\", data: [h, h, h, h, h, h, h, h, h, h] },\n    { name: \"Hard 8\", data: [h, h, h, h, h, h, h, h, h, h] },\n    { name: \"Hard 9\", data: [h, d, d, d, d, h, h, h, h, h] },\n    { name: \"Hard 10\", data: [d, d, d, d, d, d, d, d, h, h] },\n    { name: \"Hard 11\", data: [d, d, d, d, d, d, d, d, d, d] },\n    { name: \"Hard 12\", data: [h, h, s, s, s, h, h, h, h, h] },\n    { name: \"Hard 13\", data: [s, s, s, s, s, h, h, h, h, h] },\n    { name: \"Hard 14\", data: [s, s, s, s, s, h, h, h, h, h] },\n    { name: \"Hard 15\", data: [s, s, s, s, s, h, h, h, h, h] },\n    { name: \"Hard 16\", data: [s, s, s, s, s, h, h, h, h, h] },\n    { name: \"Hard 17\", data: [s, s, s, s, s, s, s, s, s, s] },\n    { name: \"Hard 18+\", data: [s, s, s, s, s, s, s, s, s, s] },\n  ];\n  const softTtl: RowProps[] = [\n    { name: \"Ace + 2\", data: [h, h, h, d, d, h, h, h, h, h] },\n    { name: \"Ace + 3\", data: [h, h, h, d, d, h, h, h, h, h] },\n    { name: \"Ace + 4\", data: [h, h, d, d, d, h, h, h, h, h] },\n    { name: \"Ace + 5\", data: [h, h, d, d, d, h, h, h, h, h] },\n    { name: \"Ace + 6\", data: [h, d, d, d, d, h, h, h, h, h] },\n    { name: \"Ace + 7\", data: [ds, ds, ds, ds, ds, s, s, h, h, h] },\n    { name: \"Ace + 8\", data: [s, s, s, s, ds, s, s, s, s, s] },\n    { name: \"Ace + 9\", data: [s, s, s, s, s, s, s, s, s, s] },\n  ];\n  const pairs: RowProps[] = [\n    { name: \"(2,2)\", data: [p, p, p, p, p, p, h, h, h, h] },\n    { name: \"(3,3)\", data: [p, p, p, p, p, p, h, h, h, h] },\n    { name: \"(4,4)\", data: [h, h, h, p, p, h, h, h, h, h] },\n    { name: \"(5,5)\", data: [d, d, d, d, d, d, d, d, h, h] },\n    { name: \"(6,6)\", data: [p, p, p, p, p, h, h, h, h, h] },\n    { name: \"(7,7)\", data: [p, p, p, p, p, p, h, h, h, h] },\n    { name: \"(8,8)\", data: [p, p, p, p, p, p, p, p, p, p] },\n    { name: \"(9,9)\", data: [p, p, p, p, p, s, p, p, s, s] },\n    { name: \"(T,T)\", data: [s, s, s, s, s, s, s, s, s, s] },\n    { name: \"(A,A)\", data: [p, p, p, p, p, p, p, p, p, p] },\n  ];\n\n  return (\n    <>\n      <BlackjackTable data={hardTtl} title=\"Hard Totals\" />\n      <BlackjackTable data={softTtl} title=\"Soft Totals\" />\n      <BlackjackTable data={pairs} title=\"Pairs\" />\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell colSpan={11}>Key</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow>\n            <Cell {...h} />\n            <Cell colSpan={2} text=\"= Hit\" />\n            <Cell {...s} />\n            <Cell colSpan={3} text=\"= Stand\" />\n            <Cell {...p} />\n            <Cell colSpan={3} text=\"= Split\" />\n          </TableRow>\n          <TableRow>\n            <Cell {...d} />\n            <Cell colSpan={10} text=\"= Double (Hit if not allowed)\" />\n          </TableRow>\n          <TableRow>\n            <Cell {...ds} />\n            <Cell colSpan={10} text=\"= Double (Stand if not allowed)\" />\n          </TableRow>\n        </TableBody>\n      </Table>\n    </>\n  );\n});\n\nexport default Help;\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport InfoPopup from \"../../common/info-popover/InfoPopup\";\nimport Rules from \"./Rules\";\nimport Help from \"./help\";\n\nconst Header: React.FC = React.memo(() => (\n  <div className=\"flex-container\">\n    <Typography variant=\"h2\" gutterBottom>\n      Blackjack (21)\n    </Typography>\n    <InfoPopup title=\"Rules\">\n      <Rules />\n      <Help />\n    </InfoPopup>\n  </div>\n));\n\nexport default Header;\n","/* Theoretical Max Score:   386 everyone splits 3 times and busts with 30, dealer bust with 26\n * Card Point Value:        340-380\n * split aces is not blackjack\n * get second card for dealer and hide it\n * buy insurance on dealer's Ace\n */\nimport React from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport asyncForEach from \"../../../helpers/asyncForEach\";\nimport {\n  weighHand,\n  playBot,\n  banking,\n  DEALER,\n  getGameFunctions,\n} from \"./blackjackHelpers\";\nimport Header from \"./Header\";\nimport GameTable from \"../game-table\";\nimport Deck from \"../../../apis/Deck\";\nimport { DBHand, DBPlayer } from \"../../../recoil/player-atom\";\nimport blackjackState, {\n  GameFunctions,\n  newBlackjackGame,\n} from \"../../../recoil/blackjack-state\";\n\nconst BlackJack: React.FC = () => {\n  const [\n    {\n      turn,\n      players,\n      bj: { gameFunctions, hideHands },\n    },\n    setState,\n  ] = useRecoilState(blackjackState);\n\n  /** function that takes a hand of duplicates and makes 2 hands */\n  const split = async (): Promise<void> => {\n    // get state values\n    const { hands } = players[turn.player];\n\n    const newCards = await Deck.deal(2);\n\n    const hand = hands[turn.hand];\n    // split the hands into 2\n    const hand1: DBHand = { cards: [hand.cards[0]] };\n    const hand2: DBHand = { cards: [hand.cards[1]] };\n\n    hand1.cards.push(newCards[0]);\n    hand2.cards.push(newCards[1]);\n\n    // update the weights\n    Object.assign(hand1, weighHand(hand1.cards));\n    Object.assign(hand2, weighHand(hand2.cards));\n    // update global hands\n    const newHands = hands.map((item, i) => (i !== turn.hand ? item : hand2));\n    newHands.splice(turn.hand, 0, hand1);\n\n    const newPlayers = [...players];\n    newPlayers[turn.player] = { ...players[turn.player], hands: newHands };\n\n    let newGameFunctions: GameFunctions[] = [];\n    if (!newPlayers[turn.player].isBot) {\n      newGameFunctions = getGameFunctions(\n        newPlayers[turn.player].hands[turn.hand]\n      );\n    }\n\n    // update game state\n    setState({\n      turn,\n      players: newPlayers,\n      bj: { gameFunctions: newGameFunctions, hideHands },\n    });\n  };\n\n  /** function to pass to the next player */\n  const stay = (): void => {\n    // get state values\n    const lastHand = players[turn.player].hands.length - 1;\n    const newTurn =\n      turn.hand < lastHand\n        ? { ...turn, hand: turn.hand + 1 }\n        : { player: turn.player + 1, hand: 0 };\n    let newGameFunctions: GameFunctions[] = [];\n    if (!players[newTurn.player].isBot) {\n      newGameFunctions = getGameFunctions(\n        players[newTurn.player].hands[newTurn.hand]\n      );\n    }\n    // check if the player has more than 1 hand\n    setState({\n      turn: newTurn,\n      players,\n      bj: { gameFunctions: newGameFunctions, hideHands },\n    });\n  };\n\n  /** function that doubles your bet, but you only get 1 card */\n  const double = async (): Promise<void> => {\n    const { hands } = players[turn.player];\n\n    // Draw Card\n    const drawnCards = await Deck.deal(1);\n    const cards = [...hands[turn.hand].cards, ...drawnCards];\n    const { weight, soft } = weighHand(cards);\n    const newHands = hands.map((item, i) =>\n      i !== turn.hand ? item : { cards, weight, soft }\n    );\n    // create new players object\n    const newPlayers = [...players];\n    newPlayers[turn.player] = {\n      ...players[turn.player],\n      hands: newHands,\n      bet: players[turn.player].bet * 2,\n    };\n    // get state values\n    const lastHand = players[turn.player].hands.length - 1;\n    const newTurn =\n      turn.hand < lastHand\n        ? { ...turn, hand: turn.hand + 1 }\n        : { player: turn.player + 1, hand: 0 };\n    let newGameFunctions: GameFunctions[] = [];\n    if (!newPlayers[newTurn.player].isBot) {\n      newGameFunctions = getGameFunctions(\n        newPlayers[newTurn.player].hands[newTurn.hand]\n      );\n    }\n    // check if the player has more than 1 hand\n    setState({\n      turn: newTurn,\n      players: newPlayers,\n      bj: { gameFunctions: newGameFunctions, hideHands },\n    });\n  };\n\n  /** function to get a new card */\n  const hit = async (): Promise<void> => {\n    // get state values\n    const { hands } = players[turn.player];\n\n    // logic to hit\n    const drawnCards = await Deck.deal(1);\n    const cards = [...hands[turn.hand].cards, ...drawnCards];\n    const { weight, soft } = weighHand(cards);\n    const newHands = hands.map((item, i) =>\n      i !== turn.hand ? item : { cards, weight, soft }\n    );\n    // create new players object\n    const newPlayers = [...players];\n    newPlayers[turn.player] = { ...players[turn.player], hands: newHands };\n    // get new game functions\n    let newGameFunctions: GameFunctions[] = [];\n    if (!newPlayers[turn.player].isBot) {\n      newGameFunctions = getGameFunctions(\n        newPlayers[turn.player].hands[turn.hand]\n      );\n    }\n    // update state\n    setState({\n      turn,\n      players: newPlayers,\n      bj: { gameFunctions: newGameFunctions, hideHands },\n    });\n  };\n\n  /**\n   * Triggered in handleGameFunctionClick\n   * Starts a new game\n   */\n  const newGame = (): void => {\n    setState({\n      bj: newBlackjackGame(),\n      players: players.map((player) => ({\n        ...player,\n        status: \"\",\n        hands: [],\n        bet: 5,\n      })),\n      turn: { player: 0, hand: 0 },\n    });\n  };\n\n  /**\n   * Triggered in handleGameFunctionClick\n   * Finish betting and start the game\n   */\n  const finishBetting = async (): Promise<void> => {\n    const newPlayers: DBPlayer[] = [];\n    // shuffle the deck\n    await Deck.shuffle().then(async () => {\n      // deal the hands\n      await asyncForEach(players, async (player: DBPlayer) => {\n        const newCards = await Deck.deal(player.id !== DEALER ? 2 : 1);\n        const cards = [...newCards];\n        cards.sort(Deck.rankSort);\n        const { weight, soft } = weighHand(cards);\n        newPlayers.push({ ...player, hands: [{ cards, weight, soft }] });\n      });\n    });\n    // get game functions\n    let newGameFunctions: GameFunctions[] = [];\n    if (!newPlayers[turn.player].isBot) {\n      newGameFunctions = getGameFunctions(\n        newPlayers[turn.player].hands[turn.hand]\n      );\n    }\n    // update game state\n    setState({\n      turn,\n      players: newPlayers,\n      bj: { gameFunctions: newGameFunctions, hideHands: false },\n    });\n  };\n\n  /** function to execute dealer logic */\n  const playDealer = async (): Promise<void> => {\n    const dealer = players.filter((p) => p.id === DEALER)[0];\n    const hand = dealer.hands[0].cards;\n    const { weight: tempW, soft: tempS } = weighHand(hand);\n    // Dealer hits on 16 or less and soft 17\n    if (tempW <= 16 || (tempW === 17 && tempS)) {\n      // get state values\n      const { hands } = players.filter((p) => p.id === DEALER)[0];\n      // logic to hit\n      const drawnCards = await Deck.deal(1);\n      const cards = [...hands[turn.hand].cards, ...drawnCards];\n      const { weight, soft } = weighHand(cards);\n      const newHands = hands.map((item, i) =>\n        i !== turn.hand ? item : { cards, weight, soft }\n      );\n      // create new players object\n      const newPlayers = [...players];\n      newPlayers[players.length - 1] = {\n        ...players[players.length - 1],\n        hands: newHands,\n      };\n      // update state\n      setState({\n        bj: { gameFunctions, hideHands },\n        turn,\n        players: newPlayers,\n      });\n    } else {\n      const newPlayers = banking(players);\n      // update game functions\n      setState({\n        turn,\n        players: newPlayers,\n        bj: { gameFunctions: [GameFunctions.NEW_GAME], hideHands },\n      });\n    }\n  };\n\n  const checkUpdate = async (): Promise<void> => {\n    const player = players[turn.player];\n    if (!player.isBot || hideHands || !player) {\n      return;\n    }\n\n    if (player.id !== DEALER) {\n      const hand = players[turn.player].hands[turn.hand];\n      const dealer = players[players.length - 1].hands[0];\n      await playBot(hand, dealer, double, hit, split, stay);\n    } else if (!gameFunctions.includes(GameFunctions.NEW_GAME)) {\n      await playDealer();\n    }\n  };\n\n  // ----------     interface to GameBoard     ---------- //\n  /** function to be called on card clicks */\n  const cardClickHandler = (\n    playerNo: number,\n    handNo: number,\n    cardNo: number\n  ): void => {\n    // eslint-disable-next-line no-console\n    console.log(players[playerNo].hands[handNo].cards[cardNo]);\n  };\n\n  /** function to be called on card clicks */\n  const betHandler = (id: number, event: Event, bet: number): void => {\n    setState({\n      bj: { gameFunctions, hideHands },\n      turn,\n      players: players.map((player) =>\n        player.id === id ? { ...player, bet } : player\n      ),\n    });\n  };\n\n  /** function to route click actions */\n  const handleGameFunctionClick = (type: string): void => {\n    switch (type) {\n      case GameFunctions.NEW_GAME:\n        newGame();\n        break;\n      case GameFunctions.FINISH_BETTING:\n        finishBetting().catch((e) => console.log(e));\n        break;\n      case GameFunctions.STAY:\n        stay();\n        break;\n      case GameFunctions.HIT:\n        hit().catch((e) => console.log(e));\n        break;\n      case GameFunctions.DOUBLE:\n        double().catch((e) => console.log(e));\n        break;\n      case GameFunctions.SPLIT:\n        split().catch((e) => console.log(e));\n        break;\n      default:\n        // eslint-disable-next-line no-console\n        console.error(\"Unknown Game Function: \", type);\n    }\n  };\n\n  /* render the UI */\n  checkUpdate().catch((e) => console.log(e));\n\n  return (\n    <>\n      <Header />\n      <GameTable\n        betHandler={betHandler}\n        cardClickHandler={cardClickHandler}\n        gameFunctions={gameFunctions}\n        onClick={handleGameFunctionClick}\n        hideHands={hideHands}\n        players={players}\n        turn={turn}\n      />\n    </>\n  );\n};\n\nexport default BlackJack;\n","const cardFace: React.CSSProperties = {\n  backgroundColor: \"white\",\n  borderRadius: 5,\n  cursor: \"pointer\",\n  display: \"inline-block\",\n  fontWeight: \"bold\",\n  height: 78,\n  margin: 5,\n  padding: 3,\n  width: 50,\n};\n\nconst cardTitle: React.CSSProperties = {\n  textAlign: \"left\",\n};\n\nconst suit: React.CSSProperties = {\n  margin: \"auto\",\n  marginTop: 5,\n  textAlign: \"center\",\n  width: \"100%\",\n};\n\nexport default {\n  cardFace,\n  cardTitle,\n  suit,\n};\n","import React from \"react\";\nimport { Typography } from \"@mui/material\";\nimport { red } from \"@mui/material/colors\";\nimport styles from \"./Card.styles\";\n\ninterface CardProps {\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardNo: number;\n  dropped: boolean;\n  handNo: number;\n  name: string;\n  playerNo: number;\n  suit: string;\n}\n\nconst Card = React.memo((props: CardProps) => {\n  const { dropped, suit, name, cardHandler, playerNo, handNo, cardNo } = props;\n  // handle click to for card\n  const handleClick = React.useCallback((): void => {\n    cardHandler && cardHandler(playerNo, handNo, cardNo);\n  }, [cardHandler, cardNo, handNo, playerNo]);\n  // checking color based off suits: ♣♦♥♠\n  const cardColor: React.CSSProperties = {\n    color: suit === \"♣\" || suit === \"♠\" ? \"black\" : red[500],\n    backgroundColor: dropped ? red[100] : \"white\",\n  };\n\n  return (\n    <div\n      style={{ ...styles.cardFace, ...cardColor }}\n      onClick={handleClick}\n      role=\"main\"\n    >\n      <div style={styles.cardTitle}>{name + suit}</div>\n      <Typography variant=\"h4\" style={{ ...styles.suit, ...cardColor }}>\n        {suit}\n      </Typography>\n    </div>\n  );\n});\n\nexport default Card;\n","import React from \"react\";\nimport { Typography } from \"@mui/material\";\nimport { purple } from \"@mui/material/colors\";\nimport Card from \"./card/Card\";\nimport { DBHand } from \"../../../../recoil/player-atom\";\n\nconst boldStyle: React.CSSProperties = {\n  fontWeight: \"bold\",\n  marginTop: \"0.5em\",\n};\nconst normalStyle: React.CSSProperties = {\n  fontWeight: \"normal\",\n  marginTop: \"0.5em\",\n};\n\ninterface HandProps {\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hand: DBHand;\n  handNo: number;\n  isBlackJack: boolean;\n  isHandTurn: boolean;\n  isMultiHand: boolean;\n  isPlayerTurn: boolean;\n  playerNo: number;\n}\n\nconst Hand: React.FC<HandProps> = (props: HandProps) => {\n  const {\n    cardHandler,\n    cardsToDiscard,\n    hand,\n    handNo,\n    isBlackJack,\n    isHandTurn,\n    isMultiHand,\n    isPlayerTurn,\n    playerNo,\n  } = props;\n\n  const styles = React.useMemo(\n    () =>\n      isPlayerTurn && (!isMultiHand || (isMultiHand && isHandTurn))\n        ? { ...boldStyle, color: purple[700] }\n        : normalStyle,\n    [isPlayerTurn, isMultiHand, isHandTurn]\n  );\n  const handWeight = hand.weight || 0;\n\n  return (\n    <>\n      <Typography variant=\"h4\" style={styles}>\n        {isBlackJack && `${handWeight > 21 ? \"Bust\" : \"Hand\"}: ${handWeight}`}\n      </Typography>\n      {hand.cards.map((card, i) => {\n        const dropped: boolean = cardsToDiscard.includes(i);\n        return card ? (\n          <Card\n            key={card.name + card.suit}\n            cardHandler={cardHandler}\n            cardNo={i}\n            dropped={dropped}\n            handNo={handNo}\n            name={card.name}\n            playerNo={playerNo}\n            suit={card.suit}\n          />\n        ) : null;\n      })}\n    </>\n  );\n};\n\nexport default Hand;\n","const player: React.CSSProperties = {\n  borderRadius: 5,\n  display: \"inline-block\",\n  margin: 10,\n  padding: 20,\n};\n\nconst width: React.CSSProperties = { minWidth: \"100px\" };\n\nexport default {\n  player,\n  width,\n};\n","import React from \"react\";\nimport Slider from \"@mui/material/Slider\";\nimport { Typography } from \"@mui/material\";\nimport Card from \"@mui/material/Card\";\nimport { green, blueGrey, red, grey } from \"@mui/material/colors\";\nimport Hand from \"../Hand\";\nimport { DBPlayer } from \"../../../../../recoil/player-atom\";\nimport { TurnState } from \"../../../../../recoil/turn-atom\";\nimport styles from \"./Player.styles\";\n\ninterface PlayerProps {\n  betHandler?: (id: number, event: Event, value: number) => void;\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  player: DBPlayer;\n  playerNo: number;\n  turn: TurnState;\n}\n\nconst Player: React.FC<PlayerProps> = (props: PlayerProps) => {\n  // get vars from props\n  const {\n    betHandler,\n    cardHandler,\n    cardsToDiscard,\n    hideHands,\n    isBlackJack,\n    player,\n    playerNo,\n    turn,\n  } = props;\n  // set booleans\n  const isPlayerTurn: boolean = !!turn && playerNo === turn.player;\n  const isMultiHand: boolean = player.hands.length > 1;\n  const showSlider: boolean =\n    !!hideHands && isBlackJack && player.id !== 0 && !player.isBot;\n  // set slider variables\n  const minBet: number = Math.max(Math.min(player.money, 5), 0);\n  const maxBet: number = Math.max(Math.min(player.money, 100), 10);\n  const step = 5;\n  const onSliderChange = React.useCallback(\n    (event: Event, value: number | number[]): void => {\n      betHandler && betHandler(player.id, event, value as number);\n    },\n    [betHandler, player.id]\n  );\n  const weight: React.CSSProperties = {\n    fontWeight: isPlayerTurn ? \"bold\" : \"normal\",\n  };\n  // set colors\n  let color: React.CSSProperties = { background: grey[900], color: \"white\" };\n  if (player.status === \"win\") {\n    color = { background: green[300], color: \"white\" };\n  } else if (player.status === \"draw\") {\n    color = { background: blueGrey[300], color: \"white\" };\n  } else if (player.status === \"lose\") {\n    color = { background: red[300], color: \"white\" };\n  } else if (isPlayerTurn) {\n    color = { background: grey[300], color: \"black\" };\n  }\n\n  return (\n    <Card style={{ ...styles.player, ...color }}>\n      <Typography variant=\"h4\" style={{ ...weight }}>\n        {`${player.name}: $${player.money}`}\n      </Typography>\n      {showSlider && (\n        <Slider\n          max={maxBet}\n          min={minBet}\n          onChange={onSliderChange}\n          step={step}\n          style={styles.width}\n          value={player.bet}\n          aria-label={`adjust bet for ${player.name}`}\n        />\n      )}\n      {isBlackJack && player.id !== 0 && (\n        <Typography variant=\"h5\">{`Bet: $${player.bet}`}</Typography>\n      )}\n      {player.hands.map((hand, i) => {\n        const isHandTurn: boolean = !!turn && turn.hand === i;\n        return (\n          <div key={`hand${i}`}>\n            {!hideHands && (\n              <Hand\n                cardHandler={cardHandler}\n                cardsToDiscard={cardsToDiscard}\n                hand={hand}\n                handNo={i}\n                isBlackJack={isBlackJack}\n                isHandTurn={isHandTurn}\n                isMultiHand={isMultiHand}\n                isPlayerTurn={isPlayerTurn}\n                playerNo={playerNo}\n              />\n            )}\n          </div>\n        );\n      })}\n    </Card>\n  );\n};\n\nexport default Player;\n","import React from \"react\";\nimport Player from \"./player/Player\";\nimport { DBPlayer } from \"../../../../recoil/player-atom\";\nimport { TurnState } from \"../../../../recoil/turn-atom\";\n// Parents: GameTable\n\ninterface BoardProps {\n  betHandler?: (id: number, event: Event, value: number) => void;\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  players: DBPlayer[];\n  turn: TurnState;\n}\n\nconst Board: React.FC<BoardProps> = (props: BoardProps) => {\n  const {\n    betHandler,\n    cardHandler,\n    cardsToDiscard,\n    hideHands,\n    isBlackJack,\n    players,\n    turn,\n  } = props;\n\n  return (\n    <>\n      {players.map((player, i) => (\n        <Player\n          key={`player${i}`}\n          betHandler={betHandler}\n          cardHandler={cardHandler}\n          cardsToDiscard={cardsToDiscard}\n          hideHands={hideHands}\n          isBlackJack={isBlackJack}\n          player={player}\n          playerNo={i}\n          turn={turn}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport MuiButton from \"@mui/material/Button\";\n\nexport interface ButtonProps {\n  onClick: (name: string) => void;\n  name: string;\n}\n\nconst Button: React.FC<ButtonProps> = React.memo(\n  ({ onClick, name }: ButtonProps) => (\n    <MuiButton\n      onClick={(): void => onClick(name)}\n      style={{ margin: 12 }}\n      variant=\"contained\"\n    >\n      {name}\n    </MuiButton>\n  )\n);\n\nexport default Button;\n","import React from \"react\";\nimport Button from \"./Button\";\n\nexport interface ButtonGroupProps {\n  gameFunctions: string[];\n  onClick: (name: string) => void;\n}\n\nconst ButtonGroup: React.FC<ButtonGroupProps> = ({\n  gameFunctions,\n  onClick,\n}: ButtonGroupProps) => (\n  <div>\n    {gameFunctions.map((key) => (\n      <Button key={key} onClick={onClick} name={key} />\n    ))}\n  </div>\n);\n\nexport default ButtonGroup;\n","import React from \"react\";\nimport Board from \"./board/Board\";\nimport ButtonGroup from \"./button-group/ButtonGroup\";\nimport { DBPlayer } from \"../../../recoil/player-atom\";\nimport { TurnState } from \"../../../recoil/turn-atom\";\n\ninterface GameTableProps {\n  betHandler?: (id: number, event: Event, value: number) => void;\n  cardClickHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard?: number[];\n  gameFunctions?: string[];\n  gameOver?: boolean;\n  hideHands?: boolean;\n  isBlackJack?: boolean;\n  onClick: (name: string) => void;\n  players: DBPlayer[];\n  turn: TurnState;\n}\n\n/* GameTable ->  Board -> Player -> Hand -> Card\n *          |->  Button Group  ->  Button        */\nconst GameTable = (props: GameTableProps): React.ReactElement => {\n  const {\n    betHandler,\n    cardClickHandler,\n    cardsToDiscard = [],\n    gameFunctions = [],\n    gameOver = false,\n    hideHands = false,\n    isBlackJack = true,\n    players,\n    turn,\n    onClick,\n  } = props;\n\n  // move game buttons to make turn more obvious and support mobile\n  const played: DBPlayer[] = React.useMemo(\n    () => players.slice(0, turn.player + 1),\n    [players, turn.player]\n  );\n  const future: DBPlayer[] = React.useMemo(\n    () => players.slice(turn.player + 1),\n    [players, turn.player]\n  );\n  const playersToDisplay: DBPlayer[] = React.useMemo(\n    () =>\n      !hideHands && gameOver === false\n        ? players.slice(turn.player, turn.player + 1)\n        : players,\n    [hideHands, gameOver, players, turn.player]\n  );\n\n  return isBlackJack && !hideHands ? (\n    <>\n      <Board\n        players={played}\n        betHandler={betHandler}\n        cardHandler={cardClickHandler}\n        cardsToDiscard={cardsToDiscard}\n        hideHands={hideHands}\n        isBlackJack={isBlackJack}\n        turn={turn}\n      />\n      <ButtonGroup gameFunctions={gameFunctions} onClick={onClick} />\n      <Board\n        players={future}\n        betHandler={betHandler}\n        cardHandler={cardClickHandler}\n        cardsToDiscard={cardsToDiscard}\n        hideHands={hideHands}\n        isBlackJack={isBlackJack}\n        turn={{ player: -1, hand: -1 }}\n      />\n    </>\n  ) : (\n    <>\n      <Board\n        players={playersToDisplay}\n        betHandler={betHandler}\n        cardHandler={cardClickHandler}\n        cardsToDiscard={cardsToDiscard}\n        hideHands={hideHands}\n        isBlackJack={isBlackJack}\n        turn={turn}\n      />\n      <ButtonGroup gameFunctions={gameFunctions} onClick={onClick} />\n    </>\n  );\n};\n\nexport default GameTable;\n","type ForEachCallback<T> = (item: T, index: number, array: T[]) => Promise<void>;\nasync function asyncForEach<T>(\n  array: T[],\n  callback: ForEachCallback<T>\n): Promise<void> {\n  for (let index = 0; index < array.length; index += 1) {\n    // eslint-disable-next-line no-await-in-loop\n    await callback(array[index], index, array);\n  }\n}\n\nexport default asyncForEach;\n","import React from \"react\";\n\ntype OpenStateHook = [boolean, () => void, () => void];\n\nconst useOpenState = (defaultVal = false): OpenStateHook => {\n  const [isOpen, setIsOpen] = React.useState(defaultVal);\n\n  const handleOpen = (): void => {\n    setIsOpen(true);\n  };\n  const handleClose = (): void => {\n    setIsOpen(false);\n  };\n\n  return [isOpen, handleOpen, handleClose];\n};\n\nexport default useOpenState;\n","import { atom } from \"recoil\";\n\nexport interface TurnState {\n  player: number;\n  hand: number;\n}\n\nconst initialState: TurnState = { player: 0, hand: 0 };\n\nconst turnAtom = atom({\n  key: \"turnAtom\",\n  default:\n    (JSON.parse(localStorage.getItem(\"turn-atom\") || \"null\") as TurnState) ||\n    initialState,\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"turn-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\nexport default turnAtom;\n","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getTableHeadUtilityClass(slot) {\n  return generateUtilityClass('MuiTableHead', slot);\n}\nconst tableHeadClasses = generateUtilityClasses('MuiTableHead', ['root']);\nexport default tableHeadClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport { getTableHeadUtilityClass } from './tableHeadClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTableHeadUtilityClass, classes);\n};\n\nconst TableHeadRoot = styled('thead', {\n  name: 'MuiTableHead',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  display: 'table-header-group'\n});\nconst tablelvl2 = {\n  variant: 'head'\n};\nconst defaultComponent = 'thead';\nconst TableHead = /*#__PURE__*/React.forwardRef(function TableHead(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTableHead'\n  });\n\n  const {\n    className,\n    component = defaultComponent\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    component\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(Tablelvl2Context.Provider, {\n    value: tablelvl2,\n    children: /*#__PURE__*/_jsx(TableHeadRoot, _extends({\n      as: component,\n      className: clsx(classes.root, className),\n      ref: ref,\n      role: component === defaultComponent ? null : 'rowgroup',\n      ownerState: ownerState\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TableHead.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableHead;"],"names":["NEW_DECK","name","weight","suit","getNewDeck","map","card","getDeck","localForage","then","data","catch","setDeck","deck","shuffle","shuffledDeck","push","i","j","Math","floor","random","length","k","temp","shuffleDeck","deal","num","cards","pop","rankSort","a","b","props","useOpenState","isOpen","handleOpen","handleClose","buttonText","title","children","onClick","variant","onClose","open","maxWidth","fullWidth","color","GameFunctions","newBlackjackGame","gameFunctions","FINISH_BETTING","hideHands","blackjackAtom","atom","key","default","JSON","parse","localStorage","getItem","effects","onSet","state","setItem","stringify","selector","get","bj","players","playerAtom","turn","turnAtom","set","DefaultValue","weighHand","hand","soft","forEach","cardWeight","playBot","dealer","double","hit","split","stay","n","d","x","y","banking","filter","p","id","dWeight","hands","dLength","playerStats","house","payout","status","win","ps","bet","mul","loss","player","money","getGameFunctions","newGameFunctions","STAY","HIT","DOUBLE","SPLIT","React","Typography","text","style","otherProps","stl","textAlign","paddingLeft","paddingRight","backgroundColor","TableCell","size","tableCellStyle","padding","TableRow","cellStyle","width","Table","TableHead","colSpan","TableBody","rowSpan","c","obj","h","green","teal","s","red","orange","ds","deepPurple","hardTtl","softTtl","pairs","className","gutterBottom","InfoPopup","useRecoilState","blackjackState","setState","Deck","newCards","hand1","hand2","Object","assign","newHands","item","splice","newPlayers","isBot","lastHand","newTurn","drawnCards","finishBetting","asyncForEach","sort","playDealer","tempW","tempS","NEW_GAME","checkUpdate","includes","e","console","log","betHandler","event","cardClickHandler","playerNo","handNo","cardNo","type","error","cardFace","borderRadius","cursor","display","fontWeight","height","margin","cardTitle","marginTop","Card","dropped","cardHandler","handleClick","cardColor","styles","role","boldStyle","normalStyle","cardsToDiscard","isBlackJack","isHandTurn","isMultiHand","isPlayerTurn","purple","handWeight","minWidth","showSlider","minBet","max","min","maxBet","onSliderChange","value","background","grey","blueGrey","Slider","onChange","step","gameOver","played","slice","future","playersToDisplay","array","callback","index","defaultVal","setIsOpen","getTableHeadUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","TableHeadRoot","styled","overridesResolver","root","tablelvl2","defaultComponent","inProps","ref","useThemeProps","component","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","_jsx","Tablelvl2Context","as","clsx"],"sourceRoot":""}