{"version":3,"sources":["components/common/InfoPopup.jsx","components/games/gametable/Card.styles.js","components/games/gametable/Card.jsx","components/games/gametable/Hand.jsx","components/games/gametable/Player.styles.js","components/games/gametable/Player.jsx","components/games/gametable/Board.jsx","components/games/gametable/Button.jsx","components/games/gametable/ButtonGroup.jsx","components/games/gametable/GameTable.jsx","components/games/gametable/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/@material-ui/core/colors/teal.js","../node_modules/@material-ui/core/colors/orange.js","../node_modules/@material-ui/core/colors/deepPurple.js","components/games/blackjack/Rules.jsx","components/games/blackjack/help/Cell.jsx","components/games/blackjack/help/Row.jsx","components/games/blackjack/help/BlackjackTable.jsx","components/games/blackjack/help/index.js","components/games/blackjack/help/Help.jsx","components/games/blackjack/Header.jsx","components/games/blackjack/Blackjack.jsx","components/games/blackjack/index.js"],"names":["InfoPopup","props","useState","isOpen","setIsOpen","buttonText","title","children","color","onClick","variant","onClose","open","maxWidth","fullWidth","styles","cardFace","backgroundColor","borderRadius","cursor","display","fontWeight","height","margin","padding","width","cardTitle","textAlign","suit","Card","memo","dropped","name","cardColor","red","style","cardHandler","playerNo","handNo","cardNo","role","Typography","Hand","cardsToDiscard","hand","isBlackJack","isHandTurn","isMultiHand","isPlayerTurn","bold","purple","marginTop","weight","map","cards","card","i","includes","key","player","minWidth","Player","betHandler","hideHands","turn","hands","length","showSlider","id","isBot","minBet","Math","max","min","money","maxBet","background","cyan","status","green","blueGrey","Slider","onChange","event","value","step","bet","Board","players","Button","func","ButtonGroup","gameFunctions","obj","GameTable","cardClickHandler","gameOver","played","slice","future","playersToDisplay","passProps","defaultProps","_objectWithoutProperties","source","excluded","target","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","defineProperty","exports","default","_default","50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700","Rules","Cell","text","otherProps","stl","TableCell","size","Row","data","TableRow","BlackjackTable","Table","TableHead","colSpan","TableBody","rowSpan","c","Help","h","d","teal","s","p","orange","ds","deepPurple","hardTtl","softTtl","pairs","Header","className","gutterBottom","DEALER","weighHand","soft","forEach","cardWeight","BlackJack","getNewGameState","finishBetting","setNewGameRedux","turnActions","playerActions","resetTurn","resetStatus","getGameFunctions","stay","hit","double","split","push","setState","splitHand","updateBet","lastHand","incrHandTurn","incrPlayerTurn","drawCard","dealHands","Deck","shuffle","then","asyncForEach","a","num","newHand","newGame","finishGame","dealer","dealerLen","playerStats","house","payout","win","ps","mul","floor","loss","playDealer","playBot","n","x","y","console","log","state","prevProps","lp","lt","this","np","nt","get","Component","connect","dispatch","bindActionCreators"],"mappings":"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","file":"static/js/g_bj.41bb10ab.chunk.js","sourcesContent":["import React, { useState, Fragment } from 'react';\nimport types from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\n// Parents: Board\n\n/* ========================================\n * Popup\n * ======================================== */\nconst InfoPopup = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const { buttonText, title, children } = props;\n  return (\n    <Fragment>\n      <Button color=\"primary\" onClick={() => { setIsOpen(true); }} variant=\"contained\">\n        {buttonText || title}\n      </Button>\n      <Dialog onClose={() => { setIsOpen(false); }} open={isOpen} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          {title}\n        </DialogTitle>\n        <DialogContent>\n          {children}\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={() => { setIsOpen(false); }}>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  );\n};\n\nInfoPopup.propTypes = {\n  children: types.oneOfType([types.arrayOf(types.node), types.node]).isRequired,\n  title: types.oneOfType([types.string, types.element]).isRequired,\n  buttonText: types.oneOfType([types.string, types.element]),\n};\n\nexport default InfoPopup;\n","const styles = {\n  cardFace: {\n    backgroundColor: 'white',\n    borderRadius: 5,\n    cursor: 'pointer',\n    display: 'inline-block',\n    fontWeight: 'bold',\n    height: 78,\n    margin: 5,\n    padding: 3,\n    width: 50,\n  },\n  cardTitle: { textAlign: 'left' },\n  suit: {\n    margin: 'auto',\n    maxWidth: 30,\n    textAlign: 'center',\n    width: '100%',\n  },\n};\n\nexport default styles;\n","import React, { memo } from 'react';\nimport types from 'prop-types';\nimport red from '@material-ui/core/colors/red';\nimport { Typography } from '@material-ui/core';\nimport styles from './Card.styles';\n// Parents: Hand\n\n/* --------------------------------------------------\n * Card\n * -------------------------------------------------- */\nconst Card = memo((props) => {\n  const { dropped, suit, name } = props;\n  // handle click to for card\n  const handleClick = () => {\n    const {\n      cardHandler, playerNo, handNo, cardNo,\n    } = props;\n    cardHandler(playerNo, handNo, cardNo);\n  };\n  // checking color based off suits: ♣♦♥♠\n  const cardColor = {\n    color: suit === '♣' || suit === '♠' ? 'black' : red[500],\n    backgroundColor: dropped ? red[100] : 'white',\n  };\n\n  // display in view\n  return (\n    <div style={{ ...styles.cardFace, ...cardColor }} onClick={handleClick} role=\"main\">\n      <div style={styles.cardTitle}>\n        {name + suit}\n      </div>\n      <Typography variant=\"h3\" style={{ ...styles.suit, ...cardColor }}>\n        {suit}\n      </Typography>\n    </div>\n  );\n});\n\nCard.propTypes = {\n  cardHandler: types.func,\n  cardNo: types.number.isRequired,\n  dropped: types.bool,\n  handNo: types.number.isRequired,\n  name: types.string.isRequired,\n  playerNo: types.number.isRequired,\n  suit: types.string.isRequired,\n};\n\nexport default Card;\n","import React, { Fragment } from 'react';\nimport types from 'prop-types';\nimport purple from '@material-ui/core/colors/purple';\nimport map from 'lodash/map';\nimport includes from 'lodash/includes';\nimport { Typography } from '@material-ui/core';\nimport Card from './Card';\n// Parents: Player\n\n/* --------------------------------------------------\n * Hand\n * -------------------------------------------------- */\nconst Hand = (props) => {\n  const {\n    cardHandler,\n    cardsToDiscard,\n    hand,\n    handNo,\n    isBlackJack,\n    isHandTurn,\n    isMultiHand,\n    isPlayerTurn,\n    playerNo,\n  } = props;\n\n  const bold = (isHandTurn && isMultiHand && isPlayerTurn)\n    || (!isMultiHand && isPlayerTurn)\n    ? { fontWeight: 'bold', color: purple[700] }\n    : { fontWeight: 'normal' };\n\n  return (\n    <Fragment>\n      <Typography variant=\"h4\" style={{ ...bold, marginTop: '0.5em' }}>\n        {isBlackJack\n          && (hand.weight > 21 ? 'Bust: ' : 'Hand Weight: ') + hand.weight}\n      </Typography>\n      {map(hand.cards, (card, i) => {\n        const dropped = includes(cardsToDiscard, i);\n        return (\n          <Card\n            key={card.name + card.suit}\n            cardHandler={cardHandler}\n            cardNo={i}\n            dropped={dropped}\n            handNo={handNo}\n            name={card.name}\n            playerNo={playerNo}\n            suit={card.suit}\n          />\n        );\n      })}\n    </Fragment>\n  );\n};\n\nHand.propTypes = {\n  cardHandler: types.func,\n  cardsToDiscard: types.arrayOf(types.number),\n  hand: types.shape({\n    weight: types.number,\n    cards: types.arrayOf(\n      types.shape({\n        name: types.string.isRequired,\n        suit: types.string.isRequired,\n      }),\n    ).isRequired,\n  }).isRequired,\n  handNo: types.number.isRequired,\n  isBlackJack: types.bool.isRequired,\n  isHandTurn: types.bool.isRequired,\n  isMultiHand: types.bool.isRequired,\n  isPlayerTurn: types.bool.isRequired,\n  playerNo: types.number.isRequired,\n};\n\nexport default Hand;\n","const styles = {\n  player: {\n    borderRadius: 5,\n    display: 'inline-block',\n    margin: 10,\n    padding: 20,\n  },\n  width: { minWidth: '100px' },\n};\n\nexport default styles;\n","import React from 'react';\nimport types from 'prop-types';\nimport Slider from '@material-ui/core/Slider';\nimport cyan from '@material-ui/core/colors/cyan';\nimport green from '@material-ui/core/colors/green';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport red from '@material-ui/core/colors/red';\nimport map from 'lodash/map';\nimport { Typography } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport Hand from './Hand';\nimport styles from './Player.styles';\n// Parents: Board\n\n/* --------------------------------------------------\n * Player\n * -------------------------------------------------- */\nconst Player = (props) => {\n  // get vars from props\n  const {\n    betHandler,\n    cardHandler,\n    cardsToDiscard,\n    hideHands,\n    isBlackJack,\n    player,\n    playerNo,\n    turn,\n  } = props;\n  // set booleans\n  const isPlayerTurn = !!turn && playerNo === turn.player;\n  const isMultiHand = player.hands.length > 1;\n  const showSlider = !!hideHands && isBlackJack && player.id !== 0 && !player.isBot;\n  // set slider variables\n  const minBet = Math.max(Math.min(player.money, 5), 0);\n  const maxBet = Math.max(Math.min(player.money, 100), 10);\n  const step = 5;\n  const onSliderChange = (event, value) => betHandler(player.id, event, value);\n  // set colors\n  let color = isPlayerTurn ? { background: cyan[200] } : {};\n  const weight = isPlayerTurn ? { fontWeight: 'bold' } : { fontWeight: 'normal' };\n  if (player.status === 'win') {\n    color = { background: green[300] };\n  }\n  if (player.status === 'draw') {\n    color = { background: blueGrey[300] };\n  }\n  if (player.status === 'lose') {\n    color = { background: red[300] };\n  }\n\n  return (\n    <Card style={{ ...styles.player, ...color }}>\n      <Typography variant=\"h4\" style={{ ...weight }}>\n        {player.name}\n        : $\n        {player.money}\n      </Typography>\n      {showSlider && (\n        <Slider\n          max={maxBet}\n          min={minBet}\n          onChange={onSliderChange}\n          step={step}\n          style={styles.width}\n          value={player.bet}\n        />\n      )}\n      {isBlackJack\n        && player.id !== 0 && (\n          <Typography variant=\"h5\">\n            Bet: $\n            {player.bet}\n          </Typography>\n      )}\n      {map(player.hands, (hand, i) => {\n        const isHandTurn = !!turn && turn.hand === i;\n        return (\n          <div key={`hand${i}`}>\n            {!hideHands && (\n              <Hand\n                cardHandler={cardHandler}\n                cardsToDiscard={cardsToDiscard}\n                hand={hand}\n                handNo={i}\n                isBlackJack={isBlackJack}\n                isHandTurn={isHandTurn}\n                isMultiHand={isMultiHand}\n                isPlayerTurn={isPlayerTurn}\n                playerNo={playerNo}\n              />\n            )}\n          </div>\n        );\n      })}\n    </Card>\n  );\n};\n\nPlayer.propTypes = {\n  betHandler: types.func,\n  cardHandler: types.func,\n  cardsToDiscard: types.arrayOf(types.number),\n  hideHands: types.bool,\n  isBlackJack: types.bool.isRequired,\n  player: types.shape({\n    hands: types.arrayOf(types.object).isRequired,\n    id: types.number.isRequired,\n    isBot: types.bool.isRequired,\n    money: types.number.isRequired,\n    status: types.string.isRequired,\n    name: types.string.isRequired,\n    bet: types.number.isRequired,\n  }).isRequired,\n  playerNo: types.number.isRequired,\n  turn: types.shape({\n    player: types.number.isRequired,\n    hand: types.number.isRequired,\n  }),\n};\n\nexport default Player;\n","import React, { Fragment } from 'react';\nimport types from 'prop-types';\nimport map from 'lodash/map';\nimport Player from './Player';\n// Parents: GameTable\n\n/* --------------------------------------------------\n * Board\n * -------------------------------------------------- */\nconst Board = (props) => {\n  const {\n    betHandler,\n    cardHandler,\n    cardsToDiscard,\n    hideHands,\n    isBlackJack,\n    players,\n    turn,\n  } = props;\n\n  return (\n    <Fragment>\n      {map(players, (player, i) => (\n        <Player\n          key={`player${i}`}\n          betHandler={betHandler}\n          cardHandler={cardHandler}\n          cardsToDiscard={cardsToDiscard}\n          hideHands={hideHands}\n          isBlackJack={isBlackJack}\n          player={player}\n          playerNo={i}\n          turn={turn}\n        />\n      ))}\n    </Fragment>\n  );\n};\n\nBoard.propTypes = {\n  betHandler: types.func,\n  cardHandler: types.func,\n  cardsToDiscard: types.arrayOf(types.number),\n  hideHands: types.bool,\n  isBlackJack: types.bool.isRequired,\n  players: types.arrayOf(types.object).isRequired,\n  turn: types.shape({\n    player: types.number.isRequired,\n    hand: types.number.isRequired,\n  }),\n};\n\nexport default Board;\n","import React, { memo } from 'react';\nimport types from 'prop-types';\nimport MuiButton from '@material-ui/core/Button';\n// Parents: ButtonGroup\n\n/* --------------------------------------------------\n * Button\n * -------------------------------------------------- */\n\nconst Button = memo((props) => {\n  const { func, name } = props;\n\n  return (\n    <MuiButton\n      color=\"primary\"\n      onClick={func}\n      style={{ margin: 12 }}\n      variant=\"contained\"\n    >\n      {name}\n    </MuiButton>\n  );\n});\n\nButton.propTypes = {\n  func: types.func.isRequired,\n  name: types.string.isRequired,\n};\n\nexport default Button;\n","import React from 'react';\nimport types from 'prop-types';\nimport map from 'lodash/map';\nimport Button from './Button';\n// Parents: GameTable\n\n/* --------------------------------------------------\n * ButtonGroup\n * -------------------------------------------------- */\n\nconst ButtonGroup = (props) => {\n  const { gameFunctions } = props;\n  return (\n    <div>\n      {map(gameFunctions, (obj) => (\n        <Button key={obj.name} func={obj.func} name={obj.name} />\n      ))}\n    </div>\n  );\n};\n\nButtonGroup.propTypes = {\n  gameFunctions: types.arrayOf(\n    types.shape({\n      name: types.string.isRequired,\n      func: types.func.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default ButtonGroup;\n","import React, { Fragment } from 'react';\nimport types from 'prop-types';\nimport Board from './Board';\nimport ButtonGroup from './ButtonGroup';\n// Parents: BlackJack\n\n/*\n * MAP:\n * GameTable ->  Board -> Player -> Hand -> Card\n *          |->  Button Group  ->  Button\n */\nconst GameTable = (props) => {\n  const {\n    betHandler,\n    cardClickHandler,\n    cardsToDiscard,\n    gameFunctions,\n    gameOver,\n    hideHands,\n    isBlackJack,\n    players,\n    turn,\n  } = props;\n\n  // move game buttons to make turn more obvious and support mobile\n  const played = players.slice(0, turn.player + 1);\n  const future = players.slice(turn.player + 1);\n  const playersToDisplay = !hideHands && gameOver === false\n    ? players.slice(turn.player, turn.player + 1)\n    : players;\n  // pass common props\n  const passProps = {\n    betHandler,\n    cardsToDiscard,\n    hideHands,\n    isBlackJack,\n    turn,\n    cardHandler: cardClickHandler,\n  };\n  return (\n    <Fragment>\n      {isBlackJack && !hideHands\n        ? (\n          <Fragment>\n            <Board players={played} {...passProps} />\n            <ButtonGroup gameFunctions={gameFunctions} />\n            <Board players={future} {...passProps} />\n          </Fragment>\n        ) : (\n          <Fragment>\n            <Board players={playersToDisplay} {...passProps} />\n            <ButtonGroup gameFunctions={gameFunctions} />\n          </Fragment>\n        )}\n    </Fragment>\n  );\n};\n\nGameTable.propTypes = {\n  betHandler: types.func,\n  cardClickHandler: types.func,\n  cardsToDiscard: types.arrayOf(types.number),\n  gameFunctions: types.arrayOf(types.object).isRequired,\n  gameOver: types.bool,\n  hideHands: types.bool,\n  isBlackJack: types.bool,\n  players: types.arrayOf(types.object).isRequired,\n  turn: types.shape({\n    player: types.number.isRequired,\n  }).isRequired,\n};\n\nGameTable.defaultProps = {\n  isBlackJack: true,\n};\n\nexport default GameTable;\n","import GameTable from './GameTable';\n\nexport default GameTable;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar teal = {\n  50: '#e0f2f1',\n  100: '#b2dfdb',\n  200: '#80cbc4',\n  300: '#4db6ac',\n  400: '#26a69a',\n  500: '#009688',\n  600: '#00897b',\n  700: '#00796b',\n  800: '#00695c',\n  900: '#004d40',\n  A100: '#a7ffeb',\n  A200: '#64ffda',\n  A400: '#1de9b6',\n  A700: '#00bfa5'\n};\nvar _default = teal;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar orange = {\n  50: '#fff3e0',\n  100: '#ffe0b2',\n  200: '#ffcc80',\n  300: '#ffb74d',\n  400: '#ffa726',\n  500: '#ff9800',\n  600: '#fb8c00',\n  700: '#f57c00',\n  800: '#ef6c00',\n  900: '#e65100',\n  A100: '#ffd180',\n  A200: '#ffab40',\n  A400: '#ff9100',\n  A700: '#ff6d00'\n};\nvar _default = orange;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar deepPurple = {\n  50: '#ede7f6',\n  100: '#d1c4e9',\n  200: '#b39ddb',\n  300: '#9575cd',\n  400: '#7e57c2',\n  500: '#673ab7',\n  600: '#5e35b1',\n  700: '#512da8',\n  800: '#4527a0',\n  900: '#311b92',\n  A100: '#b388ff',\n  A200: '#7c4dff',\n  A400: '#651fff',\n  A700: '#6200ea'\n};\nvar _default = deepPurple;\nexports.default = _default;","import React, { memo, Fragment } from 'react';\nimport Typography from '@material-ui/core/Typography';\n// Parents: Popup\n\n/* ========================================\n * Rules\n * ======================================== */\nconst Rules = memo(() => (\n  <Fragment>\n    <Typography variant=\"h5\">\n      Objective:\n    </Typography>\n    <Typography>\n      Get as close to 21 as you can, without going over. Each card is worth\n      it&apos;s number, J/Q/K are worth 10, and an Ace is worth 11 unless you go\n      over 21, then it is worth 1.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Blackjack:\n    </Typography>\n    <Typography>\n      Delt an Ace and a 10/J/Q/K, this casino pays 3:2, but Vegas casinos do\n      6:5.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Hit:\n    </Typography>\n    <Typography>\n      Get an extra card which adds to your total.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Stay:\n    </Typography>\n    <Typography>\n      Move to the next player.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Double Down:\n    </Typography>\n    <Typography>\n      This option is available with a two card hand; before another card has\n      been drawn double your bet and receive one (and only one) additional card\n      to your hand. Play then moves to the next player.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Splitting Pairs:\n    </Typography>\n    <Typography>\n      When you are dealt a pair of cards of the same rank, you are allowed to\n      split into two separate hands and play them independently. You will match\n      your bet for the second hand. A double after a split is ok\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Resplitting:\n    </Typography>\n    <Typography>\n      When you get additional pairs in the first two cards of a hand you can\n      resplit. Typically a player is allowed to split up to 3 times (delt 4 of a\n      kind).\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Splitting Aces:\n    </Typography>\n    <Typography>\n      Player is limited to drawing only one additional card on each Ace. If you\n      draw a ten-valued card on one of your split Aces, the hand is not\n      considered a Blackjack (it is treated as a normal 21). You can re-split\n      Aces.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Other Rules:\n    </Typography>\n    <ul>\n      <Typography><li>Dealer hits on 16 or less and soft 17</li></Typography>\n      <Typography><li>Minimum bet is $5</li></Typography>\n    </ul>\n    <Typography variant=\"h5\">\n      AI Algorithm:\n    </Typography>\n    <ul>\n      <Typography><li>House Rules: 6 decks, H17, DAS, No Surrender, Peek</li></Typography>\n      <Typography><li>Estimated casino edge for these rules: 0.66%</li></Typography>\n    </ul>\n  </Fragment>\n));\n\nexport default Rules;\n","import React from 'react';\nimport types from 'prop-types';\nimport TableCell from '@material-ui/core/TableCell';\n// Parents: Help\n\nconst Cell = (props) => {\n  const {\n    color, text, style, ...otherProps\n  } = props;\n  const stl = {\n    ...style,\n    textAlign: 'center',\n    backgroundColor: color,\n  };\n  return (\n    <TableCell size=\"small\" style={stl} {...otherProps}>\n      {text}\n    </TableCell>\n  );\n};\n\nCell.propTypes = {\n  color: types.string,\n  style: types.objectOf(types.oneOfType([types.string, types.number])),\n  text: types.string.isRequired,\n};\n\nexport default Cell;\n","import React from 'react';\nimport types from 'prop-types';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport map from 'lodash/map';\nimport Cell from './Cell';\n// Parents: Help\n\nconst Row = (props) => {\n  const { name, data } = props;\n\n  return (\n    <TableRow>\n      <TableCell style={{ textAlign: 'center', padding: 0 }}>\n        {name}\n      </TableCell>\n      {map(data, (text, i) => <Cell key={i} {...text} />)}\n    </TableRow>\n  );\n};\n\nRow.propTypes = {\n  data: types.arrayOf(types.object).isRequired,\n  name: types.string.isRequired,\n};\n\nexport default Row;\n","import React from 'react';\nimport types from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport map from 'lodash/map';\nimport Cell from './Cell';\nimport Row from './Row';\n// Parents: Popup\n\nconst BlackjackTable = (props) => {\n  const { title, data } = props;\n  const cards = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'A'];\n\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell colSpan=\"11\">\n            {title}\n          </TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        <TableRow>\n          <Cell rowSpan=\"2\" style={{ width: 60 }} text=\"Hand\" />\n          <Cell colSpan=\"10\" text=\"Dealer\" />\n        </TableRow>\n        <TableRow>\n          {map(cards, (c) => <Cell key={c} text={c} />)}\n        </TableRow>\n        {map(data, (obj) => <Row key={obj.name} {...obj} />)}\n      </TableBody>\n    </Table>\n  );\n};\n\nBlackjackTable.propTypes = {\n  data: types.arrayOf(\n    types.shape({\n      name: types.string.isRequired,\n    }),\n  ).isRequired,\n  title: types.string.isRequired,\n};\n\nexport default BlackjackTable;\n","import Help from './Help';\n\nexport default Help;\n","// react\nimport React, { Fragment, memo } from 'react';\n// components\n// material-ui\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n// colors\nimport green from '@material-ui/core/colors/green';\nimport teal from '@material-ui/core/colors/teal';\nimport red from '@material-ui/core/colors/red';\nimport orange from '@material-ui/core/colors/orange';\nimport deepPurple from '@material-ui/core/colors/deepPurple';\nimport Cell from './Cell';\nimport BlackjackTable from './BlackjackTable';\n// Parents: Popup\n\nconst Help = memo(() => {\n  // options\n  const h = { color: green[200], text: 'H' };\n  const d = { color: teal[200], text: 'D' };\n  const s = { color: red[200], text: 'S' };\n  const p = { color: orange[200], text: 'P' };\n  const ds = { color: deepPurple[200], text: 'DS' };\n\n  // algorithms for options\n  const hardTtl = [\n    { name: 'Hard 5', data: [h, h, h, h, h, h, h, h, h, h]},\n    { name: 'Hard 6', data: [h, h, h, h, h, h, h, h, h, h]},\n    { name: 'Hard 7', data: [h, h, h, h, h, h, h, h, h, h]},\n    { name: 'Hard 8', data: [h, h, h, h, h, h, h, h, h, h]},\n    { name: 'Hard 9', data: [h, d, d, d, d, h, h, h, h, h]},\n    { name: 'Hard 10', data: [d, d, d, d, d, d, d, d, h, h]},\n    { name: 'Hard 11', data: [d, d, d, d, d, d, d, d, d, d]},\n    { name: 'Hard 12', data: [h, h, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 13', data: [s, s, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 14', data: [s, s, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 15', data: [s, s, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 16', data: [s, s, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 17', data: [s, s, s, s, s, s, s, s, s, s]},\n    { name: 'Hard 18+', data: [s, s, s, s, s, s, s, s, s, s]},\n  ];\n  const softTtl = [\n    { name: 'Ace + 2', data: [h, h, h, d, d, h, h, h, h, h]},\n    { name: 'Ace + 3', data: [h, h, h, d, d, h, h, h, h, h]},\n    { name: 'Ace + 4', data: [h, h, d, d, d, h, h, h, h, h]},\n    { name: 'Ace + 5', data: [h, h, d, d, d, h, h, h, h, h]},\n    { name: 'Ace + 6', data: [h, d, d, d, d, h, h, h, h, h]},\n    { name: 'Ace + 7', data: [ds, ds, ds, ds, ds, s, s, h, h, h]},\n    { name: 'Ace + 8', data: [s, s, s, s, ds, s, s, s, s, s]},\n    { name: 'Ace + 9', data: [s, s, s, s, s, s, s, s, s, s]},\n  ];\n  const pairs = [\n    { name: '(2,2)', data: [p, p, p, p, p, p, h, h, h, h]},\n    { name: '(3,3)', data: [p, p, p, p, p, p, h, h, h, h]},\n    { name: '(4,4)', data: [h, h, h, p, p, h, h, h, h, h]},\n    { name: '(5,5)', data: [d, d, d, d, d, d, d, d, h, h]},\n    { name: '(6,6)', data: [p, p, p, p, p, h, h, h, h, h]},\n    { name: '(7,7)', data: [p, p, p, p, p, p, h, h, h, h]},\n    { name: '(8,8)', data: [p, p, p, p, p, p, p, p, p, p]},\n    { name: '(9,9)', data: [p, p, p, p, p, s, p, p, s, s]},\n    { name: '(T,T)', data: [s, s, s, s, s, s, s, s, s, s]},\n    { name: '(A,A)', data: [p, p, p, p, p, p, p, p, p, p]},\n  ];\n\n  return (\n    <Fragment>\n      <BlackjackTable data={hardTtl} title=\"Hard Totals\" />\n      <BlackjackTable data={softTtl} title=\"Soft Totals\" />\n      <BlackjackTable data={pairs} title=\"Pairs\" />\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell colSpan=\"11\">\n              Key\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow>\n            <Cell {...h} />\n            <Cell colSpan=\"2\" text=\"= Hit\" />\n            <Cell {...s} />\n            <Cell colSpan=\"3\" text=\"= Stand\" />\n            <Cell {...p} />\n            <Cell colSpan=\"3\" text=\"= Split\" />\n          </TableRow>\n          <TableRow>\n            <Cell {...d} />\n            <Cell colSpan=\"10\" text=\"= Double (Hit if not allowed)\" />\n          </TableRow>\n          <TableRow>\n            <Cell {...ds} />\n            <Cell colSpan=\"10\" text=\"= Double (Stand if not allowed)\" />\n          </TableRow>\n        </TableBody>\n      </Table>\n    </Fragment>\n  );\n});\n\nexport default Help;\n","import React, { memo } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport InfoPopup from '../../common/InfoPopup';\nimport Rules from './Rules';\nimport Help from './help';\n\nconst Header = memo(() => (\n  <div className=\"flex-container\">\n    <Typography variant=\"h2\" gutterBottom>Blackjack (21)</Typography>\n    <InfoPopup title=\"Blackjack Rules\">\n      <Rules />\n      <Help />\n    </InfoPopup>\n  </div>\n));\n\nexport default Header;\n","/* Theoretical Max Score:   386 everyone splits 3 times and busts with 30, dealer bust with 26\n * Card Point Value:        340-380\n * TODO: split aces is not blackjack\n * TODO: get second card for dealer and hide it\n * TODO: buy insurance on dealer's Ace\n */\nimport React, { Component, Fragment } from 'react';\nimport types from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport get from 'lodash/get';\nimport forEach from 'lodash/forEach';\nimport asyncForEach from '../../../helpers/asyncForEach';\n// components\nimport Header from './Header';\nimport GameTable from '../gametable';\nimport Deck from '../../../apis/Deck';\n// redux functions\nimport {\n  incrHandTurn,\n  incrPlayerTurn,\n  resetTurn,\n} from '../../../store/modules/turn';\nimport {\n  drawCard,\n  newHand,\n  payout,\n  resetStatus,\n  splitHand,\n  updateBet,\n} from '../../../store/modules/players';\n// Parents: Main\n\n// Dealer constant\nconst DEALER = 0;\n\n/** calculate the weight of a hand\n * stateChanges: none\n *\n * @param {Object[]} hand\n * @return {{string, string}}\n */\nfunction weighHand(hand = []) {\n  // set return values\n  let weight = 0;\n  let soft = false;\n\n  // find the weight of the hand\n  forEach(hand, (card) => {\n    const { weight: cardWeight } = card;\n    if (cardWeight === 14) {\n      // A\n      if (weight <= 10) {\n        weight += 11;\n        soft = true;\n      } else {\n        weight += 1;\n      }\n    } else if (cardWeight > 10) {\n      // J - K\n      weight += 10;\n    } else {\n      // 2 - 10\n      weight += cardWeight;\n    }\n    // reduce by 10 if bust and soft\n    if (weight > 21 && soft) {\n      weight -= 10;\n      soft = false;\n    }\n  });\n\n  // return object w/ useful information\n  return { weight, soft };\n}\n\n/* --------------------------------------------------\n* BlackJack\n* -------------------------------------------------- */\nclass BlackJack extends Component {\n  constructor(props) {\n    super(props);\n    this.setNewGameRedux();\n    this.state = this.getNewGameState();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { players: lp, turn: lt } = prevProps;\n    const { players: np, turn: nt } = this.props;\n    const { hideHands } = this.state;\n    // verify player exists and is dealer\n    const player = np[nt.player];\n    if (hideHands || !player) {\n      return;\n    }\n    if (!player.isBot && player.id !== DEALER) {\n      // get the next Hand\n      const hand = get(player, `hands.${nt.hand}`);\n      // if the Hand updated, get the game functions\n      if (hand !== get(lp, `${lt.player}.hands.${lt.hand}`)) {\n        this.getGameFunctions(hand);\n      }\n    } else if (player.isBot && player.id !== DEALER) {\n      this.playBot();\n    } else {\n      // get the next Hand\n      const hand = player.hands[nt.hand];\n      // if the Hand updated, check for dealer\n      if (hand !== get(lp, `${lt.player}.hands.${lt.hand}`)) {\n        this.playDealer();\n      }\n    }\n  }\n\n  /** function to generate the state of a new game\n   * @return {Object}\n   */\n  getNewGameState = () => ({\n    gameFunctions: [{ name: 'Finish Betting', func: this.finishBetting }],\n    hideHands: true,\n  });\n\n  /** function to reset turn and player status */\n  setNewGameRedux = () => {\n    const { turnActions, playerActions, players } = this.props;\n    // reset redux actions\n    turnActions.resetTurn();\n    // reset player statuses\n    forEach(players, (player) => playerActions.resetStatus(player.id));\n  };\n\n  /** get the game functions for the present hand\n   * @param {Object[]} hand\n   */\n  getGameFunctions = (hand) => {\n    // check state\n    if (!hand) {\n      return;\n    }\n\n    // define game function options\n    const stay = { name: 'Stay', func: this.stay };\n    const hit = { name: 'Hit', func: this.hit };\n    const double = { name: 'Double', func: this.double };\n    const split = { name: 'Split', func: this.split };\n\n    // reset game functions\n    const gameFunctions = [stay];\n\n    // check if not a bust\n    if (hand.weight < 21) {\n      gameFunctions.push(hit);\n      // check if you only have 2 cards\n      if (hand.cards.length === 2) {\n        gameFunctions.push(double);\n        // check if card1 and card2 have equal weight\n        const { weight: weight1 } = weighHand([hand.cards[0]]);\n        const { weight: weight2 } = weighHand([hand.cards[1]]);\n        if (weight1 === weight2) {\n          gameFunctions.push(split);\n        }\n      }\n    }\n\n    // update game state\n    this.setState({ gameFunctions });\n  };\n\n  /** function that takes a hand of duplicates and makes 2 hands\n   * stateChanges: players\n   */\n  split = () => {\n    // get state values\n    const { turn, players, playerActions } = this.props;\n    const { id, hands } = players[turn.player];\n\n    playerActions.splitHand(hands, id, turn.hand, weighHand);\n  };\n\n  /** function that doubles your bet, but you only get 1 card */\n  double = () => {\n    const { turn, playerActions, players } = this.props;\n    // double bet\n    const { id, bet } = players[turn.player];\n    playerActions.updateBet(id, bet * 2);\n    // hit then stay\n    this.hit();\n    this.stay();\n  };\n\n  /** function to pass to the next player\n   * stateChanges: turn\n   */\n  stay = () => {\n    // get state values\n    const { turn, turnActions, players } = this.props;\n    const lastHand = players[turn.player].hands.length - 1;\n\n    // check if the player has more than 1 hand\n    turn.hand < lastHand\n      ? turnActions.incrHandTurn()\n      : turnActions.incrPlayerTurn();\n  };\n\n  /** function to get a new card\n   * stateChanges: players\n   */\n  hit = () => {\n    // get state values\n    const { turn, playerActions, players } = this.props;\n    const { id, hands } = players[turn.player];\n    // logic to hit\n    playerActions.drawCard(hands, id, turn.hand, 1, weighHand);\n  };\n\n  /** Start a new round of hands\n   * stateChanges: turn, players\n   */\n  dealHands = () => {\n    const { playerActions, players } = this.props;\n    // shuffle the deck\n    Deck.shuffle().then(() => {\n      // deal the hands\n      asyncForEach(players, async (player) => {\n        const num = player.id !== DEALER ? 2 : 1;\n        await playerActions.newHand(player.id, num, weighHand);\n      });\n    });\n  };\n\n  /** Start a new game\n   * stateChanges: hideHands\n   */\n  newGame = () => {\n    this.setNewGameRedux();\n    this.setState(this.getNewGameState());\n  };\n\n  /** function to finish betting and start the game\n   * stateChanges: hideHands\n   */\n  finishBetting = () => {\n    this.setState({ hideHands: false });\n    this.dealHands();\n  };\n\n  /** finish the game and check for a winner\n   * stateChanges: turn, player, gameFunctions\n   */\n  finishGame = () => {\n    // state variables\n    const { turn, players, playerActions } = this.props;\n    const dealer = players[turn.player].hands[DEALER].weight;\n    const dealerLen = players[turn.player].hands[DEALER].cards.length;\n    // track and find the winners\n    const playerStats = { house: 0, payout: 0, status: '' };\n    // helper functions\n    const win = (ps, bet, mul = 1) => {\n      ps.house -= Math.floor(mul * bet);\n      ps.payout = Math.floor(mul * bet);\n      ps.status = 'win';\n    };\n    const loss = (ps, bet) => {\n      ps.house += bet;\n      ps.payout = -bet;\n      ps.status = 'lose';\n    };\n    // iterate\n    forEach(players, (player) => {\n      const { id, bet } = player;\n      if (id === DEALER) {\n        if (playerStats.house > 0) {\n          playerStats.status = 'win';\n        } else if (playerStats.house < 0) {\n          playerStats.status = 'lose';\n        } else {\n          playerStats.status = 'push';\n        }\n        playerActions.payout(id, playerStats.status, playerStats.house);\n      } else {\n        forEach(player.hands, (hand) => {\n          const { weight, cards } = hand;\n          if (dealer === 21 && dealerLen === 2) {\n            // dealer BlackJack\n            loss(playerStats, bet);\n          } else if (weight === 21 && cards.length === 2) {\n            // player BlackJack\n            win(playerStats, bet, 6 / 5);\n          } else if (weight <= 21 && (weight > dealer || dealer > 21)) {\n            win(playerStats, bet);\n          } else if (weight <= 21 && weight === dealer) {\n            playerStats.payout = 0;\n            playerStats.status = 'push';\n          } else {\n            loss(playerStats, bet);\n          }\n        });\n        playerActions.payout(id, playerStats.status, playerStats.payout);\n      }\n    });\n\n    // update state variables\n    const gameFunctions = [{ name: 'New Game', func: this.newGame }];\n    // update state\n    this.setState({ gameFunctions });\n  };\n\n  /** function to execute dealer logic */\n  playDealer = () => {\n    const { players, turn } = this.props;\n    const hand = players[turn.player].hands[turn.hand].cards;\n    const { weight, soft } = weighHand(hand);\n    // Dealer hits on 16 or less and soft 17\n    if (weight <= 16 || (weight === 17 && soft)) {\n      this.hit();\n    } else {\n      this.finishGame();\n    }\n  };\n\n  // AI: https://www.blackjackinfo.com/blackjack-basic-strategy-engine/\n  playBot = () => {\n    // functions\n    const {\n      hit, split, double, stay,\n    } = this;\n    // player hand\n    const { players, turn } = this.props;\n    const hand = players[turn.player].hands[turn.hand];\n    // validate hand exists\n    if (!hand) {\n      return;\n    }\n    // get remaining vars\n    const dealer = players[players.length - 1].hands[DEALER];\n    const { weight: n, soft } = hand;\n    // card / dealer weight\n    const { weight: d } = weighHand([dealer.cards[0]]);\n    const { weight: x } = weighHand([hand.cards[0]]);\n    const { weight: y } = weighHand([hand.cards[1]]);\n\n    // play AI logic\n    if (n < 22) {\n      // split algorithm\n      if (x === y) {\n        if (x === 2 || x === 3 || x === 7) {\n          // 2,3,7, split d2-7, hit d8+\n          d <= 7 ? split() : hit();\n        } else if (x === 4) {\n          // 4, split d5-6, else hit\n          d === 5 || d === 6 ? split() : hit();\n        } else if (x === 5) {\n          // 5, double d2-9, hit d10+\n          d <= 9 ? double() : hit();\n        } else if (x === 6) {\n          // 6, split d2-6, else hit\n          d <= 6 ? split() : hit();\n        } else if (x === 9) {\n          // 9, d7,10+ stay, else split\n          d === 7 || d >= 10 ? stay() : split();\n        } else if (x === 8 || x === 14) {\n          // 8,A split\n          split();\n        } else {\n          // 10 Stay\n          stay();\n        }\n      } else if (n < 20 && soft) {\n        // soft hands, A9+ stays\n        if (n === 13 || n === 14) {\n          // A2-A3 double d5-6, hit d2-4, d7-A\n          d === 5 || d === 6 ? double() : hit();\n        } else if (n === 15 || n === 16) {\n          // A4-A5 double d4-6, hit d2-3, d7-A\n          d >= 4 && d <= 6 ? double() : hit();\n        } else if (n === 17) {\n          // A6 double d3-6, hit d2, d7-A\n          d >= 3 && d <= 6 ? double() : hit();\n        } else if (n === 18) {\n          // A7 double d2-6, stay d7-8, hit d9-A\n          if (n >= 2 && n <= 6) {\n            double();\n          } else if (n === 7 || n === 8) {\n            stay();\n          } else {\n            hit();\n          }\n        } else if (n === 19) {\n          // A8 double d6, else stay\n          d === 6 ? double() : stay();\n        }\n      } else if (n < 17 && !soft) {\n        // hard hands, 17+ stays\n        if (n >= 5 && n <= 8) {\n          // 5-8 hit\n          hit();\n        } else if (n === 9) {\n          // 9 double d3-6, hit d2, d7-A\n          d >= 3 && d <= 6 ? double() : hit();\n        } else if (n === 10) {\n          // 10 double d2-9, hit d10-A\n          d >= 2 && d <= 9 ? double() : hit();\n        } else if (n === 11) {\n          // 11 double\n          double();\n        } else if (n === 12) {\n          // 12 hit d2-3, stay d4-6, hit 7-A\n          d >= 4 && d <= 6 ? stay() : hit();\n        } else if (n >= 13 && n <= 16) {\n          // 13-16 stay d2-6, hit 7-A\n          d >= 2 && d <= 6 ? stay() : hit();\n        }\n      } else {\n        stay();\n      }\n    } else {\n      // bust\n      stay();\n    }\n  };\n\n  /** function to be called on card clicks\n   * @param {number} playerNo - player number\n   * @param {number} handNo - hand number\n   * @param {number} cardNo - card number\n   */\n  cardClickHandler = (playerNo, handNo, cardNo) => {\n    const { players } = this.props;\n    /* eslint-disable no-console */\n    console.log(players[playerNo].hands[handNo].cards[cardNo]);\n    /* eslint-enable no-console */\n  };\n\n  /** function to be called on card clicks\n   * @param {number} id\n   * @param {Object} event\n   * @param {number} bet\n   * stateChanges: player\n   */\n  betHandler = (id, event, bet) => {\n    const { playerActions } = this.props;\n    playerActions.updateBet(id, bet);\n  };\n\n  /* render the UI */\n  render() {\n    const { turn, players } = this.props;\n    const { gameFunctions, hideHands } = this.state;\n\n    return (\n      <Fragment>\n        <Header />\n        <GameTable\n          betHandler={this.betHandler}\n          cardClickHandler={this.cardClickHandler}\n          gameFunctions={gameFunctions}\n          hideHands={hideHands}\n          players={players}\n          turn={turn}\n        />\n      </Fragment>\n    );\n  }\n}\n\nBlackJack.propTypes = {\n  playerActions: types.shape({\n    drawCard: types.func.isRequired,\n    newHand: types.func.isRequired,\n    payout: types.func.isRequired,\n    resetStatus: types.func.isRequired,\n    splitHand: types.func.isRequired,\n    updateBet: types.func.isRequired,\n  }).isRequired,\n  players: types.arrayOf(\n    types.shape({\n      bet: types.number.isRequired,\n      id: types.number.isRequired,\n      status: types.string.isRequired,\n      money: types.number.isRequired,\n      hands: types.arrayOf(\n        types.shape({\n          weight: types.number.isRequired,\n          cards: types.arrayOf(\n            types.shape({ weight: types.number.isRequired }),\n          ).isRequired,\n        }),\n      ).isRequired,\n    }),\n  ).isRequired,\n  turn: types.shape({\n    player: types.number.isRequired,\n    hand: types.number.isRequired,\n  }).isRequired,\n  turnActions: types.shape({\n    incrHandTurn: types.func.isRequired,\n    incrPlayerTurn: types.func.isRequired,\n    resetTurn: types.func.isRequired,\n  }).isRequired,\n};\n\n// react-redux export\nconst mapStateToProps = (state) => ({\n  turn: state.turn,\n  players: state.players,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  turnActions: bindActionCreators(\n    { incrPlayerTurn, resetTurn, incrHandTurn },\n    dispatch,\n  ),\n  playerActions: bindActionCreators(\n    {\n      drawCard,\n      newHand,\n      splitHand,\n      payout,\n      updateBet,\n      resetStatus,\n    },\n    dispatch,\n  ),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BlackJack);\n","import BlackJack from './Blackjack';\n\nexport default BlackJack;\n"],"sourceRoot":""}