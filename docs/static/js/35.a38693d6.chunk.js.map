{"version":3,"sources":["components/resume/graphql/Loading.jsx","components/resume/graphql/repository/fragments.js","components/resume/graphql/Link.jsx","components/resume/graphql/repository/RepositoryItem.jsx","components/resume/graphql/FetchMore.jsx","components/resume/graphql/repository/RepositoryList.jsx","components/resume/graphql/repository/index.jsx","components/resume/graphql/Error.jsx","components/resume/graphql/Profile.jsx","components/resume/graphql/Header.jsx","components/resume/graphql/NoToken.jsx","components/resume/graphql/GraphQL.jsx","components/resume/graphql/index.jsx"],"names":["Loading","react_default","a","createElement","REPOSITORY_FRAGMENT","gql","_templateObject","Link","_ref","children","props","Object","objectWithoutProperties","assign","target","rel","STAR_REPOSITORY","RepositoryItem_templateObject","UNSTAR_REPOSITORY","_templateObject2","WATCH_REPOSITORY","_templateObject3","updateAddStar","client","id","data","addStar","starrable","repository","readFragment","concat","fragment","totalCount","stargazers","writeFragment","objectSpread","updateRemoveStar","_ref2","removeStar","VIEWER_SUBSCRIPTIONS","isWatch","viewerSubscription","updateWatch","_ref3","_ref3$data$updateSubs","updateSubscription","subscribable","watchers","RepositoryItem","name","url","descriptionHTML","primaryLanguage","owner","viewerHasStarred","className","Typography","variant","graphql_Link","href","react_apollo_esm","mutation","variables","optimisticResponse","__typename","update","_ref5","loading","error","Button","onClick","color","_ref4","_ref6","dangerouslySetInnerHTML","__html","display","login","FetchMore","hasNextPage","updateQuery","fetchMore","graphql_Loading","previousResult","fetchMoreResult","viewer","repositories","edges","toConsumableArray","RepositoryList","react","map","node","key","repository_RepositoryItem","graphql_FetchMore","pageInfo","cursor","endCursor","ErrorMessage","toString","GET_REPOSITORIES_OF_CURRENT_USER","Profile_templateObject","Profile","query","notifyOnNetworkStatusChange","response","Error","graphql_repository","Header","authToken","onChange","TextField","label","placeholder","value","style","margin","fullWidth","NoToken","memo","errorLink","onError","graphQLErrors","networkError","cache","InMemoryCache","connect","state","graphQLToken","graphql","token","dispatch","stateActions","bindActionCreators","setToken","_useState","useState","_useState2","slicedToArray","setAuthToken","handleChange","e","graphql_Header","graphql_NoToken","httpLink","HttpLink","uri","headers","authorization","link","ApolloLink","from","ApolloClient","graphql_Profile","GraphQL"],"mappings":"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","file":"static/js/35.a38693d6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Loading = () => <div>Loading ...</div>;\n\nexport default Loading;\n","import gql from 'graphql-tag';\n\nconst REPOSITORY_FRAGMENT = gql`\n  fragment repository on Repository {\n    id\n    name\n    url\n    descriptionHTML\n    primaryLanguage {\n      name\n    }\n    owner {\n      login\n      url\n    }\n    stargazers {\n      totalCount\n    }\n    viewerHasStarred\n    watchers {\n      totalCount\n    }\n    viewerSubscription\n  }\n`;\n\nexport default REPOSITORY_FRAGMENT;\n","import React from 'react';\nimport types from 'prop-types';\n\nconst Link = ({ children, ...props }) => (\n  <a {...props} target=\"_blank\" rel=\"noopener noreferrer\">\n    {children}\n  </a>\n);\n\nLink.propTypes = {\n  children: types.node,\n};\n\nexport default Link;\n","import React from 'react';\nimport types from 'prop-types';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nimport Button from '@material-ui/core/Button';\nimport { Typography } from '@material-ui/core';\nimport REPOSITORY_FRAGMENT from './fragments';\nimport Link from '../Link';\n\n/* eslint-disable no-unused-vars */\n/* eslint-disable react/no-danger */\n\nconst STAR_REPOSITORY = gql`\n  mutation($id: ID!) {\n    addStar(input: { starrableId: $id }) {\n      starrable {\n        id\n        viewerHasStarred\n      }\n    }\n  }\n`;\n\nconst UNSTAR_REPOSITORY = gql`\n  mutation($id: ID!) {\n    removeStar(input: { starrableId: $id }) {\n      starrable {\n        id\n        viewerHasStarred\n      }\n    }\n  }\n`;\n\nconst WATCH_REPOSITORY = gql`\n  mutation ($id: ID!, $viewerSubscription: SubscriptionState!) {\n    updateSubscription(\n      input: { state: $viewerSubscription, subscribableId: $id }\n    ) {\n      subscribable {\n        id\n        viewerSubscription\n      }\n    }\n  }\n`;\n\nconst updateAddStar = (\n  client,\n  { data: { addStar: { starrable: { id } } } },\n) => {\n  const repository = client.readFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  const totalCount = repository.stargazers.totalCount + 1;\n\n  client.writeFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: {\n      ...repository,\n      stargazers: {\n        ...repository.stargazers,\n        totalCount,\n      },\n    },\n  });\n};\n\nconst updateRemoveStar = (\n  client,\n  { data: { removeStar: { starrable: { id } } } },\n) => {\n  const repository = client.readFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  const totalCount = repository.stargazers.totalCount - 1;\n\n  client.writeFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: {\n      ...repository,\n      stargazers: {\n        ...repository.stargazers,\n        totalCount,\n      },\n    },\n  });\n};\n\nconst VIEWER_SUBSCRIPTIONS = {\n  SUBSCRIBED: 'SUBSCRIBED',\n  UNSUBSCRIBED: 'UNSUBSCRIBED',\n};\n\nconst isWatch = viewerSubscription => viewerSubscription === VIEWER_SUBSCRIPTIONS.SUBSCRIBED;\n\nconst updateWatch = (\n  client,\n  {\n    data: {\n      updateSubscription: {\n        subscribable: { id, viewerSubscription },\n      },\n    },\n  },\n) => {\n  const repository = client.readFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  let { totalCount } = repository.watchers;\n  totalCount = viewerSubscription === VIEWER_SUBSCRIPTIONS.SUBSCRIBED\n    ? totalCount + 1\n    : totalCount - 1;\n\n  client.writeFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: {\n      ...repository,\n      watchers: {\n        ...repository.watchers,\n        totalCount,\n      },\n    },\n  });\n};\n\nconst RepositoryItem = (props) => {\n  const {\n    id,\n    name,\n    url,\n    descriptionHTML,\n    primaryLanguage,\n    owner,\n    stargazers,\n    watchers,\n    viewerSubscription,\n    viewerHasStarred,\n  } = props;\n\n  return (\n    <div>\n      <div className=\"RepositoryItem-title\">\n        <Typography variant=\"h3\">\n          <Link href={url}>{name}</Link>\n        </Typography>\n\n        {!viewerHasStarred\n          ? (\n            <Mutation\n              mutation={STAR_REPOSITORY}\n              variables={{ id }}\n              optimisticResponse={{\n                addStar: {\n                  __typename: 'Mutation',\n                  starrable: {\n                    __typename: 'Repository',\n                    id,\n                    viewerHasStarred: true,\n                  },\n                },\n              }}\n              update={updateAddStar}\n            >\n              {(addStar, { data, loading, error }) => (\n                <Button\n                  className=\"RepositoryItem-title-action\"\n                  onClick={addStar}\n                  variant=\"outlined\"\n                  color=\"primary\"\n                >\n                  Star (\n                  {stargazers.totalCount}\n                  )\n                </Button>\n              )}\n            </Mutation>\n          ) : (\n            <Mutation\n              mutation={UNSTAR_REPOSITORY}\n              variables={{ id }}\n              optimisticResponse={{\n                removeStar: {\n                  __typename: 'Mutation',\n                  starrable: {\n                    __typename: 'Repository',\n                    id,\n                    viewerHasStarred: false,\n                  },\n                },\n              }}\n              update={updateRemoveStar}\n            >\n              {(removeStar, { data, loading, error }) => (\n                <Button\n                  className=\"RepositoryItem-title-action\"\n                  onClick={removeStar}\n                  variant=\"outlined\"\n                  color=\"primary\"\n                >\n                  UnStar (\n                  {stargazers.totalCount}\n                  )\n                </Button>\n              )}\n            </Mutation>\n          )}\n        <Mutation\n          mutation={WATCH_REPOSITORY}\n          variables={{\n            id,\n            viewerSubscription: isWatch(viewerSubscription)\n              ? VIEWER_SUBSCRIPTIONS.UNSUBSCRIBED\n              : VIEWER_SUBSCRIPTIONS.SUBSCRIBED,\n          }}\n          optimisticResponse={{\n            updateSubscription: {\n              __typename: 'Mutation',\n              subscribable: {\n                __typename: 'Repository',\n                id,\n                viewerSubscription: isWatch(viewerSubscription)\n                  ? VIEWER_SUBSCRIPTIONS.UNSUBSCRIBED\n                  : VIEWER_SUBSCRIPTIONS.SUBSCRIBED,\n              },\n            },\n          }}\n          update={updateWatch}\n        >\n          {(updateSubscription, { data, loading, error }) => (\n            <Button\n              className=\"RepositoryItem-title-action\"\n              onClick={updateSubscription}\n              variant=\"outlined\"\n              color=\"primary\"\n            >\n              {isWatch(viewerSubscription) ? 'Unwatch' : 'Watch'}\n              {` (${watchers.totalCount})`}\n            </Button>\n          )}\n        </Mutation>\n      </div>\n\n      <div className=\"RepositoryItem-description\">\n        <div\n          className=\"RepositoryItem-description-info\"\n          dangerouslySetInnerHTML={{ __html: descriptionHTML }}\n        />\n        <div className=\"RepositoryItem-description-details\">\n          <div>\n            {primaryLanguage && (\n              <Typography display=\"inline\">\n                Language:\n                {' '}\n                {primaryLanguage.name}\n              </Typography>\n            )}\n          </div>\n          <div>\n            {owner && (\n              <Typography display=\"inline\">\n                Owner:\n                {' '}\n                <a href={owner.url}>{owner.login}</a>\n              </Typography>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n/* eslint-enable no-unused-vars */\n/* eslint-enable react/no-danger */\n\nRepositoryItem.propTypes = {\n  id: types.string.isRequired,\n  name: types.string.isRequired,\n  url: types.string.isRequired,\n  descriptionHTML: types.string.isRequired,\n  primaryLanguage: types.shape({\n    name: types.string.isRequired,\n  }),\n  owner: types.shape({\n    url: types.string,\n    login: types.string,\n  }),\n  stargazers: types.shape({\n    totalCount: types.number,\n  }).isRequired,\n  watchers: types.shape({\n    totalCount: types.number,\n  }).isRequired,\n  viewerSubscription: types.string.isRequired,\n  viewerHasStarred: types.bool.isRequired,\n};\n\nexport default RepositoryItem;\n","import React from 'react';\nimport types from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Loading from './Loading';\n\nconst FetchMore = (props) => {\n  const {\n    loading,\n    hasNextPage,\n    variables,\n    updateQuery,\n    fetchMore,\n    children,\n  } = props;\n\n  return (\n    <div className=\"FetchMore\">\n      {loading\n        ? (\n          <Loading />\n        ) : (\n          hasNextPage && (\n            <Button\n              className=\"FetchMore-button\"\n              onClick={() => fetchMore({ variables, updateQuery })}\n              variant=\"outlined\"\n              color=\"primary\"\n            >\n              More\n              {' '}\n              {children}\n            </Button>\n          )\n        )\n      }\n    </div>\n  );\n};\n\nFetchMore.propTypes = {\n  loading: types.bool.isRequired,\n  hasNextPage: types.bool.isRequired,\n  variables: types.shape({\n    cursor: types.shape.isRequired,\n  }).isRequired,\n  updateQuery: types.func.isRequired,\n  fetchMore: types.func.isRequired,\n  children: types.node,\n};\n\nexport default FetchMore;\n","import React, { Fragment } from 'react';\nimport types from 'prop-types';\nimport map from 'lodash/map';\nimport RepositoryItem from './RepositoryItem';\nimport FetchMore from '../FetchMore';\n\nconst updateQuery = (previousResult, { fetchMoreResult }) => {\n  if (!fetchMoreResult) {\n    return previousResult;\n  }\n\n  return {\n    ...previousResult,\n    viewer: {\n      ...previousResult.viewer,\n      repositories: {\n        ...previousResult.viewer.repositories,\n        ...fetchMoreResult.viewer.repositories,\n        edges: [\n          ...previousResult.viewer.repositories.edges,\n          ...fetchMoreResult.viewer.repositories.edges,\n        ],\n      },\n    },\n  };\n};\n\nconst RepositoryList = ({ repositories, loading, fetchMore }) => (\n  <Fragment>\n    {map(repositories.edges, ({ node }) => (\n      <div key={node.id} className=\"RepositoryItem\">\n        <RepositoryItem {...node} />\n      </div>\n    ))}\n\n    <FetchMore\n      loading={loading}\n      hasNextPage={repositories.pageInfo.hasNextPage}\n      variables={{\n        cursor: repositories.pageInfo.endCursor,\n      }}\n      updateQuery={updateQuery}\n      fetchMore={fetchMore}\n    >\n      Repositories\n    </FetchMore>\n  </Fragment>\n);\n\nRepositoryList.propTypes = {\n  repositories: types.shape({\n    edges: types.arrayOf(types.object).isRequired,\n    pageInfo: types.shape({\n      hasNextPage: types.bool.isRequired,\n      endCursor: types.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n  loading: types.bool.isRequired,\n  fetchMore: types.func.isRequired,\n};\n\nexport default RepositoryList;\n","import RepositoryList from './RepositoryList';\nimport REPOSITORY_FRAGMENT from './fragments';\n\nexport { REPOSITORY_FRAGMENT };\n\nexport default RepositoryList;\n","import React from 'react';\nimport types from 'prop-types';\n\nconst ErrorMessage = ({ error }) => (\n  <div>\n    <small>{error.toString()}</small>\n  </div>\n);\n\nErrorMessage.propTypes = {\n  error: types.shape({}).isRequired,\n};\n\nexport default ErrorMessage;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport Loading from './Loading';\nimport RepositoryList, { REPOSITORY_FRAGMENT } from './repository';\nimport ErrorMessage from './Error';\n\nconst GET_REPOSITORIES_OF_CURRENT_USER = gql`\n  query($cursor: String) {\n    viewer {\n      repositories(\n        first: 5\n        orderBy: { direction: DESC, field: STARGAZERS }\n        after: $cursor\n      ) {\n        edges {\n          node {\n            ...repository\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  }\n  ${REPOSITORY_FRAGMENT}\n`;\n\nconst Profile = () => (\n  <Query query={GET_REPOSITORIES_OF_CURRENT_USER} notifyOnNetworkStatusChange>\n    {(response) => {\n      // check errors\n      const { error } = response;\n      if (error) {\n        return <ErrorMessage error={error} />;\n      }\n\n      // check for data\n      const { data: { viewer }, loading } = response;\n      if (loading && !viewer) {\n        return <Loading />;\n      }\n\n      // display data\n      const { fetchMore } = response;\n      return <RepositoryList loading={loading} repositories={viewer.repositories} fetchMore={fetchMore} />;\n    }}\n  </Query>\n);\n\nexport default Profile;\n","import React from 'react';\nimport types from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\n\nconst Header = (props) => {\n  const { authToken, onChange } = props;\n\n  return (\n    <div>\n      <Typography variant=\"h2\">GraphQL Demo</Typography>\n      <TextField\n        label=\"Authorization Code\"\n        placeholder=\"some32characterthingfromgithub\"\n        value={authToken}\n        onChange={onChange}\n        style={{ margin: '20px 0 20px 0' }}\n        fullWidth\n      />\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  authToken: types.string,\n  onChange: types.func.isRequired,\n};\n\nexport default Header;\n","import React, { memo } from 'react';\nimport { Typography } from '@material-ui/core';\n\nconst NoToken = memo(() => (\n  <Typography variant=\"h6\">\n    You need to generate a personal access token with &quot;repo&quot; and &quot;admin:repo_hook&quot; permissions.\n    <br />\n    This can be done in the Developer settings on GitHub.\n  </Typography>\n));\n\nexport default NoToken;\n","import React, { useState } from 'react';\nimport types from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport Profile from './Profile';\nimport { setToken } from '../../../store/modules/graphql';\nimport Header from './Header';\nimport NoToken from './NoToken';\n\nconst GITHUB_BASE_URL = 'https://api.github.com/graphql';\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    // do something with graphql error\n  }\n  if (networkError) {\n    // do something with network error\n  }\n});\nconst cache = new InMemoryCache();\n\nconst GraphQL = (props) => {\n  const { graphQLToken, stateActions } = props;\n  const [authToken, setAuthToken] = useState(graphQLToken);\n\n  const handleChange = (e) => {\n    const token = e.target.value;\n    stateActions.setToken(token);\n    setAuthToken(token);\n  };\n\n  if (!graphQLToken) {\n    return (\n      <div>\n        <Header authToken={authToken} onChange={handleChange} />\n        <NoToken />\n      </div>\n    );\n  }\n\n  const httpLink = new HttpLink({\n    uri: GITHUB_BASE_URL,\n    headers: {\n      authorization: `Bearer ${graphQLToken}`,\n    },\n  });\n  const link = ApolloLink.from([errorLink, httpLink]);\n  const client = new ApolloClient({ link, cache });\n\n  return (\n    <ApolloProvider client={client}>\n      <Header authToken={authToken} onChange={handleChange} />\n      <Profile />\n    </ApolloProvider>\n  );\n};\n\nGraphQL.propTypes = {\n  graphQLToken: types.string,\n  stateActions: types.shape({\n    setToken: types.func.isRequired,\n  }).isRequired,\n};\n\n// react-redux export\nconst mapStateToProps = state => ({ graphQLToken: state.graphql.token });\nconst mapDispatchToProps = dispatch => ({\n  stateActions: bindActionCreators({ setToken }, dispatch),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(GraphQL);\n","import GraphQL from './GraphQL';\n\nexport default GraphQL;\n"],"sourceRoot":""}