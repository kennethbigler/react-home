{"version":3,"file":"static/js/r_work.00c34421.chunk.js","mappings":"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","sources":["components/resume/work/Job.tsx","components/resume/work/WorkCards.tsx","components/resume/work/Work.tsx","../node_modules/@mui/material/colors/cyan.js","../node_modules/@mui/material/colors/indigo.js","../node_modules/@mui/material/colors/yellow.js","../node_modules/lodash/startCase.js"],"sourcesContent":["import React from \"react\";\nimport Chip from \"@mui/material/Chip\";\nimport Grid from \"@mui/material/Grid\";\nimport { Typography } from \"@mui/material\";\nimport dateObj, { DateObj } from \"../../../apis/DateHelper\";\nimport { FORMAT } from \"../../common/timeline-card/Timeline\";\nimport ExpandableCard from \"../../common/expandable-card\";\nimport { Job as JobType } from \"../../../constants/work\";\n\ninterface JobProps {\n  job: JobType;\n}\n\nconst imgStyle: React.CSSProperties = {\n  width: \"100%\",\n  maxWidth: \"12em\",\n  height: \"auto\",\n  float: \"right\",\n};\n\nexport const getCSV = (arr: string[] = []): React.ReactNodeArray => {\n  const style = { marginRight: 5, marginBottom: 5 };\n  return arr.map((item) => <Chip key={item} label={item} style={style} />);\n};\n\nexport const showRange = (s: DateObj, e: DateObj, notes = \"\"): string => {\n  // start date\n  const start = s.format(FORMAT);\n  // end date, check if it is the present\n  const end = dateObj().diff(e, \"days\") < 1 ? \"Present\" : e.format(FORMAT);\n\n  // get the time range in years, months\n  const mon = (e.diff(s, \"months\") + 1) % 12;\n  const yr = e.diff(s, \"years\") + (mon === 0 ? 1 : 0);\n  const yRange = yr ? `${yr} year${yr > 1 ? \"s\" : \"\"}` : null;\n  const mRange = mon ? `${mon} month${mon > 1 ? \"s\" : \"\"}` : 0;\n  const range = yRange ? yRange + (mRange ? `, ${mRange}` : \"\") : mRange;\n\n  // return string for output\n  return `${start} - ${end} (${range}) ${notes}`;\n};\n\nconst Job: React.FC<JobProps> = (props: JobProps) => {\n  const { job } = props;\n\n  const parent = job.parent ? ` (${job.parent})` : \"\";\n  const title = `${job.company}${parent}, ${job.location}`;\n\n  return (\n    <ExpandableCard\n      backgroundColor={job.color}\n      subtitle={job.title}\n      inverted={job.inverted}\n      title={title}\n    >\n      <Grid item sm={9} xs={12}>\n        <Typography>{showRange(job.start, job.end, job.notes)}</Typography>\n        {job.expr && (\n          <ul>\n            {job.expr.map((desc, i) => (\n              <li key={`desc${i}`}>\n                <Typography>{desc}</Typography>\n              </li>\n            ))}\n          </ul>\n        )}\n        {job.tech && job.tech.length !== 0 && (\n          <>\n            <hr />\n            <Typography display=\"inline\">Technologies:&nbsp;</Typography>\n            {getCSV(job.tech)}\n          </>\n        )}\n        {job.skills && job.skills.length !== 0 && (\n          <>\n            <hr />\n            <Typography display=\"inline\">Skills:&nbsp;</Typography>\n            {getCSV(job.skills)}\n          </>\n        )}\n      </Grid>\n      {job.src && (\n        <Grid item sm={3} xs={12}>\n          <img alt={job.alt} src={job.src} style={imgStyle} />\n        </Grid>\n      )}\n    </ExpandableCard>\n  );\n};\n\nexport default Job;\n","import React from \"react\";\nimport startCase from \"lodash/startCase\";\nimport { Typography } from \"@mui/material\";\nimport Job from \"./Job\";\nimport { Job as JobType } from \"../../../constants/work\";\n\ninterface WorkCardsProps {\n  workExp: JobType[];\n  workTypes: string[];\n}\n\nconst WorkCards: React.FC<WorkCardsProps> = ({\n  workExp,\n  workTypes,\n}: WorkCardsProps) => (\n  <>\n    {workTypes.map((type) => (\n      <div key={type} style={{ marginTop: 25 }}>\n        <Typography variant=\"h3\">{`${startCase(type)} Experience`}</Typography>\n        <hr />\n        {workExp.map(\n          (job) => job.type === type && <Job key={job.company} job={job} />\n        )}\n      </div>\n    ))}\n  </>\n);\n\nexport default WorkCards;\n","import React from \"react\";\nimport { Typography } from \"@mui/material\";\nimport TimelineCard from \"../../common/timeline-card\";\nimport ExpandableCard from \"../../common/expandable-card\";\nimport workExp, { VOLUNTEER, WORK } from \"../../../constants/work\";\nimport LoadingSpinner from \"../../common/loading-spinner\";\nimport WorkCards from \"./WorkCards\";\n\nconst TechBarChart = React.lazy(\n  () => import(/* webpackChunkName: \"r_work_bar_chart\" */ \"./TechBarChart\")\n);\n\n/* Work  ->  TechBarChart\n *      |->  WorkCards  ->  Job */\nconst Work: React.FC = React.memo(() => (\n  <>\n    <Typography variant=\"h2\">Experience</Typography>\n    <TimelineCard data={workExp} title=\"Work Timeline\" />\n    <ExpandableCard title=\"Programming Language Timeline (Professional Use)\">\n      <React.Suspense fallback={<LoadingSpinner />}>\n        <TechBarChart />\n      </React.Suspense>\n    </ExpandableCard>\n    <WorkCards workExp={workExp} workTypes={[WORK, VOLUNTEER]} />\n  </>\n));\n\nexport default Work;\n","const cyan = {\n  50: '#e0f7fa',\n  100: '#b2ebf2',\n  200: '#80deea',\n  300: '#4dd0e1',\n  400: '#26c6da',\n  500: '#00bcd4',\n  600: '#00acc1',\n  700: '#0097a7',\n  800: '#00838f',\n  900: '#006064',\n  A100: '#84ffff',\n  A200: '#18ffff',\n  A400: '#00e5ff',\n  A700: '#00b8d4'\n};\nexport default cyan;","const indigo = {\n  50: '#e8eaf6',\n  100: '#c5cae9',\n  200: '#9fa8da',\n  300: '#7986cb',\n  400: '#5c6bc0',\n  500: '#3f51b5',\n  600: '#3949ab',\n  700: '#303f9f',\n  800: '#283593',\n  900: '#1a237e',\n  A100: '#8c9eff',\n  A200: '#536dfe',\n  A400: '#3d5afe',\n  A700: '#304ffe'\n};\nexport default indigo;","const yellow = {\n  50: '#fffde7',\n  100: '#fff9c4',\n  200: '#fff59d',\n  300: '#fff176',\n  400: '#ffee58',\n  500: '#ffeb3b',\n  600: '#fdd835',\n  700: '#fbc02d',\n  800: '#f9a825',\n  900: '#f57f17',\n  A100: '#ffff8d',\n  A200: '#ffff00',\n  A400: '#ffea00',\n  A700: '#ffd600'\n};\nexport default yellow;","var createCompounder = require('./_createCompounder'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts `string` to\n * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n *\n * @static\n * @memberOf _\n * @since 3.1.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the start cased string.\n * @example\n *\n * _.startCase('--foo-bar--');\n * // => 'Foo Bar'\n *\n * _.startCase('fooBar');\n * // => 'Foo Bar'\n *\n * _.startCase('__FOO_BAR__');\n * // => 'FOO BAR'\n */\nvar startCase = createCompounder(function(result, word, index) {\n  return result + (index ? ' ' : '') + upperFirst(word);\n});\n\nmodule.exports = startCase;\n"],"names":["imgStyle","width","maxWidth","height","float","getCSV","arr","style","marginRight","marginBottom","map","item","Chip","label","showRange","s","e","notes","start","format","FORMAT","end","dateObj","diff","mon","yr","yRange","mRange","range","props","job","parent","title","company","location","backgroundColor","color","subtitle","inverted","Grid","sm","xs","Typography","expr","desc","i","tech","length","display","skills","src","alt","workExp","workTypes","type","marginTop","variant","startCase","TechBarChart","React","data","fallback","WORK","VOLUNTEER","A100","A200","A400","A700","createCompounder","require","upperFirst","result","word","index","module","exports"],"sourceRoot":""}