{"version":3,"sources":["hooks/useOpenState.ts","components/common/InfoPopup.tsx","components/games/game-table/board/card/Card.styles.ts","components/games/game-table/board/card/Card.tsx","components/games/game-table/board/Hand.tsx","components/games/game-table/board/player/Player.styles.ts","components/games/game-table/board/player/Player.tsx","components/games/game-table/board/Board.tsx","components/games/game-table/button-group/Button.tsx","components/games/game-table/button-group/ButtonGroup.tsx","components/games/game-table/GameTable.tsx","components/games/game-table/index.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/@material-ui/core/colors/teal.js","../node_modules/@material-ui/core/colors/orange.js","../node_modules/@material-ui/core/colors/deepPurple.js","components/games/blackjack/blackjackHelpers.ts","components/games/blackjack/Rules.tsx","components/games/blackjack/help/Cell.tsx","components/games/blackjack/help/Row.tsx","components/games/blackjack/help/BlackjackTable.tsx","components/games/blackjack/help/index.ts","components/games/blackjack/help/Help.tsx","components/games/blackjack/Header.tsx","components/games/blackjack/Blackjack.tsx","components/games/blackjack/index.ts"],"names":["useOpenState","defaultVal","React","useState","isOpen","setIsOpen","handleOpen","handleClose","InfoPopup","props","buttonText","title","children","color","onClick","variant","onClose","open","maxWidth","fullWidth","cardFace","backgroundColor","borderRadius","cursor","display","fontWeight","height","margin","padding","width","cardTitle","textAlign","suit","marginTop","Card","memo","dropped","name","cardHandler","playerNo","handNo","cardNo","handleClick","useCallback","cardColor","red","style","styles","role","Typography","boldStyle","normalStyle","Hand","cardsToDiscard","hand","isBlackJack","isHandTurn","isMultiHand","isPlayerTurn","useMemo","purple","handWeight","weight","cards","map","card","i","includes","key","player","minWidth","Player","betHandler","hideHands","turn","hands","length","showSlider","id","isBot","minBet","Math","max","min","money","maxBet","onSliderChange","event","value","background","cyan","status","green","blueGrey","Slider","onChange","step","bet","Board","players","buttonStyle","Button","func","ButtonGroup","gameFunctions","obj","GameTable","cardClickHandler","gameOver","played","slice","future","playersToDisplay","defaultProps","_objectWithoutProperties","source","excluded","target","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","defineProperty","exports","default","_default","50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700","weighHand","soft","forEach","cardWeight","Rules","Cell","text","otherProps","stl","TableCell","size","tableCellStyle","Row","data","TableRow","cellStyle","BlackjackTable","Table","TableHead","colSpan","TableBody","rowSpan","c","Help","h","d","teal","s","p","orange","ds","deepPurple","hardTtl","softTtl","pairs","Header","className","gutterBottom","DEALER","BlackJack","getNewGameState","finishBetting","setNewGameRedux","turnActions","playerActions","resetTurn","resetStatus","getGameFunctions","stay","hit","double","split","push","setState","splitHand","updateBet","lastHand","incrHandTurn","incrPlayerTurn","drawCard","dealHands","Deck","shuffle","then","asyncForEach","a","num","newHand","newGame","finishGame","dealer","dealerLen","playerStats","house","payout","win","ps","mul","floor","loss","playDealer","playBot","n","x","y","console","log","state","prevProps","lp","lt","this","np","nt","Component","connect","dispatch","bindActionCreators"],"mappings":"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","file":"static/js/g_bj.50566cb7.chunk.js","sourcesContent":["import React from 'react';\n\ntype OpenStateHook = [\n  boolean,\n  Function,\n  Function,\n]\n\nconst useOpenState = (defaultVal = false): OpenStateHook => {\n  const [isOpen, setIsOpen] = React.useState(defaultVal);\n\n  const handleOpen = (): void => { setIsOpen(true); };\n  const handleClose = (): void => { setIsOpen(false); };\n\n  return [isOpen, handleOpen, handleClose];\n};\n\nexport default useOpenState;\n","import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport useOpenState from '../../hooks/useOpenState';\n\ninterface InfoPopupProps {\n  children: React.ReactNodeArray;\n  title: string | React.ReactElement;\n  buttonText?: string | React.ReactElement;\n}\n\nconst InfoPopup: React.FC<InfoPopupProps> = (props: InfoPopupProps) => {\n  const [isOpen, handleOpen, handleClose] = useOpenState();\n\n  const { buttonText, title, children } = props;\n  return (\n    <>\n      <Button color=\"primary\" onClick={handleOpen as React.MouseEventHandler} variant=\"contained\">\n        {buttonText || title}\n      </Button>\n      <Dialog onClose={handleClose as React.MouseEventHandler} open={isOpen} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          {title}\n        </DialogTitle>\n        <DialogContent>\n          {children}\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={handleClose as React.MouseEventHandler}>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default InfoPopup;\n","const cardFace: React.CSSProperties = {\n  backgroundColor: 'white',\n  borderRadius: 5,\n  cursor: 'pointer',\n  display: 'inline-block',\n  fontWeight: 'bold',\n  height: 78,\n  margin: 5,\n  padding: 3,\n  width: 50,\n};\n\nconst cardTitle: React.CSSProperties = {\n  textAlign: 'left',\n};\n\nconst suit: React.CSSProperties = {\n  margin: 'auto',\n  marginTop: 5,\n  textAlign: 'center',\n  width: '100%',\n};\n\nexport default {\n  cardFace,\n  cardTitle,\n  suit,\n};\n","import React, { memo } from 'react';\nimport red from '@material-ui/core/colors/red';\nimport { Typography } from '@material-ui/core';\nimport styles from './Card.styles';\n\ninterface CardProps {\n  cardHandler?: Function;\n  cardNo: number;\n  dropped: boolean;\n  handNo: number;\n  name: string;\n  playerNo: number;\n  suit: string;\n}\n\nconst Card = memo((props: CardProps) => {\n  const {\n    dropped, suit, name, cardHandler,\n    playerNo, handNo, cardNo,\n  } = props;\n  // handle click to for card\n  const handleClick = React.useCallback((): void => {\n    cardHandler && cardHandler(playerNo, handNo, cardNo);\n  }, [cardHandler, cardNo, handNo, playerNo]);\n  // checking color based off suits: ♣♦♥♠\n  const cardColor: React.CSSProperties = {\n    color: suit === '♣' || suit === '♠' ? 'black' : red[500],\n    backgroundColor: dropped ? red[100] : 'white',\n  };\n\n  return (\n    <div style={{ ...styles.cardFace, ...cardColor }} onClick={handleClick} role=\"main\">\n      <div style={styles.cardTitle}>\n        {name + suit}\n      </div>\n      <Typography variant=\"h4\" style={{ ...styles.suit, ...cardColor }}>\n        {suit}\n      </Typography>\n    </div>\n  );\n});\n\nexport default Card;\n","import React from 'react';\nimport purple from '@material-ui/core/colors/purple';\nimport { Typography } from '@material-ui/core';\nimport Card from './card/Card';\nimport { DBHand } from '../../../../store/types';\n\nconst boldStyle: React.CSSProperties = { fontWeight: 'bold', marginTop: '0.5em' };\nconst normalStyle: React.CSSProperties = { fontWeight: 'normal', marginTop: '0.5em' };\n\ninterface HandProps {\n  cardHandler?: Function;\n  cardsToDiscard: number[];\n  hand: DBHand;\n  handNo: number;\n  isBlackJack: boolean;\n  isHandTurn: boolean;\n  isMultiHand: boolean;\n  isPlayerTurn: boolean;\n  playerNo: number;\n}\n\nconst Hand: React.FC<HandProps> = (props: HandProps) => {\n  const {\n    cardHandler, cardsToDiscard, hand, handNo,\n    isBlackJack, isHandTurn, isMultiHand, isPlayerTurn,\n    playerNo,\n  } = props;\n\n  const styles = React.useMemo(() => (\n    isPlayerTurn && (!isMultiHand || (isMultiHand && isHandTurn))\n      ? { ...boldStyle, color: purple[700] } : normalStyle\n  ),\n  [isPlayerTurn, isMultiHand, isHandTurn]);\n  const handWeight = hand.weight || 0;\n\n  return (\n    <>\n      <Typography variant=\"h4\" style={styles}>\n        {isBlackJack && `${handWeight > 21 ? 'Bust' : 'Hand'}: ${handWeight}`}\n      </Typography>\n      {hand.cards.map((card, i) => {\n        const dropped: boolean = cardsToDiscard.includes(i);\n        return (\n          <Card\n            key={card.name + card.suit}\n            cardHandler={cardHandler}\n            cardNo={i}\n            dropped={dropped}\n            handNo={handNo}\n            name={card.name}\n            playerNo={playerNo}\n            suit={card.suit}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nexport default Hand;\n","const player: React.CSSProperties = {\n  borderRadius: 5,\n  display: 'inline-block',\n  margin: 10,\n  padding: 20,\n};\n\nconst width: React.CSSProperties = { minWidth: '100px' };\n\nexport default {\n  player,\n  width,\n};\n","import React from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport cyan from '@material-ui/core/colors/cyan';\nimport green from '@material-ui/core/colors/green';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport red from '@material-ui/core/colors/red';\nimport { Typography } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport Hand from '../Hand';\nimport { DBTurn, DBPlayer } from '../../../../../store/types';\nimport styles from './Player.styles';\n\ninterface PlayerProps {\n  betHandler?: Function;\n  cardHandler?: Function;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  player: DBPlayer;\n  playerNo: number;\n  turn: DBTurn;\n}\n\nconst Player: React.FC<PlayerProps> = (props: PlayerProps) => {\n  // get vars from props\n  const {\n    betHandler, cardHandler, cardsToDiscard, hideHands,\n    isBlackJack, player, playerNo, turn,\n  } = props;\n  // set booleans\n  const isPlayerTurn: boolean = !!turn && playerNo === turn.player;\n  const isMultiHand: boolean = player.hands.length > 1;\n  const showSlider: boolean = !!hideHands && isBlackJack && player.id !== 0 && !player.isBot;\n  // set slider variables\n  const minBet: number = Math.max(Math.min(player.money, 5), 0);\n  const maxBet: number = Math.max(Math.min(player.money, 100), 10);\n  const step = 5;\n  const onSliderChange = React.useCallback(\n    (event: React.ChangeEvent<{}>, value: number | number[]): void => {\n      betHandler && betHandler(player.id, event, value);\n    },\n    [betHandler, player.id],\n  );\n  // set colors\n  let color: React.CSSProperties = isPlayerTurn ? { background: cyan[200] } : {};\n  const weight: React.CSSProperties = isPlayerTurn ? { fontWeight: 'bold' } : { fontWeight: 'normal' };\n  if (player.status === 'win') {\n    color = { background: green[300] };\n  }\n  if (player.status === 'draw') {\n    color = { background: blueGrey[300] };\n  }\n  if (player.status === 'lose') {\n    color = { background: red[300] };\n  }\n\n  return (\n    <Card style={{ ...styles.player, ...color }}>\n      <Typography variant=\"h4\" style={{ ...weight }}>\n        {`${player.name}: $${player.money}`}\n      </Typography>\n      {showSlider && (\n        <Slider\n          max={maxBet}\n          min={minBet}\n          onChange={onSliderChange}\n          step={step}\n          style={styles.width}\n          value={player.bet}\n        />\n      )}\n      {isBlackJack && player.id !== 0 && (\n        <Typography variant=\"h5\">\n          {`Bet: $${player.bet}`}\n        </Typography>\n      )}\n      {player.hands.map((hand, i) => {\n        const isHandTurn: boolean = !!turn && turn.hand === i;\n        return (\n          <div key={`hand${i}`}>\n            {!hideHands && (\n              <Hand\n                cardHandler={cardHandler}\n                cardsToDiscard={cardsToDiscard}\n                hand={hand}\n                handNo={i}\n                isBlackJack={isBlackJack}\n                isHandTurn={isHandTurn}\n                isMultiHand={isMultiHand}\n                isPlayerTurn={isPlayerTurn}\n                playerNo={playerNo}\n              />\n            )}\n          </div>\n        );\n      })}\n    </Card>\n  );\n};\n\nexport default Player;\n","import React from 'react';\nimport Player from './player/Player';\nimport { DBPlayer, DBTurn } from '../../../../store/types';\n// Parents: GameTable\n\ninterface BoardProps {\n  betHandler?: Function;\n  cardHandler?: Function;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  players: DBPlayer[];\n  turn: DBTurn;\n}\n\nconst Board: React.FC<BoardProps> = (props: BoardProps) => {\n  const {\n    betHandler, cardHandler, cardsToDiscard, hideHands,\n    isBlackJack, players, turn,\n  } = props;\n\n  return (\n    <>\n      {players.map((player, i) => (\n        <Player\n          key={`player${i}`}\n          betHandler={betHandler}\n          cardHandler={cardHandler}\n          cardsToDiscard={cardsToDiscard}\n          hideHands={hideHands}\n          isBlackJack={isBlackJack}\n          player={player}\n          playerNo={i}\n          turn={turn}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default Board;\n","import React, { memo } from 'react';\nimport MuiButton from '@material-ui/core/Button';\nimport { PropTypes } from '@material-ui/core/';\n\nconst buttonStyle: React.CSSProperties = { margin: 12 };\nconst color: PropTypes.Color = 'primary';\n\nexport interface ButtonProps {\n  func: React.MouseEventHandler;\n  name: string;\n}\n\nconst Button: React.FC<ButtonProps> = memo(({ func, name }: ButtonProps) => (\n  <MuiButton\n    color={color}\n    onClick={func}\n    style={buttonStyle}\n    variant=\"contained\"\n  >\n    {name}\n  </MuiButton>\n));\n\nexport default Button;\n","import React from 'react';\nimport Button, { ButtonProps } from './Button';\n\nexport interface ButtonGroupProps {\n  gameFunctions: ButtonProps[];\n}\n\nconst ButtonGroup: React.FC<ButtonGroupProps> = ({ gameFunctions }: ButtonGroupProps) => (\n  <div>\n    {gameFunctions.map((obj) => (\n      <Button key={obj.name} func={obj.func} name={obj.name} />\n    ))}\n  </div>\n);\n\nexport default ButtonGroup;\n","import React from 'react';\nimport Board from './board/Board';\nimport ButtonGroup from './button-group/ButtonGroup';\nimport { ButtonProps } from './button-group/Button';\nimport { DBPlayer, DBTurn } from '../../../store/types';\n\ninterface GameTableProps {\n  betHandler?: Function;\n  cardClickHandler?: Function;\n  cardsToDiscard: number[];\n  gameFunctions: ButtonProps[];\n  gameOver: boolean;\n  hideHands: boolean;\n  isBlackJack: boolean;\n  players: DBPlayer[];\n  turn: DBTurn;\n}\n\n/* GameTable ->  Board -> Player -> Hand -> Card\n *          |->  Button Group  ->  Button        */\nconst GameTable: React.FC<GameTableProps> & { defaultProps: Partial<GameTableProps> } = (props: GameTableProps) => {\n  const {\n    betHandler, cardClickHandler, cardsToDiscard, gameFunctions,\n    gameOver, hideHands, isBlackJack, players, turn,\n  } = props;\n\n  // move game buttons to make turn more obvious and support mobile\n  const played: DBPlayer[] = React.useMemo(() => players.slice(0, turn.player + 1), [players, turn.player]);\n  const future: DBPlayer[] = React.useMemo(() => players.slice(turn.player + 1), [players, turn.player]);\n  const playersToDisplay: DBPlayer[] = React.useMemo(() => (\n    (!hideHands && gameOver === false)\n      ? players.slice(turn.player, turn.player + 1)\n      : players\n  ), [hideHands, gameOver, players, turn.player]);\n\n  return (\n    <>\n      {isBlackJack && !hideHands\n        ? (\n          <>\n            <Board\n              players={played}\n              betHandler={betHandler}\n              cardHandler={cardClickHandler}\n              cardsToDiscard={cardsToDiscard}\n              hideHands={hideHands}\n              isBlackJack={isBlackJack}\n              turn={turn}\n            />\n            <ButtonGroup gameFunctions={gameFunctions} />\n            <Board\n              players={future}\n              betHandler={betHandler}\n              cardHandler={cardClickHandler}\n              cardsToDiscard={cardsToDiscard}\n              hideHands={hideHands}\n              isBlackJack={isBlackJack}\n              turn={{ player: -1, hand: -1 }}\n            />\n          </>\n        ) : (\n          <>\n            <Board\n              players={playersToDisplay}\n              betHandler={betHandler}\n              cardHandler={cardClickHandler}\n              cardsToDiscard={cardsToDiscard}\n              hideHands={hideHands}\n              isBlackJack={isBlackJack}\n              turn={turn}\n            />\n            <ButtonGroup gameFunctions={gameFunctions} />\n          </>\n        )}\n    </>\n  );\n};\n\nGameTable.defaultProps = {\n  isBlackJack: true,\n  hideHands: false,\n  gameOver: false,\n  cardsToDiscard: [],\n};\n\nexport default GameTable;\n","import GameTable from './GameTable';\n\nexport default GameTable;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar teal = {\n  50: '#e0f2f1',\n  100: '#b2dfdb',\n  200: '#80cbc4',\n  300: '#4db6ac',\n  400: '#26a69a',\n  500: '#009688',\n  600: '#00897b',\n  700: '#00796b',\n  800: '#00695c',\n  900: '#004d40',\n  A100: '#a7ffeb',\n  A200: '#64ffda',\n  A400: '#1de9b6',\n  A700: '#00bfa5'\n};\nvar _default = teal;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar orange = {\n  50: '#fff3e0',\n  100: '#ffe0b2',\n  200: '#ffcc80',\n  300: '#ffb74d',\n  400: '#ffa726',\n  500: '#ff9800',\n  600: '#fb8c00',\n  700: '#f57c00',\n  800: '#ef6c00',\n  900: '#e65100',\n  A100: '#ffd180',\n  A200: '#ffab40',\n  A400: '#ff9100',\n  A700: '#ff6d00'\n};\nvar _default = orange;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar deepPurple = {\n  50: '#ede7f6',\n  100: '#d1c4e9',\n  200: '#b39ddb',\n  300: '#9575cd',\n  400: '#7e57c2',\n  500: '#673ab7',\n  600: '#5e35b1',\n  700: '#512da8',\n  800: '#4527a0',\n  900: '#311b92',\n  A100: '#b388ff',\n  A200: '#7c4dff',\n  A400: '#651fff',\n  A700: '#6200ea'\n};\nvar _default = deepPurple;\nexports.default = _default;","import { DBCard } from '../../../store/types';\n\n/** calculate the weight of a hand */\nexport default function weighHand(hand: DBCard[] = []): { weight: number; soft: boolean } {\n  // set return values\n  let weight = 0;\n  let soft = false;\n\n  // find the weight of the hand\n  hand.forEach((card) => {\n    const cardWeight = card.weight || 0;\n    if (cardWeight === 14) {\n      // A\n      if (weight <= 10) {\n        weight += 11;\n        soft = true;\n      } else {\n        weight += 1;\n      }\n    } else if (cardWeight > 10) {\n      // J - K\n      weight += 10;\n    } else {\n      // 2 - 10\n      weight += cardWeight;\n    }\n    // reduce by 10 if bust and soft\n    if (weight > 21 && soft) {\n      weight -= 10;\n      soft = false;\n    }\n  });\n\n  // return object w/ useful information\n  return { weight, soft };\n}\n","import React, { memo } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nconst Rules: React.FC = memo(() => (\n  <>\n    <Typography variant=\"h5\">\n      Objective:\n    </Typography>\n    <Typography>\n      Get as close to 21 as you can, without going over. Each card is worth\n      it&apos;s number, J/Q/K are worth 10, and an Ace is worth 11 unless you go\n      over 21, then it is worth 1.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Blackjack:\n    </Typography>\n    <Typography>\n      Delt an Ace and a 10/J/Q/K, this casino pays 3:2, but Vegas casinos do\n      6:5.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Hit:\n    </Typography>\n    <Typography>\n      Get an extra card which adds to your total.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Stay:\n    </Typography>\n    <Typography>\n      Move to the next player.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Double Down:\n    </Typography>\n    <Typography>\n      This option is available with a two card hand; before another card has\n      been drawn double your bet and receive one (and only one) additional card\n      to your hand. Play then moves to the next player.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Splitting Pairs:\n    </Typography>\n    <Typography>\n      When you are dealt a pair of cards of the same rank, you are allowed to\n      split into two separate hands and play them independently. You will match\n      your bet for the second hand. A double after a split is ok\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Resplitting:\n    </Typography>\n    <Typography>\n      When you get additional pairs in the first two cards of a hand you can\n      resplit. Typically a player is allowed to split up to 3 times (delt 4 of a\n      kind).\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Splitting Aces:\n    </Typography>\n    <Typography>\n      Player is limited to drawing only one additional card on each Ace. If you\n      draw a ten-valued card on one of your split Aces, the hand is not\n      considered a Blackjack (it is treated as a normal 21). You can re-split\n      Aces.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Other Rules:\n    </Typography>\n    <ul>\n      <Typography><li>Dealer hits on 16 or less and soft 17</li></Typography>\n      <Typography><li>Minimum bet is $5</li></Typography>\n    </ul>\n    <Typography variant=\"h5\">\n      AI Algorithm:\n    </Typography>\n    <ul>\n      <Typography><li>House Rules: 6 decks, H17, DAS, No Surrender, Peek</li></Typography>\n      <Typography><li>Estimated casino edge for these rules: 0.66%</li></Typography>\n    </ul>\n  </>\n));\n\nexport default Rules;\n","import React, { memo } from 'react';\nimport TableCell from '@material-ui/core/TableCell';\n\nexport interface CellProps {\n  color?: string;\n  style?: React.CSSProperties;\n  text: string;\n  rowSpan?: number;\n  colSpan?: number;\n}\n\nconst Cell: React.FC<CellProps> = memo((props: CellProps) => {\n  const {\n    color, text, style, ...otherProps\n  } = props;\n\n  const stl: React.CSSProperties = {\n    ...style,\n    textAlign: 'center',\n    backgroundColor: color,\n  };\n\n  return (\n    <TableCell size=\"small\" style={stl} {...otherProps}>\n      {text}\n    </TableCell>\n  );\n});\n\nexport default Cell;\n","import React from 'react';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Cell, { CellProps } from './Cell';\n\nexport interface RowProps {\n  data: CellProps[];\n  name: string;\n}\n\nconst tableCellStyle: React.CSSProperties = { textAlign: 'center', padding: 0 };\n\nconst Row: React.FC<RowProps> = (props: RowProps) => {\n  const { name, data } = props;\n\n  return (\n    <TableRow>\n      <TableCell style={tableCellStyle}>\n        {name}\n      </TableCell>\n      {data.map((text, i) => <Cell key={i} {...text} />)}\n    </TableRow>\n  );\n};\n\nexport default Row;\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Cell from './Cell';\nimport Row, { RowProps } from './Row';\n\ninterface BlackjackTable {\n  data: RowProps[];\n  title: string;\n}\n\nconst cards: string[] = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'A'];\nconst cellStyle: React.CSSProperties = { width: 60 };\n\nconst BlackjackTable: React.FC<BlackjackTable> = (props: BlackjackTable) => {\n  const { title, data } = props;\n\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell colSpan={11}>\n            {title}\n          </TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        <TableRow>\n          <Cell rowSpan={2} style={cellStyle} text=\"Hand\" />\n          <Cell colSpan={10} text=\"Dealer\" />\n        </TableRow>\n        <TableRow>\n          {cards.map((c) => <Cell key={c} text={c} />)}\n        </TableRow>\n        {data.map((obj) => <Row key={obj.name} name={obj.name} data={obj.data} />)}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default BlackjackTable;\n","import Help from './Help';\n\nexport default Help;\n","// react\nimport React, { memo } from 'react';\n// material-ui\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n// colors\nimport green from '@material-ui/core/colors/green';\nimport teal from '@material-ui/core/colors/teal';\nimport red from '@material-ui/core/colors/red';\nimport orange from '@material-ui/core/colors/orange';\nimport deepPurple from '@material-ui/core/colors/deepPurple';\n// components\nimport Cell, { CellProps } from './Cell';\nimport { RowProps } from './Row';\nimport BlackjackTable from './BlackjackTable';\n// Parents: blackjack/Header\n\n/* Help  ->  BlackJackTable  ->  Row  -->  Cell */\nconst Help: React.FC = memo(() => {\n  // options\n  const h: CellProps = { color: green[200], text: 'H' };\n  const d: CellProps = { color: teal[200], text: 'D' };\n  const s: CellProps = { color: red[200], text: 'S' };\n  const p: CellProps = { color: orange[200], text: 'P' };\n  const ds: CellProps = { color: deepPurple[200], text: 'DS' };\n\n  // algorithms for options\n  const hardTtl: RowProps[] = [\n    { name: 'Hard 5', data: [h, h, h, h, h, h, h, h, h, h]},\n    { name: 'Hard 6', data: [h, h, h, h, h, h, h, h, h, h]},\n    { name: 'Hard 7', data: [h, h, h, h, h, h, h, h, h, h]},\n    { name: 'Hard 8', data: [h, h, h, h, h, h, h, h, h, h]},\n    { name: 'Hard 9', data: [h, d, d, d, d, h, h, h, h, h]},\n    { name: 'Hard 10', data: [d, d, d, d, d, d, d, d, h, h]},\n    { name: 'Hard 11', data: [d, d, d, d, d, d, d, d, d, d]},\n    { name: 'Hard 12', data: [h, h, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 13', data: [s, s, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 14', data: [s, s, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 15', data: [s, s, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 16', data: [s, s, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 17', data: [s, s, s, s, s, s, s, s, s, s]},\n    { name: 'Hard 18+', data: [s, s, s, s, s, s, s, s, s, s]},\n  ];\n  const softTtl: RowProps[] = [\n    { name: 'Ace + 2', data: [h, h, h, d, d, h, h, h, h, h]},\n    { name: 'Ace + 3', data: [h, h, h, d, d, h, h, h, h, h]},\n    { name: 'Ace + 4', data: [h, h, d, d, d, h, h, h, h, h]},\n    { name: 'Ace + 5', data: [h, h, d, d, d, h, h, h, h, h]},\n    { name: 'Ace + 6', data: [h, d, d, d, d, h, h, h, h, h]},\n    { name: 'Ace + 7', data: [ds, ds, ds, ds, ds, s, s, h, h, h]},\n    { name: 'Ace + 8', data: [s, s, s, s, ds, s, s, s, s, s]},\n    { name: 'Ace + 9', data: [s, s, s, s, s, s, s, s, s, s]},\n  ];\n  const pairs: RowProps[] = [\n    { name: '(2,2)', data: [p, p, p, p, p, p, h, h, h, h]},\n    { name: '(3,3)', data: [p, p, p, p, p, p, h, h, h, h]},\n    { name: '(4,4)', data: [h, h, h, p, p, h, h, h, h, h]},\n    { name: '(5,5)', data: [d, d, d, d, d, d, d, d, h, h]},\n    { name: '(6,6)', data: [p, p, p, p, p, h, h, h, h, h]},\n    { name: '(7,7)', data: [p, p, p, p, p, p, h, h, h, h]},\n    { name: '(8,8)', data: [p, p, p, p, p, p, p, p, p, p]},\n    { name: '(9,9)', data: [p, p, p, p, p, s, p, p, s, s]},\n    { name: '(T,T)', data: [s, s, s, s, s, s, s, s, s, s]},\n    { name: '(A,A)', data: [p, p, p, p, p, p, p, p, p, p]},\n  ];\n\n  return (\n    <>\n      <BlackjackTable data={hardTtl} title=\"Hard Totals\" />\n      <BlackjackTable data={softTtl} title=\"Soft Totals\" />\n      <BlackjackTable data={pairs} title=\"Pairs\" />\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell colSpan={11}>\n              Key\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow>\n            <Cell {...h} />\n            <Cell colSpan={2} text=\"= Hit\" />\n            <Cell {...s} />\n            <Cell colSpan={3} text=\"= Stand\" />\n            <Cell {...p} />\n            <Cell colSpan={3} text=\"= Split\" />\n          </TableRow>\n          <TableRow>\n            <Cell {...d} />\n            <Cell colSpan={10} text=\"= Double (Hit if not allowed)\" />\n          </TableRow>\n          <TableRow>\n            <Cell {...ds} />\n            <Cell colSpan={10} text=\"= Double (Stand if not allowed)\" />\n          </TableRow>\n        </TableBody>\n      </Table>\n    </>\n  );\n});\n\nexport default Help;\n","import React, { memo } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport InfoPopup from '../../common/InfoPopup';\nimport Rules from './Rules';\nimport Help from './help';\n\nconst Header: React.FC = memo(() => (\n  <div className=\"flex-container\">\n    <Typography variant=\"h2\" gutterBottom>Blackjack (21)</Typography>\n    <InfoPopup title=\"Blackjack Rules\">\n      <Rules />\n      <Help />\n    </InfoPopup>\n  </div>\n));\n\nexport default Header;\n","/* Theoretical Max Score:   386 everyone splits 3 times and busts with 30, dealer bust with 26\n * Card Point Value:        340-380\n * split aces is not blackjack\n * get second card for dealer and hide it\n * buy insurance on dealer's Ace\n */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport asyncForEach from '../../../helpers/asyncForEach';\nimport weighHand from './blackjackHelpers';\nimport Header from './Header';\nimport GameTable from '../game-table';\nimport Deck from '../../../apis/Deck';\nimport {\n  DBTurn, DBHand, DBPlayer, DBRootState,\n} from '../../../store/types';\nimport { incrHandTurn, incrPlayerTurn, resetTurn } from '../../../store/modules/turn';\nimport {\n  drawCard, newHand, payout, resetStatus,\n  splitHand, updateBet,\n} from '../../../store/modules/players';\nimport { ButtonProps } from '../game-table/button-group/Button';\n\ninterface PlayerActions {\n  drawCard: Function;\n  newHand: Function;\n  payout: Function;\n  resetStatus: Function;\n  splitHand: Function;\n  updateBet: Function;\n}\ninterface TurnActions {\n  incrHandTurn: Function;\n  incrPlayerTurn: Function;\n  resetTurn: Function;\n}\ninterface BlackJackProps {\n  playerActions: PlayerActions;\n  players: DBPlayer[];\n  turn: DBTurn;\n  turnActions: TurnActions;\n}\ninterface BlackJackState {\n  gameFunctions: ButtonProps[];\n  hideHands: boolean;\n}\ninterface PlayerStats {\n  house: number;\n  payout: number;\n  status: string;\n}\n\n// Dealer constant\nconst DEALER = 0;\n\nclass BlackJack extends Component<BlackJackProps, BlackJackState> {\n  constructor(props: BlackJackProps) {\n    super(props);\n    this.setNewGameRedux();\n    this.state = this.getNewGameState();\n  }\n\n  componentDidUpdate(prevProps: BlackJackProps): void {\n    const { players: lp, turn: lt } = prevProps;\n    const { players: np, turn: nt } = this.props;\n    const { hideHands } = this.state;\n    // verify player exists and is dealer\n    const player = np[nt.player];\n    if (hideHands || !player) {\n      return;\n    }\n    if (!player.isBot && player.id !== DEALER) {\n      // get the next Hand\n      const hand = player.hands[nt.hand];\n      // if the Hand updated, get the game functions\n      if (hand !== lp[lt.player].hands[lt.hand]) {\n        this.getGameFunctions(hand);\n      }\n    } else if (player.isBot && player.id !== DEALER) {\n      this.playBot();\n    } else {\n      // get the next Hand\n      const hand = player.hands[nt.hand];\n      // if the Hand updated, check for dealer\n      if (hand !== lp[lt.player].hands[lt.hand]) {\n        this.playDealer();\n      }\n    }\n  }\n\n  /** function to generate the state of a new game\n   * @return {Object}\n   */\n  getNewGameState = (): BlackJackState => ({\n    gameFunctions: [{ name: 'Finish Betting', func: this.finishBetting }],\n    hideHands: true,\n  });\n\n  /** function to reset turn and player status */\n  setNewGameRedux = (): void => {\n    const { turnActions, playerActions, players } = this.props;\n    // reset redux actions\n    turnActions.resetTurn();\n    // reset player statuses\n    players.forEach((player) => playerActions.resetStatus(player.id));\n  };\n\n  /** get the game functions for the present hand */\n  getGameFunctions = (hand: DBHand): void => {\n    // check state\n    if (!hand) {\n      return;\n    }\n\n    // define game function options\n    const stay = { name: 'Stay', func: this.stay };\n    const hit = { name: 'Hit', func: this.hit };\n    const double = { name: 'Double', func: this.double };\n    const split = { name: 'Split', func: this.split };\n\n    // reset game functions\n    const gameFunctions = [stay];\n    const handWeight = hand.weight || 0;\n\n    // check if not a bust\n    if (handWeight < 21) {\n      gameFunctions.push(hit);\n      // check if you only have 2 cards\n      if (hand.cards.length === 2) {\n        gameFunctions.push(double);\n        // check if card1 and card2 have equal weight\n        const { weight: weight1 } = weighHand([hand.cards[0]]);\n        const { weight: weight2 } = weighHand([hand.cards[1]]);\n        if (weight1 === weight2) {\n          gameFunctions.push(split);\n        }\n      }\n    }\n\n    // update game state\n    this.setState({ gameFunctions });\n  };\n\n  /** function that takes a hand of duplicates and makes 2 hands\n   * stateChanges: players\n   */\n  split = (): void => {\n    // get state values\n    const { turn, players, playerActions } = this.props;\n    const { id, hands } = players[turn.player];\n\n    playerActions.splitHand(hands, id, turn.hand, weighHand);\n  };\n\n  /** function that doubles your bet, but you only get 1 card */\n  double = (): void => {\n    const { turn, playerActions, players } = this.props;\n    // double bet\n    const { id, bet } = players[turn.player];\n    playerActions.updateBet(id, bet * 2);\n    // hit then stay\n    this.hit();\n    this.stay();\n  };\n\n  /** function to pass to the next player\n   * stateChanges: turn\n   */\n  stay = (): void => {\n    // get state values\n    const { turn, turnActions, players } = this.props;\n    const lastHand = players[turn.player].hands.length - 1;\n\n    // check if the player has more than 1 hand\n    turn.hand < lastHand\n      ? turnActions.incrHandTurn()\n      : turnActions.incrPlayerTurn();\n  };\n\n  /** function to get a new card\n   * stateChanges: players\n   */\n  hit = (): void => {\n    // get state values\n    const { turn, playerActions, players } = this.props;\n    const { id, hands } = players[turn.player];\n    // logic to hit\n    playerActions.drawCard(hands, id, turn.hand, 1, weighHand);\n  };\n\n  /** Start a new round of hands\n   * stateChanges: turn, players\n   */\n  dealHands = (): void => {\n    const { playerActions, players } = this.props;\n    // shuffle the deck\n    Deck.shuffle().then(() => {\n      // deal the hands\n      asyncForEach(players, async (player: DBPlayer) => {\n        const num = player.id !== DEALER ? 2 : 1;\n        await playerActions.newHand(player.id, num, weighHand);\n      });\n    });\n  };\n\n  /** Start a new game\n   * stateChanges: hideHands\n   */\n  newGame = (): void => {\n    this.setNewGameRedux();\n    this.setState(this.getNewGameState());\n  };\n\n  /** function to finish betting and start the game\n   * stateChanges: hideHands\n   */\n  finishBetting = (): void => {\n    this.setState({ hideHands: false });\n    this.dealHands();\n  };\n\n  /** finish the game and check for a winner\n   * stateChanges: turn, player, gameFunctions\n   */\n  finishGame = (): void => {\n    // state variables\n    const { turn, players, playerActions } = this.props;\n    const dealer = players[turn.player].hands[DEALER].weight || 0;\n    const dealerLen = players[turn.player].hands[DEALER].cards.length;\n    // track and find the winners\n    const playerStats: PlayerStats = { house: 0, payout: 0, status: '' };\n    // helper functions\n    const win = (ps: PlayerStats, bet: number, mul = 1): void => {\n      ps.house -= Math.floor(mul * bet);\n      ps.payout = Math.floor(mul * bet);\n      ps.status = 'win';\n    };\n    const loss = (ps: PlayerStats, bet: number): void => {\n      ps.house += bet;\n      ps.payout = -bet;\n      ps.status = 'lose';\n    };\n    players.forEach((player) => {\n      const { id, bet } = player;\n      if (id === DEALER) {\n        if (playerStats.house > 0) {\n          playerStats.status = 'win';\n        } else if (playerStats.house < 0) {\n          playerStats.status = 'lose';\n        } else {\n          playerStats.status = 'push';\n        }\n        playerActions.payout(id, playerStats.status, playerStats.house);\n      } else {\n        player.hands.forEach((hand) => {\n          const { weight = 0, cards } = hand;\n          if (dealer === 21 && dealerLen === 2) {\n            // dealer BlackJack\n            loss(playerStats, bet);\n          } else if (weight === 21 && cards.length === 2) {\n            // player BlackJack\n            win(playerStats, bet, 6 / 5);\n          } else if (weight <= 21 && (weight > dealer || dealer > 21)) {\n            win(playerStats, bet);\n          } else if (weight <= 21 && weight === dealer) {\n            playerStats.payout = 0;\n            playerStats.status = 'push';\n          } else {\n            loss(playerStats, bet);\n          }\n        });\n        playerActions.payout(id, playerStats.status, playerStats.payout);\n      }\n    });\n\n    // update state variables\n    const gameFunctions = [{ name: 'New Game', func: this.newGame }];\n    // update state\n    this.setState({ gameFunctions });\n  };\n\n  /** function to execute dealer logic */\n  playDealer = (): void => {\n    const { players, turn } = this.props;\n    const hand = players[turn.player].hands[turn.hand].cards;\n    const { weight, soft } = weighHand(hand);\n    // Dealer hits on 16 or less and soft 17\n    if (weight <= 16 || (weight === 17 && soft)) {\n      this.hit();\n    } else {\n      this.finishGame();\n    }\n  };\n\n  // AI: https://www.blackjackinfo.com/blackjack-basic-strategy-engine/\n  playBot = (): void => {\n    // functions\n    const {\n      hit, split, double, stay,\n    } = this;\n    // player hand\n    const { players, turn } = this.props;\n    const hand = players[turn.player].hands[turn.hand];\n    // validate hand exists\n    if (!hand) {\n      return;\n    }\n    // get remaining vars\n    const dealer = players[players.length - 1].hands[DEALER];\n    const n = hand.weight || 0;\n    const { soft } = hand;\n    // card / dealer weight\n    const { weight: d } = weighHand([dealer.cards[0]]);\n    const { weight: x } = weighHand([hand.cards[0]]);\n    const { weight: y } = weighHand([hand.cards[1]]);\n\n    // play AI logic\n    if (n < 22) {\n      // split algorithm\n      if (x === y) {\n        if (x === 2 || x === 3 || x === 7) {\n          // 2,3,7, split d2-7, hit d8+\n          d <= 7 ? split() : hit();\n        } else if (x === 4) {\n          // 4, split d5-6, else hit\n          d === 5 || d === 6 ? split() : hit();\n        } else if (x === 5) {\n          // 5, double d2-9, hit d10+\n          d <= 9 ? double() : hit();\n        } else if (x === 6) {\n          // 6, split d2-6, else hit\n          d <= 6 ? split() : hit();\n        } else if (x === 9) {\n          // 9, d7,10+ stay, else split\n          d === 7 || d >= 10 ? stay() : split();\n        } else if (x === 8 || x === 14) {\n          // 8,A split\n          split();\n        } else {\n          // 10 Stay\n          stay();\n        }\n      } else if (n < 20 && soft) {\n        // soft hands, A9+ stays\n        if (n === 13 || n === 14) {\n          // A2-A3 double d5-6, hit d2-4, d7-A\n          d === 5 || d === 6 ? double() : hit();\n        } else if (n === 15 || n === 16) {\n          // A4-A5 double d4-6, hit d2-3, d7-A\n          d >= 4 && d <= 6 ? double() : hit();\n        } else if (n === 17) {\n          // A6 double d3-6, hit d2, d7-A\n          d >= 3 && d <= 6 ? double() : hit();\n        } else if (n === 18) {\n          // A7 double d2-6, stay d7-8, hit d9-A\n          if (d >= 2 && d <= 6) {\n            double();\n          } else if (d === 7 || d === 8) {\n            stay();\n          } else {\n            hit();\n          }\n        } else if (n === 19) {\n          // A8 double d6, else stay\n          d === 6 ? double() : stay();\n        }\n      } else if (n < 17 && !soft) {\n        // hard hands, 17+ stays\n        if (n >= 5 && n <= 8) {\n          // 5-8 hit\n          hit();\n        } else if (n === 9) {\n          // 9 double d3-6, hit d2, d7-A\n          d >= 3 && d <= 6 ? double() : hit();\n        } else if (n === 10) {\n          // 10 double d2-9, hit d10-A\n          d >= 2 && d <= 9 ? double() : hit();\n        } else if (n === 11) {\n          // 11 double\n          double();\n        } else if (n === 12) {\n          // 12 hit d2-3, stay d4-6, hit 7-A\n          d >= 4 && d <= 6 ? stay() : hit();\n        } else if (n >= 13 && n <= 16) {\n          // 13-16 stay d2-6, hit 7-A\n          d >= 2 && d <= 6 ? stay() : hit();\n        }\n      } else {\n        stay();\n      }\n    } else {\n      // bust\n      stay();\n    }\n  };\n\n  /** function to be called on card clicks */\n  cardClickHandler = (playerNo: number, handNo: number, cardNo: number): void => {\n    const { players } = this.props;\n    // eslint-disable-next-line no-console\n    console.log(players[playerNo].hands[handNo].cards[cardNo]);\n  };\n\n  /** function to be called on card clicks\n   * @param {number} id\n   * @param {Object} event\n   * @param {number} bet\n   * stateChanges: player\n   */\n  betHandler = (id: number, event: React.MouseEvent, bet: number): void => {\n    const { playerActions } = this.props;\n    playerActions.updateBet(id, bet);\n  };\n\n  /* render the UI */\n  render(): React.ReactNode {\n    const { turn, players } = this.props;\n    const { gameFunctions, hideHands } = this.state;\n\n    return (\n      <>\n        <Header />\n        <GameTable\n          betHandler={this.betHandler}\n          cardClickHandler={this.cardClickHandler}\n          gameFunctions={gameFunctions}\n          hideHands={hideHands}\n          players={players}\n          turn={turn}\n        />\n      </>\n    );\n  }\n}\n\n// react-redux export\nconst mapStateToProps = (state: DBRootState): { turn: DBTurn; players: DBPlayer[] } => ({\n  turn: state.turn,\n  players: state.players,\n});\nconst mapDispatchToProps = (dispatch: Dispatch): { turnActions: TurnActions; playerActions: PlayerActions} => ({\n  turnActions: bindActionCreators(\n    { incrPlayerTurn, resetTurn, incrHandTurn },\n    dispatch,\n  ),\n  playerActions: bindActionCreators(\n    {\n      drawCard,\n      newHand,\n      splitHand,\n      payout,\n      updateBet,\n      resetStatus,\n    },\n    dispatch,\n  ),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BlackJack);\n","import BlackJack from './Blackjack';\n\nexport default BlackJack;\n"],"sourceRoot":""}