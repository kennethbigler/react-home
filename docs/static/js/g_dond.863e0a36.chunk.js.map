{"version":3,"file":"static/js/g_dond.863e0a36.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/colors/amber.js","components/games/deal-or-no-deal/helpers.ts","components/games/deal-or-no-deal/Money.tsx","components/games/deal-or-no-deal/Modal.tsx","components/games/deal-or-no-deal/Case.tsx","components/games/deal-or-no-deal/Board.tsx","components/games/deal-or-no-deal/Header.tsx","recoil/deal-or-no-deal-state.ts","components/games/deal-or-no-deal/DealOrNoDeal.tsx"],"sourcesContent":["const amber = {\n  50: '#fff8e1',\n  100: '#ffecb3',\n  200: '#ffe082',\n  300: '#ffd54f',\n  400: '#ffca28',\n  500: '#ffc107',\n  600: '#ffb300',\n  700: '#ffa000',\n  800: '#ff8f00',\n  900: '#ff6f00',\n  A100: '#ffe57f',\n  A200: '#ffd740',\n  A400: '#ffc400',\n  A700: '#ffab00'\n};\nexport default amber;","/** function that takes a number and returns string displayed like money */\nexport const getMoneyText = (n = 0): string => {\n  const txt = n.toString().split(\"\");\n  const e = txt[0] === \"-\" ? 1 : 0;\n  for (let i = txt.length - 3; i > e; i -= 3) {\n    txt.splice(i, 0, \",\");\n  }\n  txt.splice(e, 0, \"$\");\n  return txt.join(\"\");\n};\n\nexport default getMoneyText;\n","import React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport { amber, grey } from \"@mui/material/colors\";\nimport { getMoneyText } from \"./helpers\";\nimport { Briefcase } from \"../../../recoil/deal-or-no-deal-state\";\n\ninterface MoneyProps {\n  briefcase: Briefcase;\n}\n\nconst paperStyles: React.CSSProperties = {\n  width: \"90%\",\n  marginLeft: \"5%\",\n  marginRight: \"5%\",\n  marginBottom: 5,\n  padding: 5,\n  textAlign: \"center\",\n  color: \"white\",\n};\n\nconst Money: React.FC<MoneyProps> = (props: MoneyProps) => {\n  const { briefcase: bc } = props;\n\n  const color: React.CSSProperties = {\n    backgroundColor: bc.on ? amber[500] : grey[700],\n  };\n\n  const style: React.CSSProperties = {\n    ...paperStyles,\n    ...color,\n  };\n\n  return (\n    <Paper style={style}>\n      {bc.on ? getMoneyText(bc.val) : <del>{getMoneyText(bc.val)}</del>}\n    </Paper>\n  );\n};\n\nexport default Money;\n","import React from \"react\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport Button from \"@mui/material/Button\";\nimport Money from \"./Money\";\nimport { getMoneyText } from \"./helpers\";\nimport { Briefcase } from \"../../../recoil/deal-or-no-deal-state\";\n\ninterface ModalProps {\n  board: Briefcase[];\n  deal: React.MouseEventHandler;\n  noDeal: React.MouseEventHandler;\n  numCases: number;\n  offer: number;\n  open: boolean;\n  swap: React.MouseEventHandler;\n}\n\nconst colStyles: React.CSSProperties = {\n  width: \"50%\",\n  display: \"inline-block\",\n};\n\nconst genMoneyCols = (\n  arr: Briefcase[],\n  start: number,\n  stop = arr.length\n): React.ReactNode[] =>\n  arr.slice(start, stop).map((bc) => <Money key={bc.loc} briefcase={bc} />);\n\nconst Modal: React.FC<ModalProps> = (props: ModalProps) => {\n  const { deal, noDeal, offer, open, swap, numCases, board: imBoard } = props;\n\n  const board = [...imBoard].sort((a, b) => a.val - b.val);\n\n  // columns displaying money values left\n  const lhs = genMoneyCols(board, 0, board.length / 2);\n  const rhs = genMoneyCols(board, board.length / 2);\n\n  return (\n    <Dialog fullWidth open={open}>\n      <DialogTitle>{`${getMoneyText(offer)} - Deal or No Deal?`}</DialogTitle>\n      <DialogContent>\n        <div style={colStyles}>{lhs}</div>\n        <div style={colStyles}>{rhs}</div>\n      </DialogContent>\n      {numCases > 2 ? (\n        <DialogActions>\n          <Button color=\"primary\" onClick={deal}>\n            Deal\n          </Button>\n          <Button color=\"secondary\" onClick={noDeal}>\n            No Deal\n          </Button>\n        </DialogActions>\n      ) : (\n        <DialogActions>\n          <Button color=\"primary\" onClick={deal}>\n            Deal\n          </Button>\n          <Button color=\"secondary\" onClick={noDeal}>\n            My Case\n          </Button>\n          <Button color=\"secondary\" onClick={swap}>\n            Other Case\n          </Button>\n        </DialogActions>\n      )}\n    </Dialog>\n  );\n};\n\nexport default Modal;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport { getMoneyText } from \"./helpers\";\nimport { Briefcase } from \"../../../recoil/deal-or-no-deal-state\";\n\ninterface CaseProps {\n  briefcase: Briefcase;\n  onClick: React.MouseEventHandler;\n  secondary?: boolean;\n}\n\nconst style = { margin: 10 };\n\nconst Case: React.FC<CaseProps> = (props: CaseProps) => {\n  const { onClick, briefcase: bc, secondary } = props;\n  const color = secondary ? \"secondary\" : \"primary\";\n  const label = bc.on ? bc.loc : getMoneyText(bc.val);\n\n  return (\n    <Button\n      color={color}\n      disabled={!bc.on}\n      onClick={onClick}\n      style={style}\n      role=\"button\"\n      variant=\"contained\"\n    >\n      {label}\n    </Button>\n  );\n};\n\nexport default Case;\n","import React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Case from \"./Case\";\nimport { Briefcase } from \"../../../recoil/deal-or-no-deal-state\";\n\ninterface BoardProps {\n  board: Briefcase[];\n  onClick: (x: number) => void;\n  playerChoice?: Briefcase;\n}\n\nconst style: React.CSSProperties = {\n  maxWidth: 796,\n  padding: 9,\n  textAlign: \"center\",\n  display: \"block\",\n  margin: \"auto\",\n  marginTop: 20,\n};\n\nconst Board: React.FC<BoardProps> = ({\n  board,\n  onClick,\n  playerChoice: pc,\n}: BoardProps) => (\n  <Paper elevation={2} style={style}>\n    {board.map((bc, i) => (\n      <Case\n        key={i}\n        briefcase={bc}\n        onClick={(): void => onClick(i)}\n        secondary={pc && pc.loc === bc.loc}\n      />\n    ))}\n  </Paper>\n);\n\nexport default Board;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport { getMoneyText } from \"./helpers\";\nimport { Briefcase } from \"../../../recoil/deal-or-no-deal-state\";\nimport { DBPlayer } from \"../../../recoil/player-atom\";\n\ninterface HeaderProps {\n  casesToOpen: number;\n  isOver: boolean;\n  newGame: React.MouseEventHandler;\n  offer?: number;\n  player: DBPlayer;\n  playerChoice?: Briefcase;\n}\n\nconst Header: React.FC<HeaderProps> = (props: HeaderProps) => {\n  const {\n    playerChoice: pc,\n    casesToOpen,\n    isOver,\n    offer,\n    newGame,\n    player,\n  } = props;\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item sm={6} xs={12}>\n        <Typography variant=\"h3\" gutterBottom>\n          {`Your Case: ${pc ? pc.loc : \"?\"}${\n            isOver ? ` - ${getMoneyText(pc && pc.val)}` : \"\"\n          }`}\n        </Typography>\n        <Typography variant=\"h4\" gutterBottom>\n          {isOver\n            ? `You Won ${getMoneyText(offer)}`\n            : `Number of Cases to Open: ${casesToOpen}`}\n        </Typography>\n        {isOver && (\n          <Button color=\"primary\" onClick={newGame} variant=\"contained\">\n            New Game\n          </Button>\n        )}\n      </Grid>\n      <Grid item sm={6} xs={12}>\n        <Typography variant=\"h3\" align=\"right\" gutterBottom>\n          {`${player.name}: ${getMoneyText(player.money)}`}\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Header;\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport playerAtom from \"./player-atom\";\n\nexport interface Briefcase {\n  on: boolean;\n  loc: number;\n  val: number;\n}\nexport interface DNDState {\n  board: Briefcase[];\n  turn: number;\n  playerChoice?: Briefcase;\n  casesToOpen: number;\n  sum: number;\n  numCases: number;\n  offer: number;\n  dndOpen: boolean;\n  isOver: boolean;\n}\nexport const briefcasesToOpen = 6;\n\nconst getNewState = (): DNDState => ({\n  board: [\n    { val: 1, loc: 1, on: true },\n    { val: 2, loc: 2, on: true },\n    { val: 5, loc: 3, on: true },\n    { val: 10, loc: 4, on: true },\n    { val: 25, loc: 5, on: true },\n    { val: 50, loc: 6, on: true },\n    { val: 75, loc: 7, on: true },\n    { val: 100, loc: 8, on: true },\n    { val: 200, loc: 9, on: true },\n    { val: 300, loc: 10, on: true },\n    { val: 400, loc: 11, on: true },\n    { val: 500, loc: 12, on: true },\n    { val: 750, loc: 13, on: true },\n    { val: 1000, loc: 14, on: true },\n    { val: 5000, loc: 15, on: true },\n    { val: 10000, loc: 16, on: true },\n    { val: 25000, loc: 17, on: true },\n    { val: 50000, loc: 18, on: true },\n    { val: 75000, loc: 19, on: true },\n    { val: 100000, loc: 20, on: true },\n    { val: 200000, loc: 21, on: true },\n    { val: 300000, loc: 22, on: true },\n    { val: 400000, loc: 23, on: true },\n    { val: 500000, loc: 24, on: true },\n    { val: 750000, loc: 25, on: true },\n    { val: 1000000, loc: 26, on: true },\n  ],\n  turn: 1,\n  playerChoice: undefined,\n  casesToOpen: briefcasesToOpen,\n  sum: 0,\n  numCases: 0,\n  offer: 0,\n  dndOpen: false,\n  isOver: false,\n});\n/** function that takes an array and shuffles it's elements */\nconst shuffle = (arr: Briefcase[]): void => {\n  // shuffle values of briefcases\n  for (let i = 0; i < 100; i += 1) {\n    // get to random briefcases\n    const j = Math.floor(Math.random() * arr.length);\n    const k = Math.floor(Math.random() * arr.length);\n    // swap the briefcases\n    const temp = arr[j].loc;\n    arr[j].loc = arr[k].loc;\n    arr[k].loc = temp;\n  }\n};\n/** function to get a new game state */\nexport const newDNDGame = (): DNDState => {\n  const state = getNewState();\n  // mix up board\n  shuffle(state.board);\n  // set all flags to un-touched\n  state.board.forEach((bc) => {\n    // get sum and count of cases remaining\n    state.sum += bc.val;\n    state.numCases += 1;\n    // reset opened flag\n    bc.on = true;\n  });\n  // sort function for the briefcases\n  state.board.sort((a, b) => a.loc - b.loc);\n  return state;\n};\n\nexport const dealOrNoDealAtom = atom({\n  key: \"dealOrNoDealAtom\",\n  default:\n    (JSON.parse(\n      localStorage.getItem(\"deal-or-no-deal-atom\") || \"null\"\n    ) as DNDState) || newDNDGame(),\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"deal-or-no-deal-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\nconst dealOrNoDealState = selector({\n  key: \"dealOrNoDealState\",\n  get: ({ get }) => {\n    const dnd = get(dealOrNoDealAtom);\n    const player = get(playerAtom)[0];\n\n    return { dnd, player };\n  },\n  set: ({ get, set }, state) => {\n    if (!(state instanceof DefaultValue)) {\n      const { dnd, player } = state;\n      set(dealOrNoDealAtom, dnd);\n\n      const players = get(playerAtom);\n      const newPlayers = [...players];\n      newPlayers[0] = player;\n      set(playerAtom, newPlayers);\n    }\n  },\n});\n\nexport default dealOrNoDealState;\n","import React from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport Typography from \"@mui/material/Typography\";\nimport Modal from \"./Modal\";\nimport Board from \"./Board\";\nimport Header from \"./Header\";\nimport dndState, {\n  briefcasesToOpen,\n  newDNDGame,\n} from \"../../../recoil/deal-or-no-deal-state\";\n\n// TODO: add rules to page\n/* DealOrNoDeal  ->  Header\n *              |->  Board  ->  Case\n *              |->  Modal  ->  Money */\nconst DND: React.FC = () => {\n  const [{ dnd, player }, setState] = useRecoilState(dndState);\n  const {\n    board,\n    dndOpen,\n    isOver,\n    offer,\n    sum,\n    turn,\n    playerChoice,\n    casesToOpen,\n    numCases,\n  } = dnd;\n\n  /** function to generate the bank offer */\n  const getBankOffer = React.useCallback(\n    (): number => Math.round((sum / numCases) * (turn / 10)),\n    [numCases, sum, turn]\n  );\n\n  /** open a briefcase and update global status\n   * NOTE: updates sum, numCases, board, casesToOpen */\n  const openBriefcase = (x: number) => {\n    const bc = board[x];\n    // check if player has already made case selection\n    if (playerChoice) {\n      // verify cases left and briefcase not already opened\n      if (!isOver && casesToOpen > 0 && bc.loc !== playerChoice.loc && bc.on) {\n        // flag the value and update global trackers\n        const newBoard = [...board];\n        const newCase = { ...newBoard[x], on: false };\n        newBoard[x] = newCase;\n\n        // update board\n        setState({\n          dnd: {\n            ...dnd,\n            board: newBoard,\n            sum: sum - bc.val,\n            numCases: numCases - 1,\n            casesToOpen: casesToOpen - 1,\n          },\n          player,\n        });\n      }\n    } else {\n      setState({\n        dnd: { ...dnd, playerChoice: bc },\n        player: {\n          ...player,\n          money: player.money - 100,\n        },\n      });\n    }\n  };\n\n  const handleOpen = (): void => {\n    // get the new offer\n    const newOffer = getBankOffer();\n    // reset the counter\n    const newCasesToOpen =\n      turn < briefcasesToOpen - 1 ? briefcasesToOpen - turn : 1;\n    setState({\n      dnd: {\n        ...dnd,\n        offer: newOffer,\n        casesToOpen: newCasesToOpen,\n        dndOpen: true,\n      },\n      player,\n    });\n  };\n\n  /** function to reset the game */\n  const newGame = (): void => setState({ dnd: newDNDGame(), player });\n\n  /** called on selection of Deal */\n  const deal = (): void => {\n    const total = Math.round(offer / 1000);\n    setState({\n      dnd: {\n        ...dnd,\n        dndOpen: false,\n        isOver: true,\n      },\n      player: {\n        ...player,\n        status: total > 100 ? \"win\" : \"lose\",\n        money: player.money + total,\n      },\n    });\n  };\n\n  /** called on selection of No Deal\n   * NOTE: update turn, casesToOpen */\n  const noDeal = (): void => {\n    // no deal on last case\n    if (numCases <= 2) {\n      const newOffer = playerChoice ? playerChoice.val : -1;\n      const total = Math.round(newOffer / 1000);\n      setState({\n        dnd: {\n          ...dnd,\n          dndOpen: false,\n          isOver: true,\n          offer: newOffer,\n        },\n        player: {\n          ...player,\n          status: total > 100 ? \"win\" : \"lose\",\n          money: player.money + total,\n        },\n      });\n    } else {\n      // advance the turn\n      setState({\n        dnd: {\n          ...dnd,\n          dndOpen: false,\n          turn: turn + 1,\n        },\n        player,\n      });\n    }\n  };\n\n  const swap = (): void => {\n    for (let i = 0; i < board.length; i += 1) {\n      const bc = board[i];\n      if (bc.on && playerChoice && bc.loc !== playerChoice.loc) {\n        const total = Math.round(bc.val / 1000);\n        setState({\n          dnd: {\n            ...dnd,\n            dndOpen: false,\n            isOver: true,\n            offer: bc.val,\n          },\n          player: {\n            ...player,\n            status: total > 100 ? \"win\" : \"lose\",\n            money: player.money + total,\n          },\n        });\n        return;\n      }\n    }\n  };\n\n  // check if it is time for an offer\n  casesToOpen === 0 && setTimeout(handleOpen, 300);\n\n  return (\n    <>\n      <Typography variant=\"h2\" gutterBottom>\n        Deal or No Deal\n      </Typography>\n      <Header\n        casesToOpen={casesToOpen}\n        isOver={isOver}\n        newGame={newGame}\n        offer={offer}\n        player={player}\n        playerChoice={playerChoice}\n      />\n      <Board\n        board={board}\n        onClick={openBriefcase}\n        playerChoice={playerChoice}\n      />\n      <Modal\n        board={board}\n        deal={deal}\n        noDeal={noDeal}\n        numCases={numCases}\n        offer={offer}\n        open={dndOpen}\n        swap={swap}\n      />\n    </>\n  );\n};\n\nexport default DND;\n"],"names":["A100","A200","A400","A700","getMoneyText","n","txt","toString","split","e","i","length","splice","join","paperStyles","width","marginLeft","marginRight","marginBottom","padding","textAlign","color","props","bc","briefcase","backgroundColor","on","amber","grey","style","Paper","val","colStyles","display","genMoneyCols","arr","start","stop","slice","map","loc","deal","noDeal","offer","open","swap","numCases","imBoard","board","sort","a","b","lhs","rhs","Dialog","fullWidth","DialogTitle","DialogContent","DialogActions","Button","onClick","margin","secondary","label","disabled","role","variant","maxWidth","marginTop","pc","playerChoice","elevation","casesToOpen","isOver","newGame","player","Grid","container","spacing","item","sm","xs","Typography","gutterBottom","align","name","money","newDNDGame","state","turn","undefined","sum","dndOpen","j","Math","floor","random","k","temp","shuffle","forEach","dealOrNoDealAtom","atom","key","default","JSON","parse","localStorage","getItem","effects","onSet","setItem","stringify","selector","get","dnd","playerAtom","set","DefaultValue","players","newPlayers","useRecoilState","dndState","setState","getBankOffer","React","round","setTimeout","newOffer","newCasesToOpen","briefcasesToOpen","x","newBoard","newCase","total","status"],"sourceRoot":""}