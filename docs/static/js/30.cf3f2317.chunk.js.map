{"version":3,"sources":["components/common/DarkTableCell.js","components/resume/travel-map/TravelTable.jsx","components/resume/travel-map/Popover.jsx","components/resume/travel-map/WorldMap.jsx","components/resume/travel-map/TravelMap.jsx","components/resume/travel-map/index.jsx"],"names":["_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_1__","DarkTableCell","withStyles","theme","head","backgroundColor","palette","common","black","color","white","TableCell","NA","EU","TravelMap","memo","styles","margins","marginTop","marginBottom","cell","padding","textAlign","whiteSpace","overflow","separator","borderRight","concat","grey","countries","len","Math","max","length","ceil","i","row","push","react_default","a","createElement","key","style","Object","objectSpread","j","countryRow","TableRow","Typography","variant","Table","TableHead","colSpan","TableBody","Popover","_this$props","this","props","x","y","hide","content","popoverStyle","position","left","top","display","borderRadius","PureComponent","STROKE","blueGrey","HOVER","VISITED_HOVER","red","FILL","PRESSED","Bahamas","amber","Canada","blue","Mexico","brown","United States of America","cyan","Austria","deepOrange","Denmark","deepPurple","Estonia","green","Finland","indigo","France","lightBlue","Germany","lightGreen","Greece","lime","Iceland","orange","Ireland","pink","Italy","purple","Netherlands","Norway","teal","Portugal","yellow","Russia","Spain","Sweden","Switzerland","Turkey","United Kingdom","WorldMap","_useWorldMap","_useState","useState","_useState2","slicedToArray","setX","_useState3","_useState4","setY","_useState5","_useState6","setContent","_useState7","_useState8","setHide","handleMove","geography","evt","clientX","clientY","window","pageYOffset","properties","NAME","handleLeave","useWorldMap","screenWidth","document","body","clientWidth","lib","width","height","projectionConfig","scale","rotation","geographies","projection","map","onMouseMove","onMouseLeave","default","fill","stroke","strokeWidth","outline","hover","pressed","travel_map_Popover","travel_map_WorldMap","TravelTable"],"mappings":"2FAAA,IAAAA,EAAAC,EAAA,IAAAC,EAAAD,EAAA,KAGME,EAAgBC,YAAW,SAAAC,GAAK,MAAK,CACzCC,KAAM,CACJC,gBAAiBF,EAAMG,QAAQC,OAAOC,MACtCC,MAAON,EAAMG,QAAQC,OAAOG,SAHVR,CAKlBS,KAEWV,4JCCFW,EAAK,CAChB,UACA,yBACA,SACA,iBACA,SACA,sBACA,iBAEWC,EAAK,CAChB,UACA,UACA,UACA,UACA,SACA,UACA,YACA,SACA,UACA,UACA,QACA,QACA,SACA,cACA,SACA,WACA,SACA,QACA,SACA,cACA,SACA,iBACA,WAwEaC,EArEGC,eAAK,WAmBrB,IAlBA,IAAMC,EAAS,CACbC,QAAS,CAAEC,UAAW,GAAIC,aAAc,IACxCC,KAAM,CACJC,QAAS,EACTC,UAAW,SACXC,WAAY,SACZC,SAAU,WAEZC,UAAW,CAAEC,YAAW,aAAAC,OAAeC,IAAK,QAOxCC,EAAY,GAEZC,EAAMC,KAAKC,IAAIpB,EAAGqB,OAAQF,KAAKG,KAAKrB,EAAGoB,OAL7B,IAMPE,EAAI,EAAGA,EAAIL,EAAKK,GAAK,EAAG,CAC/B,IAAMC,EAAM,GAEZA,EAAIC,KACFC,EAAAC,EAAAC,cAAC7B,EAAA,EAAD,CACE8B,IAAG,MAAAd,OAAQQ,GACXO,MAAKC,OAAAC,EAAA,EAAAD,CAAA,GAAO3B,EAAOI,KAASJ,EAAOS,YAElCb,EAAGuB,KAIR,IAAK,IAAIU,EAAI,EAAGA,EAlBF,EAkBeA,GAAK,EAChCT,EAAIC,KACFC,EAAAC,EAAAC,cAAC7B,EAAA,EAAD,CAAW8B,IAAG,MAAAd,OAAQQ,GAARR,OAAYkB,GAAKH,MAAO1B,EAAOI,MAC1CP,EArBO,EAqBMsB,EAAIU,KAKxB,IAAMC,EACJR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAUN,IAAG,MAAAd,OAAQQ,IAClBC,GAGLP,EAAUQ,KAAKS,GAGjB,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,QAAQ,KAAKP,MAAO1B,EAAOC,SAAvC,gCACAqB,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACEb,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAACvC,EAAA,EAAD,CAAeyC,MAAKC,OAAAC,EAAA,EAAAD,CAAA,GAAO3B,EAAOI,KAASJ,EAAOS,YAAlD,iBAGAa,EAAAC,EAAAC,cAACvC,EAAA,EAAD,CAAemD,QA3CT,EA2C2BV,MAAO1B,EAAOI,MAA/C,YAKJkB,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACGxB,wPCxEIyB,mLAvBJ,IAAAC,EAGHC,KAAKC,MADPC,EAFKH,EAELG,EAAGC,EAFEJ,EAEFI,EAAGC,EAFDL,EAECK,KAAMC,EAFPN,EAEOM,QAGRC,EAAe,CACnBC,SAAU,WACVC,KAAMN,EAAI,EACVO,IAAKN,EAAI,GACTO,QAASN,EAAO,OAAS,QACzBvD,gBAAiBuB,IAAK,KACtBnB,MAAO,QACPY,QAAS,EACT8C,aAAc,GAIhB,OACE7B,EAAAC,EAAAC,cAAA,OAAKE,MAAOoB,GAAeD,UA3BXO,iBCWhBC,EAASC,IAAS,KAClBC,EAAQD,IAAS,KACjBE,EAAgBC,IAAI,KACpBC,EAAOJ,IAAS,KAChBK,EAAUL,IAAS,KAGnBzC,EAAY,CAChB+C,QAASC,IAAM,KACfC,OAAQC,IAAK,KACbC,OAAQC,IAAM,KACdC,2BAA4BC,IAAK,KACjCC,QAASC,IAAW,KACpBC,QAASC,IAAW,KACpBC,QAASC,IAAM,KACfC,QAASC,IAAO,KAChBC,OAAQC,IAAU,KAClBC,QAASC,IAAW,KACpBC,OAAQC,IAAK,KACbC,QAASC,IAAO,KAChBC,QAASC,IAAK,KACdC,MAAOC,IAAO,KACdC,YAAa/B,IAAI,KACjBgC,OAAQC,IAAK,KACbC,SAAUC,IAAO,KACjBC,OAAQhC,IAAM,KACdiC,MAAO/B,IAAK,KACZgC,OAAQ5B,IAAK,KACb6B,YAAa3B,IAAW,KACxB4B,OAAQ1B,IAAW,KACnB2B,iBAAkBzB,IAAM,MA8B1B,IAuDe0B,EAvDEpG,eAAK,WAAM,IAAAqG,EA3B5B,WAAuB,IAAAC,EACHC,mBAAS,GADNC,EAAA5E,OAAA6E,EAAA,EAAA7E,CAAA0E,EAAA,GACd3D,EADc6D,EAAA,GACXE,EADWF,EAAA,GAAAG,EAEHJ,mBAAS,GAFNK,EAAAhF,OAAA6E,EAAA,EAAA7E,CAAA+E,EAAA,GAEd/D,EAFcgE,EAAA,GAEXC,EAFWD,EAAA,GAAAE,EAGSP,mBAAS,IAHlBQ,EAAAnF,OAAA6E,EAAA,EAAA7E,CAAAkF,EAAA,GAGdhE,EAHciE,EAAA,GAGLC,EAHKD,EAAA,GAAAE,EAIGV,oBAAS,GAJZW,EAAAtF,OAAA6E,EAAA,EAAA7E,CAAAqF,EAAA,GAIdpE,EAJcqE,EAAA,GAIRC,EAJQD,EAAA,GAiBrB,MAAO,CACLvE,IACAC,IACAE,UACAD,OACAuE,WAhBiB,SAACC,EAAWC,GAC7BZ,EAAKY,EAAIC,SACTV,EAAKS,EAAIE,QAAUC,OAAOC,aAC1BV,EAAWK,EAAUM,WAAWC,MAChCT,GAAQ,IAaRU,YAVkB,WAClBV,GAAQ,KAqBNW,GANFnF,EAFwB0D,EAExB1D,EACAC,EAHwByD,EAGxBzD,EACAE,EAJwBuD,EAIxBvD,QACAD,EALwBwD,EAKxBxD,KACAuE,EANwBf,EAMxBe,WACAS,EAPwBxB,EAOxBwB,YAGIE,EAAcC,SAASC,KAAKC,YAAc,GAEhD,OACE3G,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0G,EAAA,cAAD,CAAeC,MAAOL,EAAaM,OAAsB,IAAdN,EAAoB,IAAKO,iBAAkB,CAAEC,MAAOR,GArEvF,IAAM,QAqEsGS,SAAU,EAAE,GAAI,EAAG,KACrIjH,EAAAC,EAAAC,cAAC0G,EAAA,cAAD,KACE5G,EAAAC,EAAAC,cAAC0G,EAAA,YAAD,CAAad,UAAU,oBACpB,SAACoB,EAAaC,GAAd,OAA6BC,IAAIF,EAAa,SAACpB,EAAWjG,GAAZ,OAC7CG,EAAAC,EAAAC,cAAC0G,EAAA,UAAD,CACEzG,IAAKN,EACLiG,UAAWA,EACXqB,WAAYA,EACZE,YAAaxB,EACbyB,aAAchB,EACdlG,MAAO,CACLmH,QAAS,CACPC,KAAMjI,EAAUuG,EAAUM,WAAWC,MAAQ9G,EAAUuG,EAAUM,WAAWC,MAAQjE,EACpFqF,OAAQ1F,EACR2F,YAAa,IACbC,QAAS,QAEXC,MAAO,CACLJ,KAAMjI,EAAUuG,EAAUM,WAAWC,MAAQnE,EAAgBD,EAC7DwF,OAAQ1F,EACR2F,YAAa,IACbC,QAAS,QAEXE,QAAS,CACPL,KAAMnF,EACNoF,OAAQ1F,EACR2F,YAAa,IACbC,QAAS,iBASvB3H,EAAAC,EAAAC,cAAC4H,EAAD,CAAS1G,EAAGA,EAAGC,EAAGA,EAAGC,KAAMA,EAAMC,QAASA,OChHjC/C,GARGC,eAAK,kBACrBuB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,QAAQ,MAApB,iBACAX,EAAAC,EAAAC,cAAC6H,EAAD,MACA/H,EAAAC,EAAAC,cAAC8H,EAAD,SCNWxJ","file":"static/js/30.cf3f2317.chunk.js","sourcesContent":["import { withStyles } from '@material-ui/core/styles';\nimport TableCell from '@material-ui/core/TableCell';\n\nconst DarkTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n}))(TableCell);\n\nexport default DarkTableCell;\n","import React, { memo } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport grey from '@material-ui/core/colors/grey';\nimport { Typography } from '@material-ui/core';\nimport DarkTableCell from '../../common/DarkTableCell';\n// Parents: Main\n\nexport const NA = [\n  'Bahamas',\n  'British Virgin Islands',\n  'Canada',\n  'Cayman Islands',\n  'Mexico',\n  'U.S. Virgin Islands',\n  'United States',\n];\nexport const EU = [\n  'Austria',\n  'Denmark',\n  'Estonia',\n  'Finland',\n  'France',\n  'Germany',\n  'Gibraltar',\n  'Greece',\n  'Iceland',\n  'Ireland',\n  'Italy',\n  'Malta',\n  'Monaco',\n  'Netherlands',\n  'Norway',\n  'Portugal',\n  'Russia',\n  'Spain',\n  'Sweden',\n  'Switzerland',\n  'Turkey',\n  'United Kingdom',\n  'Vatican',\n];\n\nconst TravelMap = memo(() => {\n  const styles = {\n    margins: { marginTop: 24, marginBottom: 16 },\n    cell: {\n      padding: 5,\n      textAlign: 'center',\n      whiteSpace: 'normal',\n      overflow: 'visible',\n    },\n    separator: { borderRight: `1px solid ${grey[400]}` },\n  };\n\n  // ratio to display on table, 2:1 seemed to look best\n  const EURatio = 3;\n\n  // export array of <li> elements for display\n  const countries = [];\n  // iterate to the end of the longer list\n  const len = Math.max(NA.length, Math.ceil(EU.length / EURatio));\n  for (let i = 0; i < len; i += 1) {\n    const row = [];\n    // add NA Country\n    row.push(\n      <TableCell\n        key={`tmc${i}`}\n        style={{ ...styles.cell, ...styles.separator }}\n      >\n        {NA[i]}\n      </TableCell>,\n    );\n    // add EU Countries\n    for (let j = 0; j < EURatio; j += 1) {\n      row.push(\n        <TableCell key={`tmc${i}${j}`} style={styles.cell}>\n          {EU[EURatio * i + j]}\n        </TableCell>,\n      );\n    }\n    // form the row\n    const countryRow = (\n      <TableRow key={`tmr${i}`}>\n        {row}\n      </TableRow>\n    );\n    countries.push(countryRow);\n  }\n\n  return (\n    <div>\n      <Typography variant=\"h4\" style={styles.margins}>I have been to 30 countries:</Typography>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <DarkTableCell style={{ ...styles.cell, ...styles.separator }}>\n              North America\n            </DarkTableCell>\n            <DarkTableCell colSpan={EURatio} style={styles.cell}>\n              Europe\n            </DarkTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {countries}\n        </TableBody>\n      </Table>\n    </div>\n  );\n});\n\nexport default TravelMap;\n","import React, { PureComponent } from 'react';\nimport types from 'prop-types';\nimport grey from '@material-ui/core/colors/grey';\n\nclass Popover extends PureComponent {\n  static propTypes = {\n    // types = [array, bool, func, number, object, string, symbol].isRequired\n    x: types.number.isRequired,\n    y: types.number.isRequired,\n    hide: types.bool.isRequired,\n    content: types.string.isRequired,\n  };\n\n  render() {\n    const {\n      x, y, hide, content,\n    } = this.props;\n\n    const popoverStyle = {\n      position: 'absolute',\n      left: x + 2,\n      top: y - 35,\n      display: hide ? 'none' : 'block',\n      backgroundColor: grey[800],\n      color: 'white',\n      padding: 5,\n      borderRadius: 2,\n    };\n\n\n    return (\n      <div style={popoverStyle}>{content}</div>\n    );\n  }\n}\n\nexport default Popover;\n","import React, { useState, memo } from 'react';\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n} from 'react-simple-maps';\nimport map from 'lodash/map';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport {\n  amber, blue, brown, cyan, deepOrange, deepPurple, green, indigo, lightBlue, lightGreen, lime, orange, pink, purple, red, teal, yellow,\n} from '@material-ui/core/colors/';\nimport Popover from './Popover';\n\n\nconst STROKE = blueGrey[900];\nconst HOVER = blueGrey[500];\nconst VISITED_HOVER = red[800];\nconst FILL = blueGrey[100];\nconst PRESSED = blueGrey[800];\nconst RATIO = 100 / 465.33;\n\nconst countries = {\n  Bahamas: amber[500],\n  Canada: blue[500],\n  Mexico: brown[500],\n  'United States of America': cyan[500],\n  Austria: deepOrange[500],\n  Denmark: deepPurple[500],\n  Estonia: green[500],\n  Finland: indigo[500],\n  France: lightBlue[500],\n  Germany: lightGreen[500],\n  Greece: lime[500],\n  Iceland: orange[500],\n  Ireland: pink[500],\n  Italy: purple[500],\n  Netherlands: red[500],\n  Norway: teal[500],\n  Portugal: yellow[500],\n  Russia: amber[800],\n  Spain: blue[800],\n  Sweden: cyan[800],\n  Switzerland: deepOrange[800],\n  Turkey: deepPurple[800],\n  'United Kingdom': green[800],\n};\n\nfunction useWorldMap() {\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n  const [content, setContent] = useState('');\n  const [hide, setHide] = useState(true);\n\n  const handleMove = (geography, evt) => {\n    setX(evt.clientX);\n    setY(evt.clientY + window.pageYOffset);\n    setContent(geography.properties.NAME);\n    setHide(false);\n  };\n\n  const handleLeave = () => {\n    setHide(true);\n  };\n\n  return {\n    x,\n    y,\n    content,\n    hide,\n    handleMove,\n    handleLeave,\n  };\n}\n\nconst WorldMap = memo(() => {\n  const {\n    x,\n    y,\n    content,\n    hide,\n    handleMove,\n    handleLeave,\n  } = useWorldMap();\n\n  const screenWidth = document.body.clientWidth - 32;\n\n  return (\n    <div>\n      <ComposableMap width={screenWidth} height={screenWidth * 546 / 744} projectionConfig={{ scale: screenWidth * RATIO, rotation: [-10, 0, 0] }}>\n        <ZoomableGroup>\n          <Geographies geography=\"/world-110m.json\">\n            {(geographies, projection) => map(geographies, (geography, i) => (\n              <Geography\n                key={i}\n                geography={geography}\n                projection={projection}\n                onMouseMove={handleMove}\n                onMouseLeave={handleLeave}\n                style={{\n                  default: {\n                    fill: countries[geography.properties.NAME] ? countries[geography.properties.NAME] : FILL,\n                    stroke: STROKE,\n                    strokeWidth: 0.75,\n                    outline: 'none',\n                  },\n                  hover: {\n                    fill: countries[geography.properties.NAME] ? VISITED_HOVER : HOVER,\n                    stroke: STROKE,\n                    strokeWidth: 0.75,\n                    outline: 'none',\n                  },\n                  pressed: {\n                    fill: PRESSED,\n                    stroke: STROKE,\n                    strokeWidth: 0.75,\n                    outline: 'none',\n                  },\n                }}\n              />\n            ))\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n      <Popover x={x} y={y} hide={hide} content={content} />\n    </div>\n  );\n});\n\nexport default WorldMap;\n","import React, { memo } from 'react';\nimport { Typography } from '@material-ui/core';\nimport TravelTable from './TravelTable';\nimport WorldMap from './WorldMap';\n\nconst TravelMap = memo(() => (\n  <div>\n    <Typography variant=\"h2\">My Travel Map</Typography>\n    <WorldMap />\n    <TravelTable />\n  </div>\n));\n\nexport default TravelMap;\n","// import TravelMap from './TravelMap';\nimport TravelMap from './TravelMap';\n\nexport default TravelMap;\n"],"sourceRoot":""}