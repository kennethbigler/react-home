{"version":3,"file":"static/js/g_tictactoe.fe182802.chunk.js","mappings":"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","sources":["components/games/tictactoe/Header.tsx","components/games/tictactoe/helpers.ts","components/games/tictactoe/History.tsx","components/games/tictactoe/Cell.tsx","components/games/tictactoe/Board.tsx","components/games/tictactoe/TicTacToe.tsx"],"sourcesContent":["import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\n\ninterface HeaderProps {\n  newGame: React.MouseEventHandler;\n  turn: string;\n  winner?: string;\n}\n\nconst Header: React.FC<HeaderProps> = React.memo(\n  ({ winner, turn, newGame }: HeaderProps) => (\n    <Toolbar>\n      <Typography style={{ flex: 1 }} variant=\"h6\">\n        {winner ? `Winner: ${winner}` : `Turn: ${turn}`}\n      </Typography>\n      <Button\n        color=\"primary\"\n        onClick={newGame}\n        variant=\"contained\"\n        role=\"button\"\n      >\n        Reset Game\n      </Button>\n    </Toolbar>\n  )\n);\n\nexport default Header;\n","import { O, X, EMPTY } from \"../../../store/modules/ticTacToe\";\n\nexport const getTurn = (n: number): string => (n % 2 ? O : X);\n\n/** function to check if there are 3 in a row\n * @return value of winner and positions for winner */\nexport function calculateWinner(board: string[] | undefined[]): {\n  winner?: string;\n  winRow: [number?, number?, number?];\n} {\n  const lines: [number, number, number][] = [\n    // horizontal\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    // vertical\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    // diagonal\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  // check each win condition\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n    // if all 3 match and aren't empty\n    if (board[a] !== EMPTY && board[a] === board[b] && board[a] === board[c]) {\n      // return winner and winning positions\n      return { winner: board[a], winRow: lines[i] };\n    }\n  }\n  return { winner: undefined, winRow: [] };\n}\n\nexport default getTurn;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport { getTurn } from \"./helpers\";\nimport { HistoryEntry } from \"../../../store/modules/ticTacToe\";\n\ninterface HistoryProps {\n  history: HistoryEntry[];\n  jumpToStep: (move: number) => void;\n  step: number;\n}\n\nconst History: React.FC<HistoryProps> = (props: HistoryProps) => {\n  const [ascend, setAscend] = React.useState(true);\n  const { history, step, jumpToStep } = props;\n\n  /** function that generates text for the history tracker */\n  const getHistoryText = React.useCallback(\n    (round: HistoryEntry, move: number): React.ReactNode => {\n      const location = round.location || 0;\n      // generate description text\n      const description = !move\n        ? \"Game Start (Turn, Col, Row)\"\n        : `Move #${move} (${getTurn(move - 1)}, ` +\n          `${Math.floor(location / 3)}, ${location % 3})`;\n      // highlight current turn displayed on board\n      const color = step === move ? \"secondary\" : \"primary\";\n\n      return (\n        <Button\n          key={move}\n          color={color}\n          onClick={(): void => jumpToStep(move)}\n          role=\"button\"\n          style={{ display: \"block\" }}\n        >\n          {description}\n        </Button>\n      );\n    },\n    [jumpToStep, step]\n  );\n\n  // move history\n  const moves = history.map(getHistoryText);\n  // asc vs. desc\n  !ascend && moves.reverse();\n\n  return (\n    <>\n      <Button\n        onClick={(): void => {\n          setAscend(!ascend);\n        }}\n        style={{ marginTop: 20, marginBottom: 20 }}\n        variant=\"contained\"\n        role=\"button\"\n      >\n        {ascend ? \"Asc\" : \"Desc\"}\n      </Button>\n      {moves}\n    </>\n  );\n};\n\nexport default History;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport { useTheme } from \"@mui/material/styles\";\n\ninterface CellProps {\n  onClick: React.MouseEventHandler;\n  value?: string;\n  winner: boolean;\n}\n\nconst Cell: React.FC<CellProps> = React.memo((props: CellProps) => {\n  const { value, winner, onClick } = props;\n  const {\n    palette: {\n      primary: { main },\n    },\n  } = useTheme();\n  // add attributes if cell is a winner\n  const attr: React.CSSProperties = winner\n    ? { color: \"white\", backgroundColor: main }\n    : {};\n\n  return (\n    <Button onClick={onClick} style={attr} role=\"button\">\n      {value || <br />}\n    </Button>\n  );\n});\n\nexport default Cell;\n","import React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { grey } from \"@mui/material/colors\";\nimport Cell from \"./Cell\";\n\ninterface BoardProps {\n  board: string[] | undefined[];\n  onClick: (cell: number) => void;\n  winRow: [number?, number?, number?];\n}\n\nconst tableCellStyle: React.CSSProperties = {\n  padding: 0,\n  textAlign: \"center\",\n  border: `1px solid ${grey[400]}`,\n};\n\nconst Board: React.FC<BoardProps> = (props: BoardProps) => {\n  const { board, onClick, winRow } = props;\n\n  const cells = React.useMemo(() => {\n    const newCells = [];\n\n    // create 3 rows\n    for (let i = 0; i < 3; i += 1) {\n      // create 3 cells in a row\n      const row = [];\n      for (let j = 0; j < 3; j += 1) {\n        const c = i * 3 + j;\n        // check if winning position\n        const winner = winRow.includes(c);\n        row.push(\n          <TableCell key={`${i},${j}`} style={tableCellStyle}>\n            <Cell\n              onClick={(): void => onClick(c)}\n              value={board[c]}\n              winner={winner}\n            />\n          </TableCell>\n        );\n      }\n      const boardRow = <TableRow key={`row${i}`}>{row}</TableRow>;\n      // separate into rows\n      newCells.push(boardRow);\n    }\n    return newCells;\n  }, [board, onClick, winRow]);\n\n  return (\n    <Table>\n      <TableBody>{cells}</TableBody>\n    </Table>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Typography from \"@mui/material/Typography\";\nimport { useAppDispatch, useAppSelector } from \"../../../store/store\";\nimport {\n  playTurn,\n  newGame,\n  TicTacToeState,\n  X,\n  O,\n  EMPTY,\n} from \"../../../store/modules/ticTacToe\";\nimport Header from \"./Header\";\nimport History from \"./History\";\nimport Board from \"./Board\";\nimport { getTurn, calculateWinner } from \"./helpers\";\n\nconst paperStyles: React.CSSProperties = {\n  width: 343,\n  display: \"block\",\n  margin: \"auto\",\n};\n\n/* TicTacToe  ->  Header\n *           |->  Board  ->  Cell\n *           |->  History */\nconst TicTacToe: React.FC = () => {\n  const { turn, step, history } = useAppSelector((state) => ({\n    ...state.ticTacToe,\n  }));\n  const dispatch = useAppDispatch();\n\n  /** function that modifies board with appropriate turn\n   * @param location - location of board click (row * 3 + col) */\n  const handleClick = React.useCallback(\n    (location: number): void => {\n      const newHistory = history.slice(0, step + 1);\n      const current = newHistory[step];\n      const board = current.board.slice();\n\n      // game is over or cell is full\n      if (!calculateWinner(board).winner && board[location] === EMPTY) {\n        // place marker, then update turn\n        board[location] = turn;\n\n        dispatch(\n          playTurn({\n            history: newHistory.concat([{ board, location }]),\n            step: newHistory.length,\n            turn: turn === X ? O : X,\n          })\n        );\n      }\n    },\n    [dispatch, history, step, turn]\n  );\n\n  /** function that resets game back to it's initial state */\n  const newTTTGame = React.useCallback((): void => {\n    dispatch(newGame());\n  }, [dispatch]);\n\n  /** function that modifies board to go back to a previous point in history\n   * @param step - desired point in history */\n  const jumpToStep = React.useCallback(\n    (stepNo: number): void => {\n      const newTurn: TicTacToeState = {\n        step: stepNo,\n        turn: getTurn(stepNo),\n        history,\n      };\n      // Double click will eliminate all other history if there is any\n      if (step === stepNo) {\n        newTurn.history = history.slice(0, step + 1);\n      }\n      // update board to previous turn, non-permanent, history exists still\n      dispatch(playTurn(newTurn));\n    },\n    [dispatch, history, step]\n  );\n\n  const current = history[step];\n  const board = current.board.slice();\n  const { winner, winRow } = calculateWinner(board);\n\n  return (\n    <>\n      <Typography variant=\"h2\" gutterBottom>\n        Tic-Tac-Toe\n      </Typography>\n      <Paper elevation={2} style={paperStyles}>\n        <Header newGame={newTTTGame} turn={turn} winner={winner} />\n        <Board board={board} onClick={handleClick} winRow={winRow} />\n      </Paper>\n      <History history={history} jumpToStep={jumpToStep} step={step} />\n    </>\n  );\n};\n\nexport default TicTacToe;\n"],"names":["React","winner","turn","newGame","Toolbar","Typography","style","flex","variant","Button","color","onClick","role","getTurn","n","O","X","calculateWinner","board","lines","i","length","a","b","c","EMPTY","winRow","undefined","props","ascend","setAscend","history","step","jumpToStep","getHistoryText","round","move","location","description","Math","floor","display","moves","map","reverse","marginTop","marginBottom","value","main","useTheme","palette","primary","attr","backgroundColor","tableCellStyle","padding","textAlign","border","grey","cells","newCells","row","j","includes","push","TableCell","boardRow","TableRow","Table","TableBody","paperStyles","width","margin","useAppSelector","state","ticTacToe","dispatch","useAppDispatch","handleClick","newHistory","slice","playTurn","concat","newTTTGame","stepNo","newTurn","gutterBottom","Paper","elevation"],"sourceRoot":""}