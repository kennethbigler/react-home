{"version":3,"sources":["components/Routes.tsx","WithTheme.tsx","store/index.ts","store/configureStore.ts","WithStore.tsx","serviceWorker.ts","index.ts","apis/Deck.ts","store/initialState.ts","components/common/loading-spinner/LoadingSpinner.tsx","components/common/loading-spinner/index.ts","store/modules/players.ts","store/modules/git.ts","helpers/asyncForEach.ts","store/modules/theme.ts","store/modules/turn.ts","store/modules/dota2.ts","store/modules/gqlToken.ts","store/modules/yahtzee.ts","store/immutableHelpers.ts"],"names":["ResumeRoutes","lazy","GameRoutes","withRouter","props","handleNav","loc","location","history","pathname","push","style","padding","paddingTop","fallback","path","render","passProps","connect","state","theme","setTheme","createMuiTheme","palette","type","primary","secondary","typography","fontFamily","join","CssBaseline","rootReducer","combineReducers","dota2","git","gqlToken","players","turn","yahtzee","loadState","a","localForage","getItem","then","initialState","catch","configureStore","createStore","composeWithDevTools","applyMiddleware","thunk","WithStore","store","subscribe","throttle","getState","setItem","e","console","error","setState","this","React","PureComponent","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","ReactDOM","createElement","App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","NEW_DECK","name","weight","suit","getNewDeck","map","card","getDeck","data","setDeck","deck","shuffle","shuffledDeck","i","j","Math","floor","random","k","temp","deal","num","cards","length","pop","rankSort","b","newPlayer","id","isBot","money","bet","hands","newDota2Phase","radiant","dire","newDota2Lineup","number","indigo","deepOrange","storyID","branchMessage","branchPrefix","casePreference","commitPrefix","player","hand","containerStyles","display","margin","marginTop","LoadingSpinner","memo","CircularProgress","size","ADD","REMOVE","RESET","UPDATE_NAME","UPDATE_BOT","UPDATE_BET","PAY_PLAYER","SPLIT_HAND","DRAW_CARD","SWAP_CARD","NEW_HAND","updateName","updateBot","updateBet","payout","resetStatus","reducer","action","updateObjectInArray","find","obj","updatedPlayer","insertItem","removeItem","defaultWeigh","soft","newHand","weigh","dispatch","Deck","sort","createNewHandAction","drawCard","hNum","drawnCards","updateArrayInArray","newHands","createDrawCardAction","splitHand","hand1","hand2","Object","assign","splice","createSplitHandAction","swapCards","cardsToDiscard","asyncForEach","idx","updatedHands","createSwapCardsAction","SET_KEY","SET_BRANCH_MESSAGE","SET_BRANCH_PREFIX","SET_CASE_PREFERENCE","SET_COMMIT_PREFIX","setKey","setBranchMessage","setBranchPrefix","setCasePreference","setCommitPrefix","isSet","array","callback","index","DARK_THEME","LIGHT_THEME","displayDarkTheme","displayLightTheme","blue","blueGrey","INCR_PLAYER","INCR_HAND","incrPlayerTurn","incrHandTurn","resetTurn","UPDATE_LINEUP","RESET_LINEUP","addLineup","lineup","removeLineup","updateLineup","order","resetLineup","removeItemInArray","SET_TOKEN","setToken","addScore","score","item","newArr","slice","ins","key","filter"],"mappings":"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","file":"static/js/main.fd997163.chunk.js","sourcesContent":["import React, { Suspense, lazy } from 'react';\nimport {\n  Switch, Route, withRouter, RouteComponentProps,\n} from 'react-router-dom';\nimport LoadingSpinner from './common/loading-spinner';\n\ntype RoutesProps = RouteComponentProps<{ url: string }>;\n\n// lazy load sub routers\nconst ResumeRoutes = lazy(() => import(/* webpackChunkName: \"resume\" */ './resume/Routes'));\nconst GameRoutes = lazy(() => import(/* webpackChunkName: \"games\" */ './games/Routes'));\n\nconst Routes: React.FC<RoutesProps> = (props: RoutesProps) => {\n  const handleNav = (loc: string): void => {\n    const { location, history } = props;\n    if (loc !== location.pathname) {\n      history.push(loc);\n    }\n  };\n\n  const resume = (passProps: RoutesProps): React.ReactNode => <ResumeRoutes handleNav={handleNav} {...passProps} />;\n\n  const games = (passProps: RoutesProps): React.ReactNode => <GameRoutes handleNav={handleNav} {...passProps} />;\n\n  return (\n    <main style={{ padding: '1em', paddingTop: '5em' }}>\n      <Suspense fallback={<LoadingSpinner />}>\n        <Switch>\n          <Route path=\"/games\" render={games} />\n          <Route render={resume} />\n        </Switch>\n      </Suspense>\n    </main>\n  );\n};\n\nexport default withRouter(Routes);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Routes from './components/Routes';\nimport { DBRootState, DBUITheme } from './store/types';\n\ninterface WithThemeProps {\n  theme: DBUITheme;\n}\n\n/** App class that wraps higher level components of the application */\nconst WithTheme: React.FC<WithThemeProps> = (props: WithThemeProps) => {\n  const { theme } = props;\n  const setTheme = createMuiTheme({\n    palette: {\n      type: theme.type,\n      primary: theme.primary,\n      secondary: theme.secondary,\n    },\n    typography: {\n      fontFamily: [\n        'Montserrat',\n        'sans-serif',\n      ].join(','),\n    },\n  });\n\n  return (\n    <MuiThemeProvider theme={setTheme}>\n      <CssBaseline />\n      <HashRouter>\n        <Routes />\n      </HashRouter>\n    </MuiThemeProvider>\n  );\n};\n\n// react-redux export\nconst mapStateToProps = (state: DBRootState): WithThemeProps => ({\n  theme: state.theme,\n});\n\nexport default connect(mapStateToProps)(WithTheme);\n","import { combineReducers } from 'redux';\nimport dota2 from './modules/dota2';\nimport git from './modules/git';\nimport gqlToken from './modules/gqlToken';\nimport players from './modules/players';\nimport theme from './modules/theme';\nimport turn from './modules/turn';\nimport yahtzee from './modules/yahtzee';\n\nconst rootReducer = combineReducers({\n  dota2, git, gqlToken, players, theme, turn, yahtzee,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, Store } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport localForage from 'localforage';\n\nimport { DBRootState } from './types';\nimport rootReducer from '.';\nimport initialState from './initialState';\n\n/** funtion to read 'state' value from local storage and return it, or default state */\nexport const loadState = async (): Promise<DBRootState> => localForage\n  .getItem('state')\n  .then((state) => (state ? { ...initialState, ...state as DBRootState } : initialState))\n  // if there are any issues, just load default state\n  .catch(() => initialState);\n\n/** funtion to save 'state' value to local storage */\nexport const saveState = (state: DBRootState): Promise<void | DBRootState> => localForage\n  .setItem('state', state)\n  // eslint-disable-next-line no-console\n  .catch((e) => console.error('state to db save failed: ', e));\n\nexport const configureStore = (state: DBRootState): Store => createStore(\n  rootReducer,\n  state,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport throttle from 'lodash/throttle';\nimport { Store } from 'redux';\nimport WithTheme from './WithTheme';\nimport { loadState, saveState, configureStore } from './store/configureStore';\nimport LoadingSpinner from './components/common/loading-spinner';\n\ninterface WithStoreState {\n  store?: Store;\n}\n\n/** App class that wraps higher level components of the application */\nclass WithStore extends React.PureComponent<{}, WithStoreState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount(): void {\n    loadState()\n      .then(configureStore)\n      .then((store) => {\n        store.subscribe(throttle(() => saveState(store.getState()), 1000));\n        this.setState({ store });\n      });\n  }\n\n  render(): React.ReactNode {\n    const { store } = this.state;\n    return store ? (\n      <Provider store={store}>\n        <WithTheme />\n      </Provider>\n    ) : <LoadingSpinner />;\n  }\n}\n\nexport default WithStore;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './WithStore';\nimport { register } from './serviceWorker';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\nregister();\n","import localForage from 'localforage';\nimport { DBCard } from '../store/types';\n\nconst NEW_DECK: DBCard[] = [\n  { name: '2', weight: 2, suit: '♣' }, { name: '3', weight: 3, suit: '♣' },\n  { name: '4', weight: 4, suit: '♣' }, { name: '5', weight: 5, suit: '♣' },\n  { name: '6', weight: 6, suit: '♣' }, { name: '7', weight: 7, suit: '♣' },\n  { name: '8', weight: 8, suit: '♣' }, { name: '9', weight: 9, suit: '♣' },\n  { name: '10', weight: 10, suit: '♣' }, { name: 'J', weight: 11, suit: '♣' },\n  { name: 'Q', weight: 12, suit: '♣' }, { name: 'K', weight: 13, suit: '♣' },\n  { name: 'A', weight: 14, suit: '♣' }, { name: '2', weight: 2, suit: '♦' },\n  { name: '3', weight: 3, suit: '♦' }, { name: '4', weight: 4, suit: '♦' },\n  { name: '5', weight: 5, suit: '♦' }, { name: '6', weight: 6, suit: '♦' },\n  { name: '7', weight: 7, suit: '♦' }, { name: '8', weight: 8, suit: '♦' },\n  { name: '9', weight: 9, suit: '♦' }, { name: '10', weight: 10, suit: '♦' },\n  { name: 'J', weight: 11, suit: '♦' }, { name: 'Q', weight: 12, suit: '♦' },\n  { name: 'K', weight: 13, suit: '♦' }, { name: 'A', weight: 14, suit: '♦' },\n  { name: '2', weight: 2, suit: '♥' }, { name: '3', weight: 3, suit: '♥' },\n  { name: '4', weight: 4, suit: '♥' }, { name: '5', weight: 5, suit: '♥' },\n  { name: '6', weight: 6, suit: '♥' }, { name: '7', weight: 7, suit: '♥' },\n  { name: '8', weight: 8, suit: '♥' }, { name: '9', weight: 9, suit: '♥' },\n  { name: '10', weight: 10, suit: '♥' }, { name: 'J', weight: 11, suit: '♥' },\n  { name: 'Q', weight: 12, suit: '♥' }, { name: 'K', weight: 13, suit: '♥' },\n  { name: 'A', weight: 14, suit: '♥' }, { name: '2', weight: 2, suit: '♠' },\n  { name: '3', weight: 3, suit: '♠' }, { name: '4', weight: 4, suit: '♠' },\n  { name: '5', weight: 5, suit: '♠' }, { name: '6', weight: 6, suit: '♠' },\n  { name: '7', weight: 7, suit: '♠' }, { name: '8', weight: 8, suit: '♠' },\n  { name: '9', weight: 9, suit: '♠' }, { name: '10', weight: 10, suit: '♠' },\n  { name: 'J', weight: 11, suit: '♠' }, { name: 'Q', weight: 12, suit: '♠' },\n  { name: 'K', weight: 13, suit: '♠' }, { name: 'A', weight: 14, suit: '♠' },\n];\n\n/** immutably get a copy of new deck O(N) */\nconst getNewDeck = (): DBCard[] => NEW_DECK.map((card) => ({ ...card }));\n\n/** get immutable copy of deck O(N) */\nconst getDeck = (): Promise<DBCard[]> => localForage\n  .getItem('deck')\n  .then((data: unknown) => (data as DBCard[] || getNewDeck()))\n  .catch(() => getNewDeck());\n\n/** immutably update deck O(N) */\nconst setDeck = (deck: DBCard[]): Promise<DBCard[] | null> => localForage\n  .setItem('deck', deck)\n  .catch(() => null);\n\n/** randomize order of the cards O(N + M) */\nconst shuffle = (): Promise<DBCard[] | null> => {\n  // get a new deck\n  const shuffledDeck = getNewDeck();\n  // shuffle the cards\n  for (let i = 0; i < 100; i += 1) {\n    const j = Math.floor(Math.random() * 52);\n    const k = Math.floor(Math.random() * 52);\n    const temp = shuffledDeck[j];\n    shuffledDeck[j] = shuffledDeck[k];\n    shuffledDeck[k] = temp;\n  }\n  // update deck state\n  return setDeck(shuffledDeck);\n};\n\n/** return an array of a specified length O(2N) */\nconst deal = (num = 0): Promise<DBCard[]> => {\n  const cards: DBCard[] = [];\n  return getDeck()\n    .then((deck: DBCard[]): DBCard[] => {\n      // verify we have enough cards\n      if (num > deck.length) {\n        return deck;\n      }\n      // get the cards\n      for (let i = 0; i < num; i += 1) {\n        const card: DBCard | undefined = deck.pop();\n        card && cards.push(card);\n      }\n      return deck;\n    })\n    .then((deck: DBCard[]) => setDeck(deck))\n    .then(() => cards);\n};\n\n/** sort by card weight */\nconst rankSort = (a: DBCard, b: DBCard): number => a.weight - b.weight;\n\nexport default { shuffle, deal, rankSort };\n","import indigo from '@material-ui/core/colors/indigo';\nimport deepOrange from '@material-ui/core/colors/deepOrange';\n\nimport {\n  DBDota2Phase, DBDota2Turn, DBGit, DBPlayer,\n  DBUITheme, DBTurn, DBRootState,\n} from './types';\n\n// --------------------     helpers     -------------------- //\nexport const newPlayer = (id: number, name = 'Bot', isBot = true): DBPlayer => ({\n  id,\n  name,\n  isBot,\n  status: '',\n  money: 100,\n  bet: 5,\n  hands: [],\n});\n\nconst newDota2Phase = (name: string, radiant: DBDota2Turn, dire: DBDota2Turn): DBDota2Phase => ({\n  name, radiant: { ...radiant }, dire: { ...dire },\n});\n\nexport const newDota2Lineup = (): DBDota2Phase[] => [...[\n  newDota2Phase('Ban 1', { number: 1 }, { number: 2 }),\n  newDota2Phase('Ban 2', { number: 3 }, { number: 4 }),\n  newDota2Phase('Ban 3', { number: 5 }, { number: 6 }),\n  newDota2Phase('Pick 1', { number: 7 }, { number: 8 }),\n  newDota2Phase('Pick 2', { number: 10 }, { number: 9 }),\n  newDota2Phase('Ban 4', { number: 11 }, { number: 12 }),\n  newDota2Phase('Ban 5', { number: 13 }, { number: 14 }),\n  newDota2Phase('Pick 3', { number: 16 }, { number: 15 }),\n  newDota2Phase('Pick 4', { number: 18 }, { number: 17 }),\n  newDota2Phase('Ban 6', { number: 20 }, { number: 19 }),\n  newDota2Phase('Pick 5', { number: 21 }, { number: 22 }),\n]];\n\n// --------------------     initial state     -------------------- //\nconst dota2 = [newDota2Lineup()];\nconst git: DBGit = {\n  storyID: '',\n  branchMessage: '',\n  branchPrefix: 'features',\n  casePreference: 'snake_case',\n  commitPrefix: true,\n};\nconst gqlToken = '';\nconst players: DBPlayer[] = [\n  newPlayer(1, 'Ken', false),\n  newPlayer(2),\n  newPlayer(3),\n  newPlayer(4),\n  newPlayer(5),\n  newPlayer(6),\n  newPlayer(0, 'Dealer', true),\n];\nconst theme: DBUITheme = {\n  primary: indigo,\n  secondary: deepOrange,\n  type: 'dark',\n};\nconst turn: DBTurn = { player: 0, hand: 0 };\nconst yahtzee: number[] = [];\n\nexport default {\n  dota2,\n  git,\n  gqlToken,\n  players,\n  theme,\n  turn,\n  yahtzee,\n} as DBRootState;\n","import React, { memo } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst containerStyles: React.CSSProperties = {\n  display: 'block',\n  margin: 'auto',\n  marginTop: 40,\n};\n\nconst LoadingSpinner = memo(() => (\n  <CircularProgress size={100} style={containerStyles} />\n));\n\nexport default LoadingSpinner;\n","import LoadingSpinner from './LoadingSpinner';\n\nexport default LoadingSpinner;\n","import { AnyAction } from 'redux';\nimport asyncForEach from '../../helpers/asyncForEach';\nimport Deck from '../../apis/Deck';\nimport {\n  removeItem, updateArrayInArray, updateObjectInArray, insertItem,\n} from '../immutableHelpers';\nimport { DBCard, DBHand, DBPlayer } from '../types';\nimport initialState, { newPlayer } from '../initialState';\n\n// --------------------     Actions     -------------------- //\nconst ADD = 'casino/player/ADD';\nconst REMOVE = 'casino/player/REMOVE';\nconst RESET = 'casino/player/RESET';\nconst UPDATE_NAME = 'casino/player/UPDATE_NAME';\nconst UPDATE_BOT = 'casino/player/UPDATE_BOT';\nconst UPDATE_BET = 'casino/player/UPDATE_BET';\nconst PAY_PLAYER = 'casino/player/PAY_PLAYER';\nconst SPLIT_HAND = 'casino/player/SPLIT_HAND';\nconst DRAW_CARD = 'casino/player/DRAW_CARD';\nconst SWAP_CARD = 'casino/player/SWAP_CARD';\nconst NEW_HAND = 'casino/player/NEW_HAND';\n\n// -------------------- Action Creators     -------------------- //\n/** function to add a player to the state */\nexport function addPlayer(players: DBPlayer[], name: string): AnyAction {\n  const player = newPlayer(players.length, name);\n  return { type: ADD, player };\n}\n\n/** function to remove player from player array */\nexport function removePlayer(id: number): AnyAction {\n  return { type: REMOVE, id };\n}\n\n/** function to update a player's name */\nexport function updateName(id: number, name: string): AnyAction {\n  return { type: UPDATE_NAME, player: { id, name }};\n}\n\n/** function to update a player's bot status */\nexport function updateBot(id: number, isBot = true): AnyAction {\n  return { type: UPDATE_BOT, player: { id, isBot }};\n}\n\n/** function to update a player's bet */\nexport function updateBet(id = 0, bet = 5): AnyAction {\n  return { type: UPDATE_BET, player: { id, bet }};\n}\n\n/** function to pay the winners and take money from the losers */\nexport function payout(id: number, status: string, money: number): AnyAction {\n  return { type: PAY_PLAYER, player: { id, status, money }};\n}\n\nfunction createSplitHandAction(id: number, newHands: DBHand[]): AnyAction {\n  return { type: SPLIT_HAND, player: { id, hands: newHands }};\n}\n\nfunction createDrawCardAction(id: number, newHands: DBHand[]): AnyAction {\n  return { type: DRAW_CARD, player: { id, hands: newHands }};\n}\n\nfunction createSwapCardsAction(id: number, updatedHands: DBHand[]): AnyAction {\n  return { type: SWAP_CARD, player: { id, hands: updatedHands }};\n}\n\nfunction createNewHandAction(id: number, cards: DBCard[], soft: boolean, weight: number): AnyAction {\n  return { type: NEW_HAND, player: { id, hands: [{ cards, weight, soft }]}};\n}\n\n/** function to reset player status\n * @param {number} id - optional, what player should get a new hand, default 0\n * @return {Object}\n */\nexport function resetStatus(id = 0): AnyAction {\n  return {\n    type: RESET,\n    player: {\n      id, status: '', hands: [], bet: 5,\n    },\n  };\n}\n\n// --------------------     Reducer     -------------------- //\nexport default function reducer(state: DBPlayer[] = initialState.players, action: AnyAction): DBPlayer[] {\n  switch (action.type) {\n    case RESET:\n    case UPDATE_NAME:\n    case UPDATE_BOT:\n    case UPDATE_BET:\n    case SPLIT_HAND:\n    case DRAW_CARD:\n    case SWAP_CARD:\n    case NEW_HAND:\n      return updateObjectInArray(state, action.player, 'id');\n    case PAY_PLAYER: {\n      const { id, status, money } = action.player;\n\n      const player = state.find((obj) => obj.id === id);\n      const playerMoney = (player && player.money) || 0;\n\n      const updatedPlayer = { ...player, money: (playerMoney + money), status };\n\n      return updateObjectInArray(state, updatedPlayer, 'id');\n    }\n    case ADD:\n      return insertItem(state, action.player);\n    case REMOVE:\n      return removeItem(state, action.id);\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\ntype WeighFunc = (cards: DBCard[]) => { weight: number; soft: boolean };\nconst defaultWeigh: WeighFunc = () => ({ weight: 0, soft: false });\n\n/** function to have a player draw a card\n * @param {number} id - optional, what player should get a new hand, default 0\n * @param {number} num - optional, number of cards, default 1\n * @param {function} weigh - optional, get weight of hand for game\n * @return {Object}\n */\nexport function newHand(id = 0, num = 1, weigh = defaultWeigh) {\n  return (dispatch: Function): Promise<void> => Deck.deal(num)\n    .then((cards) => {\n      cards.sort(Deck.rankSort);\n      const { weight, soft } = weigh(cards);\n      return { weight, soft, cards };\n    })\n    .then(({ weight, soft, cards }) => dispatch(createNewHandAction(id, cards, soft, weight)));\n}\n\n/** function to have a player draw a card\n * @param {Object[]} hands - pass in player's hands to be mutated with new card\n * @param {number} id - tells us which player to update\n * @param {number} hNum - optional, if multiple hands\n * @param {number} num - optional, number of cards, default 1\n * @param {function} weigh - optional, get weight of hand for game\n * @return {Object}\n */\nexport function drawCard(hands: DBHand[], id: number, hNum = 0, num = 1, weigh = defaultWeigh) {\n  return (dispatch: Function): Promise<void> => Deck.deal(num)\n    .then((drawnCards) => {\n      const cards = [...hands[hNum].cards, ...drawnCards];\n      const { weight, soft } = weigh(cards);\n      const newHands = updateArrayInArray(hands, { cards, weight, soft }, hNum);\n      return newHands;\n    })\n    .then((newHands) => dispatch(createDrawCardAction(id, newHands)));\n}\n\n/** function to split players cards into 2 hands\n * @param {Object[]} hands - pass in player's hands to be mutated with new card\n * @param {number} id - tells us which player to update\n * @param {number} hNum - optional, if multiple hands\n * @param {function} weigh - optional, get weight of hand for game\n * @return {Object}\n */\nexport function splitHand(hands: DBHand[], id: number, hNum: number, weigh = defaultWeigh) {\n  return (dispatch: Function): Promise<void> => {\n    const hand = hands[hNum];\n    // split the hands into 2\n    const hand1: DBHand = { cards: [hand.cards[0]]};\n    const hand2: DBHand = { cards: [hand.cards[1]]};\n\n    return Deck.deal(1)\n      .then((cards) => {\n        hand1.cards.push(cards[0]);\n      })\n      .then(() => {\n        Deck.deal(1)\n          .then((cards) => {\n            hand2.cards.push(cards[0]);\n\n            // update the weights\n            Object.assign(hand1, weigh(hand1.cards));\n            Object.assign(hand2, weigh(hand2.cards));\n            // update global hands\n            const newHands: DBHand[] = updateArrayInArray(hands, hand2, hNum);\n            newHands.splice(hNum, 0, hand1);\n            return newHands;\n          })\n          .then((newHands) => dispatch(createSplitHandAction(id, newHands)));\n      });\n  };\n}\n\n/** iterate through array, removing each index number from hand\n * then add new cards to the hand\n * @param {Object[]} hands - pass in player's hands to be mutated with new card\n * @param {number} id - tells us which player to update\n * @param {array} cardsToDiscard - array of index numbers\n * @return {Object}\n */\nexport function swapCards(hands: DBHand[], id: number, cardsToDiscard: number[]) {\n  return (dispatch: Function): Promise<void> => {\n    const cards = [...hands[0].cards];\n    return asyncForEach(cardsToDiscard, async (idx: number) => {\n      [cards[idx]] = await Deck.deal(1);\n    }).then(() => {\n      cards.sort(Deck.rankSort);\n      const updatedHands: DBHand[] = updateArrayInArray(hands, { cards }, 0);\n      dispatch(createSwapCardsAction(id, updatedHands));\n    });\n  };\n}\n","import { AnyAction } from 'redux';\nimport { DBGit } from '../types';\nimport initialState from '../initialState';\n\n// --------------------     Actions     -------------------- //\nconst SET_KEY = 'resume/git/SET_KEY';\nconst SET_BRANCH_MESSAGE = 'resume/git/SET_BRANCH_MESSAGE';\nconst SET_BRANCH_PREFIX = 'resume/git/SET_BRANCH_PREFIX';\nconst SET_CASE_PREFERENCE = 'resume/git/SET_CASE_PREFERENCE';\nconst SET_COMMIT_PREFIX = 'resume/git/SET_COMMIT_PREFIX';\n\n// --------------------     Action Creators     -------------------- //\nexport function setKey(storyID = ''): AnyAction {\n  return { type: SET_KEY, storyID };\n}\nexport function setBranchMessage(branchMessage = ''): AnyAction {\n  return { type: SET_BRANCH_MESSAGE, branchMessage };\n}\nexport function setBranchPrefix(branchPrefix = ''): AnyAction {\n  return { type: SET_BRANCH_PREFIX, branchPrefix };\n}\nexport function setCasePreference(casePreference = ''): AnyAction {\n  return { type: SET_CASE_PREFERENCE, casePreference };\n}\nexport function setCommitPrefix(isSet = true): AnyAction {\n  return { type: SET_COMMIT_PREFIX, commitPrefix: isSet };\n}\n\n// --------------------     Reducers     -------------------- //\nexport default function reducer(state: DBGit = initialState.git, action: AnyAction): DBGit {\n  switch (action.type) {\n    case SET_KEY:\n      return { ...state, ...{ storyID: action.storyID }};\n    case SET_BRANCH_PREFIX:\n      return { ...state, ...{ branchPrefix: action.branchPrefix }};\n    case SET_BRANCH_MESSAGE:\n      return { ...state, ...{ branchMessage: action.branchMessage }};\n    case SET_CASE_PREFERENCE:\n      return { ...state, ...{ casePreference: action.casePreference }};\n    case SET_COMMIT_PREFIX:\n      return { ...state, ...{ commitPrefix: action.commitPrefix }};\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n","// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function asyncForEach(array: any[], callback: Function): Promise<void> {\n  for (let index = 0; index < array.length; index += 1) {\n    // eslint-disable-next-line no-await-in-loop\n    await callback(array[index], index, array);\n  }\n}\n\nexport default asyncForEach;\n","import { Action } from 'redux';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport deepOrange from '@material-ui/core/colors/deepOrange';\nimport blue from '@material-ui/core/colors/blue';\n\nimport { DBUITheme } from '../types';\nimport initialState from '../initialState';\n\n// --------------------     Actions     -------------------- //\nconst DARK_THEME = 'resume/theme/DARK_THEME';\nconst LIGHT_THEME = 'resume/theme/LIGHT_THEME';\n\n// --------------------     Action Creators     -------------------- //\nexport const displayDarkTheme = (): Action => ({ type: DARK_THEME });\nexport const displayLightTheme = (): Action => ({ type: LIGHT_THEME });\n\n// --------------------     Reducers     -------------------- //\nexport default function reducer(state: DBUITheme = initialState.theme, action: Action): DBUITheme {\n  switch (action.type) {\n    case DARK_THEME:\n      return { ...state, ...{ type: 'dark', primary: blue, secondary: deepOrange }};\n    case LIGHT_THEME:\n      return { ...state, ...{ type: 'light', primary: blueGrey, secondary: deepOrange }};\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n","import { Action } from 'redux';\nimport { DBTurn } from '../types';\nimport initialState from '../initialState';\n\n// --------------------     Actions     -------------------- //\nconst INCR_PLAYER = 'casino/turn/INCR';\nconst INCR_HAND = 'casino/turn/INCR_HAND';\nconst RESET = 'casino/turn/RESET';\n\n// --------------------     Action Creators     -------------------- //\nexport const incrPlayerTurn = (): Action => ({ type: INCR_PLAYER });\nexport const incrHandTurn = (): Action => ({ type: INCR_HAND });\nexport const resetTurn = (): Action => ({ type: RESET });\n\n// --------------------     Reducers     -------------------- //\nexport default function reducer(state: DBTurn = initialState.turn, action: Action): DBTurn {\n  switch (action.type) {\n    case INCR_PLAYER:\n      return { ...state, ...{ player: state.player + 1, hand: 0 }};\n    case INCR_HAND:\n      return { ...state, ...{ hand: state.hand + 1 }};\n    case RESET:\n      return { ...state, ...{ player: 0, hand: 0 }};\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n","import { AnyAction } from 'redux';\nimport { insertItem, updateArrayInArray, removeItemInArray } from '../immutableHelpers';\nimport { DBDota2Phase } from '../types';\nimport initialState, { newDota2Lineup } from '../initialState';\n\n// --------------------     Actions     -------------------- //\nconst ADD = 'casino/dota2/ADD_LINEUP';\nconst REMOVE = 'casino/dota2/REMOVE_LINEUP';\nconst UPDATE_LINEUP = 'casino/dota2/UPDATE_LINEUP';\nconst RESET_LINEUP = 'casino/dota2/RESET_LINEUP';\n\n// -------------------- Action Creators     -------------------- //\nexport function addLineup(): AnyAction {\n  return { type: ADD, lineup: newDota2Lineup() };\n}\nexport function removeLineup(idx: number): AnyAction {\n  return { type: REMOVE, idx };\n}\nexport function updateLineup(order: DBDota2Phase[], idx: number): AnyAction {\n  return { type: UPDATE_LINEUP, order, idx };\n}\nexport function resetLineup(idx: number): AnyAction {\n  return { type: RESET_LINEUP, order: newDota2Lineup(), idx };\n}\n\n// --------------------     Reducer     -------------------- //\nexport default function reducer(state: DBDota2Phase[][] = initialState.dota2, action: AnyAction): DBDota2Phase[][] {\n  switch (action.type) {\n    case ADD:\n      return insertItem(state, action.lineup);\n    case REMOVE:\n      return removeItemInArray(state, action.idx);\n    case UPDATE_LINEUP:\n    case RESET_LINEUP:\n      return updateArrayInArray(state, action.order, action.idx);\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n","import { AnyAction } from 'redux';\nimport initialState from '../initialState';\n\n// --------------------     Actions     -------------------- //\nconst SET_TOKEN = 'resume/graphql/SET_TOKEN';\n\n// --------------------     Action Creators     -------------------- //\nexport const setToken = (gqlToken = ''): AnyAction => ({ type: SET_TOKEN, gqlToken });\n\n// --------------------     Reducers     -------------------- //\nexport default function reducer(state: string = initialState.gqlToken, action: AnyAction): string {\n  switch (action.type) {\n    case SET_TOKEN:\n      return action.gqlToken;\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n","import { AnyAction } from 'redux';\nimport initialState from '../initialState';\n\n// --------------------     Actions     -------------------- //\nconst ADD = 'casino/yahtzee/SCORE';\n\n// -------------------- Action Creators     -------------------- //\nexport const addScore = (score: number): AnyAction => ({ type: ADD, score });\n\n// --------------------     Reducers     -------------------- //\nexport default function reducer(state: number[] = initialState.yahtzee, action: AnyAction): number[] {\n  switch (action.type) {\n    case ADD:\n      return [...state, action.score];\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n// Immutable helper functions\nexport function insertItem(array: any[], item: any): any[] {\n  const newArr = array.slice();\n  newArr.push(item);\n  return newArr;\n}\n\nexport function updateObjectInArray(array: any[], ins: any, key: string | number): any[] {\n  return array.map(\n    (item) => (item[key] !== ins[key] ? item : { ...item, ...ins }),\n  );\n}\n\nexport function updateArrayInArray(array: any[], ins: any, idx: number): any[] {\n  return array.map((item, i) => (i !== idx ? item : ins));\n}\n\nexport function removeItem(array: any[], id: number): any {\n  return array.filter((obj) => obj.id !== id);\n}\n\nexport function removeItemInArray(array: any[], idx: number): any[] {\n  return [...array.slice(0, idx), ...array.slice(idx + 1)];\n}\n"],"sourceRoot":""}