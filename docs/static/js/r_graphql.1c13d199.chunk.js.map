{"version":3,"file":"static/js/r_graphql.1c13d199.chunk.js","mappings":"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","sources":["components/resume/graphql/common/Loading.tsx","components/resume/graphql/repository/fragments.ts","components/resume/graphql/repository/item/Link.tsx","components/resume/graphql/repository/item/Description.tsx","components/resume/graphql/repository/item/WatchRepository.tsx","components/resume/graphql/repository/item/StarRepository.tsx","components/resume/graphql/repository/item/UnstarRepository.tsx","components/resume/graphql/repository/item/RepositoryItem.tsx","components/resume/graphql/repository/item/FetchMore.tsx","components/resume/graphql/repository/RepositoryList.tsx","components/resume/graphql/ErrorMessage.tsx","components/resume/graphql/Profile.tsx","components/resume/graphql/Header.tsx","components/resume/graphql/NoToken.tsx","components/resume/graphql/GraphQL.tsx"],"sourcesContent":["import React from \"react\";\n\nconst Loading: React.FC = React.memo(() => <div>Loading ...</div>);\n\nexport default Loading;\n","import gql from \"graphql-tag\";\n\nconst REPOSITORY_FRAGMENT = gql`\n  fragment repository on Repository {\n    id\n    name\n    url\n    descriptionHTML\n    primaryLanguage {\n      name\n    }\n    owner {\n      login\n      url\n    }\n    stargazers {\n      totalCount\n    }\n    viewerHasStarred\n    watchers {\n      totalCount\n    }\n    viewerSubscription\n  }\n`;\n\nexport default REPOSITORY_FRAGMENT;\n","import React from \"react\";\n\ninterface LinkProps extends React.AnchorHTMLAttributes<HTMLAnchorElement> {\n  children: React.ReactNode | React.ReactNodeArray;\n}\n\nconst Link: React.FC<LinkProps> = (props: LinkProps) => {\n  const { children, ...otherProps } = props;\n  return (\n    <a {...otherProps} target=\"_blank\" rel=\"noopener noreferrer\">\n      {children}\n    </a>\n  );\n};\n\nexport default Link;\n","import React from \"react\";\nimport { Typography } from \"@mui/material\";\nimport { PrimaryLanguage, Owner } from \"./types\";\n\ninterface DescriptionProps {\n  descriptionHTML: string;\n  primaryLanguage: PrimaryLanguage;\n  owner: Owner;\n}\n\nconst Description: React.FC<DescriptionProps> = (props: DescriptionProps) => {\n  const { descriptionHTML, primaryLanguage, owner } = props;\n\n  return (\n    <div className=\"RepositoryItem-description\">\n      <div\n        className=\"RepositoryItem-description-info\"\n        // eslint-disable-next-line react/no-danger\n        dangerouslySetInnerHTML={{ __html: descriptionHTML }}\n      />\n      <div className=\"RepositoryItem-description-details\">\n        {primaryLanguage && (\n          <Typography display=\"inline\">\n            {`Language: ${primaryLanguage.name}`}\n          </Typography>\n        )}\n        {owner && (\n          <Typography display=\"inline\">\n            Owner: <a href={owner.url}>{owner.login}</a>\n          </Typography>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Description;\n","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport Button from \"@mui/material/Button\";\nimport { useMutation, MutationUpdaterFn } from \"@apollo/client\";\nimport REPOSITORY_FRAGMENT from \"../fragments\";\nimport { Watchers } from \"./types\";\n\ninterface WatchRepositoryProps {\n  id: string;\n  watchers: Watchers;\n  viewerSubscription: string;\n}\n\nconst WATCH_REPOSITORY = gql`\n  mutation ($id: ID!, $viewerSubscription: SubscriptionState!) {\n    updateSubscription(\n      input: { state: $viewerSubscription, subscribableId: $id }\n    ) {\n      subscribable {\n        id\n        viewerSubscription\n      }\n    }\n  }\n`;\n\nconst VIEWER_SUBSCRIPTIONS = {\n  SUBSCRIBED: \"SUBSCRIBED\",\n  UNSUBSCRIBED: \"UNSUBSCRIBED\",\n};\n\nconst isWatch = (viewerSubscription: string): boolean =>\n  viewerSubscription === VIEWER_SUBSCRIPTIONS.SUBSCRIBED;\n\nexport const updateWatch: MutationUpdaterFn = (cache, mutationResult) => {\n  const { data } = mutationResult;\n  if (!data) {\n    return;\n  }\n\n  const {\n    updateSubscription: {\n      subscribable: { id, viewerSubscription },\n    },\n  } = data;\n\n  const repository: WatchRepositoryProps | null = cache.readFragment({\n    id: `Repository:${id as string}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  if (!repository) {\n    return;\n  }\n\n  let { totalCount } = repository.watchers;\n  totalCount =\n    viewerSubscription === VIEWER_SUBSCRIPTIONS.SUBSCRIBED\n      ? totalCount + 1\n      : totalCount - 1;\n\n  cache.writeFragment({\n    id: `Repository:${id as string}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: {\n      ...repository,\n      watchers: {\n        ...repository.watchers,\n        totalCount,\n      },\n    },\n  });\n};\n\nconst WatchRepository: React.FC<WatchRepositoryProps> = (\n  props: WatchRepositoryProps\n) => {\n  const { id, watchers, viewerSubscription } = props;\n  const [updateSubscription] = useMutation(WATCH_REPOSITORY, {\n    variables: {\n      id,\n      viewerSubscription: isWatch(viewerSubscription)\n        ? VIEWER_SUBSCRIPTIONS.UNSUBSCRIBED\n        : VIEWER_SUBSCRIPTIONS.SUBSCRIBED,\n    },\n    optimisticResponse: {\n      updateSubscription: {\n        __typename: \"Mutation\",\n        subscribable: {\n          __typename: \"Repository\",\n          id,\n          viewerSubscription: isWatch(viewerSubscription)\n            ? VIEWER_SUBSCRIPTIONS.UNSUBSCRIBED\n            : VIEWER_SUBSCRIPTIONS.SUBSCRIBED,\n        },\n      },\n    },\n    update: updateWatch,\n  });\n\n  return (\n    <Button\n      className=\"RepositoryItem-title-action\"\n      onClick={updateSubscription as React.MouseEventHandler}\n      variant=\"outlined\"\n      color=\"primary\"\n    >\n      {`${isWatch(viewerSubscription) ? \"Unwatch\" : \"Watch\"} (${\n        watchers.totalCount\n      })`}\n    </Button>\n  );\n};\n\nexport default WatchRepository;\n","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport Button from \"@mui/material/Button\";\nimport { useMutation, MutationUpdaterFn } from \"@apollo/client\";\nimport REPOSITORY_FRAGMENT from \"../fragments\";\nimport { StarRepositoryProps } from \"./types\";\n\nconst STAR_REPOSITORY = gql`\n  mutation ($id: ID!) {\n    addStar(input: { starrableId: $id }) {\n      starrable {\n        id\n        viewerHasStarred\n      }\n    }\n  }\n`;\n\nexport const updateAddStar: MutationUpdaterFn = (\n  cache,\n  mutationResult\n): void => {\n  const { data } = mutationResult;\n  if (!data) {\n    return;\n  }\n  const {\n    addStar: {\n      starrable: { id },\n    },\n  } = data;\n\n  const repository: StarRepositoryProps | null = cache.readFragment({\n    id: `Repository:${id as string}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  if (!repository) {\n    return;\n  }\n\n  const totalCount = repository.stargazers.totalCount + 1;\n\n  cache.writeFragment({\n    id: `Repository:${id as string}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: {\n      ...repository,\n      stargazers: {\n        ...repository.stargazers,\n        totalCount,\n      },\n    },\n  });\n};\n\nconst StarRepository: React.FC<StarRepositoryProps> = (\n  props: StarRepositoryProps\n) => {\n  const { id, stargazers } = props;\n  const [addStar] = useMutation(STAR_REPOSITORY, {\n    variables: { id },\n    update: updateAddStar,\n    optimisticResponse: {\n      addStar: {\n        __typename: \"Mutation\",\n        starrable: { __typename: \"Repository\", id, viewerHasStarred: true },\n      },\n    },\n  });\n\n  return (\n    <Button\n      className=\"RepositoryItem-title-action\"\n      onClick={addStar as React.MouseEventHandler}\n      variant=\"outlined\"\n      color=\"primary\"\n    >\n      {`Star (${stargazers.totalCount})`}\n    </Button>\n  );\n};\n\nexport default StarRepository;\n","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport Button from \"@mui/material/Button\";\nimport { useMutation, MutationUpdaterFn } from \"@apollo/client\";\nimport REPOSITORY_FRAGMENT from \"../fragments\";\nimport { StarRepositoryProps } from \"./types\";\n\nconst UNSTAR_REPOSITORY = gql`\n  mutation ($id: ID!) {\n    removeStar(input: { starrableId: $id }) {\n      starrable {\n        id\n        viewerHasStarred\n      }\n    }\n  }\n`;\n\nexport const updateRemoveStar: MutationUpdaterFn = (cache, mutationResult) => {\n  const { data } = mutationResult;\n  if (!data) {\n    return;\n  }\n\n  const {\n    removeStar: {\n      starrable: { id },\n    },\n  } = data;\n  const repository: StarRepositoryProps | null = cache.readFragment({\n    id: `Repository:${id as string}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  if (!repository) {\n    return;\n  }\n\n  const totalCount = repository.stargazers.totalCount - 1;\n\n  cache.writeFragment({\n    id: `Repository:${id as string}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: {\n      ...repository,\n      stargazers: {\n        ...repository.stargazers,\n        totalCount,\n      },\n    },\n  });\n};\n\nconst UnstarRepository: React.FC<StarRepositoryProps> = (\n  props: StarRepositoryProps\n) => {\n  const { id, stargazers } = props;\n  const [removeStar] = useMutation(UNSTAR_REPOSITORY, {\n    variables: { id },\n    optimisticResponse: {\n      removeStar: {\n        __typename: \"Mutation\",\n        starrable: {\n          __typename: \"Repository\",\n          id,\n          viewerHasStarred: false,\n        },\n      },\n    },\n    update: updateRemoveStar,\n  });\n\n  return (\n    <Button\n      className=\"RepositoryItem-title-action\"\n      onClick={removeStar as React.MouseEventHandler}\n      variant=\"outlined\"\n      color=\"primary\"\n    >\n      {`UnStar (${stargazers.totalCount})`}\n    </Button>\n  );\n};\n\nexport default UnstarRepository;\n","import React from \"react\";\nimport { Typography } from \"@mui/material\";\nimport Link from \"./Link\";\nimport Description from \"./Description\";\nimport WatchRepository from \"./WatchRepository\";\nimport StarRepository from \"./StarRepository\";\nimport UnstarRepository from \"./UnstarRepository\";\nimport { Owner, PrimaryLanguage, StarGazers, Watchers } from \"./types\";\n\nexport interface RepositoryItemProps {\n  id: string;\n  name: string;\n  url: string;\n  descriptionHTML: string;\n  primaryLanguage: PrimaryLanguage;\n  owner: Owner;\n  stargazers: StarGazers;\n  watchers: Watchers;\n  viewerSubscription: string;\n  viewerHasStarred: boolean;\n}\n\n/* RepositoryItem  ->  StarRepository\n *                |->  UnstarRepository\n *                | -> WatchRepository\n *                | -> Description */\nconst RepositoryItem: React.FC<RepositoryItemProps> = (\n  props: RepositoryItemProps\n) => {\n  const {\n    id,\n    name,\n    url,\n    descriptionHTML,\n    primaryLanguage,\n    owner,\n    stargazers,\n    watchers,\n    viewerSubscription,\n    viewerHasStarred,\n  } = props;\n\n  return (\n    <>\n      <div className=\"RepositoryItem-title\">\n        <Typography variant=\"h3\">\n          <Link href={url}>{name}</Link>\n        </Typography>\n        {!viewerHasStarred ? (\n          <StarRepository id={id} stargazers={stargazers} />\n        ) : (\n          <UnstarRepository id={id} stargazers={stargazers} />\n        )}\n        <WatchRepository\n          id={id}\n          watchers={watchers}\n          viewerSubscription={viewerSubscription}\n        />\n      </div>\n\n      <Description\n        descriptionHTML={descriptionHTML}\n        primaryLanguage={primaryLanguage}\n        owner={owner}\n      />\n    </>\n  );\n};\n\nexport default RepositoryItem;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Loading from \"../../common/Loading\";\nimport type { RepositoryItemProps } from \"./RepositoryItem\";\n\ninterface Variables {\n  cursor: unknown;\n}\ninterface PageInto {\n  hasNextPage: boolean;\n  endCursor: string;\n}\ninterface Edge {\n  node: RepositoryItemProps;\n}\nexport interface Repository {\n  edges: Edge[];\n  pageInfo: PageInto;\n}\ninterface Result {\n  viewer: {\n    repositories: Repository;\n    [props: string]: unknown;\n  };\n  [props: string]: unknown;\n}\nexport type UpdateQueryType = (\n  previousResult: Result,\n  {\n    fetchMoreResult,\n  }: {\n    fetchMoreResult: Result;\n  }\n) => Result;\ninterface FetchMoreProps {\n  loading: boolean;\n  hasNextPage: boolean;\n  variables: Variables;\n  updateQuery: UpdateQueryType;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fetchMore: Function;\n  children?: string;\n}\n\nconst FetchMore: React.FC<FetchMoreProps> = (props: FetchMoreProps) => {\n  const { loading, hasNextPage, variables, updateQuery, fetchMore, children } =\n    props;\n\n  return (\n    <div className=\"FetchMore\">\n      {loading ? (\n        <Loading />\n      ) : (\n        hasNextPage && (\n          <Button\n            className=\"FetchMore-button\"\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            onClick={(): void => fetchMore({ variables, updateQuery })}\n            variant=\"outlined\"\n            color=\"primary\"\n          >\n            {`More ${children || \"\"}`}\n          </Button>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default FetchMore;\n","import React from \"react\";\nimport RepositoryItem from \"./item\";\nimport FetchMore, { UpdateQueryType, Repository } from \"./item/FetchMore\";\n\nexport interface RepositoryListProps {\n  repositories: Repository;\n  loading: boolean;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fetchMore: Function;\n}\n\nconst updateQuery: UpdateQueryType = (previousResult, { fetchMoreResult }) => {\n  if (!fetchMoreResult) {\n    return previousResult;\n  }\n\n  return {\n    ...previousResult,\n    viewer: {\n      ...previousResult.viewer,\n      repositories: {\n        ...previousResult.viewer.repositories,\n        ...fetchMoreResult.viewer.repositories,\n        edges: [\n          ...previousResult.viewer.repositories.edges,\n          ...fetchMoreResult.viewer.repositories.edges,\n        ],\n      },\n    },\n  };\n};\n\nconst RepositoryList: React.FC<RepositoryListProps> = (\n  props: RepositoryListProps\n) => {\n  const { repositories, loading, fetchMore } = props;\n\n  return (\n    <>\n      {repositories.edges.map(({ node }) => (\n        <div key={node.id} className=\"RepositoryItem\">\n          <RepositoryItem {...node} />\n        </div>\n      ))}\n\n      <FetchMore\n        loading={loading}\n        hasNextPage={repositories.pageInfo.hasNextPage}\n        variables={{\n          cursor: repositories.pageInfo.endCursor,\n        }}\n        updateQuery={updateQuery}\n        fetchMore={fetchMore}\n      >\n        Repositories\n      </FetchMore>\n    </>\n  );\n};\n\nexport default RepositoryList;\n","import React from \"react\";\nimport { ApolloError } from \"@apollo/client/core\";\n\ninterface ErrorMessageProps {\n  error?: ApolloError;\n}\n\nconst ErrorMessage: React.FC<ErrorMessageProps> = (\n  props: ErrorMessageProps\n) => {\n  const { error } = props;\n\n  return (\n    <div>\n      <small>{error ? error.toString() : \"Something Went Wrong\"}</small>\n    </div>\n  );\n};\n\nexport default ErrorMessage;\n","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/client\";\nimport Loading from \"./common/Loading\";\nimport RepositoryList, { REPOSITORY_FRAGMENT } from \"./repository\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport { Repository } from \"./repository/item/FetchMore\";\n\nexport const GET_REPOSITORIES_OF_CURRENT_USER = gql`\n  query ($cursor: String) {\n    viewer {\n      repositories(\n        first: 5\n        orderBy: { direction: DESC, field: STARGAZERS }\n        after: $cursor\n      ) {\n        edges {\n          node {\n            ...repository\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  }\n  ${REPOSITORY_FRAGMENT}\n`;\n\ninterface ProfileData {\n  viewer: {\n    repositories: Repository;\n  };\n}\n\nconst Profile: React.FC = React.memo(() => {\n  const { error, data, loading, fetchMore } = useQuery<ProfileData>(\n    GET_REPOSITORIES_OF_CURRENT_USER\n  );\n\n  // check errors\n  if (error || (!loading && !data)) {\n    return <ErrorMessage error={error} />;\n  }\n\n  // check for data\n  if (!data || !data.viewer || loading) {\n    return <Loading />;\n  }\n\n  // display data\n  return (\n    <RepositoryList\n      loading={loading}\n      repositories={data.viewer.repositories}\n      fetchMore={fetchMore}\n    />\n  );\n});\n\nexport default Profile;\n","import React from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport { Typography } from \"@mui/material\";\n\ninterface HeaderProps {\n  authToken?: string;\n  onChange: React.ChangeEventHandler;\n}\n\nconst Header: React.FC<HeaderProps> = React.memo((props: HeaderProps) => {\n  const { authToken, onChange } = props;\n\n  return (\n    <>\n      <Typography variant=\"h2\">GraphQL Demo</Typography>\n      <TextField\n        label=\"Authorization Code\"\n        placeholder=\"some 32 character string from github\"\n        value={authToken}\n        onChange={onChange}\n        style={{ margin: \"20px 0 20px 0\" }}\n        fullWidth\n      />\n    </>\n  );\n});\n\nexport default Header;\n","import React from \"react\";\nimport { Typography } from \"@mui/material\";\n\nconst NoToken: React.FC = React.memo(() => (\n  <>\n    <Typography variant=\"h6\">\n      You need to generate a personal access token with &quot;repo&quot; and\n      &quot;admin:repo_hook&quot; permissions.\n    </Typography>\n    <Typography variant=\"h6\">\n      This can be done in the Developer settings on GitHub.\n    </Typography>\n  </>\n));\n\nexport default NoToken;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  ApolloProvider,\n  ApolloClient,\n  ApolloLink,\n  HttpLink,\n  InMemoryCache,\n} from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\nimport Profile from \"./Profile\";\nimport { setToken } from \"../../../store/modules/gqlToken\";\nimport Header from \"./Header\";\nimport NoToken from \"./NoToken\";\nimport { DBRootState } from \"../../../store/types\";\n\nconst GITHUB_BASE_URL = \"https://api.github.com/graphql\";\nconst errorLink = onError((/* { graphQLErrors, networkError } */) => {\n  /* if (graphQLErrors) { do something with graphql error } */\n  /* if (networkError) { do something with network error } */\n});\nconst cache = new InMemoryCache();\n\n/* GraphQL  ->  Header\n *         |->  NoToken\n *         |->  Profile  ->  Repository\n *            Loading  <-|->  ErrorMessage */\nconst GraphQL: React.FC = React.memo(() => {\n  const gqlToken = useSelector((state: DBRootState) => state.gqlToken);\n  const dispatch = useDispatch();\n\n  const [authToken, setAuthToken] = React.useState(gqlToken);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const token = e.target.value;\n    dispatch(setToken(token));\n    setAuthToken(token);\n  };\n\n  if (!gqlToken) {\n    return (\n      <>\n        <Header authToken={authToken} onChange={handleChange} />\n        <NoToken />\n      </>\n    );\n  }\n\n  const httpLink = new HttpLink({\n    uri: GITHUB_BASE_URL,\n    headers: {\n      authorization: `Bearer ${gqlToken}`,\n    },\n  });\n  const link = ApolloLink.from([errorLink, httpLink]);\n  const client = new ApolloClient({ link, cache });\n\n  return (\n    <ApolloProvider client={client}>\n      <Header authToken={authToken} onChange={handleChange} />\n      <Profile />\n    </ApolloProvider>\n  );\n});\n\nexport default GraphQL;\n"],"names":["React","gql","props","children","otherProps","target","rel","descriptionHTML","primaryLanguage","owner","className","dangerouslySetInnerHTML","__html","Typography","display","name","href","url","login","WATCH_REPOSITORY","VIEWER_SUBSCRIPTIONS","isWatch","viewerSubscription","updateWatch","cache","mutationResult","data","updateSubscription","subscribable","id","repository","readFragment","fragment","REPOSITORY_FRAGMENT","totalCount","watchers","writeFragment","useMutation","variables","optimisticResponse","__typename","update","Button","onClick","variant","color","STAR_REPOSITORY","updateAddStar","addStar","starrable","stargazers","viewerHasStarred","UNSTAR_REPOSITORY","updateRemoveStar","removeStar","loading","hasNextPage","updateQuery","fetchMore","previousResult","fetchMoreResult","viewer","repositories","edges","map","node","pageInfo","cursor","endCursor","error","toString","GET_REPOSITORIES_OF_CURRENT_USER","Profile","useQuery","authToken","onChange","TextField","label","placeholder","value","style","margin","fullWidth","errorLink","onError","InMemoryCache","gqlToken","useSelector","state","dispatch","useDispatch","setAuthToken","handleChange","e","token","setToken","httpLink","HttpLink","uri","headers","authorization","link","ApolloLink","client","ApolloClient","ApolloProvider"],"sourceRoot":""}