{"version":3,"file":"static/js/g_dond.30e4c82a.chunk.js","mappings":"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","sources":["components/games/deal-or-no-deal/helpers.ts","components/games/deal-or-no-deal/Money.tsx","components/games/deal-or-no-deal/Modal.tsx","components/games/deal-or-no-deal/Case.tsx","components/games/deal-or-no-deal/Board.tsx","components/games/deal-or-no-deal/Header.tsx","recoil/deal-or-no-deal-state.ts","components/games/deal-or-no-deal/DealOrNoDeal.tsx","../node_modules/@mui/material/esm/colors/amber.js"],"sourcesContent":["/** function that takes a number and returns string displayed like money */\nexport const getMoneyText = (n = 0): string => {\n  const txt = n.toString().split(\"\");\n  const e = txt[0] === \"-\" ? 1 : 0;\n  for (let i = txt.length - 3; i > e; i -= 3) {\n    txt.splice(i, 0, \",\");\n  }\n  txt.splice(e, 0, \"$\");\n  return txt.join(\"\");\n};\n\nexport default getMoneyText;\n","import React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport { amber, grey } from \"@mui/material/colors\";\nimport { getMoneyText } from \"./helpers\";\nimport { Briefcase } from \"../../../recoil/deal-or-no-deal-state\";\n\ninterface MoneyProps {\n  briefcase: Briefcase;\n}\n\nconst paperStyles: React.CSSProperties = {\n  width: \"90%\",\n  marginLeft: \"5%\",\n  marginRight: \"5%\",\n  marginBottom: 5,\n  padding: 5,\n  textAlign: \"center\",\n  color: \"white\",\n};\n\nconst Money: React.FC<MoneyProps> = (props: MoneyProps) => {\n  const { briefcase: bc } = props;\n\n  const color: React.CSSProperties = {\n    backgroundColor: bc.on ? amber[500] : grey[700],\n  };\n\n  const style: React.CSSProperties = {\n    ...paperStyles,\n    ...color,\n  };\n\n  return (\n    <Paper style={style}>\n      {bc.on ? getMoneyText(bc.val) : <del>{getMoneyText(bc.val)}</del>}\n    </Paper>\n  );\n};\n\nexport default Money;\n","import React from \"react\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport Button from \"@mui/material/Button\";\nimport Money from \"./Money\";\nimport { getMoneyText } from \"./helpers\";\nimport { Briefcase } from \"../../../recoil/deal-or-no-deal-state\";\n\ninterface ModalProps {\n  board: Briefcase[];\n  deal: React.MouseEventHandler;\n  noDeal: React.MouseEventHandler;\n  numCases: number;\n  offer: number;\n  open: boolean;\n  swap: React.MouseEventHandler;\n}\n\nconst colStyles: React.CSSProperties = {\n  width: \"50%\",\n  display: \"inline-block\",\n};\n\nconst genMoneyCols = (\n  arr: Briefcase[],\n  start: number,\n  stop = arr.length\n): React.ReactNode[] =>\n  arr.slice(start, stop).map((bc) => <Money key={bc.loc} briefcase={bc} />);\n\nconst Modal: React.FC<ModalProps> = (props: ModalProps) => {\n  const { deal, noDeal, offer, open, swap, numCases, board: imBoard } = props;\n\n  const board = [...imBoard].sort((a, b) => a.val - b.val);\n\n  // columns displaying money values left\n  const lhs = genMoneyCols(board, 0, board.length / 2);\n  const rhs = genMoneyCols(board, board.length / 2);\n\n  return (\n    <Dialog fullWidth open={open}>\n      <DialogTitle>{`${getMoneyText(offer)} - Deal or No Deal?`}</DialogTitle>\n      <DialogContent>\n        <div style={colStyles}>{lhs}</div>\n        <div style={colStyles}>{rhs}</div>\n      </DialogContent>\n      {numCases > 2 ? (\n        <DialogActions>\n          <Button color=\"success\" onClick={deal}>\n            Deal\n          </Button>\n          <Button color=\"error\" onClick={noDeal}>\n            No Deal\n          </Button>\n        </DialogActions>\n      ) : (\n        <DialogActions>\n          <Button color=\"success\" onClick={deal}>\n            Deal\n          </Button>\n          <Button color=\"secondary\" onClick={noDeal}>\n            My Case\n          </Button>\n          <Button color=\"error\" onClick={swap}>\n            Other Case\n          </Button>\n        </DialogActions>\n      )}\n    </Dialog>\n  );\n};\n\nexport default Modal;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport { getMoneyText } from \"./helpers\";\nimport { Briefcase } from \"../../../recoil/deal-or-no-deal-state\";\n\ninterface CaseProps {\n  briefcase: Briefcase;\n  onClick: React.MouseEventHandler;\n  secondary?: boolean;\n}\n\nconst Case: React.FC<CaseProps> = (props: CaseProps) => {\n  const { onClick, briefcase: bc, secondary } = props;\n  const color = secondary ? \"secondary\" : \"primary\";\n  const label = bc.on ? bc.loc : getMoneyText(bc.val);\n\n  return (\n    <Button\n      color={color}\n      disabled={!bc.on}\n      onClick={onClick}\n      style={{ margin: 10 }}\n      variant=\"contained\"\n    >\n      {label}\n    </Button>\n  );\n};\n\nexport default Case;\n","import React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Case from \"./Case\";\nimport { Briefcase } from \"../../../recoil/deal-or-no-deal-state\";\n\ninterface BoardProps {\n  board: Briefcase[];\n  onClick: (x: number) => void;\n  playerChoice?: Briefcase;\n}\n\nconst style: React.CSSProperties = {\n  maxWidth: 796,\n  padding: 9,\n  textAlign: \"center\",\n  display: \"block\",\n  margin: \"auto\",\n  marginTop: 20,\n};\n\nconst Board: React.FC<BoardProps> = ({\n  board,\n  onClick,\n  playerChoice: pc,\n}: BoardProps) => (\n  <Paper elevation={2} style={style}>\n    {board.map((bc, i) => (\n      <Case\n        key={i}\n        briefcase={bc}\n        onClick={(): void => onClick(i)}\n        secondary={pc && pc.loc === bc.loc}\n      />\n    ))}\n  </Paper>\n);\n\nexport default Board;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport { getMoneyText } from \"./helpers\";\nimport { Briefcase } from \"../../../recoil/deal-or-no-deal-state\";\nimport { DBPlayer } from \"../../../recoil/player-atom\";\n\ninterface HeaderProps {\n  casesToOpen: number;\n  isOver: number;\n  newGame: React.MouseEventHandler;\n  player: DBPlayer;\n  playerChoice?: Briefcase;\n  dndOpen?: boolean;\n}\n\nconst Header: React.FC<HeaderProps> = (props: HeaderProps) => {\n  const {\n    playerChoice: pc,\n    casesToOpen,\n    isOver,\n    newGame,\n    player,\n    dndOpen,\n  } = props;\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item sm={6} xs={12}>\n        <Typography variant=\"h3\" component=\"h2\" gutterBottom>\n          {`Your Case: ${pc ? pc.loc : \"?\"}${\n            isOver ? ` - ${getMoneyText(pc && pc.val)}` : \"\"\n          }`}\n        </Typography>\n        <Typography variant=\"h4\" component=\"h3\" gutterBottom>\n          {!dndOpen &&\n            (isOver\n              ? `You Won ${getMoneyText(isOver)}`\n              : `Number of Cases to Open: ${casesToOpen}`)}\n        </Typography>\n        {isOver ? (\n          <Button onClick={newGame} variant=\"contained\">\n            New Game\n          </Button>\n        ) : null}\n      </Grid>\n      <Grid item sm={6} xs={12}>\n        <Typography variant=\"h3\" align=\"right\" gutterBottom>\n          {`${player.name}: ${getMoneyText(player.money)}`}\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Header;\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport playerAtom from \"./player-atom\";\n\nexport interface Briefcase {\n  on: boolean;\n  loc: number;\n  val: number;\n}\nexport interface DNDState {\n  board: Briefcase[];\n  turn: number;\n  playerChoice?: Briefcase;\n  casesToOpen: number;\n  dndOpen: boolean;\n  isOver: number;\n}\nexport const briefcasesToOpen = 6;\n\nconst getNewState = (): DNDState => ({\n  board: [\n    { val: 1, loc: 1, on: true },\n    { val: 2, loc: 2, on: true },\n    { val: 5, loc: 3, on: true },\n    { val: 10, loc: 4, on: true },\n    { val: 25, loc: 5, on: true },\n    { val: 50, loc: 6, on: true },\n    { val: 75, loc: 7, on: true },\n    { val: 100, loc: 8, on: true },\n    { val: 200, loc: 9, on: true },\n    { val: 300, loc: 10, on: true },\n    { val: 400, loc: 11, on: true },\n    { val: 500, loc: 12, on: true },\n    { val: 750, loc: 13, on: true },\n    { val: 1000, loc: 14, on: true },\n    { val: 5000, loc: 15, on: true },\n    { val: 10000, loc: 16, on: true },\n    { val: 25000, loc: 17, on: true },\n    { val: 50000, loc: 18, on: true },\n    { val: 75000, loc: 19, on: true },\n    { val: 100000, loc: 20, on: true },\n    { val: 200000, loc: 21, on: true },\n    { val: 300000, loc: 22, on: true },\n    { val: 400000, loc: 23, on: true },\n    { val: 500000, loc: 24, on: true },\n    { val: 750000, loc: 25, on: true },\n    { val: 1000000, loc: 26, on: true },\n  ],\n  turn: 1,\n  playerChoice: undefined,\n  casesToOpen: briefcasesToOpen,\n  dndOpen: false,\n  isOver: 0,\n});\n/** function that takes an array and shuffles it's elements */\nconst shuffle = (arr: Briefcase[]): void => {\n  // shuffle values of briefcases\n  for (let i = 0; i < 100; i += 1) {\n    // get to random briefcases\n    const j = Math.floor(Math.random() * arr.length);\n    const k = Math.floor(Math.random() * arr.length);\n    // swap the briefcases\n    const temp = arr[j].loc;\n    arr[j].loc = arr[k].loc;\n    arr[k].loc = temp;\n  }\n};\n/** function to get a new game state */\nexport const newDNDGame = (): DNDState => {\n  const state = getNewState();\n  // mix up board\n  shuffle(state.board);\n  // set all flags to un-touched\n  state.board.forEach((bc) => {\n    // reset opened flag\n    bc.on = true;\n  });\n  // sort function for the briefcases\n  state.board.sort((a, b) => a.loc - b.loc);\n  return state;\n};\n\nexport const dealOrNoDealAtom = atom({\n  key: \"dealOrNoDealAtom\",\n  default:\n    (JSON.parse(\n      localStorage.getItem(\"deal-or-no-deal-atom\") || \"null\"\n    ) as DNDState) || newDNDGame(),\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"deal-or-no-deal-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\nexport const dndHelperSelector = selector({\n  key: \"dndHelperSelector\",\n  get: ({ get }) => {\n    // access state\n    const { board, turn } = get(dealOrNoDealAtom);\n    // compute iterated variables\n    let numCases = 0;\n    let sum = 0;\n    board.forEach((bc) => {\n      if (bc.on) {\n        numCases += 1;\n        sum += bc.val;\n      }\n    });\n    // get the new offer\n    const offer = Math.round((sum / numCases) * (turn / 10));\n    // return state\n    return { numCases, offer };\n  },\n});\n\nconst dealOrNoDealState = selector({\n  key: \"dealOrNoDealState\",\n  get: ({ get }) => {\n    const dnd = get(dealOrNoDealAtom);\n    const player = get(playerAtom)[0];\n\n    return { dnd, player };\n  },\n  set: ({ get, set }, state) => {\n    if (!(state instanceof DefaultValue)) {\n      const { dnd, player } = state;\n      set(dealOrNoDealAtom, dnd);\n\n      const players = get(playerAtom);\n      const newPlayers = [...players];\n      newPlayers[0] = player;\n      set(playerAtom, newPlayers);\n    }\n  },\n});\n\nexport default dealOrNoDealState;\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport Typography from \"@mui/material/Typography\";\nimport Modal from \"./Modal\";\nimport Board from \"./Board\";\nimport Header from \"./Header\";\nimport dndState, {\n  dndHelperSelector,\n  briefcasesToOpen,\n  newDNDGame,\n} from \"../../../recoil/deal-or-no-deal-state\";\n\n// TODO: add rules to page\n/* DealOrNoDeal  ->  Header\n *              |->  Board  ->  Case\n *              |->  Modal  ->  Money */\nconst DND: React.FC = () => {\n  const [{ dnd, player }, setState] = useRecoilState(dndState);\n  const { numCases, offer } = useRecoilValue(dndHelperSelector);\n  const { board, dndOpen, isOver, turn, playerChoice, casesToOpen } = dnd;\n\n  // --------------------     Header     -------------------- //\n\n  /** called in Header, resets game */\n  const newGame = (): void => setState({ dnd: newDNDGame(), player });\n\n  // --------------------     Board     -------------------- //\n\n  /**\n   * called in Board to open a briefcase\n   * gets: board, playerChoice, isOver, casesToOpen\n   * sets: dnd { board, casesTopOpen, playerChoice, dndOpen }, player { money }\n   */\n  const openBriefcase = (x: number) => {\n    const bc = board[x];\n    // check if player has already made case selection\n    if (playerChoice) {\n      // verify cases left and briefcase not already opened\n      if (!isOver && casesToOpen > 0 && bc.loc !== playerChoice.loc && bc.on) {\n        // flag the value and update global trackers\n        const newBoard = [...board];\n        const newCase = { ...newBoard[x], on: false };\n        newBoard[x] = newCase;\n\n        // update board\n        setState({\n          dnd: {\n            ...dnd,\n            board: newBoard,\n            dndOpen: casesToOpen === 1,\n            casesToOpen: casesToOpen - 1,\n          },\n          player,\n        });\n      }\n    } else {\n      setState({\n        dnd: { ...dnd, playerChoice: bc },\n        player: {\n          ...player,\n          money: player.money - 100,\n        },\n      });\n    }\n  };\n\n  // --------------------     Modal     -------------------- //\n\n  /**\n   * called in Modal on selection of Deal\n   * gets: offer\n   * sets: dnd { dndOpen, isOver }, player: { status, money }\n   */\n  const deal = (): void => {\n    const total = Math.ceil(offer / 1000);\n    setState({\n      dnd: {\n        ...dnd,\n        dndOpen: false,\n        isOver: total,\n      },\n      player: {\n        ...player,\n        status: total > 100 ? \"win\" : \"lose\",\n        money: player.money + total,\n      },\n    });\n  };\n\n  /**\n   * called in Modal on selection of No Deal\n   * gets: numCases, playerChoice\n   * sets: dnd { dndOpen, isOver, turn, casesToOpen }, player: { status, money }\n   */\n  const noDeal = (): void => {\n    // no deal on last case\n    if (numCases <= 2) {\n      const newOffer = playerChoice?.val || 0;\n      const total = Math.ceil(newOffer / 1000);\n      setState({\n        dnd: {\n          ...dnd,\n          dndOpen: false,\n          isOver: total,\n        },\n        player: {\n          ...player,\n          status: total > 100 ? \"win\" : \"lose\",\n          money: player.money + total,\n        },\n      });\n    } else {\n      // advance the turn\n      setState({\n        dnd: {\n          ...dnd,\n          dndOpen: false,\n          turn: turn + 1,\n          casesToOpen:\n            turn < briefcasesToOpen - 1 ? briefcasesToOpen - turn : 1,\n        },\n        player,\n      });\n    }\n  };\n\n  /**\n   * called in Modal\n   * gets: board, playerChoice, player.money\n   * sets: dnd { dndOpen, isOver }, player: { status, money }\n   */\n  const swap = (): void => {\n    for (let i = 0; i < board.length; i += 1) {\n      const bc = board[i];\n      if (bc.on && playerChoice && bc.loc !== playerChoice.loc) {\n        const total = Math.ceil(bc.val / 1000);\n        setState({\n          dnd: {\n            ...dnd,\n            dndOpen: false,\n            isOver: total,\n          },\n          player: {\n            ...player,\n            status: total > 100 ? \"win\" : \"lose\",\n            money: player.money + total,\n          },\n        });\n        return;\n      }\n    }\n  };\n\n  return (\n    <>\n      <Typography variant=\"h2\" component=\"h1\" gutterBottom>\n        Deal or No Deal\n      </Typography>\n      <Header\n        casesToOpen={casesToOpen}\n        isOver={isOver}\n        newGame={newGame}\n        player={player}\n        playerChoice={playerChoice}\n        dndOpen={dndOpen}\n      />\n      <Board\n        board={board}\n        onClick={openBriefcase}\n        playerChoice={playerChoice}\n      />\n      <Modal\n        board={board}\n        deal={deal}\n        noDeal={noDeal}\n        numCases={numCases}\n        offer={offer}\n        open={dndOpen}\n        swap={swap}\n      />\n    </>\n  );\n};\n\nexport default DND;\n","const amber = {\n  50: '#fff8e1',\n  100: '#ffecb3',\n  200: '#ffe082',\n  300: '#ffd54f',\n  400: '#ffca28',\n  500: '#ffc107',\n  600: '#ffb300',\n  700: '#ffa000',\n  800: '#ff8f00',\n  900: '#ff6f00',\n  A100: '#ffe57f',\n  A200: '#ffd740',\n  A400: '#ffc400',\n  A700: '#ffab00'\n};\nexport default amber;"],"names":["getMoneyText","n","txt","toString","split","e","i","length","splice","join","paperStyles","width","marginLeft","marginRight","marginBottom","padding","textAlign","color","props","bc","briefcase","backgroundColor","on","amber","grey","style","Paper","val","colStyles","display","genMoneyCols","arr","start","stop","slice","map","loc","deal","noDeal","offer","open","swap","numCases","imBoard","board","sort","a","b","lhs","rhs","Dialog","fullWidth","DialogTitle","DialogContent","DialogActions","Button","onClick","secondary","label","disabled","margin","variant","maxWidth","marginTop","pc","playerChoice","elevation","casesToOpen","isOver","newGame","player","dndOpen","Grid","container","spacing","item","sm","xs","Typography","component","gutterBottom","align","name","money","newDNDGame","state","turn","undefined","j","Math","floor","random","k","temp","shuffle","forEach","dealOrNoDealAtom","atom","key","default","JSON","parse","localStorage","getItem","effects","onSet","setItem","stringify","dndHelperSelector","selector","get","sum","round","dnd","playerAtom","set","DefaultValue","players","newPlayers","useRecoilState","dndState","setState","useRecoilValue","x","newBoard","newCase","total","ceil","status","newOffer","briefcasesToOpen","A100","A200","A400","A700"],"sourceRoot":""}