{"version":3,"sources":["components/Routes.tsx","wrappers/WithRouter.tsx","wrappers/WithTheme.tsx","store/index.ts","store/configureStore.ts","wrappers/WithStore.tsx","serviceWorker.ts","index.ts","store/modules/turn.ts","store/types.ts","apis/Deck.ts","apis/SlotMachine.ts","store/initialState.ts","components/common/loading-spinner/LoadingSpinner.tsx","helpers/asyncForEach.ts","store/modules/git.ts","store/modules/poker.ts","store/modules/theme.ts","store/modules/blackjack.ts","store/modules/connect4.ts","store/modules/dnd.ts","store/modules/gqlToken.ts","store/modules/slots.ts","store/modules/ticTacToe.ts","store/modules/yahtzee.ts","store/immutableHelpers.ts","store/modules/players.ts"],"names":["ResumeRoutes","React","lazy","GameRoutes","withRouter","props","pathname","location","history","handleNav","useCallback","loc","push","resume","passProps","games","style","padding","paddingTop","Suspense","fallback","path","render","WithRouter","WithTheme","theme","useSelector","state","setTheme","createMuiTheme","palette","type","primary","secondary","typography","fontFamily","join","CssBaseline","rootReducer","combineReducers","blackjack","connect4","dnd","git","gqlToken","players","poker","slots","ticTacToe","turn","yahtzee","loadState","a","localForage","getItem","then","initialState","catch","composeEnhancers","composeWithDevTools","trace","traceLimit","configureStore","createStore","applyMiddleware","thunk","WithStore","store","subscribe","throttle","getState","setItem","e","console","error","setState","this","PureComponent","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","ReactDOM","createElement","App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","ta","INCR_PLAYER","INCR_HAND","RESET","incrPlayerTurn","incrHandTurn","resetTurn","reducer","action","player","hand","GameFunctions","C4Turn","PokerGameFunctions","DBSlotOptions","briefcasesToOpen","NEW_DECK","name","weight","suit","getNewDeck","map","card","getDeck","data","setDeck","deck","shuffle","shuffledDeck","i","j","Math","floor","random","k","temp","deal","num","cards","length","pop","rankSort","b","reels","symbol","SO","CHERRY","start","stop","EMPTY","BAR","SEVEN","DOUBLE_BAR","TRIPLE_BAR","JACKPOT","machine","forEach","reel","prev","next","prepareSlotMachine","pullHandle","getPayout","bet","bars","r0","r1","r2","fReel","includes","newBlackjackGame","gameFunctions","FINISH_BETTING","hasFunctions","hideHands","NEW_BOARD","newConnect4Game","board","reduce","acc","row","winner","undefined","line","RED","newDNDGame","val","on","playerChoice","casesToOpen","sum","numCases","offer","dndOpen","isOver","arr","bc","sort","newPlayer","id","isBot","money","hands","newPokerGameState","START_GAME","cardsToDiscard","gameOver","X","O","newTicTacToe","Array","fill","step","newYahtzee","roll","values","saved","showScoreButtons","hasScored","topScores","bottomScores","cyan","deepOrange","scores","storyID","branchMessage","branchPrefix","casePreference","commitPrefix","containerStyles","display","margin","marginTop","LoadingSpinner","memo","CircularProgress","size","title","array","callback","index","asyncForEach","SET_KEY","SET_BRANCH_MESSAGE","SET_BRANCH_PREFIX","SET_CASE_PREFERENCE","SET_COMMIT_PREFIX","setKey","setBranchMessage","setBranchPrefix","setCasePreference","setCommitPrefix","isSet","pa","NEW_GAME","END_TURN","END_GAME","DISCARD_CARDS","startPokerGame","endPokerGame","discardCards","updateCardsToDiscard","PGF","newPokerGame","dispatch","promises","resetStatus","Promise","all","endPokerTurn","DARK_THEME","LIGHT_THEME","displayDarkTheme","displayLightTheme","blueGrey","UPDATE_HIDE_HANDS","updateGameFunctions","updateHideHands","updateHasFunctions","setNewGame","splitHand","hNum","weigh","pSplitHand","hitHand","drawCard","stayHand","readyForNextPlayer","doubleHand","lastHand","updateBet","UPDATE_TURN","UPDATE_EVAL","newGame","updateTurn","updateEval","OPEN_CASE","OPEN_OFFER","NO_DEAL","FINISH_GAME","setOpenCase","setOpenOffer","setNoDeal","setPlayerChoice","promise1","updatePlayerChoice","promise2","payout","setFinishGame","round","finishGame","SET_TOKEN","setToken","UPDATE","updateDBSlotMachine","dealerId","SlotMachine","exchange","updateSlots","promise3","SET","playTurn","ADD","DICE_CLICK","NEXT_ROLL","UPDATE_TOP","UPDATE_BOTTOM","UPDATE_ROLL","addScore","score","diceClick","nextRoll","updateTop","updateBottom","updateRoll","payload","insertItem","item","newArr","slice","updateObjectInArray","ins","key","updateArrayInArray","idx","removeItem","filter","obj","REMOVE","UPDATE_NAME","UPDATE_BOT","UPDATE_BET","PAY_PLAYER","SPLIT_HAND","DRAW_CARD","SWAP_CARD","NEW_HAND","updateName","updateBot","createSplitHandAction","newHands","createDrawCardAction","createNewHandAction","soft","find","playerMoney","addedMoney","updatedPlayer","defaultWeigh","newHand","Deck","drawnCards","hand1","hand2","Object","assign","splice","swapCards","updatedHands","createSwapCardsAction"],"mappings":"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","file":"static/js/main.f82a02f2.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Switch, Route, withRouter, RouteComponentProps,\n} from 'react-router-dom';\nimport LoadingSpinner from './common/loading-spinner';\n\ntype RoutesProps = RouteComponentProps<{ url: string }>;\n\n// lazy load sub routers\nconst ResumeRoutes = React.lazy(() => import(/* webpackChunkName: \"resume\" */ './resume/Routes'));\nconst GameRoutes = React.lazy(() => import(/* webpackChunkName: \"games\" */ './games/Routes'));\n\nconst Routes: React.FC<RoutesProps> = (props: RoutesProps) => {\n  const { location: { pathname }, history } = props;\n\n  const handleNav = React.useCallback((loc: string): void => {\n    if (loc !== pathname) {\n      history.push(loc);\n    }\n  }, [history, pathname]);\n\n  const resume = React.useCallback(\n    (passProps: RoutesProps): React.ReactNode => <ResumeRoutes handleNav={handleNav} {...passProps} />,\n    [handleNav],\n  );\n  const games = React.useCallback(\n    (passProps: RoutesProps): React.ReactNode => <GameRoutes handleNav={handleNav} {...passProps} />,\n    [handleNav],\n  );\n\n  return (\n    <main style={{ padding: '1em', paddingTop: '5em' }}>\n      <React.Suspense fallback={<LoadingSpinner />}>\n        <Switch>\n          <Route path=\"/games\" render={games} />\n          <Route render={resume} />\n        </Switch>\n      </React.Suspense>\n    </main>\n  );\n};\n\nexport default withRouter(Routes);\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport Routes from '../components/Routes';\n\n/** App class that wraps higher level components of the application */\nconst WithRouter: React.FC = () => (\n  <HashRouter>\n    <Routes />\n  </HashRouter>\n);\n\nexport default WithRouter;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport WithRouter from './WithRouter';\nimport { DBRootState } from '../store/types';\n\n/** App class that wraps higher level components of the application */\nconst WithTheme: React.FC = () => {\n  const theme = useSelector((state: DBRootState) => state.theme);\n\n  const setTheme = createMuiTheme({\n    palette: {\n      type: theme.type,\n      primary: theme.primary,\n      secondary: theme.secondary,\n    },\n    typography: {\n      fontFamily: ['Montserrat', 'sans-serif'].join(','),\n    },\n  });\n\n  return (\n    <MuiThemeProvider theme={setTheme}>\n      <CssBaseline />\n      <WithRouter />\n    </MuiThemeProvider>\n  );\n};\n\nexport default WithTheme;\n","import { combineReducers } from 'redux';\nimport blackjack from './modules/blackjack';\nimport connect4 from './modules/connect4';\nimport dnd from './modules/dnd';\nimport git from './modules/git';\nimport gqlToken from './modules/gqlToken';\nimport players from './modules/players';\nimport poker from './modules/poker';\nimport slots from './modules/slots';\nimport theme from './modules/theme';\nimport ticTacToe from './modules/ticTacToe';\nimport turn from './modules/turn';\nimport yahtzee from './modules/yahtzee';\n\nconst rootReducer = combineReducers({\n  blackjack,\n  connect4,\n  dnd,\n  git,\n  gqlToken,\n  players,\n  poker,\n  slots,\n  theme,\n  ticTacToe,\n  turn,\n  yahtzee,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, Store } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport localForage from 'localforage';\n\nimport { DBRootState } from './types';\nimport rootReducer from '.';\nimport initialState from './initialState';\n\n/** funtion to read 'state' value from local storage and return it, or default state */\nexport const loadState = async (): Promise<DBRootState> => localForage\n  .getItem('state')\n  .then((state) => (state ? { ...initialState, ...state as DBRootState } : initialState))\n  // if there are any issues, just load default state\n  .catch(() => initialState);\n\n/** funtion to save 'state' value to local storage */\nexport const saveState = (state: DBRootState): Promise<void | DBRootState> => localForage\n  .setItem('state', state)\n  // eslint-disable-next-line no-console\n  .catch((e) => console.error('state to db save failed: ', e));\n\nconst composeEnhancers = composeWithDevTools({ trace: true, traceLimit: 25 });\n\nexport const configureStore = (state: DBRootState): Store => createStore(\n  rootReducer,\n  state,\n  composeEnhancers(applyMiddleware(thunk)),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport throttle from 'lodash/throttle';\nimport { Store } from 'redux';\nimport WithTheme from './WithTheme';\nimport { loadState, saveState, configureStore } from '../store/configureStore';\nimport LoadingSpinner from '../components/common/loading-spinner';\n\ninterface WithStoreState {\n  store?: Store;\n}\n\n/** App class that wraps higher level components of the application */\nclass WithStore extends React.PureComponent<Record<string, unknown>, WithStoreState> {\n  constructor(props: Record<string, unknown>) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount(): void {\n    loadState()\n      .then(configureStore)\n      .then((store) => {\n        store.subscribe(throttle(() => saveState(store.getState()), 1000));\n        this.setState({ store });\n      });\n  }\n\n  render(): React.ReactNode {\n    const { store } = this.state;\n    return store ? (\n      <Provider store={store}>\n        <WithTheme />\n      </Provider>\n    ) : <LoadingSpinner />;\n  }\n}\n\nexport default WithStore;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './wrappers/WithStore';\nimport { register } from './serviceWorker';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\nregister();\n","import { Action } from 'redux';\nimport { DBTurn } from '../types';\nimport initialState from '../initialState';\n\n// --------------------     Actions     -------------------- //\nexport enum ta {\n  INCR_PLAYER = 'casino/turn/INCR',\n  INCR_HAND = 'casino/turn/INCR_HAND',\n  RESET = 'casino/turn/RESET',\n}\nconst { INCR_PLAYER, INCR_HAND, RESET } = ta;\n\n// --------------------     Action Creators     -------------------- //\n/** increment player turn in Turn DB */\nexport const incrPlayerTurn = (): Action<typeof INCR_PLAYER> => ({ type: INCR_PLAYER });\n/** increment hand turn in Turn DB */\nexport const incrHandTurn = (): Action<typeof INCR_HAND> => ({ type: INCR_HAND });\n/** reset back to first player in Turn DB */\nexport const resetTurn = (): Action<typeof RESET> => ({ type: RESET });\n\n// --------------------     Reducers     -------------------- //\nexport default function reducer(state: DBTurn = initialState.turn, action: Action<ta>): DBTurn {\n  switch (action.type) {\n    case INCR_PLAYER:\n      return { ...state, ...{ player: state.player + 1, hand: 0 }};\n    case INCR_HAND:\n      return { ...state, ...{ hand: state.hand + 1 }};\n    case RESET:\n      return { ...state, ...{ player: 0, hand: 0 }};\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n","import { Color } from '@material-ui/core';\n\n// --------------------     blackjack     -------------------- //\nexport enum GameFunctions {\n  NEW_GAME = 'New Game',\n  FINISH_BETTING = 'Finish Betting',\n  STAY = 'Stay',\n  HIT = 'Hit',\n  DOUBLE = 'Double',\n  SPLIT = 'Split',\n}\n\nexport interface DBBlackjack {\n  gameFunctions: string[];\n  hasFunctions: boolean;\n  hideHands: boolean;\n}\n\n// --------------------     connect4     -------------------- //\nexport enum C4Turn {\n  EMPTY = 0,\n  RED = 1,\n  BLACK = 2,\n}\nexport interface DBConnect4 {\n  board: number[][];\n  winner?: number;\n  line: [number | undefined, [number, number][] | undefined, [number, number][] | undefined];\n  turn: C4Turn;\n}\n\n// --------------------     dnd     -------------------- //\nexport interface Briefcase {\n  on: boolean;\n  loc: number;\n  val: number;\n}\nexport interface DBDND {\n  board: Briefcase[];\n  turn: number;\n  playerChoice?: Briefcase;\n  casesToOpen: number;\n  sum: number;\n  numCases: number;\n  offer: number;\n  dndOpen: boolean;\n  isOver: boolean;\n}\nexport const briefcasesToOpen = 6;\n\n// --------------------     git     -------------------- //\nexport type BranchPrefixes = 'chores' | 'epics' | 'features' | 'fixes';\nexport type CasePreferences = 'snake_case' | 'kebab-case' | 'camelCase' | 'No Changes';\n\nexport interface DBGit {\n  storyID: string;\n  branchMessage: string;\n  branchPrefix: BranchPrefixes;\n  casePreference: CasePreferences;\n  commitPrefix: boolean;\n}\n\n// --------------------     players     -------------------- //\nexport interface DBCard {\n  name: string;\n  suit: string;\n  weight: number;\n}\nexport interface DBHand {\n  weight?: number;\n  soft?: boolean;\n  cards: DBCard[];\n}\nexport interface DBPlayer {\n  hands: DBHand[];\n  id: number;\n  isBot: boolean;\n  money: number;\n  status: string;\n  name: string;\n  bet: number;\n}\n\n// --------------------     poker     -------------------- //\nexport enum PokerGameFunctions {\n  DISCARD_CARDS = 'Discard Cards',\n  END_TURN = 'End Turn',\n  NEW_GAME = 'New Game',\n  START_GAME = 'Start Game',\n}\nexport interface DBPoker {\n  gameFunctions: PokerGameFunctions[];\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  gameOver: boolean;\n}\n\n// --------------------     slots     -------------------- //\nexport enum DBSlotOptions {\n  EMPTY = ' ',\n  CHERRY = 'C',\n  BAR = '—',\n  DOUBLE_BAR = '=',\n  TRIPLE_BAR = 'Ξ',\n  SEVEN = '7',\n  JACKPOT = 'J',\n}\nexport type DBSlotDisplay = [DBSlotOptions, DBSlotOptions, DBSlotOptions];\n\n// --------------------     theme     -------------------- //\nexport interface DBUITheme {\n  type: 'light' | 'dark';\n  primary: Color;\n  secondary: Color;\n}\n\n// --------------------     ticTacToe     -------------------- //\nexport interface DBHistoryEntry {\n  board: string[] | undefined[];\n  location?: number;\n}\nexport interface DBTicTacToe {\n  history: DBHistoryEntry[];\n  turn: string;\n  step: number;\n}\n\n// --------------------     turn     -------------------- //\nexport interface DBTurn {\n  player: number;\n  hand: number;\n}\n\n// --------------------     yahtzee     -------------------- //\nexport type Dice = 0 | 1 | 2 | 3 | 4 | 5 | 6;\nexport interface DBYahtzee {\n  roll: Dice;\n  values: Dice[];\n  saved: Dice[];\n  turn: number;\n  showScoreButtons: boolean;\n  hasScored: boolean;\n  topScores: number[];\n  bottomScores: number[];\n  scores: number[];\n}\n\n// --------------------     z-root     -------------------- //\nexport interface DBRootState {\n  blackjack: DBBlackjack;\n  connect4: DBConnect4;\n  dnd: DBDND;\n  git: DBGit;\n  gqlToken: string;\n  players: DBPlayer[];\n  poker: DBPoker;\n  theme: DBUITheme;\n  ticTacToe: DBTicTacToe;\n  turn: DBTurn;\n  yahtzee: DBYahtzee;\n  slots: DBSlotDisplay[];\n}\n","import localForage from 'localforage';\nimport { DBCard } from '../store/types';\n\nconst NEW_DECK: DBCard[] = [\n  { name: '2', weight: 2, suit: '♣' }, { name: '3', weight: 3, suit: '♣' },\n  { name: '4', weight: 4, suit: '♣' }, { name: '5', weight: 5, suit: '♣' },\n  { name: '6', weight: 6, suit: '♣' }, { name: '7', weight: 7, suit: '♣' },\n  { name: '8', weight: 8, suit: '♣' }, { name: '9', weight: 9, suit: '♣' },\n  { name: '10', weight: 10, suit: '♣' }, { name: 'J', weight: 11, suit: '♣' },\n  { name: 'Q', weight: 12, suit: '♣' }, { name: 'K', weight: 13, suit: '♣' },\n  { name: 'A', weight: 14, suit: '♣' }, { name: '2', weight: 2, suit: '♦' },\n  { name: '3', weight: 3, suit: '♦' }, { name: '4', weight: 4, suit: '♦' },\n  { name: '5', weight: 5, suit: '♦' }, { name: '6', weight: 6, suit: '♦' },\n  { name: '7', weight: 7, suit: '♦' }, { name: '8', weight: 8, suit: '♦' },\n  { name: '9', weight: 9, suit: '♦' }, { name: '10', weight: 10, suit: '♦' },\n  { name: 'J', weight: 11, suit: '♦' }, { name: 'Q', weight: 12, suit: '♦' },\n  { name: 'K', weight: 13, suit: '♦' }, { name: 'A', weight: 14, suit: '♦' },\n  { name: '2', weight: 2, suit: '♥' }, { name: '3', weight: 3, suit: '♥' },\n  { name: '4', weight: 4, suit: '♥' }, { name: '5', weight: 5, suit: '♥' },\n  { name: '6', weight: 6, suit: '♥' }, { name: '7', weight: 7, suit: '♥' },\n  { name: '8', weight: 8, suit: '♥' }, { name: '9', weight: 9, suit: '♥' },\n  { name: '10', weight: 10, suit: '♥' }, { name: 'J', weight: 11, suit: '♥' },\n  { name: 'Q', weight: 12, suit: '♥' }, { name: 'K', weight: 13, suit: '♥' },\n  { name: 'A', weight: 14, suit: '♥' }, { name: '2', weight: 2, suit: '♠' },\n  { name: '3', weight: 3, suit: '♠' }, { name: '4', weight: 4, suit: '♠' },\n  { name: '5', weight: 5, suit: '♠' }, { name: '6', weight: 6, suit: '♠' },\n  { name: '7', weight: 7, suit: '♠' }, { name: '8', weight: 8, suit: '♠' },\n  { name: '9', weight: 9, suit: '♠' }, { name: '10', weight: 10, suit: '♠' },\n  { name: 'J', weight: 11, suit: '♠' }, { name: 'Q', weight: 12, suit: '♠' },\n  { name: 'K', weight: 13, suit: '♠' }, { name: 'A', weight: 14, suit: '♠' },\n];\n\n/** immutably get a copy of new deck O(N) */\nconst getNewDeck = (): DBCard[] => NEW_DECK.map((card) => ({ ...card }));\n\n/** get immutable copy of deck O(N) */\nconst getDeck = (): Promise<DBCard[]> => localForage\n  .getItem('deck')\n  .then((data: unknown) => (data as DBCard[] || getNewDeck()))\n  .catch(() => getNewDeck());\n\n/** immutably update deck O(N) */\nconst setDeck = (deck: DBCard[]): Promise<DBCard[] | null> => localForage\n  .setItem('deck', deck)\n  .catch(() => null);\n\n/** randomize order of the cards O(N + M) */\nconst shuffle = (): Promise<DBCard[] | null> => {\n  // get a new deck\n  const shuffledDeck = getNewDeck();\n  // shuffle the cards\n  for (let i = 0; i < 100; i += 1) {\n    const j = Math.floor(Math.random() * 52);\n    const k = Math.floor(Math.random() * 52);\n    const temp = shuffledDeck[j];\n    shuffledDeck[j] = shuffledDeck[k];\n    shuffledDeck[k] = temp;\n  }\n  // update deck state\n  return setDeck(shuffledDeck);\n};\n\n/** return an array of a specified length O(2N) */\nconst deal = (num = 0): Promise<DBCard[]> => {\n  const cards: DBCard[] = [];\n  return getDeck()\n    .then((deck: DBCard[]): DBCard[] => {\n      // verify we have enough cards\n      if (num > deck.length) {\n        return deck;\n      }\n      // get the cards\n      for (let i = 0; i < num; i += 1) {\n        const card: DBCard | undefined = deck.pop();\n        card && cards.push(card);\n      }\n      return deck;\n    })\n    .then((deck: DBCard[]) => setDeck(deck))\n    .then(() => cards);\n};\n\n/** sort by card weight */\nconst rankSort = (a: DBCard, b: DBCard): number => a.weight - b.weight;\n\nexport default { shuffle, deal, rankSort };\n","import { DBSlotDisplay, DBSlotOptions as SO } from '../store/types';\n\ninterface Reel {\n  symbol: SO;\n  start: number;\n  stop: number;\n}\n\nconst NUM_REELS = 3;\n\n/** options to be displayed on slot machine */\nconst reels: Reel[] = [\n  { symbol: SO.CHERRY, start: 1, stop: 2 },\n  { symbol: SO.EMPTY, start: 3, stop: 7 },\n  { symbol: SO.BAR, start: 8, stop: 12 },\n  { symbol: SO.EMPTY, start: 13, stop: 17 },\n  { symbol: SO.SEVEN, start: 18, stop: 25 },\n  { symbol: SO.EMPTY, start: 26, stop: 30 },\n  { symbol: SO.BAR, start: 31, stop: 35 },\n  { symbol: SO.EMPTY, start: 36, stop: 41 },\n  { symbol: SO.CHERRY, start: 42, stop: 43 },\n  { symbol: SO.EMPTY, start: 44, stop: 49 },\n  { symbol: SO.DOUBLE_BAR, start: 50, stop: 56 },\n  { symbol: SO.EMPTY, start: 57, stop: 62 },\n  { symbol: SO.CHERRY, start: 63, stop: 63 },\n  { symbol: SO.EMPTY, start: 64, stop: 69 },\n  { symbol: SO.DOUBLE_BAR, start: 70, stop: 75 },\n  { symbol: SO.EMPTY, start: 76, stop: 81 },\n  { symbol: SO.BAR, start: 82, stop: 87 },\n  { symbol: SO.EMPTY, start: 88, stop: 93 },\n  { symbol: SO.TRIPLE_BAR, start: 94, stop: 104 },\n  { symbol: SO.EMPTY, start: 105, stop: 115 },\n  { symbol: SO.JACKPOT, start: 116, stop: 117 },\n  { symbol: SO.EMPTY, start: 118, stop: 128 },\n];\n\n/** prepare the slot machine */\nfunction prepareSlotMachine(): DBSlotDisplay[] {\n  const machine: DBSlotDisplay[] = [];\n  reels.forEach((reel: Reel, i: number) => {\n    // wrap the reels\n    const prev = i - 1 > 0 ? i - 1 : reels.length - 1;\n    const next = (i + 1) % reels.length;\n    // create the machine\n    for (let j = reel.start; j <= reel.stop; j += 1) {\n      machine.push([reels[prev].symbol, reel.symbol, reels[next].symbol]);\n    }\n  });\n  return machine;\n}\n\nconst machine = prepareSlotMachine();\n\n/** spin the slot machine and get a result */\nexport function spin(): DBSlotDisplay {\n  return machine[Math.floor(Math.random() * machine.length)];\n}\n\n/** Pull the slot machine handle, returns info needed for display */\nexport const pullHandle = (): DBSlotDisplay[] => {\n  const reel = [];\n  for (let i = 0; i < NUM_REELS; i += 1) {\n    reel[i] = spin();\n  }\n  return reel;\n};\n\n/** evaluate slot machine based of 3 reels */\nexport const getPayout = (reel: DBSlotDisplay[], bet: number): number => {\n  // for bar check\n  const bars = [SO.BAR, SO.DOUBLE_BAR, SO.TRIPLE_BAR];\n  // get reel values\n  const r0 = reel[0][1];\n  const r1 = reel[1][1];\n  const r2 = reel[2][1];\n  const fReel = [r0, r1, r2];\n  // check if they match\n  const m01 = r0 === r1;\n  const m02 = r0 === r2;\n  // if we have 3 of a kind\n  if (m01 && m02) {\n    switch (r0) {\n      case SO.JACKPOT:\n        return 1666 * bet;\n      case SO.SEVEN:\n        return 300 * bet;\n      case SO.TRIPLE_BAR:\n        return 100 * bet;\n      case SO.DOUBLE_BAR:\n        return 50 * bet;\n      case SO.BAR:\n        return 25 * bet;\n      case SO.CHERRY:\n        return 12 * bet;\n      default:\n        return 0;\n    }\n  } else if (bars.includes(r0) && bars.includes(r1) && bars.includes(r2)) {\n    // if we have 3 of any bar\n    return 12 * bet;\n  } else if (fReel.includes(SO.CHERRY, fReel.indexOf(SO.CHERRY) + 1)) {\n    // if we have 2 cherries\n    return 6 * bet;\n  } else if (fReel.includes(SO.CHERRY)) {\n    // if we have 1 cherry\n    return 3 * bet;\n  }\n  return 0;\n};\n\nexport default {\n  pullHandle,\n  getPayout,\n};\n","import cyan from '@material-ui/core/colors/cyan';\nimport deepOrange from '@material-ui/core/colors/deepOrange';\nimport { pullHandle } from '../apis/SlotMachine';\n\nimport {\n  DBGit, DBPlayer, DBBlackjack, GameFunctions,\n  DBUITheme, DBTurn, DBRootState, DBSlotDisplay,\n  DBTicTacToe, DBConnect4, C4Turn, DBYahtzee, DBDND,\n  briefcasesToOpen, Briefcase, PokerGameFunctions, DBPoker,\n} from './types';\n\n// --------------------     helpers     -------------------- //\n// blackjack\nexport const newBlackjackGame = (): DBBlackjack => ({\n  gameFunctions: [GameFunctions.FINISH_BETTING],\n  hasFunctions: false,\n  hideHands: true,\n});\n// connect4\nconst NEW_BOARD = [\n  [0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0],\n];\nexport const newConnect4Game = (): DBConnect4 => ({\n  board: NEW_BOARD.reduce(\n    (acc: number[][], row) => {\n      acc.push([...row]);\n      return acc;\n    },\n    [],\n  ),\n  winner: undefined,\n  line: [undefined, undefined, undefined],\n  turn: C4Turn.RED,\n});\n\n// dnd\nconst getNewState = (): DBDND => ({\n  board: [\n    { val: 1, loc: 1, on: true }, { val: 2, loc: 2, on: true }, { val: 5, loc: 3, on: true },\n    { val: 10, loc: 4, on: true }, { val: 25, loc: 5, on: true }, { val: 50, loc: 6, on: true },\n    { val: 75, loc: 7, on: true }, { val: 100, loc: 8, on: true }, { val: 200, loc: 9, on: true },\n    { val: 300, loc: 10, on: true }, { val: 400, loc: 11, on: true }, { val: 500, loc: 12, on: true },\n    { val: 750, loc: 13, on: true }, { val: 1000, loc: 14, on: true }, { val: 5000, loc: 15, on: true },\n    { val: 10000, loc: 16, on: true }, { val: 25000, loc: 17, on: true }, { val: 50000, loc: 18, on: true },\n    { val: 75000, loc: 19, on: true }, { val: 100000, loc: 20, on: true }, { val: 200000, loc: 21, on: true },\n    { val: 300000, loc: 22, on: true }, { val: 400000, loc: 23, on: true }, { val: 500000, loc: 24, on: true },\n    { val: 750000, loc: 25, on: true }, { val: 1000000, loc: 26, on: true },\n  ],\n  turn: 1,\n  playerChoice: undefined,\n  casesToOpen: briefcasesToOpen,\n  sum: 0,\n  numCases: 0,\n  offer: 0,\n  dndOpen: false,\n  isOver: false,\n});\n/** function that takes an array and shuffles it's elements */\nconst shuffle = (arr: Briefcase[]): void => {\n  // shuffle values of briefcases\n  for (let i = 0; i < 100; i += 1) {\n    // get to random briefcases\n    const j = Math.floor(Math.random() * arr.length);\n    const k = Math.floor(Math.random() * arr.length);\n    // swap the briefcases\n    const temp = arr[j].loc;\n    arr[j].loc = arr[k].loc;\n    arr[k].loc = temp;\n  }\n};\n/** function to get a new game state */\nexport const newDNDGame = (): DBDND => {\n  const state = getNewState();\n  // mix up board\n  shuffle(state.board);\n  // set all flags to un-touched\n  state.board.forEach((bc) => {\n    // get sum and count of cases remaining\n    state.sum += bc.val;\n    state.numCases += 1;\n    // reset opened flag\n    bc.on = true;\n  });\n  // sort function for the briefcases\n  state.board.sort((a, b) => a.loc - b.loc);\n  return state;\n};\n\n// player\nexport const newPlayer = (id: number, name = 'Bot', isBot = true): DBPlayer => ({\n  id,\n  name,\n  isBot,\n  status: '',\n  money: 100,\n  bet: 5,\n  hands: [],\n});\n\n// poker\n/** function to generate the state of a new game */\nexport const newPokerGameState = (): DBPoker => ({\n  gameFunctions: [PokerGameFunctions.START_GAME],\n  cardsToDiscard: [],\n  hideHands: true,\n  gameOver: false,\n});\n\n// tic-tac-toe\nexport const X = 'X';\nexport const O = 'O';\nexport const EMPTY = undefined;\nexport const newTicTacToe = (): DBTicTacToe => ({\n  history: [{ board: Array(9).fill(EMPTY) }],\n  turn: X,\n  step: 0,\n});\n\n// yahtzee\nexport const newYahtzee = (): Omit<DBYahtzee, 'scores'> => ({\n  roll: 0,\n  values: [0, 0, 0, 0, 0],\n  saved: [],\n  turn: 0,\n  showScoreButtons: false,\n  hasScored: false,\n  topScores: [-1, -1, -1, -1, -1, -1],\n  bottomScores: [-1, -1, -1, -1, -1, -1, -1],\n});\n\n// --------------------     initial states     -------------------- //\nconst blackjack = newBlackjackGame();\nconst connect4 = newConnect4Game();\nconst dnd = newDNDGame();\nconst git: DBGit = {\n  storyID: '',\n  branchMessage: '',\n  branchPrefix: 'features',\n  casePreference: 'snake_case',\n  commitPrefix: true,\n};\nconst gqlToken = '';\nconst players: DBPlayer[] = [\n  newPlayer(1, 'Ken', false),\n  newPlayer(2),\n  newPlayer(3),\n  newPlayer(4),\n  newPlayer(5),\n  newPlayer(6),\n  newPlayer(0, 'Dealer', true),\n];\nconst poker = newPokerGameState();\nconst slots: DBSlotDisplay[] = pullHandle();\nconst theme: DBUITheme = {\n  primary: cyan,\n  secondary: deepOrange,\n  type: 'dark',\n};\nconst ticTacToe: DBTicTacToe = newTicTacToe();\nconst turn: DBTurn = { player: 0, hand: 0 };\nconst yahtzee: DBYahtzee = { ...newYahtzee(), scores: []};\n\n// --------------------     export     -------------------- //\nexport default {\n  blackjack,\n  connect4,\n  dnd,\n  git,\n  gqlToken,\n  players,\n  poker,\n  slots,\n  theme,\n  ticTacToe,\n  turn,\n  yahtzee,\n} as DBRootState;\n","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst containerStyles: React.CSSProperties = {\n  display: 'block',\n  margin: 'auto',\n  marginTop: 40,\n};\n\nconst LoadingSpinner = React.memo(() => (\n  <CircularProgress size={100} style={containerStyles} title=\"Loading Spinner\" />\n));\n\nexport default LoadingSpinner;\n","type ForEachCallback<T> = (item: T, index: number, array: T[]) => Promise<void>;\nasync function asyncForEach<T>(array: T[], callback: ForEachCallback<T>): Promise<void> {\n  for (let index = 0; index < array.length; index += 1) {\n    // eslint-disable-next-line no-await-in-loop\n    await callback(array[index], index, array);\n  }\n}\n\nexport default asyncForEach;\n","import { Action } from 'redux';\nimport { DBGit, CasePreferences, BranchPrefixes } from '../types';\nimport initialState from '../initialState';\n\n// --------------------     Actions     -------------------- //\nconst SET_KEY = '@resume/git/SET_KEY';\nconst SET_BRANCH_MESSAGE = '@resume/git/SET_BRANCH_MESSAGE';\nconst SET_BRANCH_PREFIX = '@resume/git/SET_BRANCH_PREFIX';\nconst SET_CASE_PREFERENCE = '@resume/git/SET_CASE_PREFERENCE';\nconst SET_COMMIT_PREFIX = '@resume/git/SET_COMMIT_PREFIX';\n\n// --------------------     Action Creators     -------------------- //\ninterface SetKeyAction extends Action<typeof SET_KEY> { storyID: string }\n/** update the story id in Git DB */\nexport function setKey(storyID = ''): SetKeyAction {\n  return { type: SET_KEY, storyID };\n}\n\ninterface SetBranchMessageAction extends Action<typeof SET_BRANCH_MESSAGE> { branchMessage: string }\n/** update the branch message in Git DB */\nexport function setBranchMessage(branchMessage = ''): SetBranchMessageAction {\n  return { type: SET_BRANCH_MESSAGE, branchMessage };\n}\n\ninterface SetBranchPrefixAction extends Action<typeof SET_BRANCH_PREFIX> { branchPrefix: BranchPrefixes }\n/** update the branch prefix in Git DB */\nexport function setBranchPrefix(branchPrefix = 'features' as BranchPrefixes): SetBranchPrefixAction {\n  return { type: SET_BRANCH_PREFIX, branchPrefix };\n}\n\ninterface SetCasePreferenceAction extends Action<typeof SET_CASE_PREFERENCE> { casePreference: CasePreferences }\n/** update the casing of the branch in Git DB */\nexport function setCasePreference(casePreference = 'No Changes' as CasePreferences): SetCasePreferenceAction {\n  return { type: SET_CASE_PREFERENCE, casePreference };\n}\n\ninterface SetCommitPrefixAction extends Action<typeof SET_COMMIT_PREFIX> { commitPrefix: boolean }\n/** update commit text in Git DB */\nexport function setCommitPrefix(isSet = true): SetCommitPrefixAction {\n  return { type: SET_COMMIT_PREFIX, commitPrefix: isSet };\n}\n\n// --------------------     Reducers     -------------------- //\ntype GitActions = SetKeyAction | SetBranchMessageAction | SetBranchPrefixAction | SetCasePreferenceAction | SetCommitPrefixAction;\nexport default function reducer(state: DBGit = initialState.git, action: GitActions): DBGit {\n  switch (action.type) {\n    case SET_KEY:\n      return { ...state, ...{ storyID: action.storyID }};\n    case SET_BRANCH_PREFIX:\n      return { ...state, ...{ branchPrefix: action.branchPrefix }};\n    case SET_BRANCH_MESSAGE:\n      return { ...state, ...{ branchMessage: action.branchMessage }};\n    case SET_CASE_PREFERENCE:\n      return { ...state, ...{ casePreference: action.casePreference }};\n    case SET_COMMIT_PREFIX:\n      return { ...state, ...{ commitPrefix: action.commitPrefix }};\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n","import { Action, Dispatch } from 'redux';\nimport { DBPoker, DBPlayer, PokerGameFunctions as PGF } from '../types';\nimport initialState, { newPokerGameState } from '../initialState';\nimport { resetTurn, incrPlayerTurn, ta } from './turn';\nimport { resetStatus, PlayerAction } from './players';\n\n// --------------------     Actions     -------------------- //\nconst UPDATE_DISCARD_CARDS = 'casino/poker/UPDATE_DISCARD_CARDS';\nenum pa {\n  NEW_GAME = 'casino/poker/NEW_GAME',\n  START_GAME = 'casino/poker/START_GAME',\n  END_TURN = 'casino/poker/END_TURN',\n  END_GAME = 'casino/poker/END_GAME',\n  DISCARD_CARDS = 'casino/poker/DISCARD_CARDS',\n}\nconst {\n  NEW_GAME, START_GAME, END_TURN, END_GAME,\n  DISCARD_CARDS,\n} = pa;\n\n// --------------------     Action Creators     -------------------- //\n/** start a new game in Poker DB */\nconst newGame = (): Action<typeof NEW_GAME> => ({ type: NEW_GAME });\n/** deal cards and begin play (after betting) in Poker DB */\nexport const startPokerGame = (): Action<typeof START_GAME> => ({ type: START_GAME });\n/** move to the next player in Poker DB */\nconst endTurn = (): Action<typeof END_TURN> => ({ type: END_TURN });\n/** end the game by updating a flag in Poker DB */\nexport const endPokerGame = (): Action<typeof END_GAME> => ({ type: END_GAME });\n/** reset cards to discard back to empty in Poker DB */\nexport const discardCards = (): Action<typeof DISCARD_CARDS> => ({ type: DISCARD_CARDS });\n\ninterface UpdateCardsToDiscardAction extends Action<typeof UPDATE_DISCARD_CARDS> { cardsToDiscard: number[] }\n/** mark a card for discard in Poker DB */\nexport const updateCardsToDiscard = (cardsToDiscard: number[]): UpdateCardsToDiscardAction => ({ type: UPDATE_DISCARD_CARDS, cardsToDiscard });\n\n// --------------------     Reducers     -------------------- //\ntype PokerActions = Action<pa> | UpdateCardsToDiscardAction;\nexport default function reducer(state: DBPoker = initialState.poker, action: PokerActions): DBPoker {\n  switch (action.type) {\n    case NEW_GAME:\n      return { ...newPokerGameState() };\n    case START_GAME:\n      return {\n        ...state,\n        gameFunctions: [PGF.DISCARD_CARDS],\n        hideHands: false,\n      };\n    case END_TURN:\n      return {\n        ...state,\n        gameFunctions: [PGF.DISCARD_CARDS],\n        cardsToDiscard: [],\n      };\n    case END_GAME:\n      return {\n        ...state,\n        gameFunctions: [PGF.NEW_GAME],\n        gameOver: true,\n      };\n    case DISCARD_CARDS:\n      return {\n        ...state,\n        gameFunctions: [PGF.END_TURN],\n        cardsToDiscard: [],\n      };\n    case UPDATE_DISCARD_CARDS:\n      return {\n        ...state,\n        cardsToDiscard: action.cardsToDiscard,\n      };\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n/** start a new game in Poker DB */\nexport function newPokerGame(players: DBPlayer[]) {\n  return (dispatch: Dispatch): Promise<(Action<ta.RESET> | Action<pa.NEW_GAME> | PlayerAction)[]> => {\n    const promises: (Action<ta.RESET> | Action<pa.NEW_GAME> | PlayerAction)[] = [];\n    promises.push(dispatch(newGame()));\n    promises.push(dispatch(resetTurn()));\n    players.forEach((player) => promises.push(dispatch(resetStatus(player.id))));\n    return Promise.all(promises);\n  };\n}\n\n/** move to the next player in Poker DB and Turn DB */\nexport function endPokerTurn() {\n  return async (dispatch: Dispatch): Promise<void> => {\n    await dispatch(endTurn());\n    await dispatch(incrPlayerTurn());\n  };\n}\n","import { Action } from 'redux';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport deepOrange from '@material-ui/core/colors/deepOrange';\nimport cyan from '@material-ui/core/colors/cyan';\n\nimport { DBUITheme } from '../types';\nimport initialState from '../initialState';\n\n// --------------------     Actions     -------------------- //\nenum ta {\n  DARK_THEME = 'resume/theme/DARK_THEME',\n  LIGHT_THEME = 'resume/theme/LIGHT_THEME',\n}\nconst { DARK_THEME, LIGHT_THEME } = ta;\n\n// --------------------     Action Creators     -------------------- //\n/** update to dark theme in Theme DB */\nexport const displayDarkTheme = (): Action<typeof DARK_THEME> => ({ type: DARK_THEME });\n/** update to light theme in Theme DB */\nexport const displayLightTheme = (): Action<typeof LIGHT_THEME> => ({ type: LIGHT_THEME });\n\n// --------------------     Reducers     -------------------- //\nexport default function reducer(state: DBUITheme = initialState.theme, action: Action<ta>): DBUITheme {\n  switch (action.type) {\n    case DARK_THEME:\n      return { ...state, ...{ type: 'dark', primary: cyan, secondary: deepOrange }};\n    case LIGHT_THEME:\n      return { ...state, ...{ type: 'light', primary: blueGrey, secondary: deepOrange }};\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n","import { Dispatch, Action } from 'redux';\nimport {\n  DBBlackjack, DBPlayer, DBHand, DBTurn,\n} from '../types';\nimport initialState, { newBlackjackGame } from '../initialState';\nimport {\n  resetStatus,\n  splitHand as pSplitHand,\n  drawCard,\n  WeighFunc,\n  updateBet,\n} from './players';\nimport {\n  resetTurn, incrHandTurn, incrPlayerTurn, ta,\n} from './turn';\n\n// --------------------     Actions     -------------------- //\nconst UPDATE_GAME_FUNCTIONS = '@casino/blackjack/UPDATE_GAME_FUNCTIONS';\nconst UPDATE_HIDE_HANDS = '@casino/blackjack/UPDATE_HIDE_HANDS';\nconst UPDATE_HAS_FUNCTIONS = '@casino/blackjack/UPDATE_HAS_FUNCTIONS';\n\n// -------------------- Action Creators     -------------------- //\ninterface UpdateGameFunctionsAction extends Action<typeof UPDATE_GAME_FUNCTIONS> { gameFunctions: string[] }\n/** update gameFunctions in Blackjack DB */\nexport const updateGameFunctions = (gameFunctions: string[]): UpdateGameFunctionsAction => ({ type: UPDATE_GAME_FUNCTIONS, gameFunctions });\n\ninterface UpdateHideHandsAction extends Action<typeof UPDATE_HIDE_HANDS> { hideHands: boolean }\n/** update hideHands in Blackjack DB */\nexport const updateHideHands = (hideHands: boolean): UpdateHideHandsAction => ({ type: UPDATE_HIDE_HANDS, hideHands });\n\ninterface UpdateHasFunctionsAction extends Action<typeof UPDATE_HAS_FUNCTIONS> { hasFunctions: boolean }\n/** update hasFunctions in Blackjack DB */\nexport const updateHasFunctions = (hasFunctions: boolean): UpdateHasFunctionsAction => ({ type: UPDATE_HAS_FUNCTIONS, hasFunctions });\n\n// --------------------     Reducers     -------------------- //\ntype BlackjackAction = UpdateGameFunctionsAction | UpdateHideHandsAction | UpdateHasFunctionsAction;\nexport default function reducer(state: DBBlackjack = initialState.blackjack, action: BlackjackAction): DBBlackjack {\n  switch (action.type) {\n    case UPDATE_GAME_FUNCTIONS:\n      return { ...state, gameFunctions: action.gameFunctions };\n    case UPDATE_HIDE_HANDS:\n      return { ...state, hideHands: action.hideHands };\n    case UPDATE_HAS_FUNCTIONS:\n      return { ...state, hasFunctions: action.hasFunctions };\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n/** start a new game in Blackjack DB */\nexport function setNewGame(players: DBPlayer[]) {\n  return (dispatch: Dispatch): Promise<(UpdateGameFunctionsAction | UpdateHideHandsAction | UpdateHasFunctionsAction | Action<ta.RESET>)[]> => {\n    const { gameFunctions, hideHands, hasFunctions } = newBlackjackGame();\n    const promises = [];\n    promises.push(dispatch(updateGameFunctions(gameFunctions)));\n    promises.push(dispatch(updateHasFunctions(hasFunctions)));\n    promises.push(dispatch(updateHideHands(hideHands)));\n    promises.push(dispatch(resetTurn()));\n    players.forEach((player) => promises.push(dispatch(resetStatus(player.id))));\n    return Promise.all(promises);\n  };\n}\n/** split hands of provided player/hand in Blackjack DB */\nexport function splitHand(hands: DBHand[], id: number, hNum: number, weigh: WeighFunc) {\n  return async (dispatch: Dispatch<any>): Promise<void> => {\n    await dispatch(pSplitHand(hands, id, hNum, weigh));\n    await dispatch(updateHasFunctions(false));\n  };\n}\n/** get a new card for turn hand in Blackjack DB */\nexport function hitHand(hands: DBHand[], id: number, hNum: number, weigh: WeighFunc) {\n  return async (dispatch: Dispatch<any>): Promise<void> => {\n    await dispatch(drawCard(hands, id, hNum, 1, weigh));\n    await dispatch(updateHasFunctions(false));\n  };\n}\n/** go to the next turn in Blackjack DB */\nexport function stayHand(readyForNextPlayer: boolean) {\n  return async (dispatch: Dispatch): Promise<void> => {\n    readyForNextPlayer\n      ? await dispatch(incrHandTurn())\n      : await dispatch(incrPlayerTurn());\n    await dispatch(updateHasFunctions(false));\n  };\n}\n/** double your bet and get 1 card in Blackjack DB */\nexport function doubleHand(player: DBPlayer, turn: DBTurn, weigh: WeighFunc) {\n  return async (dispatch: Dispatch<any>): Promise<void> => {\n    const { id, bet, hands } = player;\n    const lastHand = hands.length - 1;\n\n    await dispatch(updateHasFunctions(true));\n    await dispatch(updateBet(id, bet * 2));\n    await dispatch(drawCard(hands, id, turn.hand, 1, weigh));\n    await dispatch(stayHand(turn.hand < lastHand));\n  };\n}\n","import { Action } from 'redux';\nimport { C4Turn, DBConnect4 } from '../types';\nimport initialState, { newConnect4Game } from '../initialState';\n\n// --------------------     Actions     -------------------- //\nconst NEW_GAME = '@casino/ticTacToe/NEW_GAME';\nconst UPDATE_TURN = '@casino/ticTacToe/UPDATE_TURN';\nconst UPDATE_EVAL = '@casino/ticTacToe/UPDATE_EVAL';\n\n// -------------------- Action Creators     -------------------- //\ntype NewGameAction = Action<typeof NEW_GAME>;\n/** start a new game in Connect4 DB */\nexport const newGame = (): NewGameAction => ({ type: NEW_GAME });\n\ninterface UpdateTurnAction extends Action<typeof UPDATE_TURN> { turn: C4Turn }\n/** change player turn/color in Connect4 DB */\nexport const updateTurn = (turn: C4Turn): UpdateTurnAction => ({ type: UPDATE_TURN, turn });\n\ninterface UpdateEvalAction extends Action<typeof UPDATE_EVAL> { winner: number; board: number[][] }\n/** update a winner and the board in Connect4 DB */\nexport const updateEval = (winner: number, board: number[][]): UpdateEvalAction => ({ type: UPDATE_EVAL, winner, board });\n\n// --------------------     Reducers     -------------------- //\ntype Connect4Actions = NewGameAction | UpdateTurnAction | UpdateEvalAction;\nexport default function reducer(state: DBConnect4 = initialState.connect4, action: Connect4Actions): DBConnect4 {\n  switch (action.type) {\n    case NEW_GAME:\n      return newConnect4Game();\n    case UPDATE_TURN:\n      return { ...state, turn: action.turn };\n    case UPDATE_EVAL:\n      return { ...state, winner: action.winner, board: action.board };\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n","import { Action, Dispatch } from 'redux';\nimport { DBDND, Briefcase } from '../types';\nimport initialState, { newDNDGame } from '../initialState';\nimport { payout, PlayerAction } from './players';\n\n// --------------------     Actions     -------------------- //\nconst NEW_GAME = '@casino/dnd/NEW_GAME';\nconst PLAYER_CHOICE = '@casino/dnd/PLAYER_CHOICE';\nconst OPEN_CASE = '@casino/dnd/OPEN_CASE';\nconst OPEN_OFFER = '@casino/dnd/OPEN_OFFER';\nconst NO_DEAL = '@casino/dnd/NO_DEAL';\nconst FINISH_GAME = '@casino/dnd/FINISH_GAME';\n\n// --------------------     Action Creators     -------------------- //\ntype NewGameAction = Action<typeof NEW_GAME>;\n/** set to a new game in Deal or No Deal DB */\nexport const newGame = (): NewGameAction => ({ type: NEW_GAME });\n\ninterface UpdatePlayerChoiceAction extends Action<typeof PLAYER_CHOICE> { playerChoice: Briefcase }\n/** update the player's case choice in Deal or No Deal DB */\nconst updatePlayerChoice = (playerChoice: Briefcase): UpdatePlayerChoiceAction => ({ type: PLAYER_CHOICE, playerChoice });\n\ninterface SetOpenCaseAction extends Action<typeof OPEN_CASE> {\n  board: Briefcase[];\n  sum: number;\n  numCases: number;\n  casesToOpen: number;\n}\n/** open a case and update game variables in Deal or No Deal DB */\nexport const setOpenCase = (board: Briefcase[], sum: number, numCases: number, casesToOpen: number): SetOpenCaseAction => ({\n  type: OPEN_CASE, board, sum, numCases, casesToOpen,\n});\n\ninterface SetOpenOfferAction extends Action<typeof OPEN_OFFER> { offer: number; casesToOpen: number }\n/** display the offer from the banker and open modal in Deal or No Deal DB */\nexport const setOpenOffer = (offer: number, casesToOpen: number): SetOpenOfferAction => ({ type: OPEN_OFFER, offer, casesToOpen });\n\ninterface SetNoDealAction extends Action<typeof NO_DEAL> { turn: number }\n/** reject the offer and continue playing in Deal or No Deal DB */\nexport const setNoDeal = (turn: number): SetNoDealAction => ({ type: NO_DEAL, turn });\n\ninterface FinishGameAction extends Action<typeof FINISH_GAME> { offer: number }\n/** finish the game in Deal or No Deal DB */\nconst finishGame = (offer: number): FinishGameAction => ({ type: FINISH_GAME, offer });\n\n// --------------------     Reducers     -------------------- //\ntype DNDActions = NewGameAction | UpdatePlayerChoiceAction | SetOpenCaseAction | SetOpenOfferAction | SetNoDealAction | FinishGameAction;\nexport default function reducer(state: DBDND = initialState.dnd, action: DNDActions): DBDND {\n  switch (action.type) {\n    case NEW_GAME:\n      return newDNDGame();\n    case PLAYER_CHOICE:\n      return { ...state, playerChoice: action.playerChoice };\n    case OPEN_CASE:\n      return {\n        ...state,\n        board: action.board,\n        sum: action.sum,\n        numCases: action.numCases,\n        casesToOpen: action.casesToOpen,\n      };\n    case OPEN_OFFER:\n      return {\n        ...state, offer: action.offer, casesToOpen: action.casesToOpen, dndOpen: true,\n      };\n    case NO_DEAL:\n      return { ...state, dndOpen: false, turn: action.turn + 1 };\n    case FINISH_GAME:\n      return {\n        ...state, dndOpen: false, isOver: true, offer: action.offer,\n      };\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n/** charge user to play and set player choice\n   * NOTE: avg (Expected win value) is 131477.62 / 1k = $132 */\nexport function setPlayerChoice(id: number, playerChoice: Briefcase) {\n  return (dispatch: Dispatch): Promise<[UpdatePlayerChoiceAction, PlayerAction]> => {\n    const promise1 = dispatch(updatePlayerChoice(playerChoice));\n    const promise2 = dispatch(payout(id, 'lose', -100));\n    return Promise.all([promise1, promise2]);\n  };\n}\n\n/** function to finish the game\n   * NOTE: payout to user offer / 1k */\nexport function setFinishGame(id: number, offer: number) {\n  return (dispatch: Dispatch): Promise<[PlayerAction, FinishGameAction]> => {\n    const promise1 = dispatch(payout(id, 'win', Math.round(offer / 1000)));\n    const promise2 = dispatch(finishGame(offer));\n    return Promise.all([promise1, promise2]);\n  };\n}\n","import { Action } from 'redux';\nimport initialState from '../initialState';\n\n// --------------------     Actions     -------------------- //\nconst SET_TOKEN = '@resume/graphql/SET_TOKEN';\n\n// --------------------     Action Creators     -------------------- //\ninterface SetTokenAction extends Action<typeof SET_TOKEN> { gqlToken: string }\nexport const setToken = (gqlToken = ''): SetTokenAction => ({ type: SET_TOKEN, gqlToken });\n\n// --------------------     Reducers     -------------------- //\ntype GQLActions = SetTokenAction;\nexport default function reducer(state: string = initialState.gqlToken, action: GQLActions): string {\n  switch (action.type) {\n    case SET_TOKEN:\n      return action.gqlToken;\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n","import { Dispatch, Action } from 'redux';\nimport { DBSlotDisplay } from '../types';\nimport initialState from '../initialState';\nimport SlotMachine from '../../apis/SlotMachine';\nimport { payout, PlayerAction } from './players';\n\n// --------------------     Actions     -------------------- //\nconst UPDATE = 'casino/slots/UPDATE';\n\n// -------------------- Action Creators     -------------------- //\ninterface UpdateSlotsAction extends Action<typeof UPDATE> { reel: DBSlotDisplay[] }\n/** update the slot reel in Slots DB */\nexport const updateSlots = (reel: DBSlotDisplay[]): UpdateSlotsAction => ({ type: UPDATE, reel });\n\n// --------------------     Reducers     -------------------- //\ntype SlotsActions = UpdateSlotsAction;\nexport default function reducer(state: DBSlotDisplay[] = initialState.slots, action: SlotsActions): DBSlotDisplay[] {\n  switch (action.type) {\n    case UPDATE:\n      return [...action.reel];\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n/** play the slots game, updating the slots reel in Slots DB and player/dealer money in Player DB */\nexport function updateDBSlotMachine(id: number, dealerId: number, bet: number) {\n  return (dispatch: Dispatch): Promise<[UpdateSlotsAction, PlayerAction, PlayerAction]> => {\n    const reel = SlotMachine.pullHandle();\n    const exchange = SlotMachine.getPayout(reel, bet) - bet;\n\n    const promise1 = dispatch(updateSlots(reel));\n    const promise2 = dispatch(payout(id, 'win', exchange));\n    const promise3 = dispatch(payout(dealerId, 'win', -exchange));\n    return Promise.all([promise1, promise2, promise3]);\n  };\n}\n","import { Action } from 'redux';\nimport { DBTicTacToe } from '../types';\nimport initialState, { newTicTacToe } from '../initialState';\n\n// --------------------     Actions     -------------------- //\nconst SET = 'casino/ticTacToe/SET';\nconst NEW_GAME = 'casino/ticTacToe/NEW_GAME';\n\n// -------------------- Action Creators     -------------------- //\ninterface PlayTurnAction extends Action<typeof SET> { turn: DBTicTacToe }\n/** update game variables in TicTacToe DB */\nexport const playTurn = (turn: DBTicTacToe): PlayTurnAction => ({ type: SET, turn });\n\ntype NewGameAction = Action<typeof NEW_GAME>\n/** reset game variables in TicTacToe DB */\nexport const newGame = (): NewGameAction => ({ type: NEW_GAME });\n\n// --------------------     Reducers     -------------------- //\ntype TicTacToeActions = PlayTurnAction | NewGameAction;\nexport default function reducer(state: DBTicTacToe = initialState.ticTacToe, action: TicTacToeActions): DBTicTacToe {\n  switch (action.type) {\n    case SET:\n      return action.turn;\n    case NEW_GAME:\n      return newTicTacToe();\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n","import { Action } from 'redux';\nimport initialState, { newYahtzee } from '../initialState';\nimport { DBYahtzee, Dice } from '../types';\n\n// --------------------     Actions     -------------------- //\nconst ADD = 'casino/yahtzee/SCORE';\nconst NEW_GAME = 'casino/yahtzee/NEW_GAME';\nconst DICE_CLICK = 'casino/yahtzee/DICE_CLICK';\nconst NEXT_ROLL = 'casino/yahtzee/NEXT_ROLL';\nconst UPDATE_TOP = 'casino/yahtzee/UPDATE_TOP';\nconst UPDATE_BOTTOM = 'casino/yahtzee/UPDATE_BOTTOM';\nconst UPDATE_ROLL = 'casino/yahtzee/UPDATE_ROLL';\n\n// -------------------- Action Creators     -------------------- //\ninterface AddScoreAction extends Action<typeof ADD> { score: number }\n/** add score to score table in Yahtzee DB */\nexport const addScore = (score: number): AddScoreAction => ({ type: ADD, score });\n\ntype NewGameAction = Action<typeof NEW_GAME>\n/** reset game in Yahtzee DB */\nexport const newGame = (): NewGameAction => ({ type: NEW_GAME });\n\ninterface DiceClickAction extends Action<typeof DICE_CLICK> { values: Dice[]; saved: Dice[] }\n/** save a dice in Yahtzee DB */\nexport const diceClick = (values: Dice[], saved: Dice[]): DiceClickAction => ({ type: DICE_CLICK, values, saved });\n\ntype NextRollAction = Action<typeof NEXT_ROLL>\n/** move to the next roll in Yahtzee DB */\nexport const nextRoll = (): NextRollAction => ({ type: NEXT_ROLL });\n\ninterface UpdateTopAction extends Action<typeof UPDATE_TOP> { topScores: number[] }\n/** update top scores in Yahtzee DB */\nexport const updateTop = (topScores: number[]): UpdateTopAction => ({ type: UPDATE_TOP, topScores });\n\ninterface UpdateBottomAction extends Action<typeof UPDATE_BOTTOM> { bottomScores: number[] }\n/** update bottom scores in Yahtzee DB */\nexport const updateBottom = (bottomScores: number[]): UpdateBottomAction => ({ type: UPDATE_BOTTOM, bottomScores });\n\ninterface UpdateRollAction extends Action<typeof UPDATE_ROLL> {\n  payload: { values: Dice[]; saved: Dice[]; roll: Dice; showScoreButtons: boolean };\n}\n/** new roll in Yahtzee DB */\nexport const updateRoll = (values: Dice[], saved: Dice[], roll: Dice, showScoreButtons = false): UpdateRollAction => ({\n  type: UPDATE_ROLL,\n  payload: {\n    values, saved, roll, showScoreButtons,\n  },\n});\n\n// --------------------     Reducers     -------------------- //\ntype YahtzeeActions = AddScoreAction | NewGameAction | DiceClickAction | NextRollAction | UpdateTopAction | UpdateBottomAction | UpdateRollAction\nexport default function reducer(state: DBYahtzee = initialState.yahtzee, action: YahtzeeActions): DBYahtzee {\n  switch (action.type) {\n    case ADD:\n      return { ...state, scores: [...state.scores, action.score]};\n    case NEW_GAME:\n      return { ...newYahtzee(), scores: state.scores };\n    case DICE_CLICK:\n      return { ...state, values: [...action.values], saved: [...action.saved]};\n    case UPDATE_TOP:\n      return {\n        ...state,\n        hasScored: true,\n        showScoreButtons: false,\n        topScores: action.topScores,\n      };\n    case UPDATE_BOTTOM:\n      return {\n        ...state,\n        hasScored: true,\n        showScoreButtons: false,\n        bottomScores: action.bottomScores,\n      };\n    case NEXT_ROLL:\n      return {\n        ...state,\n        ...{\n          roll: 0,\n          values: [0, 0, 0, 0, 0],\n          saved: [],\n          hasScored: false,\n        },\n      };\n    case UPDATE_ROLL:\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n","// Immutable helper functions\nexport function insertItem<T>(array: T[], item: T): T[] {\n  const newArr = array.slice();\n  newArr.push(item);\n  return newArr;\n}\n\nexport function updateObjectInArray<T extends Record<string, unknown>, K extends keyof T>(array: T[], ins: T, key: K): T[] {\n  return array.map(\n    (item) => (item[key] !== ins[key] ? item : { ...item, ...ins }),\n  );\n}\n\nexport function updateArrayInArray<T>(array: T[], ins: T, idx: number): T[] {\n  return array.map((item, i) => (i !== idx ? item : ins));\n}\n\nexport function removeItem<T extends { id: number }>(array: T[], id: number): T[] {\n  return array.filter((obj) => obj.id !== id);\n}\n\nexport function removeItemInArray<T>(array: T[], idx: number): T[] {\n  return [...array.slice(0, idx), ...array.slice(idx + 1)];\n}\n","import { Action, Dispatch } from 'redux';\nimport asyncForEach from '../../helpers/asyncForEach';\nimport Deck from '../../apis/Deck';\nimport {\n  removeItem, updateArrayInArray, updateObjectInArray, insertItem,\n} from '../immutableHelpers';\nimport { DBCard, DBHand, DBPlayer } from '../types';\nimport initialState, { newPlayer } from '../initialState';\n\n// --------------------     Actions     -------------------- //\nconst REMOVE = '@casino/player/REMOVE';\nenum pa {\n  'ADD' = '@casino/player/ADD',\n  'RESET' = '@casino/player/RESET',\n  'UPDATE_NAME' = '@casino/player/UPDATE_NAME',\n  'UPDATE_BOT' = '@casino/player/UPDATE_BOT',\n  'UPDATE_BET' = '@casino/player/UPDATE_BET',\n  'PAY_PLAYER' = '@casino/player/PAY_PLAYER',\n  'SPLIT_HAND' = '@casino/player/SPLIT_HAND',\n  'DRAW_CARD' = '@casino/player/DRAW_CARD',\n  'SWAP_CARD' = '@casino/player/SWAP_CARD',\n  'NEW_HAND' = '@casino/player/NEW_HAND',\n}\nconst {\n  ADD, RESET, UPDATE_NAME,\n  UPDATE_BOT, UPDATE_BET, PAY_PLAYER, SPLIT_HAND,\n  DRAW_CARD, SWAP_CARD, NEW_HAND,\n} = pa;\n\nexport interface PlayerAction extends Action<pa> { player: Partial<DBPlayer> }\n\n// -------------------- Action Creators     -------------------- //\n/** function to add a player to the state */\nexport function addPlayer(players: DBPlayer[], name: string): PlayerAction {\n  const player = newPlayer(players.length, name);\n  return { type: ADD, player };\n}\n\ninterface RemovePlayerAction extends Action<typeof REMOVE> { id: number }\n/** function to remove player from player array */\nexport function removePlayer(id: number): RemovePlayerAction {\n  return { type: REMOVE, id };\n}\n\n/** function to update a player's name */\nexport function updateName(id: number, name: string): PlayerAction {\n  return { type: UPDATE_NAME, player: { id, name }};\n}\n\n/** function to update a player's bot status */\nexport function updateBot(id: number, isBot = true): PlayerAction {\n  return { type: UPDATE_BOT, player: { id, isBot }};\n}\n\n/** function to update a player's bet */\nexport function updateBet(id = 0, bet = 5): PlayerAction {\n  return { type: UPDATE_BET, player: { id, bet }};\n}\n\n/** function to pay the winners and take money from the losers */\nexport function payout(id: number, status: string, money: number): PlayerAction {\n  return { type: PAY_PLAYER, player: { id, status, money }};\n}\n\nfunction createSplitHandAction(id: number, newHands: DBHand[]): PlayerAction {\n  return { type: SPLIT_HAND, player: { id, hands: newHands }};\n}\n\nfunction createDrawCardAction(id: number, newHands: DBHand[]): PlayerAction {\n  return { type: DRAW_CARD, player: { id, hands: newHands }};\n}\n\nfunction createSwapCardsAction(id: number, updatedHands: DBHand[]): PlayerAction {\n  return { type: SWAP_CARD, player: { id, hands: updatedHands }};\n}\n\nfunction createNewHandAction(id: number, cards: DBCard[], soft: boolean, weight: number): PlayerAction {\n  return { type: NEW_HAND, player: { id, hands: [{ cards, weight, soft }]}};\n}\n\n/** function to reset player status\n * @param {number} id - optional, what player should get a new hand, default 0\n * @return {Object}\n */\nexport function resetStatus(id = 0): PlayerAction {\n  return {\n    type: RESET,\n    player: {\n      id, status: '', hands: [], bet: 5,\n    },\n  };\n}\n\n// --------------------     Reducer     -------------------- //\ntype PlayerActions = PlayerAction | RemovePlayerAction;\nexport default function reducer(state: DBPlayer[] = initialState.players, action: PlayerActions): DBPlayer[] {\n  switch (action.type) {\n    case RESET:\n    case UPDATE_NAME:\n    case UPDATE_BOT:\n    case UPDATE_BET:\n    case SPLIT_HAND:\n    case DRAW_CARD:\n    case SWAP_CARD:\n    case NEW_HAND:\n      return updateObjectInArray(state, action.player, 'id') as DBPlayer[];\n    case PAY_PLAYER: {\n      const { id, status, money } = action.player;\n      const player = state.find((obj) => obj.id === id);\n\n      if (player !== undefined) {\n        const playerMoney = player.money || 0;\n        const addedMoney = money || 0;\n        const updatedPlayer = { ...player, money: (playerMoney + addedMoney), status };\n        return updateObjectInArray(state, updatedPlayer, 'id') as DBPlayer[];\n      }\n      return state;\n    }\n    case ADD:\n      return insertItem(state, action.player) as DBPlayer[];\n    case REMOVE:\n      return removeItem(state, action.id);\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\nexport type WeighFunc = (cards: DBCard[]) => { weight: number; soft: boolean };\nconst defaultWeigh: WeighFunc = () => ({ weight: 0, soft: false });\n\n/** function to have a player draw a card\n * @param {number} id - optional, what player should get a new hand, default 0\n * @param {number} num - optional, number of cards, default 1\n * @param {function} weigh - optional, get weight of hand for game\n * @return {Object}\n */\nexport function newHand(id = 0, num = 1, weigh = defaultWeigh) {\n  return (dispatch: Dispatch): Promise<PlayerAction> => Deck.deal(num)\n    .then((cards) => {\n      cards.sort(Deck.rankSort);\n      const { weight, soft } = weigh(cards);\n      return { weight, soft, cards };\n    })\n    .then(({ weight, soft, cards }) => dispatch(createNewHandAction(id, cards, soft, weight)));\n}\n\n/** function to have a player draw a card\n * @param {Object[]} hands - pass in player's hands to be mutated with new card\n * @param {number} id - tells us which player to update\n * @param {number} hNum - optional, if multiple hands\n * @param {number} num - optional, number of cards, default 1\n * @param {function} weigh - optional, get weight of hand for game\n * @return {Object}\n */\nexport function drawCard(hands: DBHand[], id: number, hNum = 0, num = 1, weigh = defaultWeigh) {\n  return (dispatch: Dispatch): Promise<PlayerAction> => Deck.deal(num)\n    .then((drawnCards) => {\n      const cards = [...hands[hNum].cards, ...drawnCards];\n      const { weight, soft } = weigh(cards);\n      const newHands = updateArrayInArray(hands, { cards, weight, soft }, hNum);\n      return newHands;\n    })\n    .then((newHands) => dispatch(createDrawCardAction(id, newHands)));\n}\n\n/** function to split players cards into 2 hands\n * @param {Object[]} hands - pass in player's hands to be mutated with new card\n * @param {number} id - tells us which player to update\n * @param {number} hNum - optional, if multiple hands\n * @param {function} weigh - optional, get weight of hand for game\n * @return {Object}\n */\nexport function splitHand(hands: DBHand[], id: number, hNum: number, weigh = defaultWeigh) {\n  return (dispatch: Dispatch): Promise<void> => {\n    const hand = hands[hNum];\n    // split the hands into 2\n    const hand1: DBHand = { cards: [hand.cards[0]]};\n    const hand2: DBHand = { cards: [hand.cards[1]]};\n\n    return Deck.deal(1)\n      .then((cards) => {\n        hand1.cards.push(cards[0]);\n      })\n      .then(() => {\n        Deck.deal(1)\n          .then((cards) => {\n            hand2.cards.push(cards[0]);\n\n            // update the weights\n            Object.assign(hand1, weigh(hand1.cards));\n            Object.assign(hand2, weigh(hand2.cards));\n            // update global hands\n            const newHands: DBHand[] = updateArrayInArray(hands, hand2, hNum);\n            newHands.splice(hNum, 0, hand1);\n            return newHands;\n          })\n          .then((newHands) => dispatch(createSplitHandAction(id, newHands)));\n      });\n  };\n}\n\n/** iterate through array, removing each index number from hand\n * then add new cards to the hand\n * @param {Object[]} hands - pass in player's hands to be mutated with new card\n * @param {number} id - tells us which player to update\n * @param {array} cardsToDiscard - array of index numbers\n * @return {Object}\n */\nexport function swapCards(hands: DBHand[], id: number, cardsToDiscard: number[]) {\n  return (dispatch: Dispatch): Promise<void> => {\n    const cards = [...hands[0].cards];\n    return asyncForEach(cardsToDiscard, async (idx: number) => {\n      [cards[idx]] = await Deck.deal(1);\n    }).then(() => {\n      cards.sort(Deck.rankSort);\n      const updatedHands: DBHand[] = updateArrayInArray(hands, { cards }, 0);\n      dispatch(createSwapCardsAction(id, updatedHands));\n    });\n  };\n}\n"],"sourceRoot":""}