{"version":3,"sources":["components/games/game-table/board/card/Card.styles.ts","components/games/game-table/board/card/Card.tsx","components/games/game-table/board/Hand.tsx","components/games/game-table/board/player/Player.styles.ts","components/games/game-table/board/player/Player.tsx","components/games/game-table/board/Board.tsx","components/games/game-table/button-group/Button.tsx","components/games/game-table/button-group/ButtonGroup.tsx","components/games/game-table/GameTable.tsx","components/games/poker/helpers.ts","components/games/poker/hooks.ts","components/games/poker/Poker.tsx"],"names":["cardFace","backgroundColor","borderRadius","cursor","display","fontWeight","height","margin","padding","width","cardTitle","textAlign","suit","marginTop","Card","React","memo","props","dropped","name","cardHandler","playerNo","handNo","cardNo","handleClick","useCallback","cardColor","color","red","style","styles","onClick","role","Typography","variant","boldStyle","normalStyle","Hand","cardsToDiscard","hand","isBlackJack","isHandTurn","isMultiHand","isPlayerTurn","useMemo","purple","handWeight","weight","cards","map","card","i","includes","player","minWidth","Player","betHandler","hideHands","turn","hands","length","showSlider","id","isBot","minBet","Math","max","min","money","maxBet","onSliderChange","event","value","background","cyan","status","green","blueGrey","Slider","onChange","step","bet","Board","players","buttonStyle","Button","ButtonGroup","gameFunctions","key","GameTable","cardClickHandler","gameOver","played","slice","future","playersToDisplay","rankHand","hist","has3","indexOf","has2","isStraight","lastIndexOf","isFlush","j","getHistogram","forEach","evaluate","rank","total","numCards","last","num","toString","reduce","a","c","getCardsToDiscard","n","nextCardsToDiscard","cardValues","push","usePokerFunctions","dispatch","endTurn","endPokerTurn","console","error","discard","cardsToDiscardInDB","swapCards","computer","endGame","endPokerGame","asyncForEach","winner","val","playerScore","parseInt","payout","checkUpdate","newGame","newPokerGame","startGame","startPokerGame","Deck","shuffle","then","newHand","handleDiscard","discardCards","handleGameFunctionClick","type","PGF","DISCARD_CARDS","END_TURN","NEW_GAME","START_GAME","Poker","useSelector","state","poker","useDispatch","newCardsToDiscard","splice","updateCardsToDiscard","gutterBottom"],"mappings":"iSAuBe,OACbA,SAxBoC,CACpCC,gBAAiB,QACjBC,aAAc,EACdC,OAAQ,UACRC,QAAS,eACTC,WAAY,OACZC,OAAQ,GACRC,OAAQ,EACRC,QAAS,EACTC,MAAO,IAgBPC,UAbqC,CACrCC,UAAW,QAaXC,KAVgC,CAChCL,OAAQ,OACRM,UAAW,EACXF,UAAW,SACXF,MAAO,S,OCsBMK,MA3BFC,IAAMC,MAAMC,IAAsB,MAE3CC,EAEED,EAFFC,QAASN,EAEPK,EAFOL,KAAMO,EAEbF,EAFaE,KAAMC,EAEnBH,EAFmBG,YACrBC,EACEJ,EADFI,SAAUC,EACRL,EADQK,OAAQC,EAChBN,EADgBM,OAGdC,EAAcT,IAAMU,aAAY,KACpCL,GAAeA,EAAYC,EAAUC,EAAQC,KAC5C,CAACH,EAAaG,EAAQD,EAAQD,IAE3BK,EAAiC,CACrCC,MAAgB,WAATf,GAAyB,WAATA,EAAe,QAAUgB,IAAI,KACpD3B,gBAAiBiB,EAAUU,IAAI,KAAO,SAGxC,OACE,sBAAKC,MAAK,2BAAOC,EAAO9B,UAAa0B,GAAaK,QAASP,EAAaQ,KAAK,OAA7E,UACE,qBAAKH,MAAOC,EAAOpB,UAAnB,SACGS,EAAOP,IAEV,cAACqB,EAAA,EAAD,CAAYC,QAAQ,KAAKL,MAAK,2BAAOC,EAAOlB,MAASc,GAArD,SACGd,UC9BT,MAAMuB,EAAiC,CAAE9B,WAAY,OAAQQ,UAAW,SAClEuB,EAAmC,CAAE/B,WAAY,SAAUQ,UAAW,SAoD7DwB,MAtCoBpB,IAAsB,MAErDG,EAGEH,EAHFG,YAAakB,EAGXrB,EAHWqB,eAAgBC,EAG3BtB,EAH2BsB,KAAMjB,EAGjCL,EAHiCK,OACnCkB,EAEEvB,EAFFuB,YAAaC,EAEXxB,EAFWwB,WAAYC,EAEvBzB,EAFuByB,YAAaC,EAEpC1B,EAFoC0B,aACtCtB,EACEJ,EADFI,SAGIS,EAASf,IAAM6B,SAAQ,IAC3BD,KAAkBD,GAAgBA,GAAeD,GAAjD,2BACSN,GADT,IACoBR,MAAOkB,IAAO,OAAST,GAE7C,CAACO,EAAcD,EAAaD,IACtBK,EAAaP,EAAKQ,QAAU,EAElC,OACE,qCACE,cAACd,EAAA,EAAD,CAAYC,QAAQ,KAAKL,MAAOC,EAAhC,SACGU,GAAW,UAAOM,EAAa,GAAK,OAAS,OAAlC,aAA6CA,KAE1DP,EAAKS,MAAMC,KAAI,CAACC,EAAMC,KACrB,MAAMjC,EAAmBoB,EAAec,SAASD,GACjD,OACE,cAAC,EAAD,CAEE/B,YAAaA,EACbG,OAAQ4B,EACRjC,QAASA,EACTI,OAAQA,EACRH,KAAM+B,EAAK/B,KACXE,SAAUA,EACVT,KAAMsC,EAAKtC,MAPNsC,EAAK/B,KAAO+B,EAAKtC,aCnCnB,OACbyC,OAVkC,CAClCnD,aAAc,EACdE,QAAS,eACTG,OAAQ,GACRC,QAAS,IAOTC,MAJiC,CAAE6C,SAAU,UC6FhCC,MA7EwBtC,IAAuB,MAG1DuC,EAEEvC,EAFFuC,WAAYpC,EAEVH,EAFUG,YAAakB,EAEvBrB,EAFuBqB,eAAgBmB,EAEvCxC,EAFuCwC,UACzCjB,EACEvB,EADFuB,YAAaa,EACXpC,EADWoC,OAAQhC,EACnBJ,EADmBI,SAAUqC,EAC7BzC,EAD6ByC,KAG3Bf,IAA0Be,GAAQrC,IAAaqC,EAAKL,OACpDX,EAAuBW,EAAOM,MAAMC,OAAS,EAC7CC,IAAwBJ,GAAajB,GAA6B,IAAda,EAAOS,KAAaT,EAAOU,MAE/EC,EAAiBC,KAAKC,IAAID,KAAKE,IAAId,EAAOe,MAAO,GAAI,GACrDC,EAAiBJ,KAAKC,IAAID,KAAKE,IAAId,EAAOe,MAAO,KAAM,IAEvDE,EAAiBvD,IAAMU,aAC3B,CAAC8C,EAAmDC,KAClDhB,GAAcA,EAAWH,EAAOS,GAAIS,EAAOC,KAE7C,CAAChB,EAAYH,EAAOS,KAGtB,IAAInC,EAA6BgB,EAAe,CAAE8B,WAAYC,IAAK,MAAS,GAC5E,MAAM3B,EAA8BJ,EAAe,CAAEtC,WAAY,QAAW,CAAEA,WAAY,UAW1F,MAVsB,QAAlBgD,EAAOsB,SACThD,EAAQ,CAAE8C,WAAYG,IAAM,OAER,SAAlBvB,EAAOsB,SACThD,EAAQ,CAAE8C,WAAYI,IAAS,OAEX,SAAlBxB,EAAOsB,SACThD,EAAQ,CAAE8C,WAAY7C,IAAI,OAI1B,eAACd,EAAA,EAAD,CAAMe,MAAK,2BAAOC,EAAOuB,QAAW1B,GAApC,UACE,cAACM,EAAA,EAAD,CAAYC,QAAQ,KAAKL,MAAK,eAAOkB,GAArC,mBACMM,EAAOlC,KADb,cACuBkC,EAAOe,SAE7BP,GACC,cAACiB,EAAA,EAAD,CACEZ,IAAKG,EACLF,IAAKH,EACLe,SAAUT,EACVU,KA9BK,EA+BLnD,MAAOC,EAAOrB,MACd+D,MAAOnB,EAAO4B,MAGjBzC,GAA6B,IAAda,EAAOS,IACrB,cAAC7B,EAAA,EAAD,CAAYC,QAAQ,KAApB,yBACYmB,EAAO4B,OAGpB5B,EAAOM,MAAMV,KAAI,CAACV,EAAMY,KACvB,MAAMV,IAAwBiB,GAAQA,EAAKnB,OAASY,EACpD,OACE,+BACIM,GACA,cAAC,EAAD,CACErC,YAAaA,EACbkB,eAAgBA,EAChBC,KAAMA,EACNjB,OAAQ6B,EACRX,YAAaA,EACbC,WAAYA,EACZC,YAAaA,EACbC,aAAcA,EACdtB,SAAUA,KAXhB,cAAiB8B,WCvCZ+B,MAzBsBjE,IAAuB,MAExDuC,EAEEvC,EAFFuC,WAAYpC,EAEVH,EAFUG,YAAakB,EAEvBrB,EAFuBqB,eAAgBmB,EAEvCxC,EAFuCwC,UACzCjB,EACEvB,EADFuB,YAAa2C,EACXlE,EADWkE,QAASzB,EACpBzC,EADoByC,KAGxB,OACE,mCACGyB,EAAQlC,KAAI,CAACI,EAAQF,IACpB,cAAC,EAAD,CAEEK,WAAYA,EACZpC,YAAaA,EACbkB,eAAgBA,EAChBmB,UAAWA,EACXjB,YAAaA,EACba,OAAQA,EACRhC,SAAU8B,EACVO,KAAMA,GATR,gBACgBP,S,SCrBxB,MAAMiC,EAAmC,CAAE7E,OAAQ,IAmBpC8E,MAXuBtE,IAAMC,MAAK,EAAGe,UAASZ,UAC3D,cAAC,IAAD,CACEQ,MAT2B,UAU3BI,QAAS,IAAYA,EAAQZ,GAC7BU,MAAOuD,EACPlD,QAAQ,YAJV,SAMGf,MCHUmE,MARiC,EAAGC,gBAAexD,aAChE,8BACGwD,EAActC,KAAKuC,GAClB,cAAC,EAAD,CAAkBzD,QAASA,EAASZ,KAAMqE,GAA7BA,OCqEJC,MA5DIxE,IAA+C,MAE9DuC,EAIEvC,EAJFuC,WAAYkC,EAIVzE,EAJUyE,iBAFiD,EAM3DzE,EAHFqB,sBAH6D,MAG5C,GAH4C,IAM3DrB,EAHmBsE,qBAHwC,MAGxB,GAHwB,IAM3DtE,EAFF0E,gBAJ6D,WAM3D1E,EAFgBwC,iBAJ2C,WAM3DxC,EAFmCuB,mBAJwB,SAK7D2C,EACElE,EADFkE,QAASzB,EACPzC,EADOyC,KAAM3B,EACbd,EADac,QAIX6D,EAAqB7E,IAAM6B,SAAQ,IAAMuC,EAAQU,MAAM,EAAGnC,EAAKL,OAAS,IAAI,CAAC8B,EAASzB,EAAKL,SAC3FyC,EAAqB/E,IAAM6B,SAAQ,IAAMuC,EAAQU,MAAMnC,EAAKL,OAAS,IAAI,CAAC8B,EAASzB,EAAKL,SACxF0C,EAA+BhF,IAAM6B,SAAQ,IAC/Ca,IAA0B,IAAbkC,EAEXR,EADAA,EAAQU,MAAMnC,EAAKL,OAAQK,EAAKL,OAAS,IAE5C,CAACI,EAAWkC,EAAUR,EAASzB,EAAKL,SAEvC,OACE,mCACGb,IAAgBiB,EAEb,qCACE,cAAC,EAAD,CACE0B,QAASS,EACTpC,WAAYA,EACZpC,YAAasE,EACbpD,eAAgBA,EAChBmB,UAAWA,EACXjB,YAAaA,EACbkB,KAAMA,IAER,cAAC,EAAD,CAAa6B,cAAeA,EAAexD,QAASA,IACpD,cAAC,EAAD,CACEoD,QAASW,EACTtC,WAAYA,EACZpC,YAAasE,EACbpD,eAAgBA,EAChBmB,UAAWA,EACXjB,YAAaA,EACbkB,KAAM,CAAEL,QAAS,EAAGd,MAAO,QAI/B,qCACE,cAAC,EAAD,CACE4C,QAASY,EACTvC,WAAYA,EACZpC,YAAasE,EACbpD,eAAgBA,EAChBmB,UAAWA,EACXjB,YAAaA,EACbkB,KAAMA,IAER,cAAC,EAAD,CAAa6B,cAAeA,EAAexD,QAASA,W,6LC5DzD,MAAMiE,EAAW,CAACzD,EAAgB0D,KAEvC,GAAIA,EAAK7C,SAAS,GAChB,OAAO,EAGT,MAAM8C,EAAOD,EAAK7C,SAAS,GACrBD,EAAI8C,EAAKE,QAAQ,GACjBC,GAAc,IAAPjD,EACb,GAAI+C,GAAQE,EACV,OAAO,EAET,GAAIF,EACF,OAAO,EAET,GAAIE,GAAQH,EAAK7C,SAAS,EAAGD,EAAI,GAC/B,OAAO,EAET,GAAIiD,EACF,OAAO,EAIT,MAAMC,EAAaJ,EAAKK,YAAY,GAAKL,EAAKE,QAAQ,KAAO,GACvDF,EAAK,KAAOA,EAAK,IAAMA,EAAK,IAAMA,EAAK,IAAMA,EAAK,GAExD,IAAIM,GAAU,EACd,IAAK,IAAIC,EAAI,EAAGA,EAAIjE,EAAKqB,OAAQ4C,GAAK,EACpC,GAAIjE,EAAKiE,GAAG5F,OAAS2B,EAAK,GAAG3B,KAAM,CACjC2F,GAAU,EACV,MAGJ,OAAIF,GAAcE,EACT,EAELA,EACK,EAELF,EACK,EAEF,GAGII,EAAgBlE,IAE3B,MAAM0D,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAKlD,OAHA1D,EAAKmE,SAASxD,IACZ+C,EAAK/C,EAAKH,OAAS,IAAM,KAEpBkD,GAUIU,EAAYpE,IACvB,MAAM0D,EAAOQ,EAAalE,GACpBqE,EAAOZ,EAASzD,EAAM0D,GAEtBjD,EAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,KACnC,IAAI6D,EAAQ,EACRC,EAAW,EACX3D,EAAI,EACJ4D,GAAQ,EAGZ,KAAOF,EAAQ,GAAG,CAChB,MAAMG,EAAMf,EAAKE,QAAQW,EAAUC,EAAO,IAC7B,IAATC,GACFF,GAAY,EACZC,GAAQ,IAER/D,EAAMG,GAAK6D,EAAIC,SAAS,IACxB9D,GAAK,EACL0D,GAASC,EACTC,EAAOC,GAGX,MAAM,GAAN,OAAUJ,GAAV,OAAiB5D,EAAMkE,QAAO,CAACC,EAAGC,IAAJ,UAAaD,GAAb,OAAiBC,OAIpCC,EAAoB,CAACC,EAAWrB,EAAgB1D,KAC3D,MAAMgF,EAA+B,GAC/BC,EAAa,CAACvB,EAAKE,QAAQ,IAEjC,IAAK,IAAIhD,EAAI,EAAGA,EAAImE,EAAGnE,GAAK,EAC1BqE,EAAWrE,GAAK8C,EAAKE,QAAQ,EAAGqB,EAAWrE,EAAI,GAAK,GAGtD,IAAK,IAAIA,EAAI,EAAGA,EAAIZ,EAAKqB,OAAQT,GAAK,EACpC,IAAK,IAAIqD,EAAI,EAAGA,EAAIgB,EAAW5D,OAAQ4C,GAAK,EAC1C,GAAIjE,EAAKY,GAAGJ,OAAS,IAAMyE,EAAWhB,GAAI,CACxCe,EAAmBE,KAAKtE,GACxB,MAIN,OAAOoE,G,WCwHMG,MAtNW,CAExBC,EACArF,EACA6C,EACAzB,EACAD,EACAkC,KAIA,MAAMiC,EAAU7G,IAAMU,YAAN,sBAAkB,sBAAA0F,EAAA,+EAExBQ,EAASE,eAFe,sDAK9BC,QAAQC,MAAR,MAL8B,wDAO/B,CAACJ,IAIEK,EAAUjH,IAAMU,YAAN,uCAAkB,WAAOwG,EAA8B5E,GAArC,iBAAA8D,EAAA,sEAEtBrD,EAAcT,EAAdS,GAAIH,EAAUN,EAAVM,MAFkB,SAGxBgE,EAASO,YAAUvE,EAAOG,EAAImE,IAHN,sDAM9BH,QAAQC,MAAR,MAN8B,wDAAlB,wDAQb,CAACJ,IAuBEQ,EAAWpH,IAAMU,YAAN,uCAAkB,WAAO4B,GAAP,qBAAA8D,EAAA,+DAEzB5E,EAAOc,EAAOM,MAAM,GAAGX,MACvBiD,EAAOQ,EAAalE,GACpBqE,EAAOZ,EAASzD,EAAM0D,GAJG,KAMvBW,EANuB,OAOxB,IAPwB,OAcxB,IAdwB,QAmBxB,IAnBwB,MAoBxB,IApBwB,SAyBxB,IAzBwB,MA0BxB,IA1BwB,MA2BxB,IA3BwB,MA4BxB,IA5BwB,mCAQrBW,EAAqBtB,EAAKK,YAAY,IAAM,GAC9Ce,EAAkB,EAAGpB,EAAM1D,GAC3B,CAAC,EAAG,EAAG,EAAG,EAAG,GAVU,UAWrByF,EAAQT,EAAoBlE,GAXP,mDAerBkE,EAAqBF,EAAkB,EAAGpB,EAAM1D,GAf3B,UAgBrByF,EAAQT,EAAoBlE,GAhBP,mDAqBrBkE,EAAqBF,EAAkB,EAAGpB,EAAM1D,GArB3B,UAsBrByF,EAAQT,EAAoBlE,GAtBP,sGAmC/ByE,QAAQC,MAAR,MAnC+B,0DAAlB,sDAqCd,CAACC,IAEEI,EAAUrH,IAAMU,YAAN,sBAAkB,4BAAA0F,EAAA,+EAExBQ,EAASU,eAFe,uBAIxBC,YAAanD,EAAD,uCAAU,WAAO9B,EAAkBF,GAAzB,SAAAgE,EAAA,2DACtBzD,GAAQP,GAAKA,EAxGL,GAuGc,gCAElBgF,EAAS9E,GAFS,2CAAV,yDAJY,OAU1BkF,EAAS,CAAEC,IAAK,EAAG1E,GAAI,GAE3BqB,EAAQuB,SAASrD,IACf,GAjHO,IAiHHA,EAAOS,IAAiBT,EAAOS,GAhHvB,EAgH2C,OAEvD,MAAM2E,EAAcC,SAAS/B,EAAStD,EAAOM,MAAM,GAAGX,OAAQ,IAC1DyF,EAAcF,EAAOC,MACvBD,EAAS,CAAEC,IAAKC,EAAa3E,GAAIT,EAAOS,QAI5CqB,EAAQuB,SAASrD,IAzHR,IA0HHA,EAAOS,IAAiBT,EAAOS,GAzHvB,IA2HRT,EAAOS,KAAOyE,EAAOzE,GACvB6D,EAASgB,YAAOtF,EAAOS,GAAI,MAAO,KAElC6D,EAASgB,YAAOtF,EAAOS,GAAI,QAAS,QA3BV,kDAgC9BgE,QAAQC,MAAR,MAhC8B,0DAkC/B,CAACI,EAAUR,EAAUxC,EAASzB,IAE3BkF,EAAc7H,IAAMU,YAAN,sBAAkB,4BAAA0F,EAAA,kEAE5B9D,EAAS8B,EAAQzB,IAAS,CAAEK,OAAO,GAEpCN,GAAckC,IAAYtC,EAAOU,MAJJ,gCAK1BqE,IAL0B,uDASlCN,QAAQC,MAAR,MATkC,yDAWnC,CAACK,EAASjD,EAASQ,EAAUlC,EAAWC,IAGrCmF,EAAU9H,IAAMU,YAAN,sBAAkB,sBAAA0F,EAAA,+EAExBQ,EAASmB,YAAa3D,IAFE,sDAK9B2C,QAAQC,MAAR,MAL8B,wDAO/B,CAACJ,EAAUxC,IAGR4D,EAAYhI,IAAMU,YAAN,sBAAkB,sBAAA0F,EAAA,+EAE1BQ,EAASqB,eAFiB,uBAI1BC,IAAKC,UAAUC,MAAK,KAExBb,YAAanD,EAAD,uCAAU,WAAO9B,GAAP,SAAA8D,EAAA,2DAtKf,IAuKD9D,EAAOS,IAAiBT,EAAOS,IAtKzB,GAqKU,yCAGV6D,EAASyB,YAAQ/F,EAAOS,GAAI,IAHlB,sDAMhBgE,QAAQC,MAAR,MANgB,wDAAV,0DANkB,uDAmBhCD,QAAQC,MAAR,MAnBgC,yDAqBjC,CAACJ,EAAUxC,IAGRkE,EAAgBtI,IAAMU,YAAN,sBAAkB,sBAAA0F,EAAA,+EAE9Ba,EAAQ1F,EAAgB6C,EAAQzB,IAFF,uBAG9BiE,EAAS2B,eAHqB,uDAMpCxB,QAAQC,MAAR,MANoC,yDAQrC,CAACC,EAASL,EAAUxC,EAASzB,EAAMpB,IAwBtC,MAAO,CACLsG,cACAW,wBAvB8BxI,IAAMU,YAAN,uCAAkB,WAAO+H,GAAP,SAAArC,EAAA,oEAEtCqC,EAFsC,cAGvCC,IAAIC,cAHmC,SAKvCD,IAAIE,SALmC,SAOvCF,IAAIG,SAPmC,UASvCH,IAAII,WATmC,mCAIpCR,IAJoC,0DAMpCzB,IANoC,4DAQpCiB,IARoC,6DAUpCE,IAVoC,4CAa1CjB,QAAQC,MAAM,0BAA2ByB,GAbC,0DAiB9C1B,QAAQC,MAAR,MAjB8C,0DAAlB,sDAmB7B,CAACH,EAASyB,EAAeR,EAASE,M,OCzKxBe,MArDS,KAAO,MAAD,EAIxBC,aAAaC,GAAD,aACdtG,KAAMsG,EAAMtG,KACZyB,QAAS6E,EAAM7E,SACZ6E,EAAMC,SALTvG,EAF0B,EAE1BA,KAAMyB,EAFoB,EAEpBA,QAAS7C,EAFW,EAEXA,eAAgBiD,EAFL,EAEKA,cAC/BI,EAH0B,EAG1BA,SAAUlC,EAHgB,EAGhBA,UAMNkE,EAAWuC,cAGXxE,EAAmB3E,IAAMU,aAAY,CAACJ,EAAkBC,EAAgBC,KAC5E,MAAM4I,EAAoB,IAAI7H,GAExBa,EAAIgH,EAAkBhE,QAAQ5E,IAE7B,IAAP4B,EAAWgH,EAAkB1C,KAAKlG,GAAU4I,EAAkBC,OAAOjH,EAAG,GAExEwE,EAAS0C,YAAqBF,MAC7B,CAAC7H,EAAgBqF,IApBQ,EAsBqBD,EAC/CC,EACArF,EACA6C,EACAzB,EAAKL,OACLI,EACAkC,GANMiD,EAtBoB,EAsBpBA,YAAaW,EAtBO,EAsBPA,wBAWrB,OAFAX,IAGE,qCACE,cAAC3G,EAAA,EAAD,CAAYC,QAAQ,KAAKoI,cAAY,EAArC,+BAGA,cAAC,IAAD,CACE5E,iBAAkBA,EAClBpD,eAAgBA,EAChBiD,cAAeA,EACfxD,QAASwH,EACT5D,SAAUA,EACVlC,UAAWA,EACXjB,aAAa,EACb2C,QAASA,EACTzB,KAAMA","file":"static/js/g_poker.b99450ac.chunk.js","sourcesContent":["const cardFace: React.CSSProperties = {\n  backgroundColor: 'white',\n  borderRadius: 5,\n  cursor: 'pointer',\n  display: 'inline-block',\n  fontWeight: 'bold',\n  height: 78,\n  margin: 5,\n  padding: 3,\n  width: 50,\n};\n\nconst cardTitle: React.CSSProperties = {\n  textAlign: 'left',\n};\n\nconst suit: React.CSSProperties = {\n  margin: 'auto',\n  marginTop: 5,\n  textAlign: 'center',\n  width: '100%',\n};\n\nexport default {\n  cardFace,\n  cardTitle,\n  suit,\n};\n","import React from 'react';\nimport red from '@material-ui/core/colors/red';\nimport { Typography } from '@material-ui/core';\nimport styles from './Card.styles';\n\ninterface CardProps {\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardNo: number;\n  dropped: boolean;\n  handNo: number;\n  name: string;\n  playerNo: number;\n  suit: string;\n}\n\nconst Card = React.memo((props: CardProps) => {\n  const {\n    dropped, suit, name, cardHandler,\n    playerNo, handNo, cardNo,\n  } = props;\n  // handle click to for card\n  const handleClick = React.useCallback((): void => {\n    cardHandler && cardHandler(playerNo, handNo, cardNo);\n  }, [cardHandler, cardNo, handNo, playerNo]);\n  // checking color based off suits: ♣♦♥♠\n  const cardColor: React.CSSProperties = {\n    color: suit === '♣' || suit === '♠' ? 'black' : red[500],\n    backgroundColor: dropped ? red[100] : 'white',\n  };\n\n  return (\n    <div style={{ ...styles.cardFace, ...cardColor }} onClick={handleClick} role=\"main\">\n      <div style={styles.cardTitle}>\n        {name + suit}\n      </div>\n      <Typography variant=\"h4\" style={{ ...styles.suit, ...cardColor }}>\n        {suit}\n      </Typography>\n    </div>\n  );\n});\n\nexport default Card;\n","import React from 'react';\nimport purple from '@material-ui/core/colors/purple';\nimport { Typography } from '@material-ui/core';\nimport Card from './card/Card';\nimport { DBHand } from '../../../../store/types';\n\nconst boldStyle: React.CSSProperties = { fontWeight: 'bold', marginTop: '0.5em' };\nconst normalStyle: React.CSSProperties = { fontWeight: 'normal', marginTop: '0.5em' };\n\ninterface HandProps {\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hand: DBHand;\n  handNo: number;\n  isBlackJack: boolean;\n  isHandTurn: boolean;\n  isMultiHand: boolean;\n  isPlayerTurn: boolean;\n  playerNo: number;\n}\n\nconst Hand: React.FC<HandProps> = (props: HandProps) => {\n  const {\n    cardHandler, cardsToDiscard, hand, handNo,\n    isBlackJack, isHandTurn, isMultiHand, isPlayerTurn,\n    playerNo,\n  } = props;\n\n  const styles = React.useMemo(() => (\n    isPlayerTurn && (!isMultiHand || (isMultiHand && isHandTurn))\n      ? { ...boldStyle, color: purple[700] } : normalStyle\n  ),\n  [isPlayerTurn, isMultiHand, isHandTurn]);\n  const handWeight = hand.weight || 0;\n\n  return (\n    <>\n      <Typography variant=\"h4\" style={styles}>\n        {isBlackJack && `${handWeight > 21 ? 'Bust' : 'Hand'}: ${handWeight}`}\n      </Typography>\n      {hand.cards.map((card, i) => {\n        const dropped: boolean = cardsToDiscard.includes(i);\n        return (\n          <Card\n            key={card.name + card.suit}\n            cardHandler={cardHandler}\n            cardNo={i}\n            dropped={dropped}\n            handNo={handNo}\n            name={card.name}\n            playerNo={playerNo}\n            suit={card.suit}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nexport default Hand;\n","const player: React.CSSProperties = {\n  borderRadius: 5,\n  display: 'inline-block',\n  margin: 10,\n  padding: 20,\n};\n\nconst width: React.CSSProperties = { minWidth: '100px' };\n\nexport default {\n  player,\n  width,\n};\n","import React from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport cyan from '@material-ui/core/colors/cyan';\nimport green from '@material-ui/core/colors/green';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport red from '@material-ui/core/colors/red';\nimport { Typography } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport Hand from '../Hand';\nimport { DBTurn, DBPlayer } from '../../../../../store/types';\nimport styles from './Player.styles';\n\ninterface PlayerProps {\n  betHandler?: (id: number, event: React.ChangeEvent<Record<string, unknown>>, value: number) => void;\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  player: DBPlayer;\n  playerNo: number;\n  turn: DBTurn;\n}\n\nconst Player: React.FC<PlayerProps> = (props: PlayerProps) => {\n  // get vars from props\n  const {\n    betHandler, cardHandler, cardsToDiscard, hideHands,\n    isBlackJack, player, playerNo, turn,\n  } = props;\n  // set booleans\n  const isPlayerTurn: boolean = !!turn && playerNo === turn.player;\n  const isMultiHand: boolean = player.hands.length > 1;\n  const showSlider: boolean = !!hideHands && isBlackJack && player.id !== 0 && !player.isBot;\n  // set slider variables\n  const minBet: number = Math.max(Math.min(player.money, 5), 0);\n  const maxBet: number = Math.max(Math.min(player.money, 100), 10);\n  const step = 5;\n  const onSliderChange = React.useCallback(\n    (event: React.ChangeEvent<Record<string, unknown>>, value: number | number[]): void => {\n      betHandler && betHandler(player.id, event, value as number);\n    },\n    [betHandler, player.id],\n  );\n  // set colors\n  let color: React.CSSProperties = isPlayerTurn ? { background: cyan[200] } : {};\n  const weight: React.CSSProperties = isPlayerTurn ? { fontWeight: 'bold' } : { fontWeight: 'normal' };\n  if (player.status === 'win') {\n    color = { background: green[300] };\n  }\n  if (player.status === 'draw') {\n    color = { background: blueGrey[300] };\n  }\n  if (player.status === 'lose') {\n    color = { background: red[300] };\n  }\n\n  return (\n    <Card style={{ ...styles.player, ...color }}>\n      <Typography variant=\"h4\" style={{ ...weight }}>\n        {`${player.name}: $${player.money}`}\n      </Typography>\n      {showSlider && (\n        <Slider\n          max={maxBet}\n          min={minBet}\n          onChange={onSliderChange}\n          step={step}\n          style={styles.width}\n          value={player.bet}\n        />\n      )}\n      {isBlackJack && player.id !== 0 && (\n        <Typography variant=\"h5\">\n          {`Bet: $${player.bet}`}\n        </Typography>\n      )}\n      {player.hands.map((hand, i) => {\n        const isHandTurn: boolean = !!turn && turn.hand === i;\n        return (\n          <div key={`hand${i}`}>\n            {!hideHands && (\n              <Hand\n                cardHandler={cardHandler}\n                cardsToDiscard={cardsToDiscard}\n                hand={hand}\n                handNo={i}\n                isBlackJack={isBlackJack}\n                isHandTurn={isHandTurn}\n                isMultiHand={isMultiHand}\n                isPlayerTurn={isPlayerTurn}\n                playerNo={playerNo}\n              />\n            )}\n          </div>\n        );\n      })}\n    </Card>\n  );\n};\n\nexport default Player;\n","import React from 'react';\nimport Player from './player/Player';\nimport { DBPlayer, DBTurn } from '../../../../store/types';\n// Parents: GameTable\n\ninterface BoardProps {\n  betHandler?: (id: number, event: React.ChangeEvent<Record<string, unknown>>, value: number) => void;\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  players: DBPlayer[];\n  turn: DBTurn;\n}\n\nconst Board: React.FC<BoardProps> = (props: BoardProps) => {\n  const {\n    betHandler, cardHandler, cardsToDiscard, hideHands,\n    isBlackJack, players, turn,\n  } = props;\n\n  return (\n    <>\n      {players.map((player, i) => (\n        <Player\n          key={`player${i}`}\n          betHandler={betHandler}\n          cardHandler={cardHandler}\n          cardsToDiscard={cardsToDiscard}\n          hideHands={hideHands}\n          isBlackJack={isBlackJack}\n          player={player}\n          playerNo={i}\n          turn={turn}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport MuiButton from '@material-ui/core/Button';\nimport { PropTypes } from '@material-ui/core/';\n\nconst buttonStyle: React.CSSProperties = { margin: 12 };\nconst color: PropTypes.Color = 'primary';\n\nexport interface ButtonProps {\n  onClick: (name: string) => void;\n  name: string;\n}\n\nconst Button: React.FC<ButtonProps> = React.memo(({ onClick, name }: ButtonProps) => (\n  <MuiButton\n    color={color}\n    onClick={(): void => onClick(name)}\n    style={buttonStyle}\n    variant=\"contained\"\n  >\n    {name}\n  </MuiButton>\n));\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nexport interface ButtonGroupProps {\n  gameFunctions: string[];\n  onClick: (name: string) => void;\n}\n\nconst ButtonGroup: React.FC<ButtonGroupProps> = ({ gameFunctions, onClick }: ButtonGroupProps) => (\n  <div>\n    {gameFunctions.map((key) => (\n      <Button key={key} onClick={onClick} name={key} />\n    ))}\n  </div>\n);\n\nexport default ButtonGroup;\n","import React from 'react';\nimport Board from './board/Board';\nimport ButtonGroup from './button-group/ButtonGroup';\nimport { DBPlayer, DBTurn } from '../../../store/types';\n\ninterface GameTableProps {\n  betHandler?: (id: number, event: React.ChangeEvent<Record<string, unknown>>, value: number) => void;\n  cardClickHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard?: number[];\n  gameFunctions?: string[];\n  gameOver?: boolean;\n  hideHands?: boolean;\n  isBlackJack?: boolean;\n  onClick: (name: string) => void;\n  players: DBPlayer[];\n  turn: DBTurn;\n}\n\n/* GameTable ->  Board -> Player -> Hand -> Card\n *          |->  Button Group  ->  Button        */\nconst GameTable = (props: GameTableProps): React.ReactElement => {\n  const {\n    betHandler, cardClickHandler,\n    cardsToDiscard = [], gameFunctions = [],\n    gameOver = false, hideHands = false, isBlackJack = true,\n    players, turn, onClick,\n  } = props;\n\n  // move game buttons to make turn more obvious and support mobile\n  const played: DBPlayer[] = React.useMemo(() => players.slice(0, turn.player + 1), [players, turn.player]);\n  const future: DBPlayer[] = React.useMemo(() => players.slice(turn.player + 1), [players, turn.player]);\n  const playersToDisplay: DBPlayer[] = React.useMemo(() => (\n    (!hideHands && gameOver === false)\n      ? players.slice(turn.player, turn.player + 1)\n      : players\n  ), [hideHands, gameOver, players, turn.player]);\n\n  return (\n    <>\n      {isBlackJack && !hideHands\n        ? (\n          <>\n            <Board\n              players={played}\n              betHandler={betHandler}\n              cardHandler={cardClickHandler}\n              cardsToDiscard={cardsToDiscard}\n              hideHands={hideHands}\n              isBlackJack={isBlackJack}\n              turn={turn}\n            />\n            <ButtonGroup gameFunctions={gameFunctions} onClick={onClick} />\n            <Board\n              players={future}\n              betHandler={betHandler}\n              cardHandler={cardClickHandler}\n              cardsToDiscard={cardsToDiscard}\n              hideHands={hideHands}\n              isBlackJack={isBlackJack}\n              turn={{ player: -1, hand: -1 }}\n            />\n          </>\n        ) : (\n          <>\n            <Board\n              players={playersToDisplay}\n              betHandler={betHandler}\n              cardHandler={cardClickHandler}\n              cardsToDiscard={cardsToDiscard}\n              hideHands={hideHands}\n              isBlackJack={isBlackJack}\n              turn={turn}\n            />\n            <ButtonGroup gameFunctions={gameFunctions} onClick={onClick} />\n          </>\n        )}\n    </>\n  );\n};\n\nexport default GameTable;\n","import { DBCard } from '../../../store/types';\n\n/** Rankings:\n *   Straight Flush  8\n *   4 of a Kind     7\n *   Full House      6\n *   Flush           5\n *   Straight        4\n *   3 of a Kind     3\n *   2 Pair          2\n *   1 Pair          1\n *   High Card       0\n * @return {number} value is a base 14 string, to be converted into base 10 for comparison */\nexport const rankHand = (hand: DBCard[], hist: number[]): number => {\n  // iterate through and look for hands with multiple cards\n  if (hist.includes(4)) {\n    return 7; // 4 of a kind\n  }\n  // Check for hands with sets of 3 or 2 cards\n  const has3 = hist.includes(3);\n  const i = hist.indexOf(2);\n  const has2 = i !== -1;\n  if (has3 && has2) {\n    return 6; // full house\n  }\n  if (has3) {\n    return 3; // 3 of a kind\n  }\n  if (has2 && hist.includes(2, i + 1)) {\n    return 2; // 2 pair\n  }\n  if (has2) {\n    return 1; // 1 pair\n  }\n  // all single cards\n  // check for straight\n  const isStraight = hist.lastIndexOf(1) - hist.indexOf(1) === 4 // (end - start = 4)\n    || (hist[12] && hist[0] && hist[1] && hist[2] && hist[3]); // (A,2,3,4,5)\n  // check for flush\n  let isFlush = true;\n  for (let j = 0; j < hand.length; j += 1) {\n    if (hand[j].suit !== hand[0].suit) {\n      isFlush = false;\n      break;\n    }\n  }\n  if (isStraight && isFlush) {\n    return 8; // straight flush\n  }\n  if (isFlush) {\n    return 5; // flush\n  }\n  if (isStraight) {\n    return 4; // straight\n  }\n  return 0; // high card\n};\n\nexport const getHistogram = (hand: DBCard[]): number[] => {\n  // Histogram for the cards\n  const hist = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  // put hand into the histogram\n  hand.forEach((card) => {\n    hist[card.weight - 2] += 1; // 2-14 - 2 = 0-12\n  });\n  return hist;\n};\n\n/**\n * Compare hands to see who wins\n * @param {array} hand - array of card objects\n * Hands is assigned a weight based on hand, then card values\n * Compare values to see who wins\n * @return {number} value is a base 14 string, to be converted into base 10 for comparison\n */\nexport const evaluate = (hand: DBCard[]): string => {\n  const hist = getHistogram(hand);\n  const rank = rankHand(hand, hist);\n\n  const cards = ['0', '0', '0', '0', '0'];\n  let total = 0; // track number of cards counted\n  let numCards = 4; // number of same cards in a set\n  let i = 0; // iterator\n  let last = -1; // track location of last in numCards set\n\n  // get card values and display them in order of importance\n  while (total < 5) {\n    const num = hist.indexOf(numCards, last + 1);\n    if (num === -1) {\n      numCards -= 1;\n      last = -1;\n    } else {\n      cards[i] = num.toString(14);\n      i += 1;\n      total += numCards;\n      last = num;\n    }\n  }\n  return `${rank}${cards.reduce((a, c) => `${a}${c}`)}`;\n};\n\n/** function to remove n number of cards */\nexport const getCardsToDiscard = (n: number, hist: number[], hand: DBCard[]): number[] => {\n  const nextCardsToDiscard: number[] = [];\n  const cardValues = [hist.indexOf(1)];\n  // find cards without pairs, starting with the smallest\n  for (let i = 1; i < n; i += 1) {\n    cardValues[i] = hist.indexOf(1, cardValues[i - 1] + 1);\n  }\n  // find hand index of individual cards\n  for (let i = 0; i < hand.length; i += 1) {\n    for (let j = 0; j < cardValues.length; j += 1) {\n      if (hand[i].weight - 2 === cardValues[j]) {\n        nextCardsToDiscard.push(i);\n        break;\n      }\n    }\n  }\n  return nextCardsToDiscard;\n};\n","import React from 'react';\nimport { Dispatch } from 'redux';\nimport asyncForEach from '../../../helpers/asyncForEach';\nimport { swapCards, newHand, payout } from '../../../store/modules/players';\nimport Deck from '../../../apis/Deck';\nimport {\n  rankHand, getHistogram, evaluate, getCardsToDiscard,\n} from './helpers';\nimport {\n  newPokerGame, startPokerGame, endPokerTurn, endPokerGame,\n  discardCards,\n} from '../../../store/modules/poker';\nimport {\n  DBPlayer, PokerGameFunctions as PGF,\n} from '../../../store/types';\n\nconst DEALER = 0;\nconst LAST_PLAYER = 5;\n\ninterface UsePokerFunctions {\n  checkUpdate: () => Promise<void>;\n  handleGameFunctionClick: (type: string) => void;\n}\n\nconst usePokerFunctions = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  dispatch: Dispatch<any>,\n  cardsToDiscard: number[],\n  players: DBPlayer[],\n  turn: number,\n  hideHands: boolean,\n  gameOver: boolean,\n): UsePokerFunctions => {\n  // ----------     bot automation handlers     ---------- //\n  /** increment player turn and reset state */\n  const endTurn = React.useCallback(async (): Promise<void> => {\n    try {\n      await dispatch(endPokerTurn());\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    }\n  }, [dispatch]);\n\n  /** iterate through array, removing each index number from hand\n   * then add new cards to the hand */\n  const discard = React.useCallback(async (cardsToDiscardInDB: number[], player: DBPlayer): Promise<void> => {\n    try {\n      const { id, hands } = player;\n      await dispatch(swapCards(hands, id, cardsToDiscardInDB));\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    }\n  }, [dispatch]);\n\n  /** computer play algorithm:\n   * PAIRS\n   * draw 0 on 4 of a kind\n   * draw 0 on full house\n   * draw 1 on 3 of a kind, keep higher of 2\n   * draw 1 on 2 pair\n   * draw 3 on 2 of a kind\n   *\n   * This is a nice to have, for now we only follow the first half\n   * STRAIGHT/FLUSH\n   * draw 0 on straight\n   * draw 0 on flush\n   * draw 0 on straight flush\n   * if 1 away from sf -> draw 1\n   * if 1 away from S -> draw 1 if 5+ players, else regular hand\n   * if 1 away from F -> draw 1 if 5+ players, else regular hand\n   *\n   * REGULAR HAND\n   * if K / A -> draw 4\n   * else draw 5\n   */\n  const computer = React.useCallback(async (player: DBPlayer): Promise<void> => {\n    try {\n      const hand = player.hands[0].cards;\n      const hist = getHistogram(hand);\n      const rank = rankHand(hand, hist);\n\n      switch (rank) {\n        case 0: /* draw 4-5 on high card */ {\n          const nextCardsToDiscard = hist.lastIndexOf(1) >= 11\n            ? getCardsToDiscard(4, hist, hand) // if ace || king draw 4\n            : [0, 1, 2, 3, 4]; // otherwise, draw all 5\n          await discard(nextCardsToDiscard, player);\n          break;\n        }\n        case 1: /* draw 3 on 2 of a kind */ {\n          const nextCardsToDiscard = getCardsToDiscard(3, hist, hand);\n          await discard(nextCardsToDiscard, player);\n          break;\n        }\n        case 2: /* draw 1 on 3 of a kind */\n        case 3: /* draw 1 on 2 Pair */ {\n          const nextCardsToDiscard = getCardsToDiscard(1, hist, hand);\n          await discard(nextCardsToDiscard, player);\n          break;\n        }\n        case 4: // draw 0 on straight\n        case 5: // draw 0 on flush\n        case 6: // draw 0 on full house\n        case 7: // draw 0 on 4 of a kind\n        case 8: // draw 0 on straight flush\n        default:\n          break;\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    }\n  }, [discard]);\n\n  const endGame = React.useCallback(async (): Promise<void> => {\n    try {\n      await dispatch(endPokerGame());\n\n      await asyncForEach(players, async (player: DBPlayer, i: number) => {\n        if (turn <= i && i < LAST_PLAYER) {\n          await computer(player);\n        }\n      });\n\n      let winner = { val: 0, id: 0 };\n\n      players.forEach((player) => {\n        if (player.id === DEALER || player.id > LAST_PLAYER) { return; }\n\n        const playerScore = parseInt(evaluate(player.hands[0].cards), 14);\n        if (playerScore > winner.val) {\n          winner = { val: playerScore, id: player.id };\n        }\n      });\n\n      players.forEach((player) => {\n        if (player.id === DEALER || player.id > LAST_PLAYER) { return; }\n\n        if (player.id === winner.id) {\n          dispatch(payout(player.id, 'win', 20));\n        } else {\n          dispatch(payout(player.id, 'lose', -5));\n        }\n      });\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    }\n  }, [computer, dispatch, players, turn]);\n\n  const checkUpdate = React.useCallback(async (): Promise<void> => {\n    try {\n      const player = players[turn] || { isBot: false };\n\n      if (!hideHands && !gameOver && player.isBot) {\n        await endGame();\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    }\n  }, [endGame, players, gameOver, hideHands, turn]);\n\n  // ----------     player handlers     ---------- //\n  const newGame = React.useCallback(async (): Promise<void> => {\n    try {\n      await dispatch(newPokerGame(players));\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    }\n  }, [dispatch, players]);\n\n  /** function to finish betting and start the game */\n  const startGame = React.useCallback(async (): Promise<void> => {\n    try {\n      await dispatch(startPokerGame());\n      // shuffle the deck\n      await Deck.shuffle().then(() => {\n      // deal the hands\n        asyncForEach(players, async (player: DBPlayer) => {\n          if (player.id !== DEALER && player.id <= LAST_PLAYER) {\n            try {\n              await dispatch(newHand(player.id, 5));\n            } catch (e) {\n            // eslint-disable-next-line no-console\n              console.error(e);\n            }\n          }\n        });\n      });\n    } catch (e) {\n    // eslint-disable-next-line no-console\n      console.error(e);\n    }\n  }, [dispatch, players]);\n\n  /** helper function wrapping discard, meant for UI */\n  const handleDiscard = React.useCallback(async (): Promise<void> => {\n    try {\n      await discard(cardsToDiscard, players[turn]);\n      await dispatch(discardCards());\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    }\n  }, [discard, dispatch, players, turn, cardsToDiscard]);\n\n  /** function to route click actions */\n  const handleGameFunctionClick = React.useCallback(async (type: string): Promise<void> => {\n    try {\n      switch (type) {\n        case PGF.DISCARD_CARDS:\n          await handleDiscard(); break;\n        case PGF.END_TURN:\n          await endTurn(); break;\n        case PGF.NEW_GAME:\n          await newGame(); break;\n        case PGF.START_GAME:\n          await startGame(); break;\n        default:\n        // eslint-disable-next-line no-console\n          console.error('Unknown Game Function: ', type);\n      }\n    } catch (e) {\n    // eslint-disable-next-line no-console\n      console.error(e);\n    }\n  }, [endTurn, handleDiscard, newGame, startGame]);\n\n  return {\n    checkUpdate,\n    handleGameFunctionClick,\n  };\n};\n\nexport default usePokerFunctions;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { useSelector, useDispatch } from 'react-redux';\nimport GameTable from '../game-table';\nimport { updateCardsToDiscard } from '../../../store/modules/poker';\nimport { DBRootState } from '../../../store/types';\nimport usePokerFunctions from './hooks';\n\nconst Poker: React.FC = () => {\n  const {\n    turn, players, cardsToDiscard, gameFunctions,\n    gameOver, hideHands,\n  } = useSelector((state: DBRootState) => ({\n    turn: state.turn,\n    players: state.players,\n    ...state.poker,\n  }));\n  const dispatch = useDispatch();\n\n  /** function to be called on card clicks */\n  const cardClickHandler = React.useCallback((playerNo: number, handNo: number, cardNo: number): void => {\n    const newCardsToDiscard = [...cardsToDiscard];\n    // find card\n    const i = newCardsToDiscard.indexOf(cardNo);\n    // toggle in array\n    i === -1 ? newCardsToDiscard.push(cardNo) : newCardsToDiscard.splice(i, 1);\n    // update state\n    dispatch(updateCardsToDiscard(newCardsToDiscard));\n  }, [cardsToDiscard, dispatch]);\n\n  const { checkUpdate, handleGameFunctionClick } = usePokerFunctions(\n    dispatch,\n    cardsToDiscard,\n    players,\n    turn.player,\n    hideHands,\n    gameOver,\n  );\n\n  checkUpdate();\n\n  return (\n    <>\n      <Typography variant=\"h2\" gutterBottom>\n        5 Card Draw Poker\n      </Typography>\n      <GameTable\n        cardClickHandler={cardClickHandler}\n        cardsToDiscard={cardsToDiscard}\n        gameFunctions={gameFunctions}\n        onClick={handleGameFunctionClick}\n        gameOver={gameOver}\n        hideHands={hideHands}\n        isBlackJack={false}\n        players={players}\n        turn={turn}\n      />\n    </>\n  );\n};\n\nexport default Poker;\n"],"sourceRoot":""}