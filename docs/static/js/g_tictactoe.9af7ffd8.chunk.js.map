{"version":3,"file":"static/js/g_tictactoe.9af7ffd8.chunk.js","mappings":"sNAYaA,EAAI,IAEJC,EAAQ,KACRC,EAAe,iBAAuB,CACjDC,QAAS,CAAC,CAAEC,MAAOC,MAAM,GAAGC,KAAKL,KACjCM,KAAMP,EACNQ,KAAM,IAkBR,GAfsBC,EAAAA,EAAAA,IAAK,CACzBC,IAAK,gBACLC,QACGC,KAAKC,MACJC,aAAaC,QAAQ,qBAAuB,SACtBb,IAC1Bc,QAAS,CACP,aACEC,EADa,EAAZA,QACK,SAACC,GACLJ,aAAaK,QAAQ,mBAAoBP,KAAKQ,UAAUF,W,iCCDhE,EAlBsCG,EAAAA,MACpC,gBAAGC,EAAH,EAAGA,OAAQf,EAAX,EAAWA,KAAMgB,EAAjB,EAAiBA,QAAjB,OACE,UAACC,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CAAYC,MAAO,CAAEC,KAAM,GAAKC,QAAQ,KAAxC,SACGN,EAAM,kBAAcA,GAAd,gBAAkCf,MAE3C,SAACsB,EAAA,EAAD,CACEC,MAAM,UACNC,QAASR,EACTK,QAAQ,YACRF,MAAO,CAAEI,MAAO,SAJlB,8BCfOE,EAAU,SAACC,GAAD,OAAwBA,EAAI,EFWlC,IEX0CjC,GAIpD,SAASkC,EAAgB9B,GAkB9B,IAdA,IAAM+B,EAAoC,CAExC,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GAEP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GAEP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,GAAK,EAAG,CACxC,cAAkBD,EAAMC,GAAxB,GAAOE,EAAP,KAAUC,EAAV,KAAaC,EAAb,KAEA,GAAIpC,EAAMkC,KAAOrC,GAASG,EAAMkC,KAAOlC,EAAMmC,IAAMnC,EAAMkC,KAAOlC,EAAMoC,GAEpE,MAAO,CAAElB,OAAQlB,EAAMkC,GAAIG,OAAQN,EAAMC,IAG7C,MAAO,CAAEd,OAAQ,KAAMmB,OAAQ,IAGjC,IC2BA,EAnDwC,SAACC,GACvC,MAA4BrB,EAAAA,UAAe,GAA3C,eAAOsB,EAAP,KAAeC,EAAf,KACQzC,EAA8BuC,EAA9BvC,QAASK,EAAqBkC,EAArBlC,KAAMqC,EAAeH,EAAfG,WAGjBC,EAAiBzB,EAAAA,aACrB,SAAC0B,EAAqBC,GACpB,IAAMC,EAAWF,EAAME,UAAY,EAE7BC,EAAeF,EAEjB,gBAASA,EAAT,aAAkBhB,EAAQgB,EAAO,GAAjC,gBACGG,KAAKC,MAAMH,EAAW,GADzB,aACgCA,EAAW,EAD3C,KADA,8BAIEnB,EAAQtB,IAASwC,EAAO,YAAc,UAE5C,OACE,SAACnB,EAAA,EAAD,CAEEC,MAAOA,EACPC,QAAS,kBAAYc,EAAWG,IAChCtB,MAAO,CAAE2B,QAAS,SAJpB,SAMGH,GALIF,KASX,CAACH,EAAYrC,IAIT8C,EAAQnD,EAAQoD,IAAIT,GAI1B,OAFCH,GAAUW,EAAME,WAGf,iCACE,SAAC3B,EAAA,EAAD,CACEE,QAAS,WACPa,GAAWD,IAEbjB,MAAO,CAAE+B,UAAW,GAAIC,aAAc,GAAI5B,MAAO,SACjDF,QAAQ,YALV,SAOGe,EAAS,MAAQ,SAEnBW,M,iECtBP,EAzBkCjC,EAAAA,MAAW,SAACqB,GAC5C,IAAQiB,EAA2BjB,EAA3BiB,MAAOrC,EAAoBoB,EAApBpB,OAAQS,EAAYW,EAAZX,QAGR6B,GAEXC,EAAAA,EAAAA,KAHFC,QACEC,QAAWH,KAITI,EAA4B1C,EAC9B,CAAEQ,MAAO,QAASmC,gBAAiBL,GACnC,GAEJ,OACE,SAAC/B,EAAA,EAAD,CACEE,QAASA,EACTL,MAAOsC,EACP,+CACEL,EAAK,UAAMA,EAAN,aAAyB,aAJlC,SAOGA,IAAS,uBChBVO,EAAsC,CAC1CC,QAAS,EACTC,UAAW,SACXC,OAAO,aAAD,OAAeC,EAAAA,EAAAA,OAsCvB,EAnCoC,SAAC5B,GAMnC,IALA,IAAQtC,EAA2BsC,EAA3BtC,MAAO2B,EAAoBW,EAApBX,QAASU,EAAWC,EAAXD,OAElB8B,EAAQ,GAGLnC,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAG7B,IADA,IAAMoC,EAAM,GAFiB,WAGpBC,GACP,IAAMjC,EAAQ,EAAJJ,EAAQqC,EAEZnD,EAASmB,EAAOiC,SAASlC,GAC/BgC,EAAIG,MACF,SAACC,EAAA,EAAD,CAA6BlD,MAAOwC,EAApC,UACE,SAAC,EAAD,CACEnC,QAAS,kBAAYA,EAAQS,IAC7BmB,MAAOvD,EAAMoC,GACblB,OAAQA,KAJZ,UAAmBc,EAAnB,YAAwBqC,MALnBA,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAI,EAAvBA,GAcT,IAAMI,GAAW,SAACC,EAAA,EAAD,UAA2BN,GAA3B,aAAqBpC,IAEtCmC,EAAMI,KAAKE,GAGb,OACE,SAACE,EAAA,EAAD,WACE,SAACC,EAAA,EAAD,UAAYT,OClCZU,EAAmC,CACvCC,MAAO,IACP7B,QAAS,QACT8B,OAAQ,QAmEV,EA7D4B,WAC1B,OAA0BC,EAAAA,EAAAA,IAAeC,GAAzC,eAAOnE,EAAP,KAAcoE,EAAd,KACQ/E,EAAwBW,EAAxBX,KAAMC,EAAkBU,EAAlBV,KAAML,EAAYe,EAAZf,QA0CdC,EADUD,EAAQK,GACFJ,MAAMmF,QAC5B,EAA2BrD,EAAgB9B,GAAnCkB,EAAR,EAAQA,OAAQmB,EAAhB,EAAgBA,OAEhB,OACE,iCACE,SAAChB,EAAA,EAAD,CAAYG,QAAQ,KAAK4D,cAAY,EAArC,0BAGA,UAACC,EAAA,EAAD,CAAOC,UAAW,EAAGhE,MAAOuD,EAA5B,WACE,SAAC,EAAD,CAAQ1D,QA5BK,kBAAY+D,EAASpF,MA4BLK,KAAMA,EAAMe,OAAQA,KACjD,SAAC,EAAD,CAAOlB,MAAOA,EAAO2B,QAhDP,SAACkB,GACnB,IAAM0C,EAAaxF,EAAQoF,MAAM,EAAG/E,EAAO,GAErCJ,EADUuF,EAAWnF,GACLJ,MAAMmF,QAGvBrD,EAAgB9B,GAAOkB,QAAUlB,EAAM6C,KAAchD,IAExDG,EAAM6C,GAAY1C,EAElB+E,EAAS,CACPnF,QAASwF,EAAWC,OAAO,CAAC,CAAExF,MAAAA,EAAO6C,SAAAA,KACrCzC,KAAMmF,EAAWtD,OACjB9B,KAAMA,IAASP,EN/BN,IM+BcA,MAmCoByC,OAAQA,QAErD,SAAC,EAAD,CAAStC,QAASA,EAAS0C,WA3BZ,SAACgD,GAClB,IAAMC,EAA0B,CAC9BtF,KAAMqF,EACNtF,KAAMyB,EAAQ6D,GACd1F,QAAAA,GAGEK,IAASqF,IACXC,EAAQ3F,QAAUA,EAAQoF,MAAM,EAAG/E,EAAO,IAG5C8E,EAASQ,IAgB4CtF,KAAMA","sources":["recoil/tic-tac-toe-atom.ts","components/games/tictactoe/Header.tsx","components/games/tictactoe/helpers.ts","components/games/tictactoe/History.tsx","components/games/tictactoe/Cell.tsx","components/games/tictactoe/Board.tsx","components/games/tictactoe/TicTacToe.tsx"],"sourcesContent":["import { atom } from \"recoil\";\n\nexport interface HistoryEntry {\n  board: string[] | null[];\n  location?: number;\n}\nexport interface TicTacToeState {\n  history: HistoryEntry[];\n  turn: string;\n  step: number;\n}\n\nexport const X = \"X\";\nexport const O = \"O\";\nexport const EMPTY = null;\nexport const newTicTacToe = (): TicTacToeState => ({\n  history: [{ board: Array(9).fill(EMPTY) }],\n  turn: X,\n  step: 0,\n});\n\nconst tikTacToeAtom = atom({\n  key: \"tikTacToeAtom\",\n  default:\n    (JSON.parse(\n      localStorage.getItem(\"tik-tac-toe-atom\") || \"null\"\n    ) as TicTacToeState) || newTicTacToe(),\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"tik-tac-toe-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\nexport default tikTacToeAtom;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\n\ninterface HeaderProps {\n  newGame: React.MouseEventHandler;\n  turn: string;\n  winner: string | null;\n}\n\nconst Header: React.FC<HeaderProps> = React.memo(\n  ({ winner, turn, newGame }: HeaderProps) => (\n    <Toolbar>\n      <Typography style={{ flex: 1 }} variant=\"h6\">\n        {winner ? `Winner: ${winner}` : `Turn: ${turn}`}\n      </Typography>\n      <Button\n        color=\"primary\"\n        onClick={newGame}\n        variant=\"contained\"\n        style={{ color: \"black\" }}\n      >\n        Reset Game\n      </Button>\n    </Toolbar>\n  )\n);\n\nexport default Header;\n","import { O, X, EMPTY } from \"../../../recoil/tic-tac-toe-atom\";\n\nexport const getTurn = (n: number): string => (n % 2 ? O : X);\n\n/** function to check if there are 3 in a row\n * @return value of winner and positions for winner */\nexport function calculateWinner(board: string[] | null[]): {\n  winner: string | null;\n  winRow: [number?, number?, number?];\n} {\n  const lines: [number, number, number][] = [\n    // horizontal\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    // vertical\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    // diagonal\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  // check each win condition\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n    // if all 3 match and aren't empty\n    if (board[a] !== EMPTY && board[a] === board[b] && board[a] === board[c]) {\n      // return winner and winning positions\n      return { winner: board[a], winRow: lines[i] };\n    }\n  }\n  return { winner: null, winRow: [] };\n}\n\nexport default getTurn;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport { getTurn } from \"./helpers\";\nimport { HistoryEntry } from \"../../../recoil/tic-tac-toe-atom\";\n\ninterface HistoryProps {\n  history: HistoryEntry[];\n  jumpToStep: (move: number) => void;\n  step: number;\n}\n\nconst History: React.FC<HistoryProps> = (props: HistoryProps) => {\n  const [ascend, setAscend] = React.useState(true);\n  const { history, step, jumpToStep } = props;\n\n  /** function that generates text for the history tracker */\n  const getHistoryText = React.useCallback(\n    (round: HistoryEntry, move: number): React.ReactNode => {\n      const location = round.location || 0;\n      // generate description text\n      const description = !move\n        ? \"Game Start (Turn, Col, Row)\"\n        : `Move #${move} (${getTurn(move - 1)}, ` +\n          `${Math.floor(location / 3)}, ${location % 3})`;\n      // highlight current turn displayed on board\n      const color = step === move ? \"secondary\" : \"primary\";\n\n      return (\n        <Button\n          key={move}\n          color={color}\n          onClick={(): void => jumpToStep(move)}\n          style={{ display: \"block\" }}\n        >\n          {description}\n        </Button>\n      );\n    },\n    [jumpToStep, step]\n  );\n\n  // move history\n  const moves = history.map(getHistoryText);\n  // asc vs. desc\n  !ascend && moves.reverse();\n\n  return (\n    <>\n      <Button\n        onClick={(): void => {\n          setAscend(!ascend);\n        }}\n        style={{ marginTop: 20, marginBottom: 20, color: \"black\" }}\n        variant=\"contained\"\n      >\n        {ascend ? \"Asc\" : \"Desc\"}\n      </Button>\n      {moves}\n    </>\n  );\n};\n\nexport default History;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport { useTheme } from \"@mui/material/styles\";\n\ninterface CellProps {\n  onClick: React.MouseEventHandler;\n  value: string | null;\n  winner: boolean;\n}\n\nconst Cell: React.FC<CellProps> = React.memo((props: CellProps) => {\n  const { value, winner, onClick } = props;\n  const {\n    palette: {\n      primary: { main },\n    },\n  } = useTheme();\n  // add attributes if cell is a winner\n  const attr: React.CSSProperties = winner\n    ? { color: \"white\", backgroundColor: main }\n    : {};\n\n  return (\n    <Button\n      onClick={onClick}\n      style={attr}\n      aria-label={`Tic Tac Toe Play Button ${\n        value ? `${value} selected` : \"available\"\n      }`}\n    >\n      {value || <br />}\n    </Button>\n  );\n});\n\nexport default Cell;\n","import React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { grey } from \"@mui/material/colors\";\nimport Cell from \"./Cell\";\n\ninterface BoardProps {\n  board: string[] | null[];\n  onClick: (cell: number) => void;\n  winRow: [number?, number?, number?];\n}\n\nconst tableCellStyle: React.CSSProperties = {\n  padding: 0,\n  textAlign: \"center\",\n  border: `1px solid ${grey[400]}`,\n};\n\nconst Board: React.FC<BoardProps> = (props: BoardProps) => {\n  const { board, onClick, winRow } = props;\n\n  const cells = [];\n\n  // create 3 rows\n  for (let i = 0; i < 3; i += 1) {\n    // create 3 cells in a row\n    const row = [];\n    for (let j = 0; j < 3; j += 1) {\n      const c = i * 3 + j;\n      // check if winning position\n      const winner = winRow.includes(c);\n      row.push(\n        <TableCell key={`${i},${j}`} style={tableCellStyle}>\n          <Cell\n            onClick={(): void => onClick(c)}\n            value={board[c]}\n            winner={winner}\n          />\n        </TableCell>\n      );\n    }\n    const boardRow = <TableRow key={`row${i}`}>{row}</TableRow>;\n    // separate into rows\n    cells.push(boardRow);\n  }\n\n  return (\n    <Table>\n      <TableBody>{cells}</TableBody>\n    </Table>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Typography from \"@mui/material/Typography\";\nimport { useRecoilState } from \"recoil\";\nimport ticTacToeAtom, {\n  TicTacToeState,\n  X,\n  O,\n  EMPTY,\n  newTicTacToe,\n} from \"../../../recoil/tic-tac-toe-atom\";\nimport Header from \"./Header\";\nimport History from \"./History\";\nimport Board from \"./Board\";\nimport { getTurn, calculateWinner } from \"./helpers\";\n\nconst paperStyles: React.CSSProperties = {\n  width: 343,\n  display: \"block\",\n  margin: \"auto\",\n};\n\n/* TicTacToe  ->  Header\n *           |->  Board  ->  Cell\n *           |->  History */\nconst TicTacToe: React.FC = () => {\n  const [state, setState] = useRecoilState(ticTacToeAtom);\n  const { turn, step, history } = state;\n\n  /** function that modifies board with appropriate turn\n   * @param location - location of board click (row * 3 + col) */\n  const handleClick = (location: number): void => {\n    const newHistory = history.slice(0, step + 1);\n    const current = newHistory[step];\n    const board = current.board.slice();\n\n    // game is over or cell is full\n    if (!calculateWinner(board).winner && board[location] === EMPTY) {\n      // place marker, then update turn\n      board[location] = turn;\n\n      setState({\n        history: newHistory.concat([{ board, location }]),\n        step: newHistory.length,\n        turn: turn === X ? O : X,\n      });\n    }\n  };\n\n  /** function that resets game back to it's initial state */\n  const newTTTGame = (): void => setState(newTicTacToe());\n\n  /** function that modifies board to go back to a previous point in history\n   * @param step - desired point in history */\n  const jumpToStep = (stepNo: number): void => {\n    const newTurn: TicTacToeState = {\n      step: stepNo,\n      turn: getTurn(stepNo),\n      history,\n    };\n    // Double click will eliminate all other history if there is any\n    if (step === stepNo) {\n      newTurn.history = history.slice(0, step + 1);\n    }\n    // update board to previous turn, non-permanent, history exists still\n    setState(newTurn);\n  };\n\n  const current = history[step];\n  const board = current.board.slice();\n  const { winner, winRow } = calculateWinner(board);\n\n  return (\n    <>\n      <Typography variant=\"h2\" gutterBottom>\n        Tic-Tac-Toe\n      </Typography>\n      <Paper elevation={2} style={paperStyles}>\n        <Header newGame={newTTTGame} turn={turn} winner={winner} />\n        <Board board={board} onClick={handleClick} winRow={winRow} />\n      </Paper>\n      <History history={history} jumpToStep={jumpToStep} step={step} />\n    </>\n  );\n};\n\nexport default TicTacToe;\n"],"names":["X","EMPTY","newTicTacToe","history","board","Array","fill","turn","step","atom","key","default","JSON","parse","localStorage","getItem","effects","onSet","state","setItem","stringify","React","winner","newGame","Toolbar","Typography","style","flex","variant","Button","color","onClick","getTurn","n","calculateWinner","lines","i","length","a","b","c","winRow","props","ascend","setAscend","jumpToStep","getHistoryText","round","move","location","description","Math","floor","display","moves","map","reverse","marginTop","marginBottom","value","main","useTheme","palette","primary","attr","backgroundColor","tableCellStyle","padding","textAlign","border","grey","cells","row","j","includes","push","TableCell","boardRow","TableRow","Table","TableBody","paperStyles","width","margin","useRecoilState","ticTacToeAtom","setState","slice","gutterBottom","Paper","elevation","newHistory","concat","stepNo","newTurn"],"sourceRoot":""}