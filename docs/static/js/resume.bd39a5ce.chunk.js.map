{"version":3,"sources":["hooks/useToggle.ts","apis/noop.ts","helpers/lazyWithPreload.ts","hooks/useAnchorEl.ts","components/common/ButtonPopover.tsx","components/common/header/PlayerMenu.tsx","components/common/header/TopBar.tsx","components/common/header/Header.tsx","components/resume/Menu.tsx","components/resume/Routes.tsx"],"names":["useToggleState","defaultVal","React","useState","isToggled","setIsToggled","handleToggle","lazyWithPreload","ComponentPromise","lazy","useAnchorEl","anchorEl","setAnchorEl","setAnchor","e","currentTarget","clearAnchor","contentStyle","padding","ButtonPopover","props","children","buttonText","open","Boolean","Button","aria-haspopup","variant","component","onClick","Popover","id","onClose","anchorOrigin","vertical","horizontal","transformOrigin","style","cloneElement","namePadStyles","maxWidth","width","display","margin","PlayerMenu","players","useSelector","state","dispatch","useDispatch","isBot","useMemo","map","a","useCallback","isChecked","updateBot","handleBlur","updateName","target","value","handleKeyPress","key","Grid","container","spacing","item","xs","Typography","p","i","name","TextField","defaultValue","onBlur","onKeyPress","placeholder","Switch","checked","color","onChange","_e","isC","disabled","cursorStyles","cursor","flexLeftStyles","alignItems","flexRightStyles","marginRight","spanTopStyles","left","right","top","TopBar","theme","type","setChecked","toggleTheme","displayDarkTheme","displayLightTheme","toggleOpen","showPlayers","fontColor","iconColor","AppBar","Toolbar","disableGutters","className","IconButton","aria-label","defaultProps","memo","Header","isOpen","setIsOpen","useTheme","palette","handleNav","handleNavigation","loc","Drawer","position","onItemClick","noop","github","window","linkedIn","stackOverflow","Menu","menu","route","divider","index","Divider","MenuItem","alt","src","paddingLeft","paddingRight","Summary","Work","Education","TravelMap","Resume","GitTools","Poker","MurderMystery","GraphQL","Cars","Routes","url","match","paths","reduce","acc","obj","path","push","exact","from","to","Suspense","fallback"],"mappings":"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","file":"static/js/resume.bd39a5ce.chunk.js","sourcesContent":["import React from 'react';\n\ntype ToggleStateHook = [ boolean, React.MouseEventHandler, Function ];\n\nconst useToggleState = (defaultVal = false): ToggleStateHook => {\n  const [isToggled, setIsToggled] = React.useState(defaultVal);\n\n  const handleToggle = (): void => { setIsToggled(!isToggled); };\n\n  return [isToggled, handleToggle, setIsToggled];\n};\n\nexport default useToggleState;\n","export default (): void => { /* do nothing */ };\n","import React from 'react';\n\ntype Props = {};\ntype ReactComponent = React.ComponentType<Props>;\ntype ImportPromise = Promise<{ default: ReactComponent }>;\ntype LazyComponent = React.LazyExoticComponent<ReactComponent>;\n\nexport default function lazyWithPreload(ComponentPromise: ImportPromise): LazyComponent {\n  return React.lazy(() => ComponentPromise);\n}\n","import React from 'react';\n\ninterface AnchorElHook {\n  anchorEl: null | HTMLElement;\n  setAnchor: React.MouseEventHandler;\n  clearAnchor: React.MouseEventHandler;\n}\n\nconst useAnchorEl = (): AnchorElHook => {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const setAnchor = (e: React.MouseEvent<HTMLButtonElement>): void => {\n    setAnchorEl(e.currentTarget);\n  };\n  const clearAnchor = (): void => {\n    setAnchorEl(null);\n  };\n  return { anchorEl, setAnchor, clearAnchor };\n};\n\nexport default useAnchorEl;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Popover from '@material-ui/core/Popover';\nimport useAnchorEl from '../../hooks/useAnchorEl';\n\ninterface ButtonPopoverProps {\n  children: React.ReactElement;\n  buttonText: string;\n}\n\nconst contentStyle: React.CSSProperties = { padding: 15 };\n\nconst ButtonPopover = (props: ButtonPopoverProps): React.ReactElement => {\n  const { anchorEl, setAnchor, clearAnchor } = useAnchorEl();\n  const { children, buttonText } = props;\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <Button\n        aria-haspopup=\"true\"\n        variant=\"contained\"\n        component=\"button\"\n        onClick={setAnchor}\n      >\n        {buttonText}\n      </Button>\n      <Popover\n        id=\"simple-popper\"\n        open={open}\n        anchorEl={anchorEl}\n        onClose={clearAnchor}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'center' }}\n      >\n        <div style={contentStyle}>\n          {React.cloneElement(children)}\n        </div>\n      </Popover>\n    </>\n  );\n};\n\nexport default ButtonPopover;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Switch from '@material-ui/core/Switch';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { updateName, updateBot } from '../../../store/modules/players';\nimport { DBRootState } from '../../../store/types';\n\nconst namePadStyles: React.CSSProperties = {\n  maxWidth: '420px',\n  width: '100%',\n  display: 'block',\n  margin: 'auto',\n};\n\nconst PlayerMenu: React.FC<{}> = () => {\n  const players = useSelector((state: DBRootState) => state.players);\n  const dispatch = useDispatch();\n\n  const isBot = React.useMemo(() => players.map((a) => a.isBot), [players]);\n\n  /** toggle between bot and human player - dispatch to redux */\n  const handleToggle = React.useCallback(\n    (id: number, isChecked: boolean): void => {\n      dispatch(updateBot(id, isChecked));\n    },\n    [dispatch],\n  );\n\n  /** update player name onBlur - dispatch to redux */\n  const handleBlur = React.useCallback(\n    (id: number) => (e: React.FocusEvent<HTMLInputElement>): void => {\n      dispatch(updateName(id, e.target.value || ''));\n    },\n    [dispatch],\n  );\n\n  /** if enter key was pressed in textfield, update name - dispatch to redux */\n  const handleKeyPress = React.useCallback(\n    (id: number) => (e: React.KeyboardEvent<HTMLDivElement>): void => {\n      if (e.key === 'Enter') {\n        dispatch(updateName(id, (e.target as HTMLInputElement).value || ''));\n      }\n    },\n    [dispatch],\n  );\n\n  return (\n    <div style={namePadStyles}>\n      <Grid container spacing={1}>\n        <Grid item xs={9}>\n          <Typography variant=\"h5\">\n            Edit Player Names\n          </Typography>\n        </Grid>\n        <Grid item xs={3}>\n          <Typography variant=\"h5\">\n            Is Bot?\n          </Typography>\n        </Grid>\n      </Grid>\n      {players.map((p, i) => (p.id !== 0\n        ? (\n          <Grid key={`${p.name},${i}`} container spacing={1}>\n            <Grid item xs={9}>\n              <TextField\n                defaultValue={p.name}\n                onBlur={handleBlur(p.id)}\n                onKeyPress={handleKeyPress(p.id)}\n                placeholder=\"Enter Player Name\"\n              />\n            </Grid>\n            <Grid item xs={3}>\n              <Switch\n                checked={isBot[i]}\n                color=\"primary\"\n                onChange={(_e, isC): void => handleToggle(p.id, isC)}\n              />\n            </Grid>\n          </Grid>\n        ) : (\n          <Grid key={`${p.name},${i}`} container spacing={1}>\n            <Grid item xs={9}>\n              <Typography variant=\"h5\">\n                {p.name}\n              </Typography>\n            </Grid>\n            <Grid item xs={3}>\n              <Switch checked disabled />\n            </Grid>\n          </Grid>\n        )\n      ))}\n    </div>\n  );\n};\n\nexport default PlayerMenu;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Switch from '@material-ui/core/Switch';\nimport SimplePopover from '../ButtonPopover';\nimport PlayerMenu from './PlayerMenu';\nimport {\n  displayDarkTheme,\n  displayLightTheme,\n} from '../../../store/modules/theme';\nimport { DBRootState } from '../../../store/types';\n\nconst cursorStyles: React.CSSProperties = { cursor: 'pointer' };\nconst flexLeftStyles: React.CSSProperties = { display: 'flex', alignItems: 'center' };\nconst flexRightStyles: React.CSSProperties = { display: 'flex', marginRight: 15 };\nconst spanTopStyles: React.CSSProperties = { left: 0, right: 0, top: 0 };\n\ninterface TopBarProps {\n  /** change the color scheme of the Menu text */\n  fontColor: TypographyProps['color'];\n  /** change the color scheme of the icon */\n  iconColor: 'inherit' | 'primary' | 'secondary' | 'default' | undefined;\n  /** show/hide the player editor button */\n  showPlayers: boolean;\n  /** callback called onClick of Icon or Menu text */\n  toggleOpen: React.MouseEventHandler;\n}\n\nconst TopBar = (props: TopBarProps): React.ReactElement => {\n  const theme = useSelector((state: DBRootState) => state.theme);\n  const dispatch = useDispatch();\n  const [checked, setChecked] = React.useState(theme.type !== 'dark');\n\n  /** function toggle between site's light and dark theme - dispatch to Redux */\n  const toggleTheme = React.useCallback(\n    (): void => {\n      checked\n        ? dispatch(displayDarkTheme())\n        : dispatch(displayLightTheme());\n      setChecked(!checked);\n    },\n    [checked, dispatch],\n  );\n\n  const {\n    toggleOpen, showPlayers, fontColor, iconColor,\n  } = props;\n\n  return (\n    <AppBar style={spanTopStyles}>\n      <Toolbar disableGutters>\n        <div className=\"flex-container\">\n          <div style={flexLeftStyles}>\n            <IconButton\n              aria-label=\"Menu\"\n              onClick={toggleOpen}\n              color={iconColor}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography\n              onClick={toggleOpen}\n              style={cursorStyles}\n              variant=\"h6\"\n              color={fontColor}\n            >\n              Menu\n            </Typography>\n          </div>\n          {showPlayers && (\n            <div style={flexRightStyles}>\n              <SimplePopover buttonText=\"Players\">\n                <PlayerMenu />\n              </SimplePopover>\n            </div>\n          )}\n          <div style={flexRightStyles}>\n            <Switch checked={checked} onChange={toggleTheme} />\n          </div>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nTopBar.defaultProps = {\n  showPlayers: false,\n};\n\nexport default React.memo(TopBar);\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Drawer from '@material-ui/core/Drawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport NavigationClose from '@material-ui/icons/Close';\nimport { useTheme } from '@material-ui/core/styles';\nimport TopBar from './TopBar';\nimport useToggleState from '../../../hooks/useToggle';\nimport noop from '../../../apis/noop';\n\ninterface NavProps {\n  onItemClick: (loc: string) => void;\n}\ninterface HeaderProps {\n  /** content of the header bar */\n  children: React.ReactElement<NavProps>;\n  /** callback function, wrapped with logic, then passed as onItemClick to children */\n  handleNav: Function;\n  /** show/hide the player editor button */\n  showPlayers: boolean;\n}\n\nconst Header = (props: HeaderProps): React.ReactElement => {\n  const [isOpen, toggleOpen, setIsOpen] = useToggleState(false);\n  const { palette: { type }} = useTheme();\n  const { children, handleNav, showPlayers } = props;\n\n  /** close the menu and call the passed callback */\n  const handleNavigation = React.useCallback((loc: string): void => {\n    setIsOpen(false);\n    handleNav(loc);\n  }, [handleNav, setIsOpen]);\n\n  const iconColor = type === 'light' ? 'inherit' : 'default';\n  const fontColor = type === 'light' ? 'inherit' : 'initial';\n\n  return (\n    <>\n      <TopBar toggleOpen={toggleOpen} showPlayers={showPlayers} fontColor={fontColor} iconColor={iconColor} />\n      <Drawer onClose={toggleOpen} open={isOpen}>\n        <AppBar position=\"sticky\">\n          <Toolbar disableGutters>\n            <IconButton\n              aria-label=\"Menu Close\"\n              onClick={toggleOpen}\n              color={iconColor}\n            >\n              <NavigationClose />\n            </IconButton>\n            <Typography variant=\"h6\" color={fontColor}>\n              Menu\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        {React.cloneElement(children, { onItemClick: handleNavigation })}\n      </Drawer>\n    </>\n  );\n};\n\nHeader.defaultProps = {\n  showPlayers: false,\n  handleNav: noop,\n};\n\nexport default Header;\n","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Divider from '@material-ui/core/Divider';\nimport noop from '../../apis/noop';\n\ninterface MenuProps {\n  onItemClick?: Function;\n}\n\n// external links\nconst github = (): void => { window.open('https://github.com/kennethbigler/react-home'); };\nconst linkedIn = (): void => { window.open('https://www.linkedin.com/in/kennethbigler'); };\nconst stackOverflow = (): void => { window.open('https://stackoverflow.com/users/4830309/ken-bigler'); };\n\nconst Menu: React.FC<MenuProps> = React.memo((props: MenuProps) => {\n  const { onItemClick } = props;\n  // internal routes\n  const menu = React.useMemo(() => [\n    { name: 'Summary', route: '' },\n    { name: 'Work', route: 'work' },\n    { name: 'Resume', route: 'resume' },\n    { name: 'Hackathons & Education', route: 'education' },\n    { divider: true },\n    { name: 'Git Tools', route: 'git-tools' },\n    { name: 'GraphQL Demo', route: 'graphql' },\n    { divider: true },\n    { name: 'Cars', route: 'cars' },\n    { name: 'Travel Map', route: 'travel' },\n    { name: 'Murder Mystery', route: 'murder' },\n    { name: 'Poker Night Scores', route: 'poker' },\n    { name: 'React Games', route: 'games' },\n  ].map((item, index) => (item.divider\n    ? (\n      <Divider key={index} />\n    ) : (\n      <MenuItem key={item.name} onClick={(): void => (onItemClick ? onItemClick(`/${item.route}`) : noop())}>\n        {item.name}\n      </MenuItem>\n    )\n  )), [onItemClick]);\n\n  return (\n    <>\n      {menu}\n      <Divider />\n      <MenuItem onClick={github}>\n        GitHub\n      </MenuItem>\n      <MenuItem onClick={linkedIn}>\n        LinkedIn\n      </MenuItem>\n      <Divider />\n      <br />\n      <img\n        alt=\"profile for Ken Bigler at Stack Overflow, Q&A for professional and enthusiast programmers\"\n        id=\"stackOverflow\"\n        onClick={stackOverflow}\n        src=\"https://stackoverflow.com/users/flair/4830309.png?theme=dark\"\n        style={{\n          display: 'block',\n          margin: 'auto',\n          cursor: 'pointer',\n          width: 240,\n          paddingLeft: 16,\n          paddingRight: 16,\n        }}\n      />\n    </>\n  );\n});\n\nexport default Menu;\n","import React from 'react';\nimport {\n  Switch, Route, Redirect, match as Match,\n} from 'react-router-dom';\nimport lazyWithPreload from '../../helpers/lazyWithPreload';\nimport Header from '../common/header/Header';\nimport Menu from './Menu';\nimport LoadingSpinner from '../common/loading-spinner';\n\n// lazy load page components\nconst Summary = lazyWithPreload(import(/* webpackChunkName: \"r_summary\" */ './summary'));\nconst Work = lazyWithPreload(import(/* webpackChunkName: \"r_work\" */ './work'));\nconst Education = lazyWithPreload(import(/* webpackChunkName: \"r_education\" */ './education'));\nconst TravelMap = lazyWithPreload(import(/* webpackChunkName: \"r_travel\" */ './travel-map'));\nconst Resume = lazyWithPreload(import(/* webpackChunkName: \"r_resume\" */ './resume'));\nconst GitTools = lazyWithPreload(import(/* webpackChunkName: \"r_git\" */ './git-tools'));\nconst Poker = lazyWithPreload(import(/* webpackChunkName: \"r_poker\" */ './poker'));\nconst MurderMystery = lazyWithPreload(import(/* webpackChunkName: \"r_poker\" */ './murder-mystery'));\nconst GraphQL = lazyWithPreload(import(/* webpackChunkName: \"r_graphql\" */ './graphql'));\nconst Cars = lazyWithPreload(import(/* webpackChunkName: \"r_cars\" */ './cars'));\n\ninterface RoutesProps {\n  handleNav: Function;\n  match: Match;\n}\n\nconst Routes: React.FC<RoutesProps> = (props: RoutesProps) => {\n  const { match: { url }, handleNav } = props;\n\n  const paths = React.useMemo(() => [\n    { name: 'work', component: Work },\n    { name: 'education', component: Education },\n    { name: 'travel', component: TravelMap },\n    { name: 'resume', component: Resume },\n    { name: 'git-tools', component: GitTools },\n    { name: 'poker', component: Poker },\n    { name: 'murder', component: MurderMystery },\n    { name: 'graphql', component: GraphQL },\n    { name: 'cars', component: Cars },\n  ].reduce((acc: React.ReactNodeArray, obj) => {\n    const { name, component } = obj;\n    const path = `${url}${name}`;\n    acc.push(<Route key={`${path}r`} exact {...{ path, component }} />);\n    acc.push(<Redirect key={`${path}d`} from={`${path}*`} to={path} />);\n    return acc;\n  },\n  []), [url]);\n\n  return (\n    <>\n      <Header handleNav={handleNav}>\n        <Menu />\n      </Header>\n      <React.Suspense fallback={<LoadingSpinner />}>\n        <Switch>\n          <Route component={Summary} exact path={`${url}`} />\n          {paths}\n          <Redirect from={`${url}*`} to={`${url}`} />\n          <Route component={Summary} />\n        </Switch>\n      </React.Suspense>\n    </>\n  );\n};\n\nexport default Routes;\n"],"sourceRoot":""}