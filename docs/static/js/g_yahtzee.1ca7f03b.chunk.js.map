{"version":3,"sources":["../node_modules/lodash/isArray.js","../node_modules/lodash/toString.js","../node_modules/lodash/_arrayMap.js","../node_modules/lodash/_baseToString.js","hooks/useOpenState.ts","components/common/InfoPopup.tsx","../node_modules/lodash/maxBy.js","apis/Dice.ts","components/games/yahtzee/score-table/Header.tsx","components/games/yahtzee/score-table/TopScores.tsx","components/games/yahtzee/score-table/TopTable.tsx","components/games/yahtzee/types.ts","components/games/yahtzee/score-table/scoreTableHelper.ts","components/games/yahtzee/score-table/BottomScores.tsx","components/games/yahtzee/score-table/BottomTable.tsx","components/games/yahtzee/score-table/ScoreTable.tsx","components/games/yahtzee/ScoreGraph.tsx","components/games/yahtzee/Header.tsx","components/games/yahtzee/TableHeader.tsx","components/games/yahtzee/Yahtzee.tsx","components/games/yahtzee/index.ts"],"names":["isArray","Array","module","exports","baseToString","value","array","iteratee","index","length","result","Symbol","arrayMap","isSymbol","INFINITY","symbolProto","prototype","undefined","symbolToString","toString","call","useOpenState","defaultVal","React","useState","isOpen","setIsOpen","handleOpen","handleClose","InfoPopup","props","buttonText","title","children","color","onClick","variant","onClose","open","maxWidth","fullWidth","baseExtremum","baseGt","baseIteratee","Math","floor","random","Header","memo","TableHead","TableRow","TableCell","style","TopScores","topSum","finalTopSum","colSpan","TopTable","top","map","i","name","score","d","values","reduce","count","val","getButtonInfo","sum","showButton","key","showScoreButtons","getScoreButton","getTopTableButtons","generateTopTable","ADD_DICE","hasXDice","n","hist","hasDice","Object","forEach","isStraight","BottomScores","bottomSum","BottomTable","has3","has2","isFullHouse","console","error","getBottomTableButtons","points","hasYahtzee","entries","acc","Number","canYahtzeeBonus","bottom","gameScore","hint","parsedPoints","generateBottomTable","centerStyle","textAlign","ScoreTable","onTopScore","onBottomScore","wasTop","Button","Table","size","TableBody","withTheme","dBScores","scores","main","theme","palette","secondary","useMemo","generateScoreGraph","mostRecent","topScore","maxBy","width","height","data","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","interval","orientation","tickLine","type","stroke","fillOpacity","fill","Typography","className","wrapperStyles","display","margin","TableHeader","saved","roll","handleUnsave","handleSave","handleDiceRoll","getButtonText","topConstants","bottomConstants","connect","state","yahtzee","dispatch","actions","bindActionCreators","addScore","diceClick","newGame","nextRoll","updateTop","updateBottom","updateRoll","topScores","bottomScores","finish","push","splice","sort","hasScored","DiceAPI","rollNum","Yahtzee"],"mappings":"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","file":"static/js/g_yahtzee.1ca7f03b.chunk.js","sourcesContent":["/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\nmodule.exports = isArray;","var baseToString = require('./_baseToString');\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\n\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n\n  return result;\n}\n\nmodule.exports = arrayMap;","var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n/** Used as references for various `Number` constants. */\n\n\nvar INFINITY = 1 / 0;\n/** Used to convert symbols to primitives and strings. */\n\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\n\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n\n  var result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\n\nmodule.exports = baseToString;","import React from 'react';\n\ntype OpenStateHook = [\n  boolean,\n  Function,\n  Function,\n]\n\nconst useOpenState = (defaultVal = false): OpenStateHook => {\n  const [isOpen, setIsOpen] = React.useState(defaultVal);\n\n  const handleOpen = (): void => { setIsOpen(true); };\n  const handleClose = (): void => { setIsOpen(false); };\n\n  return [isOpen, handleOpen, handleClose];\n};\n\nexport default useOpenState;\n","import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport useOpenState from '../../hooks/useOpenState';\n\ninterface InfoPopupProps {\n  children: React.ReactNodeArray;\n  title: string | React.ReactElement;\n  buttonText?: string | React.ReactElement;\n}\n\nconst InfoPopup: React.FC<InfoPopupProps> = (props: InfoPopupProps) => {\n  const [isOpen, handleOpen, handleClose] = useOpenState();\n\n  const { buttonText, title, children } = props;\n  return (\n    <>\n      <Button color=\"primary\" onClick={handleOpen as React.MouseEventHandler} variant=\"contained\">\n        {buttonText || title}\n      </Button>\n      <Dialog onClose={handleClose as React.MouseEventHandler} open={isOpen} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          {title}\n        </DialogTitle>\n        <DialogContent>\n          {children}\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={handleClose as React.MouseEventHandler}>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default InfoPopup;\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    baseIteratee = require('./_baseIteratee');\n/**\n * This method is like `_.max` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.maxBy(objects, function(o) { return o.n; });\n * // => { 'n': 2 }\n *\n * // The `_.property` iteratee shorthand.\n * _.maxBy(objects, 'n');\n * // => { 'n': 2 }\n */\n\n\nfunction maxBy(array, iteratee) {\n  return array && array.length ? baseExtremum(array, baseIteratee(iteratee, 2), baseGt) : undefined;\n}\n\nmodule.exports = maxBy;","import { Dice } from '../store/types';\n\nexport default {\n  // randomize order of the cards\n  roll(): Dice {\n    return Math.floor(Math.random() * 6) + 1 as Dice;\n  },\n};\n\n// Dice as a react hook, seems kind of like an anti-pattern\nexport function useDice(): () => number {\n  function rollDice(): number {\n    return Math.floor(Math.random() * 6) + 1;\n  }\n\n  return rollDice;\n}\n","import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\ninterface HeaderProps {\n  style: React.CSSProperties;\n}\n\nconst Header: React.FC<HeaderProps> = React.memo((props: HeaderProps) => (\n  <TableHead>\n    <TableRow>\n      <TableCell>Minimum Required for Bonus</TableCell>\n      <TableCell>How to Score</TableCell>\n      <TableCell style={props.style}>Game Score</TableCell>\n    </TableRow>\n  </TableHead>\n));\n\nexport default Header;\n","import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\ninterface TopScoresProps {\n  finalTopSum: number;\n  topSum: number;\n  style: React.CSSProperties;\n}\n\nconst TopScores: React.FC<TopScoresProps> = React.memo((props: TopScoresProps) => {\n  const { topSum, finalTopSum, style } = props;\n\n  return (\n    <>\n      <TableRow>\n        <TableCell colSpan={2}>Total == 63</TableCell>\n        <TableCell style={style}>{topSum}</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>Bonus if &gt;= 63</TableCell>\n        <TableCell>Score 35</TableCell>\n        <TableCell style={style}>{topSum >= 63 ? 35 : 0}</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell colSpan={2}>Upper Half Total</TableCell>\n        <TableCell style={style}>{finalTopSum}</TableCell>\n      </TableRow>\n      <TableRow />\n    </>\n  );\n});\n\nexport default TopScores;\n","import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { TopGameScore } from '../types';\nimport { Dice } from '../../../../store/types';\nimport TopScores from './TopScores';\n\ninterface TopTableProps {\n  finalTopSum: number;\n  getScoreButton: Function;\n  showScoreButtons: boolean;\n  style: React.CSSProperties;\n  top: TopGameScore[];\n  topSum: number;\n  values: Dice[];\n}\n\nconst TopTable: React.FC<TopTableProps> = (props: TopTableProps) => {\n  const getButtonInfo = (d: number): [number, number] => {\n    const { values } = props;\n    return values.reduce((count, val) => {\n      if (val === d) {\n        count[0] += 1;\n        count[1] += d;\n      }\n      return count;\n    }, [0, 0]);\n  };\n\n  const getTopTableButtons = (score: number, showButton: boolean, sum: number, i: number): React.ReactNode | null => {\n    const { showScoreButtons, getScoreButton } = props;\n    if (score >= 0) {\n      return score;\n    }\n    return showScoreButtons ? getScoreButton(showButton, sum, true, i) : null;\n  };\n\n  const generateTopTable = (): React.ReactNode => {\n    const { top, style } = props;\n    return top.map(({ name, score }, i) => {\n      const d = i + 1;\n      const [count, sum] = getButtonInfo(i + 1);\n      const showButton = count >= 1;\n\n      return (\n        <TableRow key={name}>\n          <TableCell>{`${name}: ${d},${d},${d} = ${d * 3}`}</TableCell>\n          <TableCell>{`Add Only ${name}`}</TableCell>\n          <TableCell style={style}>{getTopTableButtons(score, showButton, sum, i)}</TableCell>\n        </TableRow>\n      );\n    });\n  };\n\n  const { topSum, finalTopSum, style } = props;\n\n  return (\n    <>\n      {generateTopTable()}\n      <TopScores topSum={topSum} finalTopSum={finalTopSum} style={style} />\n    </>\n  );\n};\n\nexport default TopTable;\n","export const ADD_DICE = 'Sum of Dice';\ntype AddDice = 'Sum of Dice';\n\nexport interface TopGameScore {\n  name: string;\n  score: number;\n}\nexport interface BottomGameScore {\n  name: string;\n  score: number;\n  hint: string;\n  points: number | AddDice;\n}\n\nexport default ADD_DICE;\n","import { TopGameScore } from '../types';\nimport { Dice } from '../../../../store/types';\n\ninterface DiceHistogram {\n  0?: number;\n  1: number;\n  2: number;\n  3: number;\n  4: number;\n  5: number;\n  6: number;\n}\n\nexport const getHistogram = () => (hist: DiceHistogram, val: Dice): DiceHistogram => {\n  if (!hist[val]) {\n    hist[val] = 1;\n  } else {\n    hist[val] += 1;\n  }\n  return hist;\n};\n\nexport const hasXDice = (values: Dice[], n: number): boolean => {\n  const hist = values.reduce(getHistogram(), {} as DiceHistogram);\n  let hasDice = false;\n  Object.values(hist).forEach((value) => {\n    if (value >= n) {\n      hasDice = true;\n    }\n  });\n  return hasDice;\n};\n\nexport const isFullHouse = (values: Dice[]): boolean => {\n  const hist = values.reduce(getHistogram(), {} as DiceHistogram);\n\n  let has3 = false;\n  let has2 = false;\n\n  Object.values(hist).forEach((value) => {\n    if (value >= 3) {\n      has3 = true;\n    } else if (value >= 2) {\n      has2 = true;\n    }\n  });\n\n  return has3 && has2;\n};\n\nexport const isStraight = (values: Dice[], length: number): boolean => {\n  const hist = values.reduce(getHistogram(), {} as DiceHistogram);\n\n  let count = 0;\n  const dice: Dice[] = [1, 2, 3, 4, 5, 6];\n  dice.forEach((i: Dice) => {\n    if (count < length) {\n      const value = hist[i];\n      if (!value) {\n        count = 0;\n      } else {\n        count += 1;\n      }\n    }\n  });\n  return count >= length;\n};\n\nexport const canYahtzeeBonus = (values: Dice[], top: TopGameScore[]): boolean => Object.entries(\n  values.reduce(getHistogram(), {} as DiceHistogram),\n).reduce(\n  (acc: boolean, [key, value]) => {\n    if (value === 5 && top[Number(key) - 1].score >= 0) {\n      return true;\n    }\n    return acc;\n  },\n  false,\n);\n","import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\ninterface BottomScoresProps {\n  bottomSum: number;\n  finalTopSum: number;\n  style: React.CSSProperties;\n}\n\nconst BottomScores: React.FC<BottomScoresProps> = React.memo((props: BottomScoresProps) => {\n  const { finalTopSum, bottomSum, style } = props;\n\n  return (\n    <>\n      <TableRow>\n        <TableCell colSpan={2}>Lower Half Total</TableCell>\n        <TableCell style={style}>{bottomSum}</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell colSpan={2}>Upper Half Total</TableCell>\n        <TableCell style={style}>{finalTopSum}</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell colSpan={2}>Grand Total</TableCell>\n        <TableCell style={style}>{finalTopSum + bottomSum}</TableCell>\n      </TableRow>\n    </>\n  );\n});\n\nexport default BottomScores;\n","import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { TopGameScore, BottomGameScore, ADD_DICE } from '../types';\nimport { Dice } from '../../../../store/types';\nimport {\n  hasXDice, isFullHouse, isStraight, canYahtzeeBonus,\n} from './scoreTableHelper';\nimport BottomScores from './BottomScores';\n\ninterface BottomTableProps {\n  bottom: BottomGameScore[];\n  bottomSum: number;\n  finalTopSum: number;\n  getScoreButton: Function;\n  showScoreButtons: boolean;\n  style: React.CSSProperties;\n  top: TopGameScore[];\n  values: Dice[];\n}\n\nconst BottomTable: React.FC<BottomTableProps> = (props: BottomTableProps) => {\n  const getDiceValue = (): number => {\n    const { values } = props;\n    return values.reduce((sum: number, d) => sum + d, 0);\n  };\n\n  const showButton = (i: number): boolean => {\n    const { values } = props;\n    switch (i) {\n      case 0: // 3 of a kind\n        return hasXDice(values, 3);\n      case 1: // 4 of a kind\n        return hasXDice(values, 4);\n      case 2: // Full House\n        return isFullHouse(values);\n      case 3: // Sm. Straight\n        return isStraight(values, 4);\n      case 4: // Lg. Straight\n        return isStraight(values, 5);\n      case 5: // Yahtzee\n        return hasXDice(values, 5);\n      case 6: // Chance\n        return true;\n      default:\n        // eslint-disable-next-line no-console\n        console.error('Unexpected Value');\n        return false;\n    }\n  };\n\n  const getBottomTableButtons = (score: number, points: number, hasYahtzee: boolean, i: number): React.ReactNode | null => {\n    const { showScoreButtons, getScoreButton } = props;\n    if (score >= 0) {\n      return score;\n    }\n    if (showScoreButtons) {\n      // Yahtzee Bonus\n      if (hasYahtzee) {\n        const { values, top } = props;\n        if (canYahtzeeBonus(values, top)) {\n          return getScoreButton(true, points + 100, false, i);\n        }\n      }\n      return getScoreButton(showButton(i), points, false, i);\n    }\n    return null;\n  };\n\n  const generateBottomTable = (): React.ReactNode => {\n    const { bottom, style } = props;\n    const hasYahtzee = bottom[5].score > 0;\n    return bottom.map((gameScore, i) => {\n      const {\n        name, hint, points, score,\n      } = gameScore;\n\n      const parsedPoints = (points === ADD_DICE) ? getDiceValue() : points;\n\n      return (\n        <TableRow key={name}>\n          <TableCell>{name}</TableCell>\n          <TableCell>{hint}</TableCell>\n          <TableCell style={style}>{getBottomTableButtons(score, parsedPoints, hasYahtzee, i)}</TableCell>\n        </TableRow>\n      );\n    });\n  };\n\n  const { style, finalTopSum, bottomSum } = props;\n\n  return (\n    <>\n      {generateBottomTable()}\n      <BottomScores bottomSum={bottomSum} finalTopSum={finalTopSum} style={style} />\n    </>\n  );\n};\n\nexport default BottomTable;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport { TopGameScore, BottomGameScore } from '../types';\nimport { Dice } from '../../../../store/types';\nimport Header from './Header';\nimport TopTable from './TopTable';\nimport BottomTable from './BottomTable';\n\ninterface ScoreTableProps {\n  bottom: BottomGameScore[];\n  bottomSum: number;\n  finalTopSum: number;\n  onTopScore: Function;\n  onBottomScore: Function;\n  showScoreButtons: boolean;\n  top: TopGameScore[];\n  topSum: number;\n  values: Dice[];\n}\n\nconst centerStyle: React.CSSProperties = { textAlign: 'center' };\n\nconst ScoreTable: React.FC<ScoreTableProps> = (props: ScoreTableProps) => {\n  const {\n    bottom, bottomSum, finalTopSum, showScoreButtons,\n    top, topSum, values, onTopScore, onBottomScore,\n  } = props;\n\n  const getScoreButton = (showButton: boolean, points: number, wasTop: boolean, i: number): React.ReactNode => (\n    showButton ? (\n      <Button\n        color=\"primary\"\n        variant=\"outlined\"\n        onClick={wasTop\n          ? (): void => onTopScore(points, i)\n          : (): void => onBottomScore(points, i)}\n      >\n        {`Add ${points} Points`}\n      </Button>\n    ) : (\n      <Button\n        color=\"primary\"\n        variant=\"outlined\"\n        onClick={wasTop\n          ? (): void => onTopScore(0, i)\n          : (): void => onBottomScore(0, i)}\n      >\n          0\n      </Button>\n    )\n  );\n\n  return (\n    <Table size=\"small\">\n      <Header style={centerStyle} />\n      <TableBody>\n        <TopTable\n          finalTopSum={finalTopSum}\n          getScoreButton={getScoreButton}\n          showScoreButtons={showScoreButtons}\n          style={centerStyle}\n          top={top}\n          values={values}\n          topSum={topSum}\n        />\n        <BottomTable\n          finalTopSum={finalTopSum}\n          getScoreButton={getScoreButton}\n          showScoreButtons={showScoreButtons}\n          style={centerStyle}\n          top={top}\n          values={values}\n          bottom={bottom}\n          bottomSum={bottomSum}\n        />\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default ScoreTable;\n","import React from 'react';\nimport maxBy from 'lodash/maxBy';\nimport {\n  ResponsiveContainer, XAxis, YAxis, Tooltip, AreaChart, Area,\n} from 'recharts';\nimport { withTheme } from '@material-ui/core/styles';\nimport { Typography, Theme } from '@material-ui/core';\nimport InfoPopup from '../../common/InfoPopup';\n\ninterface ScoreGraphProps {\n  scores: number[];\n  theme: Theme;\n}\ninterface ScoreGraphEntry {\n  value: number;\n}\n\nconst generateScoreGraph = (scores: number[]): ScoreGraphEntry[] => (\n  scores.map((value) => ({ value }))\n);\n\nconst ScoreGraph: React.FC<ScoreGraphProps> = (props: ScoreGraphProps) => {\n  const { scores: dBScores, theme: { palette: { secondary: { main }}}} = props;\n\n  const scores = React.useMemo(() => generateScoreGraph(dBScores), [dBScores]);\n  const recent = scores[scores.length - 1] || { value: 0 };\n  const mostRecent = recent.value;\n  const top = maxBy(scores, 'value') || { value: 0 };\n  const topScore = top.value;\n\n  return (\n    <InfoPopup title=\"Yahtzee Score History\" buttonText=\"Score History\">\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <AreaChart data={scores}>\n          <defs>\n            <linearGradient id=\"mainColor\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"20%\" stopColor={main} stopOpacity={0.8} />\n              <stop offset=\"100%\" stopColor={main} stopOpacity={0} />\n            </linearGradient>\n          </defs>\n          <XAxis dataKey=\"name\" interval=\"preserveStartEnd\" />\n          <YAxis width={40} orientation=\"right\" tickLine={false} />\n          <Tooltip />\n          <Area type=\"monotone\" dataKey=\"value\" stroke={main} fillOpacity={1} fill=\"url(#mainColor)\" />\n        </AreaChart>\n      </ResponsiveContainer>\n      <Typography variant=\"h4\">{`Most Recent: ${mostRecent}`}</Typography>\n      <Typography variant=\"h4\">{`Top Score: ${topScore}`}</Typography>\n    </InfoPopup>\n  );\n};\n\nexport default withTheme(ScoreGraph);\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport ScoreGraph from './ScoreGraph';\n\ninterface HeaderProps {\n  scores: number[];\n}\n\nconst Header: React.FC<HeaderProps> = (props: HeaderProps) => {\n  const { scores } = props;\n\n  return (\n    <div className=\"flex-container\">\n      <Typography variant=\"h2\">Yahtzee</Typography>\n      <ScoreGraph scores={scores} />\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { Dice } from '../../../store/types';\n\ninterface TableHeaderProps {\n  roll: Dice;\n  values: Dice[];\n  saved: Dice[];\n  handleUnsave: Function;\n  handleSave: Function;\n  handleDiceRoll: React.MouseEventHandler;\n  getButtonText: Function;\n}\n\nconst wrapperStyles: React.CSSProperties = { display: 'block', margin: 'auto', width: 320 };\n\nconst TableHeader: React.FC<TableHeaderProps> = (props: TableHeaderProps) => {\n  const {\n    values, saved, roll, handleUnsave,\n    handleSave, handleDiceRoll, getButtonText,\n  } = props;\n\n  return (\n    <div className=\"flex-container\">\n      <Typography variant=\"h4\">{`Roll #${roll}/3`}</Typography>\n      <div style={wrapperStyles}>\n        {saved.map((val, i) => (\n          <Button color=\"secondary\" onClick={(): void => handleUnsave(i)} variant=\"outlined\" key={i}>\n            {val}\n          </Button>\n        ))}\n        {values.map((val, i) => (\n          <Button color=\"primary\" onClick={(): void => handleSave(i)} variant=\"outlined\" key={i}>\n            {val}\n          </Button>\n        ))}\n      </div>\n      <Button color=\"primary\" onClick={handleDiceRoll} variant=\"contained\">\n        {getButtonText(roll)}\n      </Button>\n    </div>\n  );\n};\n\nexport default TableHeader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport Typography from '@material-ui/core/Typography';\nimport DiceAPI from '../../../apis/Dice';\nimport ScoreTable from './score-table/ScoreTable';\nimport { ADD_DICE, TopGameScore, BottomGameScore } from './types';\nimport Header from './Header';\nimport TableHeader from './TableHeader';\nimport { DBRootState, Dice, DBYahtzee } from '../../../store/types';\nimport {\n  addScore, diceClick, newGame, nextRoll,\n  updateTop, updateBottom, updateRoll,\n} from '../../../store/modules/yahtzee';\n\ninterface YahtzeeActions {\n  addScore: typeof addScore;\n  diceClick: typeof diceClick;\n  newGame: typeof newGame;\n  nextRoll: typeof nextRoll;\n  updateTop: typeof updateTop;\n  updateBottom: typeof updateBottom;\n  updateRoll: typeof updateRoll;\n}\ninterface YahtzeeProps extends DBYahtzee {\n  actions: YahtzeeActions;\n}\n\nconst topConstants = [\n  { name: 'Aces' },\n  { name: 'Twos' },\n  { name: 'Threes' },\n  { name: 'Fours' },\n  { name: 'Fives' },\n  { name: 'Sixes' },\n];\nconst bottomConstants = [\n  { name: '3 of a kind', hint: ADD_DICE, points: ADD_DICE },\n  { name: '4 of a kind', hint: ADD_DICE, points: ADD_DICE },\n  { name: 'Full House', hint: 'Score 25', points: 25 },\n  { name: 'Sm. Straight (4)', hint: 'Score 30', points: 30 },\n  { name: 'Lg. Straight (5)', hint: 'Score 40', points: 40 },\n  { name: 'Yahtzee', hint: 'Score 50', points: 50 },\n  { name: 'Chance', hint: ADD_DICE, points: ADD_DICE },\n];\n\nconst Yahtzee: React.FC<YahtzeeProps> = (props: YahtzeeProps) => {\n  const {\n    topScores, bottomScores, values, saved,\n    roll, showScoreButtons, scores, actions,\n  } = props;\n\n  let count = 0;\n\n  const topSum = topScores.reduce((sum, score) => {\n    if (score >= 0) {\n      count += 1;\n      sum += score;\n    }\n    return sum;\n  }, 0);\n  const bottomSum = bottomScores.reduce((sum, score) => {\n    if (score >= 0) {\n      count += 1;\n      sum += score;\n    }\n    return sum;\n  }, 0);\n  let finalTopSum = 0;\n  if (topSum >= 63) {\n    finalTopSum += topSum + 35;\n  } else {\n    finalTopSum += topSum;\n  }\n\n  const finish = count >= 13;\n\n  const newYGame = (): void => {\n    actions.addScore(finalTopSum + bottomSum);\n    actions.newGame();\n  };\n\n  const handleDiceRoll = (): void => {\n    const { hasScored } = props;\n\n    if (finish) {\n      newYGame();\n    }\n    if (roll >= 3) {\n      if (hasScored === true) {\n        actions.nextRoll();\n      }\n      return;\n    }\n\n    for (let i = 0; i < values.length; i += 1) {\n      values[i] = DiceAPI.roll() as Dice;\n    }\n    values.sort();\n    saved.sort();\n\n    if (roll === 2) {\n      actions.updateRoll(values, saved, roll + 1 as Dice, true);\n    } else {\n      actions.updateRoll(values, saved, roll + 1 as Dice);\n    }\n  };\n\n  const handleSave = (i: number): void => {\n    if (values[i] === 0) {\n      return;\n    }\n    saved.push(values.splice(i, 1)[0]);\n    saved.sort();\n    actions.diceClick(values, saved);\n  };\n\n  const handleUnsave = (i: number): void => {\n    values.push(saved.splice(i, 1)[0]);\n    values.sort();\n    actions.diceClick(values, saved);\n  };\n\n  const getButtonText = (rollNum: Dice): string => {\n    if (finish) {\n      return 'New Game';\n    }\n\n    switch (rollNum) {\n      case 0:\n        return 'First Roll';\n      case 1:\n        return 'Second Roll';\n      case 2:\n        return 'Last Roll';\n      case 3:\n        return 'Next Turn';\n      default:\n        return 'Error';\n    }\n  };\n\n  const handleTopScore = (points: number, i: number): void => {\n    topScores[i] = points;\n    actions.updateTop(topScores);\n  };\n\n  const handleBottomScore = (points: number, i: number): void => {\n    bottomScores[i] = points;\n    actions.updateBottom(bottomScores);\n  };\n\n  const top = topScores.map((score, i) => ({ ...topConstants[i], score })) as TopGameScore[];\n  const bottom = bottomScores.map((score, i) => ({ ...bottomConstants[i], score })) as BottomGameScore[];\n\n  return (\n    <>\n      <Header scores={scores} />\n      <hr />\n      <TableHeader\n        values={values}\n        saved={saved}\n        roll={roll}\n        handleUnsave={handleUnsave}\n        handleSave={handleSave}\n        handleDiceRoll={handleDiceRoll}\n        getButtonText={getButtonText}\n      />\n      <hr />\n      <Typography variant=\"h4\">{`Total: ${finalTopSum + bottomSum}`}</Typography>\n      <ScoreTable\n        values={[...saved, ...values]}\n        bottom={bottom}\n        top={top}\n        onTopScore={handleTopScore}\n        onBottomScore={handleBottomScore}\n        showScoreButtons={showScoreButtons}\n        topSum={topSum}\n        finalTopSum={finalTopSum}\n        bottomSum={bottomSum}\n      />\n    </>\n  );\n};\n\n// react-redux export\nconst mapStateToProps = (state: DBRootState): DBYahtzee => ({ ...state.yahtzee });\nconst mapDispatchToProps = (dispatch: Dispatch): { actions: YahtzeeActions } => ({\n  actions: bindActionCreators({\n    addScore,\n    diceClick,\n    newGame,\n    nextRoll,\n    updateTop,\n    updateBottom,\n    updateRoll,\n  }, dispatch),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Yahtzee);\n","import Yahtzee from './Yahtzee';\n\nexport default Yahtzee;\n"],"sourceRoot":""}