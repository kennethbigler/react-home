{"version":3,"sources":["components/common/expandable-card/ExpandableCard.styles.js","components/common/expandable-card/ExpandableCard.jsx","components/common/expandable-card/index.js","components/resume/git-tools/CopyTextDisplay.jsx","components/resume/git-tools/BranchName.jsx","components/resume/git-tools/CommitText.styles.js","components/resume/git-tools/CommitText.jsx","components/resume/git-tools/DeployBranch.jsx","components/resume/git-tools/Header.jsx","components/resume/git-tools/GitTools.jsx","components/resume/git-tools/index.js"],"names":["card","marginTop","overflow","header","borderRadius","marginLeft","marginRight","position","top","ExpandableCard","props","useState","expanded","setExpanded","title","subtitle","children","backgroundColor","theme","inverted","headerStyle","styles","palette","primary","main","type","boxShadow","grey","expandedHeaderStyle","marginBottom","titleStyle","color","subtitleStyle","titleJSX","Typography","style","variant","subtitleJSX","Card","CardHeader","onClick","subheader","Collapse","in","timeout","unmountOnExit","CardContent","Grid","container","spacing","overflowY","defaultProps","withTheme","CopyTextDisplay","isOpen","setIsOpen","handleCopy","copyText","text","Chip","elevation","label","Snackbar","action","IconButton","key","autoHideDuration","message","onClose","open","BranchName","getBranchPrefixOptions","getSelectOptions","getCasePreferenceOptions","handleBranchPrefixSelect","e","setBranchPrefix","target","value","handleCasePrefSelect","setCasePreference","this","branchMessage","branchName","branchPrefix","casePreference","gitTheme","onBranchMessageChange","onBranchMessageClear","paddingLeft","paddingRight","width","item","sm","xs","FormControl","fullWidth","InputLabel","htmlFor","Select","input","Input","id","onChange","TextField","InputLabelProps","multiline","placeholder","Component","wrapper","connect","state","gitCommit","git","commitPrefix","dispatch","gitActions","bindActionCreators","setCommitPrefix","storyID","setLocalCommitPrefix","commitMessage","setCommitMessage","commitDescription","setCommitDescription","finishes","setFinishes","getCommitText","prefix","desc","postfix","gitMessage","handleCommitPrefixSelect","handleCommitMessageChange","handleCommitDescriptionChange","clearCommitMessage","clearCommitDescription","handleFinishesToggle","isC","useCommitText","commitText","displayText","nl2br","FormControlLabel","control","Switch","checked","memo","targetBranch","setTargetBranch","display","alignItems","validId","RegExp","Header","handleIDChange","isIdValid","test","error","validTypingId","GitTools","arr","map","t","i","MenuItem","exec","setKey","str","copy","handleBranchMessageChange","setBranchMessage","handleBranchMessageClear","getBranchName","msg","snakeCase","kebabCase","camelCase","deepOrange","DeployBranch"],"mappings":"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","file":"static/js/r_git.dc2cb6f8.chunk.js","sourcesContent":["export default {\n  card: { marginTop: 40, overflow: 'visible' },\n  header: {\n    borderRadius: 3,\n    marginLeft: 15,\n    marginRight: 15,\n    position: 'relative',\n    top: -20,\n  },\n};\n","import React, { useState } from 'react';\nimport types from 'prop-types';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Collapse from '@material-ui/core/Collapse';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { withTheme } from '@material-ui/core/styles';\nimport grey from '@material-ui/core/colors/grey';\nimport styles from './ExpandableCard.styles';\n\nconst ExpandableCard = (props) => {\n  const [expanded, setExpanded] = useState(true);\n\n  const {\n    title, subtitle, children, backgroundColor, theme, inverted,\n  } = props;\n\n  const headerStyle = {\n    ...styles.header,\n    backgroundColor: backgroundColor || theme.palette.primary.main,\n  };\n\n  if (theme.palette.type !== 'dark') {\n    headerStyle.boxShadow = `0px 15px 15px -10px ${grey[400]}`;\n  } else {\n    delete headerStyle.boxShadow;\n  }\n  const expandedHeaderStyle = { ...headerStyle, marginBottom: -20 };\n  const titleStyle = { color: inverted ? 'black' : 'white' };\n  const subtitleStyle = { color: grey[inverted ? 800 : 300] };\n\n  const titleJSX = (\n    <Typography style={titleStyle} variant=\"h6\">\n      {title}\n    </Typography>\n  );\n  const subtitleJSX = expanded ? (\n    <Typography style={subtitleStyle}>\n      {subtitle}\n    </Typography>\n  ) : null;\n\n  return (\n    <Card style={styles.card}>\n      <CardHeader\n        onClick={() => { setExpanded(!expanded); }}\n        style={expanded ? expandedHeaderStyle : headerStyle}\n        subheader={subtitleJSX}\n        title={titleJSX}\n      />\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n          <Grid container spacing={1} style={{ overflowY: 'hidden' }}>\n            {children}\n          </Grid>\n        </CardContent>\n      </Collapse>\n    </Card>\n  );\n};\n\nExpandableCard.propTypes = {\n  backgroundColor: types.string,\n  children: types.oneOfType([types.arrayOf(types.node), types.node]),\n  inverted: types.bool,\n  subtitle: types.oneOfType([types.string, types.element]),\n  theme: types.shape({\n    palette: types.shape({\n      primary: types.shape({\n        main: types.string.isRequired,\n      }).isRequired,\n      type: types.string,\n    }).isRequired,\n  }),\n  title: types.oneOfType([types.string, types.element]),\n};\n\nExpandableCard.defaultProps = {\n  inverted: false,\n};\n\nexport default withTheme(ExpandableCard);\n","import ExpandableCard from './ExpandableCard';\n\nexport default ExpandableCard;\n","import React, { useState, Fragment } from 'react';\nimport types from 'prop-types';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Chip from '@material-ui/core/Chip';\n// Parents: Main\n\nconst CopyTextDisplay = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { handleCopy, copyText, text } = props;\n\n  /**\n   * copies text to clipboard and opens prompt to tell the user\n   * @param {Object} e event fired when select occurs\n   */\n  const handleCopyText = () => {\n    setIsOpen(true);\n    const toCopy = copyText || text;\n    handleCopy(toCopy);\n  };\n\n  return (\n    <Fragment>\n      <Chip elevation={1} onClick={handleCopyText} label={text} />\n      <Snackbar\n        action={[\n          <IconButton key=\"close\" onClick={() => { setIsOpen(false); }}>\n            <CloseIcon />\n          </IconButton>,\n        ]}\n        autoHideDuration={4000}\n        message=\"Copied Commit Text to clipboard!\"\n        onClose={() => { setIsOpen(false); }}\n        open={isOpen}\n      />\n    </Fragment>\n  );\n};\n\nCopyTextDisplay.propTypes = {\n  copyText: types.string,\n  handleCopy: types.func.isRequired,\n  text: types.oneOfType([types.string, types.array]).isRequired,\n};\n\nexport default CopyTextDisplay;\n","import React, { Component } from 'react';\nimport types from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport IconButton from '@material-ui/core/IconButton';\nimport Clear from '@material-ui/icons/Clear';\nimport Grid from '@material-ui/core/Grid';\nimport CopyTextDisplay from './CopyTextDisplay';\n// Parents: GitTools\n\nclass BranchName extends Component {\n  /**\n   * function to generate select items for branch prefixes\n   * @return {[Object]}\n   */\n  getBranchPrefixOptions = () => {\n    const { getSelectOptions } = this.props;\n    return getSelectOptions(['chores', 'epics', 'features', 'fixes']);\n  };\n\n  /**\n   * function to generate select items for case preference\n   * @return {[Object]}\n   */\n  getCasePreferenceOptions = () => {\n    const { getSelectOptions } = this.props;\n    return getSelectOptions([\n      'snake_case',\n      'kebab-case',\n      'camelCase',\n      'No Changes',\n    ]);\n  };\n\n  /**\n   * function to update select state based on value\n   * @param {Object} e event fired when select occurs\n   */\n  handleBranchPrefixSelect = (e) => {\n    const { setBranchPrefix } = this.props;\n    setBranchPrefix(e.target.value);\n  };\n\n  /**\n   * function to update text state based on value\n   * @param {Object} e event fired when select occurs\n   */\n  handleCasePrefSelect = (e) => {\n    const { setCasePreference } = this.props;\n    setCasePreference(e.target.value);\n  };\n\n  render() {\n    const {\n      branchMessage,\n      branchName,\n      branchPrefix,\n      casePreference,\n      gitTheme,\n      handleCopy,\n      onBranchMessageChange,\n      onBranchMessageClear,\n    } = this.props;\n\n    return (\n      <div style={{ paddingLeft: 20, paddingRight: 20, width: '100%' }}>\n        <Grid container spacing={1}>\n          <Grid item sm={3} xs={12}>\n            <FormControl fullWidth>\n              <InputLabel htmlFor=\"branch-prefix\" style={{ color: gitTheme }}>\n                Branch Prefix\n              </InputLabel>\n              <Select\n                input={<Input id=\"branch-prefix\" />}\n                onChange={this.handleBranchPrefixSelect}\n                value={branchPrefix}\n              >\n                {this.getBranchPrefixOptions()}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item sm={3} xs={12}>\n            <FormControl fullWidth>\n              <InputLabel htmlFor=\"branch-prefix\" style={{ color: gitTheme }}>\n                Case Preference\n              </InputLabel>\n              <Select\n                input={<Input id=\"branch-prefix\" />}\n                onChange={this.handleCasePrefSelect}\n                value={casePreference}\n              >\n                {this.getCasePreferenceOptions()}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item sm={5} xs={10}>\n            <TextField\n              fullWidth\n              InputLabelProps={{ style: { color: gitTheme }}}\n              label=\"Branch Name\"\n              multiline\n              onChange={onBranchMessageChange}\n              placeholder=\"Summary of User Story\"\n              value={branchMessage}\n            />\n          </Grid>\n          <Grid item sm={1} xs={2}>\n            <IconButton\n              onClick={onBranchMessageClear}\n              style={{ marginTop: 12 }}\n            >\n              <Clear />\n            </IconButton>\n          </Grid>\n        </Grid>\n        <CopyTextDisplay handleCopy={handleCopy} text={branchName} />\n      </div>\n    );\n  }\n}\n\nBranchName.propTypes = {\n  branchMessage: types.string,\n  branchName: types.string.isRequired,\n  branchPrefix: types.string.isRequired,\n  casePreference: types.string.isRequired,\n  getSelectOptions: types.func.isRequired,\n  gitTheme: types.string.isRequired,\n  handleCopy: types.func.isRequired,\n  onBranchMessageChange: types.func.isRequired,\n  onBranchMessageClear: types.func.isRequired,\n  setBranchPrefix: types.func.isRequired,\n  setCasePreference: types.func.isRequired,\n};\n\nexport default BranchName;\n","const styles = {\n  wrapper: { paddingLeft: 20, paddingRight: 20, width: '100%' },\n  marginTop: { marginTop: 12 },\n};\n\nexport default styles;\n","import React, { useState } from 'react';\nimport types from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport Select from '@material-ui/core/Select';\nimport IconButton from '@material-ui/core/IconButton';\nimport Clear from '@material-ui/icons/Clear';\nimport Grid from '@material-ui/core/Grid';\nimport nl2br from 'react-newline-to-break';\nimport CopyTextDisplay from './CopyTextDisplay';\nimport { setCommitPrefix } from '../../../store/modules/git';\nimport styles from './CommitText.styles';\n// Parents: Main\n\nfunction useCommitText(storyID, gitCommit) {\n  const [commitPrefix, setLocalCommitPrefix] = useState('feat');\n  const [commitMessage, setCommitMessage] = useState('');\n  const [commitDescription, setCommitDescription] = useState('');\n  const [finishes, setFinishes] = useState(false);\n\n  /**\n   * function to generate the commit message from inputs\n   * @return {string} format Prefix: Message [?Finishes? ID]\n   */\n  const getCommitText = () => {\n    // prefix\n    const prefix = commitPrefix ? `${commitPrefix}: ` : '';\n\n    // description\n    let desc = ' ';\n    if (commitDescription && storyID) {\n      desc = `\\n\\n${commitDescription}\\n\\n`;\n    } else if (commitDescription) {\n      desc = `\\n\\n${commitDescription}`;\n    }\n\n    // postfix\n    let postfix = '';\n    if (finishes && storyID) {\n      postfix = `[${storyID} #finish]`;\n    } else if (storyID) {\n      postfix = `[${storyID}]`;\n    }\n\n    // compile all components together\n    const gitMessage = `${prefix}${commitMessage}${desc}${postfix}`;\n\n    // add syntax wrapper\n    return gitCommit ? `git commit -m \"${gitMessage}\"` : gitMessage;\n  };\n\n  /**\n   * function to update select state based on value\n   * @param {Object} e event fired when select occurs\n   */\n  const handleCommitPrefixSelect = (e) => {\n    setLocalCommitPrefix(e.target.value);\n  };\n\n  /**\n   * function to update text state based on value\n   * @param {Object} e event fired when select occurs\n   */\n  const handleCommitMessageChange = (e) => {\n    setCommitMessage(e.target.value);\n  };\n\n  const handleCommitDescriptionChange = (e) => {\n    setCommitDescription(e.target.value);\n  };\n\n  /**\n   * function to update text state based on value\n   * @param {Object} e event fired when select occurs\n   */\n  const clearCommitMessage = () => {\n    setCommitMessage('');\n  };\n\n  const clearCommitDescription = () => {\n    setCommitDescription('');\n  };\n\n  /**\n   * function(event: object, isInputChecked: bool) => void\n   * @param {Object} e - event: Change event targeting the toggle\n   * @param {boolean} isC - is input checked: The new value of the toggle\n   */\n  const handleFinishesToggle = (e, isC) => {\n    setFinishes(isC);\n  };\n\n  return {\n    commitPrefix,\n    commitMessage,\n    commitDescription,\n    finishes,\n    getCommitText,\n    handleCommitPrefixSelect,\n    handleCommitMessageChange,\n    handleCommitDescriptionChange,\n    clearCommitMessage,\n    clearCommitDescription,\n    handleFinishesToggle,\n  };\n}\n\nconst CommitText = (props) => {\n  const {\n    getSelectOptions, storyID, gitActions, handleCopy, gitCommit, gitTheme,\n  } = props;\n\n  const {\n    commitPrefix,\n    commitMessage,\n    commitDescription,\n    finishes,\n    getCommitText,\n    handleCommitPrefixSelect,\n    handleCommitMessageChange,\n    handleCommitDescriptionChange,\n    clearCommitMessage,\n    clearCommitDescription,\n    handleFinishesToggle,\n  } = useCommitText(storyID, gitCommit);\n\n  const { wrapper, marginTop } = styles;\n\n  /**\n   * function to generate select items based of input\n   * @param {[string]} arr input array of options\n   * @return {[Object]}\n   */\n  const getCommitPrefixOptions = () => getSelectOptions([\n    'build',\n    'chore',\n    'ci',\n    'docs',\n    'feat',\n    'fix',\n    'perf',\n    'refactor',\n    'revert',\n    'style',\n    'test',\n  ]);\n\n  const handleGitCommitToggle = (e, isC) => {\n    gitActions.setCommitPrefix(isC);\n  };\n\n  const commitText = getCommitText();\n  const displayText = commitText && nl2br(getCommitText());\n\n  return (\n    <div style={wrapper}>\n      <Grid container spacing={1}>\n        <Grid item sm={4} xs={12}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"commit-prefix\" style={{ color: gitTheme }}>\n              Commit Prefix\n            </InputLabel>\n            <Select\n              input={<Input id=\"branch-prefix\" />}\n              onChange={handleCommitPrefixSelect}\n              value={commitPrefix}\n            >\n              {getCommitPrefixOptions()}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item sm={4} xs={12}>\n          <FormControlLabel\n            control={(\n              <Switch\n                checked={finishes}\n                onChange={handleFinishesToggle}\n                value=\"Finishes User Story\"\n              />\n            )}\n            label=\"Finishes User Story\"\n          />\n        </Grid>\n        <Grid item sm={4} xs={12}>\n          <FormControlLabel\n            control={(\n              <Switch\n                checked={gitCommit}\n                onChange={handleGitCommitToggle}\n                value=\"Add git commit -m\"\n              />\n            )}\n            label=\"Add git commit -m\"\n          />\n        </Grid>\n        <Grid item sm={5} xs={10}>\n          <TextField\n            fullWidth\n            InputLabelProps={{ style: { color: gitTheme }}}\n            label=\"Commit Message\"\n            onChange={handleCommitMessageChange}\n            placeholder=\"Summary of Work Done (Message)\"\n            value={commitMessage}\n          />\n        </Grid>\n        <Grid item sm={1} xs={2}>\n          <IconButton onClick={clearCommitMessage} style={marginTop}>\n            <Clear />\n          </IconButton>\n        </Grid>\n        <Grid item sm={5} xs={10}>\n          <TextField\n            fullWidth\n            InputLabelProps={{ style: { color: gitTheme }}}\n            label=\"Commit Description\"\n            multiline\n            onChange={handleCommitDescriptionChange}\n            placeholder=\"Summary of Work Done (Description)\"\n            value={commitDescription}\n          />\n        </Grid>\n        <Grid item sm={1} xs={2}>\n          <IconButton\n            onClick={clearCommitDescription}\n            style={marginTop}\n          >\n            <Clear />\n          </IconButton>\n        </Grid>\n      </Grid>\n      <CopyTextDisplay\n        copyText={commitText}\n        handleCopy={handleCopy}\n        text={displayText}\n      />\n    </div>\n  );\n};\n\nCommitText.propTypes = {\n  getSelectOptions: types.func.isRequired,\n  gitActions: types.shape({\n    setCommitPrefix: types.func.isRequired,\n  }).isRequired,\n  gitCommit: types.bool.isRequired,\n  gitTheme: types.string.isRequired,\n  handleCopy: types.func.isRequired,\n  storyID: types.string,\n};\n\n// react-redux export\nconst mapStateToProps = (state) => ({ gitCommit: state.git.commitPrefix });\nconst mapDispatchToProps = (dispatch) => ({\n  gitActions: bindActionCreators({ setCommitPrefix }, dispatch),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(CommitText);\n","import React, { useState, memo } from 'react';\nimport types from 'prop-types';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport Grid from '@material-ui/core/Grid';\nimport CopyTextDisplay from './CopyTextDisplay';\n// Parents: GitTools\n\nconst BranchName = memo((props) => {\n  const [targetBranch, setTargetBranch] = useState('test-pipeline');\n\n  const handleSelect = (e) => {\n    setTargetBranch(e.target.value);\n  };\n\n  const {\n    gitTheme, handleCopy, getSelectOptions, branchName,\n  } = props;\n\n  return (\n    <div style={{ paddingLeft: 20, paddingRight: 20, width: '100%' }}>\n      <Grid container spacing={1} style={{ display: 'flex', alignItems: 'center' }}>\n        <Grid item sm={3} xs={12}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"target-branch\" style={{ color: gitTheme }}>\n              Target Branch\n            </InputLabel>\n            <Select\n              input={<Input id=\"target-branch\" />}\n              onChange={handleSelect}\n              value={targetBranch}\n            >\n              {getSelectOptions(['test-pipeline', 'sandbox-pipeline'])}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item sm={9} xs={12}>\n          <CopyTextDisplay handleCopy={handleCopy} text={`git push -f origin ${branchName}:${targetBranch}`} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n});\n\nBranchName.propTypes = {\n  branchName: types.string.isRequired,\n  getSelectOptions: types.func.isRequired,\n  gitTheme: types.string.isRequired,\n  handleCopy: types.func.isRequired,\n};\n\nexport default BranchName;\n","// react\nimport React, { memo, Fragment } from 'react';\nimport types from 'prop-types';\n// material-ui\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\n// Parents: Main\n\nconst validId = RegExp('[A-Z]{4}-[a-zA-Z0-9]+');\n\nconst Header = memo((props) => {\n  const { handleIDChange, storyID, gitTheme } = props;\n\n  const isIdValid = validId.test(storyID);\n\n  return (\n    <Fragment>\n      <Typography variant=\"h2\">\n        Git Tools\n      </Typography>\n      <TextField\n        InputLabelProps={{ style: { color: gitTheme }}}\n        label=\"User Story ID\"\n        onChange={handleIDChange}\n        placeholder=\"GNAP-12345\"\n        style={{ marginLeft: 20 }}\n        value={storyID}\n        error={!isIdValid}\n      />\n      <br />\n    </Fragment>\n  );\n});\n\nHeader.propTypes = {\n  gitTheme: types.string.isRequired,\n  handleIDChange: types.func.isRequired,\n  storyID: types.string,\n};\n\nexport default Header;\n","// react\nimport React, { Component, Fragment } from 'react';\nimport types from 'prop-types';\n// redux\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n// material-ui\nimport MenuItem from '@material-ui/core/MenuItem';\nimport deepOrange from '@material-ui/core/colors/deepOrange';\n// functions\nimport copy from 'copy-to-clipboard';\nimport map from 'lodash/map';\nimport snakeCase from 'lodash/snakeCase';\nimport kebabCase from 'lodash/kebabCase';\nimport camelCase from 'lodash/camelCase';\nimport {\n  setBranchMessage,\n  setBranchPrefix,\n  setCasePreference,\n  setKey,\n} from '../../../store/modules/git';\n// Components\nimport BranchName from './BranchName';\nimport CommitText from './CommitText';\nimport DeployBranch from './DeployBranch';\nimport Header from './Header';\nimport ExpandableCard from '../../common/expandable-card';\n// Parents: Main\n\nconst validTypingId = RegExp('[A-Z]{1,4}-?[a-zA-Z0-9]*');\n\nclass GitTools extends Component {\n  /**\n   * function to generate select items based of input\n   * @param {[string]} arr input array of options\n   * @return {[Object]}\n   */\n  getSelectOptions = (arr) => map(arr, (t, i) => (\n    <MenuItem key={i} value={t}>\n      {t}\n    </MenuItem>\n  ));\n\n  /**\n   * function to update text state based on value\n   * @param {Object} e event fired when typing occurs\n   */\n  handleIDChange = (e) => {\n    const { gitActions } = this.props;\n    const [value] = validTypingId.exec(e.target.value) || [''];\n    gitActions.setKey(value);\n  };\n\n  /**\n   * function to update text state based on value\n   * @param {string} str string to copy\n   */\n  handleCopy = (str) => {\n    copy(str);\n  };\n\n  /**\n   * function to update text state based on value\n   * @param {Object} e event fired when select occurs\n   */\n  handleBranchMessageChange = (e) => {\n    const { gitActions } = this.props;\n    gitActions.setBranchMessage(e.target.value);\n  };\n\n  /**\n   * function to update text state based on value\n   * @param {Object} e event fired when select occurs\n   */\n  handleBranchMessageClear = () => {\n    const { gitActions } = this.props;\n    gitActions.setBranchMessage('');\n  };\n\n  /**\n   * function to generate the branch name from inputs\n   * @return {string} format prefix/<story_id>_name_lower_cased\n   */\n  getBranchName = () => {\n    const {\n      git: {\n        branchMessage, branchPrefix, casePreference, storyID: id,\n      },\n    } = this.props;\n    const prefix = branchPrefix ? `${branchPrefix}/` : '';\n    let msg = '';\n    switch (casePreference) {\n      case 'snake_case':\n        msg = `${id && `${id}_`}${snakeCase(branchMessage)}`;\n        break;\n      case 'kebab-case':\n        msg = `${id && `${id}-`}${kebabCase(branchMessage)}`;\n        break;\n      case 'camelCase':\n        msg = `${id}${camelCase(branchMessage)}`;\n        break;\n      default:\n        msg = `${id}${branchMessage}`;\n    }\n    return `${prefix}${msg}`;\n  };\n\n  render() {\n    const {\n      git: {\n        branchMessage, branchPrefix, casePreference, storyID,\n      }, gitActions,\n    } = this.props;\n    const branchName = this.getBranchName();\n    const gitTheme = deepOrange[600];\n\n    return (\n      <Fragment>\n        <Header\n          {...{\n            gitTheme,\n            handleIDChange: this.handleIDChange,\n            storyID,\n          }}\n        />\n        <ExpandableCard backgroundColor={gitTheme} title=\"Create Branch Name\">\n          <BranchName\n            {...{\n              branchMessage,\n              branchName,\n              branchPrefix,\n              casePreference,\n              getSelectOptions: this.getSelectOptions,\n              gitTheme,\n              handleCopy: this.handleCopy,\n              onBranchMessageChange: this.handleBranchMessageChange,\n              onBranchMessageClear: this.handleBranchMessageClear,\n              setBranchPrefix: gitActions.setBranchPrefix,\n              setCasePreference: gitActions.setCasePreference,\n            }}\n          />\n        </ExpandableCard>\n        <ExpandableCard backgroundColor={gitTheme} title=\"Create Commit Message\">\n          <CommitText\n            {...{\n              getSelectOptions: this.getSelectOptions,\n              gitTheme,\n              handleCopy: this.handleCopy,\n              storyID,\n            }}\n          />\n        </ExpandableCard>\n        <ExpandableCard backgroundColor={gitTheme} title=\"Deploy to Test Pipelines\">\n          <DeployBranch\n            {...{\n              branchName,\n              getSelectOptions: this.getSelectOptions,\n              gitTheme,\n              handleCopy: this.handleCopy,\n            }}\n          />\n        </ExpandableCard>\n      </Fragment>\n    );\n  }\n}\n\nGitTools.propTypes = {\n  git: types.shape({\n    storyID: types.string.isRequired,\n    branchPrefix: types.string.isRequired,\n    casePreference: types.string.isRequired,\n    branchMessage: types.string,\n  }).isRequired,\n  gitActions: types.shape({\n    setBranchMessage: types.func.isRequired,\n    setBranchPrefix: types.func.isRequired,\n    setCasePreference: types.func.isRequired,\n    setKey: types.func.isRequired,\n  }).isRequired,\n};\n\n// react-redux export\nconst mapStateToProps = (state) => ({ git: state.git });\nconst mapDispatchToProps = (dispatch) => ({\n  gitActions: bindActionCreators(\n    {\n      setBranchMessage,\n      setBranchPrefix,\n      setCasePreference,\n      setKey,\n    },\n    dispatch,\n  ),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(GitTools);\n","import GitTools from './GitTools';\n\nexport default GitTools;\n"],"sourceRoot":""}