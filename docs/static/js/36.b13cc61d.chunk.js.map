{"version":3,"sources":["components/resume/graphql/Loading.jsx","components/resume/graphql/Link.jsx","components/resume/graphql/repository/item/Description.jsx","components/resume/graphql/repository/fragments.js","components/resume/graphql/repository/item/WatchRepository.jsx","components/resume/graphql/repository/item/StarRepository.jsx","components/resume/graphql/repository/item/UnstarRepository.jsx","components/resume/graphql/repository/item/RepositoryItem.jsx","components/resume/graphql/FetchMore.jsx","components/resume/graphql/repository/RepositoryList.jsx","components/resume/graphql/repository/index.js","components/resume/graphql/Error.jsx","components/resume/graphql/Profile.jsx","components/resume/graphql/Header.jsx","components/resume/graphql/NoToken.jsx","components/resume/graphql/GraphQL.jsx","components/resume/graphql/index.js"],"names":["Loading","react_default","a","createElement","Link","_ref","children","props","Object","objectWithoutProperties","assign","target","rel","Description","descriptionHTML","primaryLanguage","owner","className","dangerouslySetInnerHTML","__html","Typography","display","name","href","url","login","REPOSITORY_FRAGMENT","gql","_templateObject","WATCH_REPOSITORY","WatchRepository_templateObject","VIEWER_SUBSCRIPTIONS","isWatch","viewerSubscription","updateWatch","client","_ref$data$updateSubsc","data","updateSubscription","subscribable","id","repository","readFragment","concat","fragment","totalCount","watchers","writeFragment","objectSpread","WatchRepository","react_apollo_esm","mutation","variables","optimisticResponse","__typename","update","_ref2","loading","error","Button","onClick","variant","color","STAR_REPOSITORY","StarRepository_templateObject","updateAddStar","addStar","starrable","stargazers","StarRepository","viewerHasStarred","UNSTAR_REPOSITORY","UnstarRepository_templateObject","updateRemoveStar","removeStar","UnstarRepository","RepositoryItem","graphql_Link","item_UnstarRepository","item_StarRepository","item_WatchRepository","item_Description","FetchMore","hasNextPage","updateQuery","fetchMore","graphql_Loading","previousResult","fetchMoreResult","viewer","repositories","edges","toConsumableArray","RepositoryList","react","map","_ref3","node","key","item_RepositoryItem","graphql_FetchMore","pageInfo","cursor","endCursor","ErrorMessage","toString","GET_REPOSITORIES_OF_CURRENT_USER","Profile_templateObject","Profile","_useQuery","useQuery","Error","graphql_repository","Header","authToken","onChange","TextField","label","placeholder","value","style","margin","fullWidth","NoToken","memo","errorLink","onError","graphQLErrors","networkError","cache","InMemoryCache","connect","state","graphQLToken","graphql","token","dispatch","stateActions","bindActionCreators","setToken","_useState","useState","_useState2","slicedToArray","setAuthToken","handleChange","e","graphql_Header","graphql_NoToken","httpLink","HttpLink","uri","headers","authorization","link","ApolloLink","from","ApolloClient","ApolloContext","graphql_Profile","GraphQL"],"mappings":"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","file":"static/js/36.b13cc61d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Loading = () => <div>Loading ...</div>;\n\nexport default Loading;\n","import React from 'react';\nimport types from 'prop-types';\n\nconst Link = ({ children, ...props }) => (\n  <a {...props} target=\"_blank\" rel=\"noopener noreferrer\">\n    {children}\n  </a>\n);\n\nLink.propTypes = {\n  children: types.node,\n};\n\nexport default Link;\n","import React from 'react';\nimport types from 'prop-types';\nimport { Typography } from '@material-ui/core';\n\n/* eslint-disable react/no-danger */\n\nconst Description = (props) => {\n  const { descriptionHTML, primaryLanguage, owner } = props;\n\n  return (\n    <div className=\"RepositoryItem-description\">\n      <div\n        className=\"RepositoryItem-description-info\"\n        dangerouslySetInnerHTML={{ __html: descriptionHTML }}\n      />\n      <div className=\"RepositoryItem-description-details\">\n        <div>\n          {primaryLanguage && (\n            <Typography display=\"inline\">\n              Language:\n              {' '}\n              {primaryLanguage.name}\n            </Typography>\n          )}\n        </div>\n        <div>\n          {owner && (\n            <Typography display=\"inline\">\n              Owner:\n              {' '}\n              <a href={owner.url}>{owner.login}</a>\n            </Typography>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n/* eslint-enable react/no-danger */\n\nDescription.propTypes = {\n  descriptionHTML: types.string.isRequired,\n  primaryLanguage: types.shape({\n    name: types.string.isRequired,\n  }),\n  owner: types.shape({\n    url: types.string,\n    login: types.string,\n  }),\n};\n\nexport default Description;\n","import gql from 'graphql-tag';\n\nconst REPOSITORY_FRAGMENT = gql`\n  fragment repository on Repository {\n    id\n    name\n    url\n    descriptionHTML\n    primaryLanguage {\n      name\n    }\n    owner {\n      login\n      url\n    }\n    stargazers {\n      totalCount\n    }\n    viewerHasStarred\n    watchers {\n      totalCount\n    }\n    viewerSubscription\n  }\n`;\n\nexport default REPOSITORY_FRAGMENT;\n","import React from 'react';\nimport types from 'prop-types';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nimport Button from '@material-ui/core/Button';\nimport REPOSITORY_FRAGMENT from '../fragments';\n\nconst WATCH_REPOSITORY = gql`\n  mutation ($id: ID!, $viewerSubscription: SubscriptionState!) {\n    updateSubscription(\n      input: { state: $viewerSubscription, subscribableId: $id }\n    ) {\n      subscribable {\n        id\n        viewerSubscription\n      }\n    }\n  }\n`;\n\nconst VIEWER_SUBSCRIPTIONS = {\n  SUBSCRIBED: 'SUBSCRIBED',\n  UNSUBSCRIBED: 'UNSUBSCRIBED',\n};\n\nconst isWatch = viewerSubscription => viewerSubscription === VIEWER_SUBSCRIPTIONS.SUBSCRIBED;\n\nconst updateWatch = (\n  client,\n  {\n    data: {\n      updateSubscription: {\n        subscribable: { id, viewerSubscription },\n      },\n    },\n  },\n) => {\n  const repository = client.readFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  let { totalCount } = repository.watchers;\n  totalCount = viewerSubscription === VIEWER_SUBSCRIPTIONS.SUBSCRIBED\n    ? totalCount + 1\n    : totalCount - 1;\n\n  client.writeFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: {\n      ...repository,\n      watchers: {\n        ...repository.watchers,\n        totalCount,\n      },\n    },\n  });\n};\n\nconst WatchRepository = (props) => {\n  const { id, watchers, viewerSubscription } = props;\n\n  /* eslint-disable no-unused-vars */\n\n  return (\n    <Mutation\n      mutation={WATCH_REPOSITORY}\n      variables={{\n        id,\n        viewerSubscription: isWatch(viewerSubscription)\n          ? VIEWER_SUBSCRIPTIONS.UNSUBSCRIBED\n          : VIEWER_SUBSCRIPTIONS.SUBSCRIBED,\n      }}\n      optimisticResponse={{\n        updateSubscription: {\n          __typename: 'Mutation',\n          subscribable: {\n            __typename: 'Repository',\n            id,\n            viewerSubscription: isWatch(viewerSubscription)\n              ? VIEWER_SUBSCRIPTIONS.UNSUBSCRIBED\n              : VIEWER_SUBSCRIPTIONS.SUBSCRIBED,\n          },\n        },\n      }}\n      update={updateWatch}\n    >\n      {(updateSubscription, { data, loading, error }) => (\n        <Button\n          className=\"RepositoryItem-title-action\"\n          onClick={updateSubscription}\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          {isWatch(viewerSubscription) ? 'Unwatch' : 'Watch'}\n          {` (${watchers.totalCount})`}\n        </Button>\n      )}\n    </Mutation>\n  );\n};\n\n/* eslint-enable no-unused-vars */\n\nWatchRepository.propTypes = {\n  id: types.string.isRequired,\n  watchers: types.shape({\n    totalCount: types.number,\n  }).isRequired,\n  viewerSubscription: types.string.isRequired,\n};\n\nexport default WatchRepository;\n","import React from 'react';\nimport types from 'prop-types';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nimport Button from '@material-ui/core/Button';\nimport REPOSITORY_FRAGMENT from '../fragments';\n\nconst STAR_REPOSITORY = gql`\n  mutation($id: ID!) {\n    addStar(input: { starrableId: $id }) {\n      starrable {\n        id\n        viewerHasStarred\n      }\n    }\n  }\n`;\n\nconst updateAddStar = (\n  client,\n  { data: { addStar: { starrable: { id } } } },\n) => {\n  const repository = client.readFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  const totalCount = repository.stargazers.totalCount + 1;\n\n  client.writeFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: {\n      ...repository,\n      stargazers: {\n        ...repository.stargazers,\n        totalCount,\n      },\n    },\n  });\n};\n\nconst StarRepository = (props) => {\n  const { id, stargazers } = props;\n\n  /* eslint-disable no-unused-vars */\n\n  return (\n    <Mutation\n      mutation={STAR_REPOSITORY}\n      variables={{ id }}\n      optimisticResponse={{\n        addStar: {\n          __typename: 'Mutation',\n          starrable: {\n            __typename: 'Repository',\n            id,\n            viewerHasStarred: true,\n          },\n        },\n      }}\n      update={updateAddStar}\n    >\n      {(addStar, { data, loading, error }) => (\n        <Button\n          className=\"RepositoryItem-title-action\"\n          onClick={addStar}\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          Star (\n          {stargazers.totalCount}\n          )\n        </Button>\n      )}\n    </Mutation>\n  );\n};\n\n/* eslint-enable no-unused-vars */\n\nStarRepository.propTypes = {\n  id: types.string.isRequired,\n  stargazers: types.shape({\n    totalCount: types.number,\n  }).isRequired,\n};\n\nexport default StarRepository;\n","import React from 'react';\nimport types from 'prop-types';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nimport Button from '@material-ui/core/Button';\nimport REPOSITORY_FRAGMENT from '../fragments';\n\nconst UNSTAR_REPOSITORY = gql`\n  mutation($id: ID!) {\n    removeStar(input: { starrableId: $id }) {\n      starrable {\n        id\n        viewerHasStarred\n      }\n    }\n  }\n`;\n\nconst updateRemoveStar = (\n  client,\n  { data: { removeStar: { starrable: { id } } } },\n) => {\n  const repository = client.readFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  const totalCount = repository.stargazers.totalCount - 1;\n\n  client.writeFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: {\n      ...repository,\n      stargazers: {\n        ...repository.stargazers,\n        totalCount,\n      },\n    },\n  });\n};\n\nconst UnstarRepository = (props) => {\n  const { id, stargazers } = props;\n\n  /* eslint-disable no-unused-vars */\n\n  return (\n    <Mutation\n      mutation={UNSTAR_REPOSITORY}\n      variables={{ id }}\n      optimisticResponse={{\n        removeStar: {\n          __typename: 'Mutation',\n          starrable: {\n            __typename: 'Repository',\n            id,\n            viewerHasStarred: false,\n          },\n        },\n      }}\n      update={updateRemoveStar}\n    >\n      {(removeStar, { data, loading, error }) => (\n        <Button\n          className=\"RepositoryItem-title-action\"\n          onClick={removeStar}\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          UnStar (\n          {stargazers.totalCount}\n          )\n        </Button>\n      )}\n    </Mutation>\n  );\n};\n\n/* eslint-enable no-unused-vars */\n\nUnstarRepository.propTypes = {\n  id: types.string.isRequired,\n  stargazers: types.shape({\n    totalCount: types.number,\n  }).isRequired,\n};\n\nexport default UnstarRepository;\n","import React from 'react';\nimport types from 'prop-types';\nimport { Typography } from '@material-ui/core';\nimport Link from '../../Link';\nimport Description from './Description';\nimport WatchRepository from './WatchRepository';\nimport StarRepository from './StarRepository';\nimport UnstarRepository from './UnstarRepository';\n\nconst RepositoryItem = (props) => {\n  const {\n    id,\n    name,\n    url,\n    descriptionHTML,\n    primaryLanguage,\n    owner,\n    stargazers,\n    watchers,\n    viewerSubscription,\n    viewerHasStarred,\n  } = props;\n\n  return (\n    <div>\n      <div className=\"RepositoryItem-title\">\n        <Typography variant=\"h3\">\n          <Link href={url}>{name}</Link>\n        </Typography>\n        {!viewerHasStarred\n          ? (<StarRepository id={id} stargazers={stargazers} />)\n          : (<UnstarRepository id={id} stargazers={stargazers} />)\n        }\n        <WatchRepository id={id} watchers={watchers} viewerSubscription={viewerSubscription} />\n      </div>\n\n      <Description descriptionHTML={descriptionHTML} primaryLanguage={primaryLanguage} owner={owner} />\n    </div>\n  );\n};\n\nRepositoryItem.propTypes = {\n  id: types.string.isRequired,\n  name: types.string.isRequired,\n  url: types.string.isRequired,\n  descriptionHTML: types.string.isRequired,\n  primaryLanguage: types.shape({\n    name: types.string.isRequired,\n  }),\n  owner: types.shape({\n    url: types.string,\n    login: types.string,\n  }),\n  stargazers: types.shape({\n    totalCount: types.number,\n  }).isRequired,\n  watchers: types.shape({\n    totalCount: types.number,\n  }).isRequired,\n  viewerSubscription: types.string.isRequired,\n  viewerHasStarred: types.bool.isRequired,\n};\n\nexport default RepositoryItem;\n","import React from 'react';\nimport types from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Loading from './Loading';\n\nconst FetchMore = (props) => {\n  const {\n    loading,\n    hasNextPage,\n    variables,\n    updateQuery,\n    fetchMore,\n    children,\n  } = props;\n\n  return (\n    <div className=\"FetchMore\">\n      {loading\n        ? (\n          <Loading />\n        ) : (\n          hasNextPage && (\n            <Button\n              className=\"FetchMore-button\"\n              onClick={() => fetchMore({ variables, updateQuery })}\n              variant=\"outlined\"\n              color=\"primary\"\n            >\n              More\n              {' '}\n              {children}\n            </Button>\n          )\n        )\n      }\n    </div>\n  );\n};\n\nFetchMore.propTypes = {\n  loading: types.bool.isRequired,\n  hasNextPage: types.bool.isRequired,\n  variables: types.shape({\n    cursor: types.shape.isRequired,\n  }).isRequired,\n  updateQuery: types.func.isRequired,\n  fetchMore: types.func.isRequired,\n  children: types.node,\n};\n\nexport default FetchMore;\n","import React, { Fragment } from 'react';\nimport types from 'prop-types';\nimport map from 'lodash/map';\nimport RepositoryItem from './item/RepositoryItem';\nimport FetchMore from '../FetchMore';\n\nconst updateQuery = (previousResult, { fetchMoreResult }) => {\n  if (!fetchMoreResult) {\n    return previousResult;\n  }\n\n  return {\n    ...previousResult,\n    viewer: {\n      ...previousResult.viewer,\n      repositories: {\n        ...previousResult.viewer.repositories,\n        ...fetchMoreResult.viewer.repositories,\n        edges: [\n          ...previousResult.viewer.repositories.edges,\n          ...fetchMoreResult.viewer.repositories.edges,\n        ],\n      },\n    },\n  };\n};\n\nconst RepositoryList = ({ repositories, loading, fetchMore }) => (\n  <Fragment>\n    {map(repositories.edges, ({ node }) => (\n      <div key={node.id} className=\"RepositoryItem\">\n        <RepositoryItem {...node} />\n      </div>\n    ))}\n\n    <FetchMore\n      loading={loading}\n      hasNextPage={repositories.pageInfo.hasNextPage}\n      variables={{\n        cursor: repositories.pageInfo.endCursor,\n      }}\n      updateQuery={updateQuery}\n      fetchMore={fetchMore}\n    >\n      Repositories\n    </FetchMore>\n  </Fragment>\n);\n\nRepositoryList.propTypes = {\n  repositories: types.shape({\n    edges: types.arrayOf(types.object).isRequired,\n    pageInfo: types.shape({\n      hasNextPage: types.bool.isRequired,\n      endCursor: types.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n  loading: types.bool.isRequired,\n  fetchMore: types.func.isRequired,\n};\n\nexport default RepositoryList;\n","import RepositoryList from './RepositoryList';\nimport REPOSITORY_FRAGMENT from './fragments';\n\nexport { REPOSITORY_FRAGMENT };\n\nexport default RepositoryList;\n","import React from 'react';\nimport types from 'prop-types';\n\nconst ErrorMessage = ({ error }) => (\n  <div>\n    <small>{error.toString()}</small>\n  </div>\n);\n\nErrorMessage.propTypes = {\n  error: types.shape({}).isRequired,\n};\n\nexport default ErrorMessage;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from 'react-apollo-hooks';\nimport Loading from './Loading';\nimport RepositoryList, { REPOSITORY_FRAGMENT } from './repository';\nimport ErrorMessage from './Error';\n\nconst GET_REPOSITORIES_OF_CURRENT_USER = gql`\n  query($cursor: String) {\n    viewer {\n      repositories(\n        first: 5\n        orderBy: { direction: DESC, field: STARGAZERS }\n        after: $cursor\n      ) {\n        edges {\n          node {\n            ...repository\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  }\n  ${REPOSITORY_FRAGMENT}\n`;\n\nconst Profile = () => {\n  const {\n    error, data, loading, fetchMore,\n  } = useQuery(GET_REPOSITORIES_OF_CURRENT_USER);\n\n  // check errors\n  if (error) {\n    return <ErrorMessage error={error} />;\n  }\n\n  // check for data\n  const { viewer } = data;\n  if (loading && !viewer) {\n    return <Loading />;\n  }\n\n  // display data\n  return <RepositoryList loading={loading} repositories={viewer.repositories} fetchMore={fetchMore} />;\n};\n\nexport default Profile;\n","import React from 'react';\nimport types from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\n\nconst Header = (props) => {\n  const { authToken, onChange } = props;\n\n  return (\n    <div>\n      <Typography variant=\"h2\">GraphQL Demo</Typography>\n      <TextField\n        label=\"Authorization Code\"\n        placeholder=\"some32characterthingfromgithub\"\n        value={authToken}\n        onChange={onChange}\n        style={{ margin: '20px 0 20px 0' }}\n        fullWidth\n      />\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  authToken: types.string,\n  onChange: types.func.isRequired,\n};\n\nexport default Header;\n","import React, { memo } from 'react';\nimport { Typography } from '@material-ui/core';\n\nconst NoToken = memo(() => (\n  <Typography variant=\"h6\">\n    You need to generate a personal access token with &quot;repo&quot; and &quot;admin:repo_hook&quot; permissions.\n    <br />\n    This can be done in the Developer settings on GitHub.\n  </Typography>\n));\n\nexport default NoToken;\n","import React, { useState } from 'react';\nimport types from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloProvider as ApolloHooksProvider } from 'react-apollo-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport Profile from './Profile';\nimport { setToken } from '../../../store/modules/graphql';\nimport Header from './Header';\nimport NoToken from './NoToken';\n\nconst GITHUB_BASE_URL = 'https://api.github.com/graphql';\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    // do something with graphql error\n  }\n  if (networkError) {\n    // do something with network error\n  }\n});\nconst cache = new InMemoryCache();\n\nconst GraphQL = (props) => {\n  const { graphQLToken, stateActions } = props;\n  const [authToken, setAuthToken] = useState(graphQLToken);\n\n  const handleChange = (e) => {\n    const token = e.target.value;\n    stateActions.setToken(token);\n    setAuthToken(token);\n  };\n\n  if (!graphQLToken) {\n    return (\n      <div>\n        <Header authToken={authToken} onChange={handleChange} />\n        <NoToken />\n      </div>\n    );\n  }\n\n  const httpLink = new HttpLink({\n    uri: GITHUB_BASE_URL,\n    headers: {\n      authorization: `Bearer ${graphQLToken}`,\n    },\n  });\n  const link = ApolloLink.from([errorLink, httpLink]);\n  const client = new ApolloClient({ link, cache });\n\n  return (\n    <ApolloProvider client={client}>\n      <ApolloHooksProvider client={client}>\n        <Header authToken={authToken} onChange={handleChange} />\n        <Profile />\n      </ApolloHooksProvider>\n    </ApolloProvider>\n  );\n};\n\nGraphQL.propTypes = {\n  graphQLToken: types.string,\n  stateActions: types.shape({\n    setToken: types.func.isRequired,\n  }).isRequired,\n};\n\n// react-redux export\nconst mapStateToProps = state => ({ graphQLToken: state.graphql.token });\nconst mapDispatchToProps = dispatch => ({\n  stateActions: bindActionCreators({ setToken }, dispatch),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(GraphQL);\n","import GraphQL from './GraphQL';\n\nexport default GraphQL;\n"],"sourceRoot":""}