{"version":3,"sources":["../node_modules/lodash/isArray.js","../node_modules/lodash/_arrayMap.js","../node_modules/lodash/toString.js","../node_modules/lodash/_baseToString.js","../node_modules/lodash/_createCompounder.js","../node_modules/lodash/_hasUnicode.js","../node_modules/lodash/_baseSlice.js","../node_modules/lodash/_arrayReduce.js","../node_modules/lodash/deburr.js","../node_modules/lodash/_deburrLetter.js","../node_modules/lodash/_basePropertyOf.js","../node_modules/lodash/words.js","../node_modules/lodash/_asciiWords.js","../node_modules/lodash/_hasUnicodeWord.js","../node_modules/lodash/_unicodeWords.js","../node_modules/lodash/upperFirst.js","../node_modules/lodash/_createCaseFirst.js","../node_modules/lodash/_castSlice.js","../node_modules/lodash/_stringToArray.js","../node_modules/lodash/_asciiToArray.js","../node_modules/lodash/_unicodeToArray.js","../node_modules/lodash/startCase.js","components/resume/work/Job.tsx","components/resume/work/WorkCards.tsx","components/resume/work/Work.tsx","components/resume/work/index.ts"],"names":["isArray","Array","module","exports","array","iteratee","index","length","result","baseToString","value","Symbol","arrayMap","isSymbol","INFINITY","symbolProto","prototype","undefined","symbolToString","toString","call","arrayReduce","deburr","words","reApos","RegExp","callback","string","replace","reHasUnicode","test","start","end","accumulator","initAccum","deburrLetter","reLatin","reComboMark","basePropertyOf","object","key","asciiWords","hasUnicodeWord","unicodeWords","pattern","guard","match","reAsciiWord","reHasUnicodeWord","rsBreakRange","rsMathOpRange","rsBreak","rsDigits","rsDingbat","rsLower","rsMisc","rsRegional","rsSurrPair","rsUpper","rsMiscLower","rsMiscUpper","reOptMod","rsModifier","rsSeq","join","rsEmoji","reUnicodeWord","upperFirst","createCaseFirst","castSlice","hasUnicode","stringToArray","methodName","strSymbols","chr","charAt","trailing","slice","baseSlice","asciiToArray","unicodeToArray","split","rsAstral","rsCombo","rsFitz","rsNonAstral","rsSymbol","reUnicode","createCompounder","startCase","word","imgStyle","width","maxWidth","height","float","Job","props","getCSV","arr","style","marginRight","marginBottom","map","item","Chip","label","job","parent","title","company","location","backgroundColor","color","subtitle","inverted","Grid","sm","xs","Typography","s","e","notes","format","FORMAT","dateObj","diff","mon","yr","yRange","mRange","range","showRange","expr","desc","i","tech","display","skills","src","alt","WorkCards","workExp","workTypes","type","marginTop","variant","TechBarChart","lazy","Work","memo","data","fallback","WORK","VOLUNTEER"],"mappings":"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","file":"static/js/r_work.933005b6.chunk.js","sourcesContent":["/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\nmodule.exports = isArray;","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n\n  return result;\n}\n\nmodule.exports = arrayMap;","var baseToString = require('./_baseToString');\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\n\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;","var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n/** Used as references for various `Number` constants. */\n\n\nvar INFINITY = 1 / 0;\n/** Used to convert symbols to primitives and strings. */\n\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\n\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n\n  var result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\n\nmodule.exports = baseToString;","var arrayReduce = require('./_arrayReduce'),\n    deburr = require('./deburr'),\n    words = require('./words');\n/** Used to compose unicode capture groups. */\n\n\nvar rsApos = \"['\\u2019]\";\n/** Used to match apostrophes. */\n\nvar reApos = RegExp(rsApos, 'g');\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\n\nfunction createCompounder(callback) {\n  return function (string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\nmodule.exports = createCompounder;","/** Used to compose unicode character classes. */\nvar rsAstralRange = \"\\\\ud800-\\\\udfff\",\n    rsComboMarksRange = \"\\\\u0300-\\\\u036f\",\n    reComboHalfMarksRange = \"\\\\ufe20-\\\\ufe2f\",\n    rsComboSymbolsRange = \"\\\\u20d0-\\\\u20ff\",\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = \"\\\\ufe0e\\\\ufe0f\";\n/** Used to compose unicode capture groups. */\n\nvar rsZWJ = \"\\\\u200d\";\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\n\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nmodule.exports = hasUnicode;","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n\n  end = end > length ? length : end;\n\n  if (end < 0) {\n    end += length;\n  }\n\n  length = start > end ? 0 : end - start >>> 0;\n  start >>>= 0;\n  var result = Array(length);\n\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n\n  return result;\n}\n\nmodule.exports = baseSlice;","/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n\n  return accumulator;\n}\n\nmodule.exports = arrayReduce;","var deburrLetter = require('./_deburrLetter'),\n    toString = require('./toString');\n/** Used to match Latin Unicode letters (excluding mathematical operators). */\n\n\nvar reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n/** Used to compose unicode character classes. */\n\nvar rsComboMarksRange = \"\\\\u0300-\\\\u036f\",\n    reComboHalfMarksRange = \"\\\\ufe20-\\\\ufe2f\",\n    rsComboSymbolsRange = \"\\\\u20d0-\\\\u20ff\",\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;\n/** Used to compose unicode capture groups. */\n\nvar rsCombo = '[' + rsComboRange + ']';\n/**\n * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n */\n\nvar reComboMark = RegExp(rsCombo, 'g');\n/**\n * Deburrs `string` by converting\n * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n * letters to basic Latin letters and removing\n * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to deburr.\n * @returns {string} Returns the deburred string.\n * @example\n *\n * _.deburr('déjà vu');\n * // => 'deja vu'\n */\n\nfunction deburr(string) {\n  string = toString(string);\n  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n}\n\nmodule.exports = deburr;","var basePropertyOf = require('./_basePropertyOf');\n/** Used to map Latin Unicode letters to basic Latin letters. */\n\n\nvar deburredLetters = {\n  // Latin-1 Supplement block.\n  '\\xc0': 'A',\n  '\\xc1': 'A',\n  '\\xc2': 'A',\n  '\\xc3': 'A',\n  '\\xc4': 'A',\n  '\\xc5': 'A',\n  '\\xe0': 'a',\n  '\\xe1': 'a',\n  '\\xe2': 'a',\n  '\\xe3': 'a',\n  '\\xe4': 'a',\n  '\\xe5': 'a',\n  '\\xc7': 'C',\n  '\\xe7': 'c',\n  '\\xd0': 'D',\n  '\\xf0': 'd',\n  '\\xc8': 'E',\n  '\\xc9': 'E',\n  '\\xca': 'E',\n  '\\xcb': 'E',\n  '\\xe8': 'e',\n  '\\xe9': 'e',\n  '\\xea': 'e',\n  '\\xeb': 'e',\n  '\\xcc': 'I',\n  '\\xcd': 'I',\n  '\\xce': 'I',\n  '\\xcf': 'I',\n  '\\xec': 'i',\n  '\\xed': 'i',\n  '\\xee': 'i',\n  '\\xef': 'i',\n  '\\xd1': 'N',\n  '\\xf1': 'n',\n  '\\xd2': 'O',\n  '\\xd3': 'O',\n  '\\xd4': 'O',\n  '\\xd5': 'O',\n  '\\xd6': 'O',\n  '\\xd8': 'O',\n  '\\xf2': 'o',\n  '\\xf3': 'o',\n  '\\xf4': 'o',\n  '\\xf5': 'o',\n  '\\xf6': 'o',\n  '\\xf8': 'o',\n  '\\xd9': 'U',\n  '\\xda': 'U',\n  '\\xdb': 'U',\n  '\\xdc': 'U',\n  '\\xf9': 'u',\n  '\\xfa': 'u',\n  '\\xfb': 'u',\n  '\\xfc': 'u',\n  '\\xdd': 'Y',\n  '\\xfd': 'y',\n  '\\xff': 'y',\n  '\\xc6': 'Ae',\n  '\\xe6': 'ae',\n  '\\xde': 'Th',\n  '\\xfe': 'th',\n  '\\xdf': 'ss',\n  // Latin Extended-A block.\n  \"\\u0100\": 'A',\n  \"\\u0102\": 'A',\n  \"\\u0104\": 'A',\n  \"\\u0101\": 'a',\n  \"\\u0103\": 'a',\n  \"\\u0105\": 'a',\n  \"\\u0106\": 'C',\n  \"\\u0108\": 'C',\n  \"\\u010A\": 'C',\n  \"\\u010C\": 'C',\n  \"\\u0107\": 'c',\n  \"\\u0109\": 'c',\n  \"\\u010B\": 'c',\n  \"\\u010D\": 'c',\n  \"\\u010E\": 'D',\n  \"\\u0110\": 'D',\n  \"\\u010F\": 'd',\n  \"\\u0111\": 'd',\n  \"\\u0112\": 'E',\n  \"\\u0114\": 'E',\n  \"\\u0116\": 'E',\n  \"\\u0118\": 'E',\n  \"\\u011A\": 'E',\n  \"\\u0113\": 'e',\n  \"\\u0115\": 'e',\n  \"\\u0117\": 'e',\n  \"\\u0119\": 'e',\n  \"\\u011B\": 'e',\n  \"\\u011C\": 'G',\n  \"\\u011E\": 'G',\n  \"\\u0120\": 'G',\n  \"\\u0122\": 'G',\n  \"\\u011D\": 'g',\n  \"\\u011F\": 'g',\n  \"\\u0121\": 'g',\n  \"\\u0123\": 'g',\n  \"\\u0124\": 'H',\n  \"\\u0126\": 'H',\n  \"\\u0125\": 'h',\n  \"\\u0127\": 'h',\n  \"\\u0128\": 'I',\n  \"\\u012A\": 'I',\n  \"\\u012C\": 'I',\n  \"\\u012E\": 'I',\n  \"\\u0130\": 'I',\n  \"\\u0129\": 'i',\n  \"\\u012B\": 'i',\n  \"\\u012D\": 'i',\n  \"\\u012F\": 'i',\n  \"\\u0131\": 'i',\n  \"\\u0134\": 'J',\n  \"\\u0135\": 'j',\n  \"\\u0136\": 'K',\n  \"\\u0137\": 'k',\n  \"\\u0138\": 'k',\n  \"\\u0139\": 'L',\n  \"\\u013B\": 'L',\n  \"\\u013D\": 'L',\n  \"\\u013F\": 'L',\n  \"\\u0141\": 'L',\n  \"\\u013A\": 'l',\n  \"\\u013C\": 'l',\n  \"\\u013E\": 'l',\n  \"\\u0140\": 'l',\n  \"\\u0142\": 'l',\n  \"\\u0143\": 'N',\n  \"\\u0145\": 'N',\n  \"\\u0147\": 'N',\n  \"\\u014A\": 'N',\n  \"\\u0144\": 'n',\n  \"\\u0146\": 'n',\n  \"\\u0148\": 'n',\n  \"\\u014B\": 'n',\n  \"\\u014C\": 'O',\n  \"\\u014E\": 'O',\n  \"\\u0150\": 'O',\n  \"\\u014D\": 'o',\n  \"\\u014F\": 'o',\n  \"\\u0151\": 'o',\n  \"\\u0154\": 'R',\n  \"\\u0156\": 'R',\n  \"\\u0158\": 'R',\n  \"\\u0155\": 'r',\n  \"\\u0157\": 'r',\n  \"\\u0159\": 'r',\n  \"\\u015A\": 'S',\n  \"\\u015C\": 'S',\n  \"\\u015E\": 'S',\n  \"\\u0160\": 'S',\n  \"\\u015B\": 's',\n  \"\\u015D\": 's',\n  \"\\u015F\": 's',\n  \"\\u0161\": 's',\n  \"\\u0162\": 'T',\n  \"\\u0164\": 'T',\n  \"\\u0166\": 'T',\n  \"\\u0163\": 't',\n  \"\\u0165\": 't',\n  \"\\u0167\": 't',\n  \"\\u0168\": 'U',\n  \"\\u016A\": 'U',\n  \"\\u016C\": 'U',\n  \"\\u016E\": 'U',\n  \"\\u0170\": 'U',\n  \"\\u0172\": 'U',\n  \"\\u0169\": 'u',\n  \"\\u016B\": 'u',\n  \"\\u016D\": 'u',\n  \"\\u016F\": 'u',\n  \"\\u0171\": 'u',\n  \"\\u0173\": 'u',\n  \"\\u0174\": 'W',\n  \"\\u0175\": 'w',\n  \"\\u0176\": 'Y',\n  \"\\u0177\": 'y',\n  \"\\u0178\": 'Y',\n  \"\\u0179\": 'Z',\n  \"\\u017B\": 'Z',\n  \"\\u017D\": 'Z',\n  \"\\u017A\": 'z',\n  \"\\u017C\": 'z',\n  \"\\u017E\": 'z',\n  \"\\u0132\": 'IJ',\n  \"\\u0133\": 'ij',\n  \"\\u0152\": 'Oe',\n  \"\\u0153\": 'oe',\n  \"\\u0149\": \"'n\",\n  \"\\u017F\": 's'\n};\n/**\n * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n * letters to basic Latin letters.\n *\n * @private\n * @param {string} letter The matched letter to deburr.\n * @returns {string} Returns the deburred letter.\n */\n\nvar deburrLetter = basePropertyOf(deburredLetters);\nmodule.exports = deburrLetter;","/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function (key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = basePropertyOf;","var asciiWords = require('./_asciiWords'),\n    hasUnicodeWord = require('./_hasUnicodeWord'),\n    toString = require('./toString'),\n    unicodeWords = require('./_unicodeWords');\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\n\n\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n\n  return string.match(pattern) || [];\n}\n\nmodule.exports = words;","/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\n\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\nmodule.exports = asciiWords;","/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\n\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\nmodule.exports = hasUnicodeWord;","/** Used to compose unicode character classes. */\nvar rsAstralRange = \"\\\\ud800-\\\\udfff\",\n    rsComboMarksRange = \"\\\\u0300-\\\\u036f\",\n    reComboHalfMarksRange = \"\\\\ufe20-\\\\ufe2f\",\n    rsComboSymbolsRange = \"\\\\u20d0-\\\\u20ff\",\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsDingbatRange = \"\\\\u2700-\\\\u27bf\",\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n    rsPunctuationRange = \"\\\\u2000-\\\\u206f\",\n    rsSpaceRange = \" \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000\",\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n    rsVarRange = \"\\\\ufe0e\\\\ufe0f\",\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n/** Used to compose unicode capture groups. */\n\nvar rsApos = \"['\\u2019]\",\n    rsBreak = '[' + rsBreakRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsDigits = '\\\\d+',\n    rsDingbat = '[' + rsDingbatRange + ']',\n    rsLower = '[' + rsLowerRange + ']',\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n    rsFitz = \"\\\\ud83c[\\\\udffb-\\\\udfff]\",\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = \"(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}\",\n    rsSurrPair = \"[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]\",\n    rsUpper = '[' + rsUpperRange + ']',\n    rsZWJ = \"\\\\u200d\";\n/** Used to compose unicode regexes. */\n\nvar rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n    reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n    rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;\n/** Used to match complex or compound words. */\n\nvar reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\n\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\nmodule.exports = unicodeWords;","var createCaseFirst = require('./_createCaseFirst');\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\n\n\nvar upperFirst = createCaseFirst('toUpperCase');\nmodule.exports = upperFirst;","var castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\n\n\nfunction createCaseFirst(methodName) {\n  return function (string) {\n    string = toString(string);\n    var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;\n    var chr = strSymbols ? strSymbols[0] : string.charAt(0);\n    var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);\n    return chr[methodName]() + trailing;\n  };\n}\n\nmodule.exports = createCaseFirst;","var baseSlice = require('./_baseSlice');\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\n\n\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return !start && end >= length ? array : baseSlice(array, start, end);\n}\n\nmodule.exports = castSlice;","var asciiToArray = require('./_asciiToArray'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeToArray = require('./_unicodeToArray');\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\n\n\nfunction stringToArray(string) {\n  return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);\n}\n\nmodule.exports = stringToArray;","/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nmodule.exports = asciiToArray;","/** Used to compose unicode character classes. */\nvar rsAstralRange = \"\\\\ud800-\\\\udfff\",\n    rsComboMarksRange = \"\\\\u0300-\\\\u036f\",\n    reComboHalfMarksRange = \"\\\\ufe20-\\\\ufe2f\",\n    rsComboSymbolsRange = \"\\\\u20d0-\\\\u20ff\",\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = \"\\\\ufe0e\\\\ufe0f\";\n/** Used to compose unicode capture groups. */\n\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = \"\\\\ud83c[\\\\udffb-\\\\udfff]\",\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = \"(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}\",\n    rsSurrPair = \"[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]\",\n    rsZWJ = \"\\\\u200d\";\n/** Used to compose unicode regexes. */\n\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\n\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nmodule.exports = unicodeToArray;","var createCompounder = require('./_createCompounder'),\n    upperFirst = require('./upperFirst');\n/**\n * Converts `string` to\n * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n *\n * @static\n * @memberOf _\n * @since 3.1.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the start cased string.\n * @example\n *\n * _.startCase('--foo-bar--');\n * // => 'Foo Bar'\n *\n * _.startCase('fooBar');\n * // => 'Foo Bar'\n *\n * _.startCase('__FOO_BAR__');\n * // => 'FOO BAR'\n */\n\n\nvar startCase = createCompounder(function (result, word, index) {\n  return result + (index ? ' ' : '') + upperFirst(word);\n});\nmodule.exports = startCase;","import React from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport Grid from '@material-ui/core/Grid';\nimport { Typography } from '@material-ui/core';\nimport dateObj, { DateObj } from '../../../apis/DateHelper';\nimport { FORMAT } from '../../common/timeline-card/Timeline';\nimport ExpandableCard from '../../common/expandable-card';\nimport { Job as JobType } from '../../../constants/work';\n\ninterface JobProps {\n  job: JobType;\n}\n\nconst imgStyle: React.CSSProperties = {\n  width: '100%',\n  maxWidth: '12em',\n  height: 'auto',\n  float: 'right',\n};\n\nconst Job: React.FC<JobProps> = (props: JobProps) => {\n  const getCSV = (arr: string[] = []): React.ReactNodeArray => {\n    const style = { marginRight: 5, marginBottom: 5 };\n    return arr.map((item) => <Chip key={item} label={item} style={style} />);\n  };\n\n  const showRange = (s: DateObj, e: DateObj, notes = ''): string => {\n    // start date\n    const start = s.format(FORMAT);\n    // end date, check if it is the present\n    const end = dateObj().diff(e, 'days') < 1 ? 'Present' : e.format(FORMAT);\n\n    // get the time range in years, months\n    const mon = (e.diff(s, 'months') + 1) % 12;\n    const yr = e.diff(s, 'years') + (mon === 0 ? 1 : 0);\n    const yRange = yr ? `${yr} year${yr > 1 ? 's' : ''}` : null;\n    const mRange = mon ? `${mon} month${mon > 1 ? 's' : ''}` : 0;\n    const range = yRange ? yRange + (mRange ? `, ${mRange}` : '') : mRange;\n\n    // return string for output\n    return `${start} - ${end} (${range}) ${notes}`;\n  };\n\n  const { job } = props;\n\n  const parent = job.parent ? ` (${job.parent})` : '';\n  const title = `${job.company}${parent}, ${job.location}`;\n\n  return (\n    <ExpandableCard\n      backgroundColor={job.color}\n      subtitle={job.title}\n      inverted={job.inverted}\n      title={title}\n    >\n      <Grid item sm={9} xs={12}>\n        <Typography>\n          {showRange(job.start, job.end, job.notes)}\n        </Typography>\n        {job.expr && (\n        <ul>\n          {job.expr.map((desc, i) => (\n            <Typography key={`desc${i}`}>\n              <li>\n                {desc}\n              </li>\n            </Typography>\n          ))}\n        </ul>\n        )}\n        {job.tech && job.tech.length !== 0 && (\n          <>\n            <hr />\n            <Typography display=\"inline\">Technologies:&nbsp;</Typography>\n              {getCSV(job.tech)}\n          </>\n        )}\n        {job.skills && job.skills.length !== 0 && (\n          <>\n            <hr />\n            <Typography display=\"inline\">Skills:&nbsp;</Typography>\n              {getCSV(job.skills)}\n          </>\n        )}\n      </Grid>\n      {job.src && (\n      <Grid item sm={3} xs={12}>\n        <img alt={job.alt} src={job.src} style={imgStyle} />\n      </Grid>\n      )}\n    </ExpandableCard>\n  );\n};\n\nexport default Job;\n","import React from 'react';\nimport startCase from 'lodash/startCase';\nimport { Typography } from '@material-ui/core';\nimport Job from './Job';\nimport { Job as JobType } from '../../../constants/work';\n\ninterface WorkCardsProps {\n  workExp: JobType[];\n  workTypes: string[];\n}\n\nconst WorkCards: React.FC<WorkCardsProps> = ({ workExp, workTypes }: WorkCardsProps) => (\n  <>\n    {workTypes.map((type) => (\n      <div key={type} style={{ marginTop: 25 }}>\n        <Typography variant=\"h3\">{`${startCase(type)} Experience`}</Typography>\n        <hr />\n        {workExp.map((job) => (job.type === type && <Job key={job.company} job={job} />))}\n      </div>\n    ))}\n  </>\n);\n\nexport default WorkCards;\n","import React, { memo, lazy, Suspense } from 'react';\nimport { Typography } from '@material-ui/core';\nimport TimelineCard from '../../common/timeline-card';\nimport ExpandableCard from '../../common/expandable-card';\nimport workExp, { VOLUNTEER, WORK } from '../../../constants/work';\nimport LoadingSpinner from '../../common/loading-spinner';\nimport WorkCards from './WorkCards';\n\nconst TechBarChart = lazy(() => import(/* webpackChunkName: \"r_work_bar_chart\" */ './TechBarChart'));\n\n/* Work  ->  TechBarChart\n *      |->  WorkCards  ->  Job */\nconst Work: React.FC<{}> = memo(() => (\n  <>\n    <Typography variant=\"h2\">Experience</Typography>\n    <TimelineCard data={workExp} title=\"Work Timeline\" />\n    <ExpandableCard title=\"Programming Language Timeline (Professional Use)\">\n      <Suspense fallback={<LoadingSpinner />}><TechBarChart /></Suspense>\n    </ExpandableCard>\n    <WorkCards workExp={workExp} workTypes={[WORK, VOLUNTEER]} />\n  </>\n));\n\nexport default Work;\n","import Work from './Work';\n\nexport default Work;\n"],"sourceRoot":""}