{"version":3,"file":"static/js/g_are_you_the_one.c8052ce0.chunk.js","mappings":"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","sources":["components/games/are-you-the-one/controls/Dropdown.tsx","components/games/are-you-the-one/controls/Controls.tsx","components/games/are-you-the-one/table/TBDialog.tsx","components/games/are-you-the-one/table/TableBody.tsx","components/games/are-you-the-one/table/Table.tsx","components/games/are-you-the-one/Equations.tsx","components/games/are-you-the-one/AreYouTheOne.tsx"],"sourcesContent":["import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\nimport ClickAwayListener from \"@mui/material/ClickAwayListener\";\nimport Grow from \"@mui/material/Grow\";\nimport Paper from \"@mui/material/Paper\";\nimport Popper from \"@mui/material/Popper\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport MenuList from \"@mui/material/MenuList\";\n\ninterface DropdownProps {\n  onSelect: (index: number) => void;\n  options: string[];\n  roundNumber: number;\n}\n\nconst Dropdown = (props: DropdownProps) => {\n  const { roundNumber, options, onSelect } = props;\n\n  // hooks/state\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef<HTMLDivElement>(null);\n\n  const handleMenuItemClick = (\n    event: React.MouseEvent<HTMLLIElement, MouseEvent>,\n    index: number\n  ) => {\n    onSelect(index);\n    setOpen(false);\n  };\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event: Event) => {\n    if (\n      anchorRef.current &&\n      anchorRef.current.contains(event.target as HTMLElement)\n    ) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <ButtonGroup\n        ref={anchorRef}\n        variant=\"contained\"\n        aria-label=\"split button\"\n        color={roundNumber + 2 === options.length ? \"error\" : \"primary\"}\n      >\n        <Button>{options[roundNumber]}</Button>\n        <Button\n          size=\"small\"\n          aria-controls={open ? \"split-button-menu\" : undefined}\n          aria-expanded={open ? \"true\" : undefined}\n          aria-label=\"select merge strategy\"\n          aria-haspopup=\"menu\"\n          onClick={handleToggle}\n        >\n          <ArrowDropDownIcon />\n        </Button>\n      </ButtonGroup>\n      <Popper\n        open={open}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n      >\n        {({ TransitionProps, placement }) => (\n          <Grow\n            {...TransitionProps}\n            style={{\n              transformOrigin:\n                placement === \"bottom\" ? \"center top\" : \"center bottom\",\n            }}\n          >\n            <Paper>\n              <ClickAwayListener onClickAway={handleClose}>\n                <MenuList id=\"split-button-menu\" autoFocusItem>\n                  {options.map((option, index) => (\n                    <MenuItem\n                      key={option}\n                      selected={index === roundNumber}\n                      onClick={(event) => handleMenuItemClick(event, index)}\n                    >\n                      {option}\n                    </MenuItem>\n                  ))}\n                </MenuList>\n              </ClickAwayListener>\n            </Paper>\n          </Grow>\n        )}\n      </Popper>\n    </>\n  );\n};\n\nexport default Dropdown;\n","import React from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport { RoundPairing } from \"../../../../store/types\";\nimport Dropdown from \"./Dropdown\";\n\ninterface ControlsProps {\n  /** [lady-i: (gent-i | -1), -1, -1, ...] */\n  matches: number[];\n  /** [lady-i: [gent-i: bool]] */\n  noMatch: boolean[][];\n  onSelect: (index: number) => void;\n  options: string[];\n  roundNumber: number;\n  /** [round-i: RoundPairing] */\n  roundPairings: RoundPairing[];\n  updateScore: (score: number) => void;\n  updateNoMatch: (li: number, gi: number) => void;\n}\n\n// eslint-disable-next-line no-restricted-globals\nconst getScore = (value: number) => (isNaN(value) ? -1 : value);\n\nconst Controls = (props: ControlsProps) => {\n  const {\n    matches,\n    noMatch,\n    options,\n    onSelect,\n    roundNumber,\n    roundPairings,\n    updateNoMatch,\n    updateScore,\n  } = props;\n\n  // hooks/state\n  const [score, setScore] = React.useState(\n    getScore(roundPairings[roundNumber]?.score)\n  );\n\n  // handlers\n  const handleSelect = (index: number) => {\n    setScore(getScore(roundPairings[index]?.score));\n    onSelect(index);\n  };\n\n  const handleBlackout = () => {\n    roundPairings[roundNumber].pairs.forEach((gi, li) => {\n      if (matches[li] !== gi && !noMatch[li][gi]) {\n        updateNoMatch(li, gi);\n      }\n    });\n  };\n\n  const handleTextFieldChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setScore(parseInt(event.target.value, 10) || 0);\n    updateScore(parseInt(event.target.value, 10));\n  };\n\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n      <Dropdown\n        roundNumber={roundNumber}\n        options={options}\n        onSelect={handleSelect}\n      />\n      {roundNumber < options.length - 2 && (\n        <>\n          <Button variant=\"outlined\" onClick={handleBlackout}>\n            Blackout\n          </Button>\n          <TextField\n            id=\"score-input\"\n            label=\"Score\"\n            variant=\"outlined\"\n            type=\"number\"\n            value={score}\n            onChange={handleTextFieldChange}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Controls;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\n\nexport interface TBDialogProps {\n  open: boolean;\n  content: string;\n  onMatch: () => void;\n  onNoMatch: () => void;\n  onCancel: () => void;\n}\n\nconst TBDialog = ({\n  open,\n  content,\n  onMatch,\n  onNoMatch,\n  onCancel,\n}: TBDialogProps) => (\n  <Dialog onClose={onCancel} open={open}>\n    <DialogTitle>TB Result</DialogTitle>\n    <DialogContent>Are {content} a perfect match?</DialogContent>\n    <DialogActions>\n      <Button onClick={onMatch}>Match</Button>\n      <Button onClick={onNoMatch} color=\"error\">\n        No Match\n      </Button>\n      <Button onClick={onCancel} color=\"warning\">\n        Cancel\n      </Button>\n    </DialogActions>\n  </Dialog>\n);\n\nexport default TBDialog;\n","import React from \"react\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { Button } from \"@mui/material\";\nimport { RoundPairing } from \"../../../../store/types\";\nimport TBDialog from \"./TBDialog\";\n\nexport interface AYTOTableProps {\n  gents: string[];\n  ladies: string[];\n  /** [lady-i: (gent-i | -1), -1, -1, ...] */\n  matches: number[];\n  /** [lady-i: [gent-i: bool]] */\n  noMatch: boolean[][];\n  options: string[];\n  roundNumber: number;\n  /** [round-i: RoundPairing] */\n  roundPairings: RoundPairing[];\n  updateMatch: (li: number, gi: number) => void;\n  updateNoMatch: (li: number, gi: number) => void;\n  updatePairs: (ri: number, li: number, gi: number) => void;\n}\n\nconst AYTOTableBody = (props: AYTOTableProps) => {\n  const {\n    gents,\n    ladies,\n    matches,\n    noMatch,\n    options,\n    roundNumber: ri,\n    roundPairings,\n    updateMatch,\n    updateNoMatch,\n    updatePairs,\n  } = props;\n  const isTB = options.length === ri + 2;\n  const isConsolidated = options.length === ri + 1;\n\n  // state\n  const [open, setOpen] = React.useState(false);\n  const [tbi, setTBI] = React.useState([-1, -1]);\n  const hist: number[][] = [];\n\n  // create histogram\n  roundPairings.forEach((RP) => {\n    RP.pairs.forEach((gi, li) => {\n      !hist[li] && (hist[li] = []);\n      hist[li][gi] = !hist[li][gi] ? 1 : hist[li][gi] + 1;\n    });\n  });\n\n  // Handlers\n  const handleClick = (roundi: number, ladyi: number, genti: number) => () => {\n    if (isConsolidated) {\n      return;\n    }\n    if (isTB) {\n      setTBI([ladyi, genti]);\n      setOpen(true);\n      return;\n    }\n    // Regular Round, verify gent isn't already taken\n    const tempLI = roundPairings[roundi]?.pairs.indexOf(genti);\n    if (tempLI !== -1) {\n      // deselect gent from old lady\n      updatePairs(roundi, tempLI, -1);\n    }\n    // assign to new lady\n    updatePairs(roundi, ladyi, genti);\n  };\n\n  const handleCancel = () => {\n    setOpen(false);\n  };\n\n  const handleMatch = () => {\n    const [li, gi] = tbi;\n    updateMatch(li, gi);\n    handleCancel();\n  };\n\n  const handleNoMatch = () => {\n    const [li, gi] = tbi;\n    updateNoMatch(li, gi);\n    handleCancel();\n  };\n\n  return (\n    <TableBody>\n      {ladies.map((lName, li) => (\n        <TableRow\n          key={`ayto-table-row-${lName}`}\n          sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n        >\n          <TableCell component=\"th\" scope=\"row\">\n            {lName}\n          </TableCell>\n          {gents.map((gName, gi) => {\n            // variables\n            let variant: \"outlined\" | \"contained\" = \"outlined\";\n            let color: \"primary\" | \"error\" | \"success\" = \"primary\";\n            let disabled = false;\n\n            // logic\n            if (isTB) {\n              color = \"error\";\n              // if noMatch\n              if (noMatch[li] && noMatch[li][gi]) {\n                variant = \"contained\";\n              }\n            } else {\n              // if paired this round\n              if (roundPairings[ri]?.pairs[li] === gi) {\n                variant = \"contained\";\n              }\n              // if no match\n              if (noMatch[li] && noMatch[li][gi]) {\n                variant = \"contained\";\n                disabled = true;\n              }\n            }\n            // if match\n            if (matches[li] === gi) {\n              variant = \"contained\";\n              color = \"success\";\n            }\n\n            const histValue = hist[li] ? hist[li][gi] || 0 : 0;\n            // if consolidated\n            if (isConsolidated && histValue > 0) {\n              variant = \"contained\";\n            }\n\n            // render\n            return (\n              <TableCell key={gName} sx={{ padding: 0, textAlign: \"center\" }}>\n                <Button\n                  variant={variant}\n                  color={color}\n                  onClick={handleClick(ri, li, gi)}\n                  disabled={disabled}\n                >\n                  {isConsolidated ? histValue : `${lName[0]}-${gName[0]}`}\n                </Button>\n              </TableCell>\n            );\n          })}\n        </TableRow>\n      ))}\n      <TBDialog\n        open={open}\n        content={`${ladies[tbi[0]]} & ${gents[tbi[1]]}`}\n        onCancel={handleCancel}\n        onMatch={handleMatch}\n        onNoMatch={handleNoMatch}\n      />\n    </TableBody>\n  );\n};\n\nexport default AYTOTableBody;\n","import React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport AYTOTableBody, { AYTOTableProps } from \"./TableBody\";\n\nconst AYTOTable = ({ gents, ...other }: AYTOTableProps) => (\n  <TableContainer component={Paper}>\n    <Table aria-label=\"are you the one data entry table\">\n      <TableHead>\n        <TableRow>\n          <TableCell />\n          {gents.map((name) => (\n            <TableCell\n              key={name}\n              sx={{ paddingLeft: 0, paddingRight: 0, textAlign: \"center\" }}\n            >\n              {name}\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n      <AYTOTableBody gents={gents} {...other} />\n    </Table>\n  </TableContainer>\n);\n\nexport default AYTOTable;\n","import React from \"react\";\nimport Stack from \"@mui/material/Stack\";\nimport Chip from \"@mui/material/Chip\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Switch from \"@mui/material/Switch\";\nimport { RoundPairing } from \"../../../store/types\";\n\ninterface EquationsProps {\n  gents: string[];\n  ladies: string[];\n  /** [lady-i: (gent-i | -1), -1, -1, ...] */\n  matches: number[];\n  /** [lady-i: [gent-i: bool]] */\n  noMatch: boolean[][];\n  /** [round-i: RoundPairing] */\n  roundPairings: RoundPairing[];\n}\n\ninterface AYTOHist {\n  value: number;\n  maxOdds: number;\n}\n\nconst Equations = (props: EquationsProps) => {\n  const { gents, ladies, matches, noMatch, roundPairings } = props;\n\n  // state\n  const [showAll, setShowAll] = React.useState(false);\n  const hist: AYTOHist[][] = [];\n  const tempScore: number[] = [];\n  const totals: number[] = [];\n\n  // create histogram\n  roundPairings.forEach(({ pairs }, ri) => {\n    tempScore[ri] = 0;\n    totals[ri] = ladies.length;\n    pairs.forEach((gi, li) => {\n      if (li < 0 || gi < 0 || noMatch[li][gi]) {\n        totals[ri] -= 1;\n      }\n      if (matches[li] === gi) {\n        tempScore[ri] += 1;\n        totals[ri] -= 1;\n      }\n      !hist[li] && (hist[li] = []);\n      !hist[li][gi] && (hist[li][gi] = { value: 0, maxOdds: 0 });\n      hist[li][gi].value += 1;\n    });\n  });\n\n  roundPairings.forEach(({ pairs, score }, ri) => {\n    pairs.forEach((gi, li) => {\n      if (!noMatch[li][gi]) {\n        const odds = totals[ri]\n          ? Math.floor(((score - tempScore[ri]) * 100) / totals[ri])\n          : 0;\n        hist[li][gi].maxOdds = Math.max(hist[li][gi].maxOdds, odds);\n      }\n    });\n  });\n\n  // handlers\n  const handleSwitch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setShowAll(event.target.checked);\n  };\n\n  return (\n    <div>\n      <Stack direction=\"row\" justifyContent=\"space-between\">\n        <h1>Equations</h1>\n        <FormControlLabel\n          control={\n            <Switch checked={showAll} onChange={handleSwitch} name=\"show-all\" />\n          }\n          label=\"Show All Couples\"\n        />\n      </Stack>\n      <Stack spacing={1} direction=\"row\" flexWrap=\"wrap\">\n        {roundPairings.map(({ pairs, score }, ri) => {\n          const equation = pairs.map((gi, li) => {\n            // if noMatch or match, skip\n            if (li < 0 || gi < 0) {\n              return null;\n            }\n\n            const isRepeat = hist[li][gi].value > 1;\n            let color: \"primary\" | \"default\" | \"error\" | \"success\" = isRepeat\n              ? \"primary\"\n              : \"default\";\n\n            if (!showAll) {\n              if (noMatch[li][gi] || matches[li] === gi) {\n                return null;\n              }\n            } else {\n              // no match chip\n              if (noMatch[li][gi]) {\n                color = \"error\";\n              }\n              // match chip\n              if (matches[li] === gi) {\n                color = \"success\";\n              }\n            }\n\n            const label = `${ladies[li]}-${gents[gi]}${\n              isRepeat ? ` ${hist[li][gi].value}` : \"\"\n            } - ${hist[li][gi].maxOdds}%`;\n\n            // create equation chips\n            return (\n              <Chip\n                key={`eq-r${ri}-l${li}-g${gi}`}\n                label={label}\n                color={color}\n              />\n            );\n          });\n\n          // return each equation stack\n          return !equation.every((e) => e === null) ? (\n            <Stack key={`equation-${ri}`} spacing={1}>\n              <h2 style={{ textAlign: \"center\" }}>Matchup {ri + 1}</h2>\n              {equation}\n              <Chip label={`${score} - ${tempScore[ri]}`} color=\"warning\" />\n            </Stack>\n          ) : null;\n        })}\n      </Stack>\n    </div>\n  );\n};\n\nexport default Equations;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Controls from \"./controls/Controls\";\nimport Table from \"./table/Table\";\nimport Equations from \"./Equations\";\nimport { ladies, gents, options } from \"../../../constants/ayto\";\nimport { DBRootState } from \"../../../store/types\";\nimport {\n  updateMatch,\n  updateNoMatch,\n  updatePairs,\n  updateScore,\n} from \"../../../store/modules/ayto\";\n\n/**\n * TODO:\n * replace Dropdown with MUI Dropdown when available\n * if an equation exists in another equation, sub it out for remaining number\n * on Match, update so that all future matchup-s have that match\n */\nconst AreYouTheOne = () => {\n  // Redux\n  const { roundPairings, noMatch, matches } = useSelector(\n    (state: DBRootState) => ({ ...state.ayto })\n  );\n  const dispatch = useDispatch();\n\n  // state\n  const [roundNumber, setRoundNumber] = React.useState(0);\n\n  // handlers\n  const handleSelect = (selected: number) => {\n    setRoundNumber(selected);\n  };\n  const handleUpdateScore = (score: number) => {\n    dispatch(updateScore(score, roundNumber));\n  };\n  const handleUpdateNoMatch = (li: number, gi: number) => {\n    dispatch(updateNoMatch(li, gi));\n  };\n  const handleUpdatePairs = (ri: number, li: number, gi: number) => {\n    dispatch(updatePairs(ri, li, gi));\n  };\n  const handleUpdateMatch = (li: number, gi: number) => {\n    dispatch(updateMatch(li, gi));\n  };\n\n  return (\n    <>\n      <h1>Are You The One?</h1>\n      <Controls\n        matches={matches}\n        noMatch={noMatch}\n        onSelect={handleSelect}\n        options={options}\n        roundNumber={roundNumber}\n        roundPairings={roundPairings}\n        updateNoMatch={handleUpdateNoMatch}\n        updateScore={handleUpdateScore}\n      />\n      <br />\n      <Table\n        gents={gents}\n        ladies={ladies}\n        matches={matches}\n        noMatch={noMatch}\n        options={options}\n        roundNumber={roundNumber}\n        roundPairings={roundPairings}\n        updateMatch={handleUpdateMatch}\n        updateNoMatch={handleUpdateNoMatch}\n        updatePairs={handleUpdatePairs}\n      />\n      <Equations\n        gents={gents}\n        ladies={ladies}\n        matches={matches}\n        noMatch={noMatch}\n        roundPairings={roundPairings}\n      />\n    </>\n  );\n};\n\nexport default AreYouTheOne;\n"],"names":["props","roundNumber","options","onSelect","React","open","setOpen","anchorRef","handleClose","event","current","contains","target","ButtonGroup","ref","variant","color","length","Button","size","undefined","onClick","prevOpen","ArrowDropDown","Popper","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","id","autoFocusItem","map","option","index","MenuItem","selected","handleMenuItemClick","getScore","value","isNaN","matches","noMatch","roundPairings","updateNoMatch","updateScore","score","setScore","display","justifyContent","pairs","forEach","gi","li","TextField","label","type","onChange","parseInt","content","onMatch","onNoMatch","onCancel","Dialog","onClose","DialogTitle","DialogContent","DialogActions","gents","ladies","ri","updateMatch","updatePairs","isTB","isConsolidated","tbi","setTBI","hist","RP","handleCancel","TableBody","lName","TableRow","sx","border","TableCell","component","scope","gName","disabled","roundi","ladyi","genti","histValue","padding","textAlign","tempLI","indexOf","other","TableContainer","Table","TableHead","name","paddingLeft","paddingRight","showAll","setShowAll","tempScore","totals","maxOdds","odds","Math","floor","max","Stack","direction","FormControlLabel","control","Switch","checked","spacing","flexWrap","equation","isRepeat","Chip","every","e","useSelector","state","ayto","dispatch","useDispatch","setRoundNumber","handleUpdateNoMatch"],"sourceRoot":""}