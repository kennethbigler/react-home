{"version":3,"sources":["components/common/expandable-card/ExpandableCard.tsx","components/common/expandable-card/index.ts","hooks/useOpenState.ts","components/resume/git-tools/CopyTextDisplay.tsx","components/resume/git-tools/BranchName.tsx","components/resume/git-tools/useCommitText.ts","components/resume/git-tools/CommitText.tsx","components/resume/git-tools/DeployBranch.tsx","components/resume/git-tools/Header.tsx","components/resume/git-tools/GitTools.tsx","components/resume/git-tools/index.ts"],"names":["cardStyles","marginTop","overflow","headerStyles","borderRadius","marginLeft","marginRight","position","top","ExpandableCard","props","useToggleState","expanded","toggleExpanded","title","subtitle","children","backgroundColor","theme","inverted","headerStyle","palette","primary","main","type","boxShadow","grey","expandedHeaderStyle","marginBottom","titleStyle","color","subtitleStyle","titleJSX","Typography","style","variant","subtitleJSX","Card","CardHeader","onClick","subheader","Collapse","in","timeout","unmountOnExit","CardContent","Grid","container","spacing","overflowY","defaultProps","withTheme","useOpenState","defaultVal","React","useState","isOpen","setIsOpen","handleOpen","handleClose","chipStyles","height","paddingTop","paddingBottom","CopyTextDisplay","handleCopy","copyText","text","Chip","label","Snackbar","action","IconButton","key","autoHideDuration","message","onClose","open","BranchName","branchMessage","branchName","branchPrefix","casePreference","gitTheme","onBranchMessageChange","onBranchMessageClear","paddingLeft","paddingRight","width","item","sm","xs","FormControl","fullWidth","InputLabel","htmlFor","Select","input","Input","id","onChange","e","setBranchPrefix","target","value","getSelectOptions","setCasePreference","TextField","InputLabelProps","multiline","placeholder","useCommitText","storyID","gitCommit","commitPrefix","setLocalCommitPrefix","commitMessage","setCommitMessage","commitDescription","setCommitDescription","finishes","setFinishes","getCommitText","prefix","desc","postfix","gitMessage","handleCommitPrefixSelect","handleCommitMessageChange","handleCommitDescriptionChange","clearCommitMessage","clearCommitDescription","handleFinishesToggle","_e","isC","wrapperStyles","marginTopStyles","connect","state","git","dispatch","gitActions","bindActionCreators","setCommitPrefix","commitText","displayText","nl2br","FormControlLabel","control","Switch","checked","memo","targetBranch","setTargetBranch","display","alignItems","validId","RegExp","Header","handleIDChange","isIdValid","test","error","validTypingId","setBranchMessage","setKey","arr","map","t","i","MenuItem","str","copy","msg","snakeCase","kebabCase","camelCase","getBranchName","deepOrange","exec","DeployBranch","GitTools"],"mappings":"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","file":"static/js/r_git.8c92ea24.chunk.js","sourcesContent":["import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Collapse from '@material-ui/core/Collapse';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { withTheme, Theme } from '@material-ui/core/styles';\nimport grey from '@material-ui/core/colors/grey';\nimport useToggleState from '../../../hooks/useToggle';\n\nconst cardStyles: React.CSSProperties = { marginTop: 40, overflow: 'visible' };\nconst headerStyles: React.CSSProperties = {\n  borderRadius: 3,\n  marginLeft: 15,\n  marginRight: 15,\n  position: 'relative',\n  top: -20,\n};\n\ninterface ExpandableCardProps {\n  backgroundColor?: string;\n  children?: React.ReactNode;\n  inverted?: boolean;\n  subtitle?: string | React.ReactNode;\n  theme: Theme;\n  title?: string | React.ReactNode;\n}\n\nconst ExpandableCard: React.FC<ExpandableCardProps> = (props: ExpandableCardProps) => {\n  const [expanded, toggleExpanded] = useToggleState(true);\n\n  const {\n    title, subtitle, children, backgroundColor, theme, inverted,\n  } = props;\n\n  const headerStyle = {\n    ...headerStyles,\n    backgroundColor: backgroundColor || theme.palette.primary.main,\n  };\n\n  if (theme.palette.type !== 'dark') {\n    headerStyle.boxShadow = `0px 15px 15px -10px ${grey[400]}`;\n  } else {\n    delete headerStyle.boxShadow;\n  }\n  const expandedHeaderStyle = { ...headerStyle, marginBottom: -20 };\n  const titleStyle = { color: inverted ? 'black' : 'white' };\n  const subtitleStyle = { color: grey[inverted ? 800 : 300] };\n\n  const titleJSX = (\n    <Typography style={titleStyle} variant=\"h6\">\n      {title}\n    </Typography>\n  );\n  const subtitleJSX = expanded ? (\n    <Typography style={subtitleStyle}>\n      {subtitle}\n    </Typography>\n  ) : null;\n\n  return (\n    <Card style={cardStyles}>\n      <CardHeader\n        onClick={toggleExpanded}\n        style={expanded ? expandedHeaderStyle : headerStyle}\n        subheader={subtitleJSX}\n        title={titleJSX}\n      />\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n          <Grid container spacing={1} style={{ overflowY: 'hidden' }}>\n            {children}\n          </Grid>\n        </CardContent>\n      </Collapse>\n    </Card>\n  );\n};\n\nExpandableCard.defaultProps = {\n  inverted: false,\n};\n\nexport default withTheme(ExpandableCard);\n","import ExpandableCard from './ExpandableCard';\n\nexport default ExpandableCard;\n","import React from 'react';\n\ntype OpenStateHook = [\n  boolean,\n  Function,\n  Function,\n]\n\nconst useOpenState = (defaultVal = false): OpenStateHook => {\n  const [isOpen, setIsOpen] = React.useState(defaultVal);\n\n  const handleOpen = (): void => { setIsOpen(true); };\n  const handleClose = (): void => { setIsOpen(false); };\n\n  return [isOpen, handleOpen, handleClose];\n};\n\nexport default useOpenState;\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Chip from '@material-ui/core/Chip';\nimport useOpenState from '../../../hooks/useOpenState';\n\ninterface CopyTextDisplayProps {\n  copyText?: string;\n  handleCopy: Function;\n  text: string | React.ReactNode[];\n}\n\nconst chipStyles: React.CSSProperties = { height: 'auto', paddingTop: 7, paddingBottom: 7 };\n\nconst CopyTextDisplay: React.FC<CopyTextDisplayProps> = (props: CopyTextDisplayProps) => {\n  const [isOpen, handleOpen, handleClose] = useOpenState(false);\n  const { handleCopy, copyText, text } = props;\n\n  /** copies text to clipboard and opens prompt to tell the user */\n  const handleCopyText = (): void => {\n    handleOpen();\n    const toCopy = copyText || text;\n    handleCopy(toCopy);\n  };\n\n  return (\n    <>\n      <Chip onClick={handleCopyText} style={chipStyles} label={<div>{text}</div>} />\n      <Snackbar\n        action={[\n          <IconButton key=\"close\" onClick={handleClose as React.MouseEventHandler}>\n            <CloseIcon />\n          </IconButton>,\n        ]}\n        autoHideDuration={4000}\n        message=\"Copied Commit Text to clipboard!\"\n        onClose={handleClose as React.ReactEventHandler}\n        open={isOpen}\n      />\n    </>\n  );\n};\n\nexport default CopyTextDisplay;\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport IconButton from '@material-ui/core/IconButton';\nimport Clear from '@material-ui/icons/Clear';\nimport Grid from '@material-ui/core/Grid';\nimport CopyTextDisplay from './CopyTextDisplay';\n\ninterface BranchNameProps {\n  branchMessage?: string;\n  branchName: string;\n  branchPrefix: string;\n  casePreference: string;\n  getSelectOptions: Function;\n  gitTheme: string;\n  handleCopy: Function;\n  onBranchMessageChange: React.ChangeEventHandler;\n  onBranchMessageClear: React.MouseEventHandler;\n  setBranchPrefix: Function;\n  setCasePreference: Function;\n}\n\nconst BranchName: React.FC<BranchNameProps> = (props: BranchNameProps) => {\n  /** function to generate select items for branch prefixes */\n  const getBranchPrefixOptions = (): React.ReactNode => {\n    const { getSelectOptions } = props;\n    return getSelectOptions(['chores', 'epics', 'features', 'fixes']);\n  };\n\n  /** function to generate select items for case preference */\n  const getCasePreferenceOptions = (): React.ReactNode => {\n    const { getSelectOptions } = props;\n    return getSelectOptions([\n      'snake_case',\n      'kebab-case',\n      'camelCase',\n      'No Changes',\n    ]);\n  };\n\n  /** function to update select state based on value */\n  const handleBranchPrefixSelect = (e: React.ChangeEvent<{ name?: string | undefined; value: unknown }>): void => {\n    const { setBranchPrefix } = props;\n    setBranchPrefix(e.target.value);\n  };\n\n  /** function to update text state based on value */\n  const handleCasePrefSelect = (e: React.ChangeEvent<{ name?: string | undefined; value: unknown }>): void => {\n    const { setCasePreference } = props;\n    setCasePreference(e.target.value);\n  };\n\n  const {\n    branchMessage,\n    branchName,\n    branchPrefix,\n    casePreference,\n    gitTheme,\n    handleCopy,\n    onBranchMessageChange,\n    onBranchMessageClear,\n  } = props;\n\n  return (\n    <div style={{ paddingLeft: 20, paddingRight: 20, width: '100%' }}>\n      <Grid container spacing={1}>\n        <Grid item sm={3} xs={12}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"branch-prefix\" style={{ color: gitTheme }}>\n              Branch Prefix\n            </InputLabel>\n            <Select\n              input={<Input id=\"branch-prefix\" />}\n              onChange={handleBranchPrefixSelect}\n              value={branchPrefix}\n            >\n              {getBranchPrefixOptions()}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item sm={3} xs={12}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"branch-prefix\" style={{ color: gitTheme }}>\n              Case Preference\n            </InputLabel>\n            <Select\n              input={<Input id=\"branch-prefix\" />}\n              onChange={handleCasePrefSelect}\n              value={casePreference}\n            >\n              {getCasePreferenceOptions()}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item sm={5} xs={10}>\n          <TextField\n            fullWidth\n            InputLabelProps={{ style: { color: gitTheme }}}\n            label=\"Branch Name\"\n            multiline\n            onChange={onBranchMessageChange}\n            placeholder=\"Summary of User Story\"\n            value={branchMessage}\n          />\n        </Grid>\n        <Grid item sm={1} xs={2}>\n          <IconButton\n            onClick={onBranchMessageClear}\n            style={{ marginTop: 12 }}\n          >\n            <Clear />\n          </IconButton>\n        </Grid>\n      </Grid>\n      <CopyTextDisplay handleCopy={handleCopy} text={branchName} />\n    </div>\n  );\n};\n\nexport default BranchName;\n","import React from 'react';\n\ninterface UseCommitTextReturns {\n  commitPrefix: string;\n  commitMessage: string;\n  commitDescription: string;\n  finishes: boolean;\n  getCommitText: Function;\n  handleCommitPrefixSelect: (event: React.ChangeEvent<any>, child: React.ReactNode) => void;\n  handleCommitMessageChange: React.ChangeEventHandler;\n  handleCommitDescriptionChange: React.ChangeEventHandler;\n  clearCommitMessage: React.MouseEventHandler;\n  clearCommitDescription: React.MouseEventHandler;\n  handleFinishesToggle: (event: React.ChangeEvent<{}>, checked: boolean) => void;\n}\n\nfunction useCommitText(storyID?: string, gitCommit?: boolean): UseCommitTextReturns {\n  const [commitPrefix, setLocalCommitPrefix] = React.useState('feat');\n  const [commitMessage, setCommitMessage] = React.useState('');\n  const [commitDescription, setCommitDescription] = React.useState('');\n  const [finishes, setFinishes] = React.useState(false);\n\n  /** function to generate the commit message from inputs\n   * @return {string} format Prefix: Message [?Finishes? ID] */\n  const getCommitText = (): string => {\n    // prefix\n    const prefix = commitPrefix ? `${commitPrefix}: ` : '';\n\n    // description\n    let desc = ' ';\n    if (commitDescription && storyID) {\n      desc = `\\n\\n${commitDescription}\\n\\n`;\n    } else if (commitDescription) {\n      desc = `\\n\\n${commitDescription}`;\n    }\n\n    // postfix\n    let postfix = '';\n    if (finishes && storyID) {\n      postfix = `[${storyID} #finish]`;\n    } else if (storyID) {\n      postfix = `[${storyID}]`;\n    }\n\n    // compile all components together\n    const gitMessage = `${prefix}${commitMessage}${desc}${postfix}`;\n\n    // add syntax wrapper\n    return gitCommit ? `git commit -m \"${gitMessage}\"` : gitMessage;\n  };\n\n  /** function to update select state based on value */\n  const handleCommitPrefixSelect = (e: React.ChangeEvent<any>): void => {\n    setLocalCommitPrefix(e.target.value);\n  };\n\n  /** function to update text state based on value */\n  const handleCommitMessageChange = (e: React.ChangeEvent<any>): void => {\n    setCommitMessage(e.target.value);\n  };\n\n  const handleCommitDescriptionChange = (e: React.ChangeEvent<any>): void => {\n    setCommitDescription(e.target.value);\n  };\n\n  /** function to update text state based on value */\n  const clearCommitMessage = (): void => {\n    setCommitMessage('');\n  };\n\n  const clearCommitDescription = (): void => {\n    setCommitDescription('');\n  };\n\n  const handleFinishesToggle = (_e: React.ChangeEvent<{}>, isC: boolean): void => {\n    setFinishes(isC);\n  };\n\n  return {\n    commitPrefix,\n    commitMessage,\n    commitDescription,\n    finishes,\n    getCommitText,\n    handleCommitPrefixSelect,\n    handleCommitMessageChange,\n    handleCommitDescriptionChange,\n    clearCommitMessage,\n    clearCommitDescription,\n    handleFinishesToggle,\n  };\n}\n\nexport default useCommitText;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport Select from '@material-ui/core/Select';\nimport IconButton from '@material-ui/core/IconButton';\nimport Clear from '@material-ui/icons/Clear';\nimport Grid from '@material-ui/core/Grid';\nimport nl2br from 'react-newline-to-break';\nimport CopyTextDisplay from './CopyTextDisplay';\nimport { setCommitPrefix } from '../../../store/modules/git';\nimport { DBRootState } from '../../../store/types';\nimport useCommitText from './useCommitText';\n\ninterface GitActions {\n  setCommitPrefix: Function;\n}\ninterface CommitTextProps {\n  getSelectOptions: Function;\n  gitActions: GitActions;\n  gitCommit: boolean;\n  gitTheme: string;\n  handleCopy: Function;\n  storyID?: string;\n}\n\nconst wrapperStyles: React.CSSProperties = { paddingLeft: 20, paddingRight: 20, width: '100%' };\nconst marginTopStyles: React.CSSProperties = { marginTop: 12 };\n\nconst CommitText: React.FC<CommitTextProps> = (props: CommitTextProps) => {\n  const {\n    getSelectOptions, storyID, gitActions, handleCopy,\n    gitCommit, gitTheme,\n  } = props;\n\n  const {\n    commitPrefix,\n    commitMessage,\n    commitDescription,\n    finishes,\n    getCommitText,\n    handleCommitPrefixSelect,\n    handleCommitMessageChange,\n    handleCommitDescriptionChange,\n    clearCommitMessage,\n    clearCommitDescription,\n    handleFinishesToggle,\n  } = useCommitText(storyID, gitCommit);\n\n  /** function to generate select items based of input */\n  const getCommitPrefixOptions = (): React.ReactNode => getSelectOptions([\n    'build', 'chore', 'ci', 'docs',\n    'feat', 'fix', 'perf', 'refactor',\n    'revert', 'style', 'test',\n  ]);\n\n  const handleGitCommitToggle = (_e: any, isC: boolean): void => {\n    gitActions.setCommitPrefix(isC);\n  };\n\n  const commitText = getCommitText();\n  const displayText = commitText && nl2br(getCommitText());\n\n  return (\n    <div style={wrapperStyles}>\n      <Grid container spacing={1}>\n        <Grid item sm={4} xs={12}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"commit-prefix\" style={{ color: gitTheme }}>\n              Commit Prefix\n            </InputLabel>\n            <Select\n              input={<Input id=\"branch-prefix\" />}\n              onChange={handleCommitPrefixSelect}\n              value={commitPrefix}\n            >\n              {getCommitPrefixOptions()}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item sm={4} xs={12}>\n          <FormControlLabel\n            control={(\n              <Switch\n                checked={finishes}\n                onChange={handleFinishesToggle}\n                value=\"Finishes User Story\"\n              />\n            )}\n            label=\"Finishes User Story\"\n          />\n        </Grid>\n        <Grid item sm={4} xs={12}>\n          <FormControlLabel\n            control={(\n              <Switch\n                checked={gitCommit}\n                onChange={handleGitCommitToggle}\n                value=\"Add git commit -m\"\n              />\n            )}\n            label=\"Add git commit -m\"\n          />\n        </Grid>\n        <Grid item sm={5} xs={10}>\n          <TextField\n            fullWidth\n            InputLabelProps={{ style: { color: gitTheme }}}\n            label=\"Commit Message\"\n            onChange={handleCommitMessageChange}\n            placeholder=\"Summary of Work Done (Message)\"\n            value={commitMessage}\n          />\n        </Grid>\n        <Grid item sm={1} xs={2}>\n          <IconButton onClick={clearCommitMessage} style={marginTopStyles}>\n            <Clear />\n          </IconButton>\n        </Grid>\n        <Grid item sm={5} xs={10}>\n          <TextField\n            fullWidth\n            InputLabelProps={{ style: { color: gitTheme }}}\n            label=\"Commit Description\"\n            multiline\n            onChange={handleCommitDescriptionChange}\n            placeholder=\"Summary of Work Done (Description)\"\n            value={commitDescription}\n          />\n        </Grid>\n        <Grid item sm={1} xs={2}>\n          <IconButton\n            onClick={clearCommitDescription}\n            style={marginTopStyles}\n          >\n            <Clear />\n          </IconButton>\n        </Grid>\n      </Grid>\n      <CopyTextDisplay\n        copyText={commitText}\n        handleCopy={handleCopy}\n        text={displayText}\n      />\n    </div>\n  );\n};\n\n// react-redux export\nconst mapStateToProps = (state: DBRootState): { gitCommit: boolean } => ({ gitCommit: state.git.commitPrefix });\nconst mapDispatchToProps = (dispatch: Dispatch): { gitActions: GitActions } => ({\n  gitActions: bindActionCreators({ setCommitPrefix }, dispatch),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(CommitText);\n","import React, { useState, memo } from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport Grid from '@material-ui/core/Grid';\nimport CopyTextDisplay from './CopyTextDisplay';\n\ninterface BranchNameProps {\n  branchName: string;\n  getSelectOptions: Function;\n  gitTheme: string;\n  handleCopy: Function;\n}\n\nconst BranchName: React.FC<BranchNameProps> = memo((props: BranchNameProps) => {\n  const [targetBranch, setTargetBranch] = useState('test-pipeline');\n\n  const handleSelect = (e: React.ChangeEvent<any>): void => {\n    setTargetBranch(e.target.value);\n  };\n\n  const {\n    gitTheme, handleCopy, getSelectOptions, branchName,\n  } = props;\n\n  return (\n    <div style={{ paddingLeft: 20, paddingRight: 20, width: '100%' }}>\n      <Grid container spacing={1} style={{ display: 'flex', alignItems: 'center' }}>\n        <Grid item sm={3} xs={12}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"target-branch\" style={{ color: gitTheme }}>\n              Target Branch\n            </InputLabel>\n            <Select\n              input={<Input id=\"target-branch\" />}\n              onChange={handleSelect}\n              value={targetBranch}\n            >\n              {getSelectOptions(['test-pipeline', 'sandbox-pipeline'])}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item sm={9} xs={12}>\n          <CopyTextDisplay handleCopy={handleCopy} text={`git push -f origin ${branchName}:${targetBranch}`} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n});\n\nexport default BranchName;\n","import React, { memo } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\n\ninterface HeaderProps {\n  gitTheme: string;\n  handleIDChange: React.ChangeEventHandler;\n  storyID?: string;\n}\n\nconst validId = RegExp('[A-Z]{4}-[a-zA-Z0-9]+');\n\nconst Header: React.FC<HeaderProps> = memo((props: HeaderProps) => {\n  const { handleIDChange, storyID, gitTheme } = props;\n\n  const isIdValid = storyID && validId.test(storyID);\n\n  return (\n    <>\n      <Typography variant=\"h2\">\n        Git Tools\n      </Typography>\n      <TextField\n        InputLabelProps={{ style: { color: gitTheme }}}\n        label=\"User Story ID\"\n        onChange={handleIDChange}\n        placeholder=\"GNAP-12345\"\n        style={{ marginLeft: 20 }}\n        value={storyID}\n        error={!isIdValid}\n      />\n      <br />\n    </>\n  );\n});\n\nexport default Header;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport deepOrange from '@material-ui/core/colors/deepOrange';\nimport copy from 'copy-to-clipboard';\nimport map from 'lodash/map';\nimport snakeCase from 'lodash/snakeCase';\nimport kebabCase from 'lodash/kebabCase';\nimport camelCase from 'lodash/camelCase';\nimport {\n  setBranchMessage, setBranchPrefix, setCasePreference, setKey,\n} from '../../../store/modules/git';\nimport BranchName from './BranchName';\nimport CommitText from './CommitText';\nimport DeployBranch from './DeployBranch';\nimport Header from './Header';\nimport ExpandableCard from '../../common/expandable-card';\nimport { DBRootState, DBGit } from '../../../store/types';\n\ninterface GitActions {\n  setBranchMessage: Function;\n  setBranchPrefix: Function;\n  setCasePreference: Function;\n  setKey: Function;\n}\ninterface GitToolsProps {\n  git: DBGit;\n  gitActions: GitActions;\n}\n\nconst validTypingId = RegExp('[A-Z]{1,4}-?[a-zA-Z0-9]*');\n\n/* GitTools  ->  Header\n *          |->  BranchName    -|\n *          |->  CommitText    -|->  CopyTextDisplay\n *          |->  DeployBranch  -|    */\nconst GitTools: React.FC<GitToolsProps> = (props: GitToolsProps) => {\n  /** function to generate select items based of input */\n  const getSelectOptions = (arr: string[]): React.ReactNode => map(arr, (t, i) => (\n    <MenuItem key={i} value={t}>\n      {t}\n    </MenuItem>\n  ));\n\n  /** function to update text state based on value */\n  const handleIDChange = (e: React.ChangeEvent<any>): void => {\n    const { gitActions } = props;\n    const [value] = validTypingId.exec(e.target.value) || [''];\n    gitActions.setKey(value);\n  };\n\n  /** function to update text state based on value */\n  const handleCopy = (str: string): void => {\n    copy(str);\n  };\n\n  /** function to update text state based on value */\n  const handleBranchMessageChange = (e: React.ChangeEvent<any>): void => {\n    const { gitActions } = props;\n    gitActions.setBranchMessage(e.target.value);\n  };\n\n  /** function to update text state based on value */\n  const handleBranchMessageClear = (): void => {\n    const { gitActions } = props;\n    gitActions.setBranchMessage('');\n  };\n\n  /** function to generate the branch name from inputs\n   * @return {string} format prefix/<story_id>_name_lower_cased\n   */\n  const getBranchName = (): string => {\n    const {\n      git: {\n        branchMessage, branchPrefix, casePreference, storyID: id,\n      },\n    } = props;\n    const prefix = branchPrefix ? `${branchPrefix}/` : '';\n    let msg = '';\n    switch (casePreference) {\n      case 'snake_case':\n        msg = `${id && `${id}_`}${snakeCase(branchMessage)}`;\n        break;\n      case 'kebab-case':\n        msg = `${id && `${id}-`}${kebabCase(branchMessage)}`;\n        break;\n      case 'camelCase':\n        msg = `${id}${camelCase(branchMessage)}`;\n        break;\n      default:\n        msg = `${id}${branchMessage}`;\n    }\n    return `${prefix}${msg}`;\n  };\n\n  const {\n    git: {\n      branchMessage, branchPrefix, casePreference, storyID,\n    }, gitActions,\n  } = props;\n  const branchName = getBranchName();\n  const gitTheme = deepOrange[600];\n\n  return (\n    <>\n      <Header\n        {...{\n          gitTheme,\n          handleIDChange,\n          storyID,\n        }}\n      />\n      <ExpandableCard backgroundColor={gitTheme} title=\"Create Branch Name\">\n        <BranchName\n          {...{\n            branchMessage,\n            branchName,\n            branchPrefix,\n            casePreference,\n            getSelectOptions,\n            gitTheme,\n            handleCopy,\n            onBranchMessageChange: handleBranchMessageChange,\n            onBranchMessageClear: handleBranchMessageClear,\n            setBranchPrefix: gitActions.setBranchPrefix,\n            setCasePreference: gitActions.setCasePreference,\n          }}\n        />\n      </ExpandableCard>\n      <ExpandableCard backgroundColor={gitTheme} title=\"Create Commit Message\">\n        <CommitText\n          {...{\n            getSelectOptions,\n            gitTheme,\n            handleCopy,\n            storyID,\n          }}\n        />\n      </ExpandableCard>\n      <ExpandableCard backgroundColor={gitTheme} title=\"Deploy to Test Pipelines\">\n        <DeployBranch\n          {...{\n            branchName,\n            getSelectOptions,\n            gitTheme,\n            handleCopy,\n          }}\n        />\n      </ExpandableCard>\n    </>\n  );\n};\n\n// react-redux export\nconst mapStateToProps = (state: DBRootState): { git: DBGit } => ({\n  git: state.git,\n});\nconst mapDispatchToProps = (dispatch: Dispatch): { gitActions: GitActions } => ({\n  gitActions: bindActionCreators(\n    {\n      setBranchMessage, setBranchPrefix, setCasePreference, setKey,\n    },\n    dispatch,\n  ),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(GitTools);\n","import GitTools from './GitTools';\n\nexport default GitTools;\n"],"sourceRoot":""}