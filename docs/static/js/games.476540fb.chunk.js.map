{"version":3,"sources":["helpers/lazyWithPreload.js","components/common/ButtonPopover.jsx","components/common/header/PlayerMenu.styles.js","components/common/header/PlayerMenu.jsx","components/common/header/TopBar.styles.js","components/common/header/TopBar.jsx","components/common/header/Header.jsx","components/games/Menu.jsx","components/games/Routes.jsx"],"names":["lazyWithPreload","ComponentPromise","React","lazy","ButtonPopover","props","useState","anchorEl","setAnchorEl","children","buttonText","open","Boolean","Button","aria-owns","aria-haspopup","variant","onClick","event","currentTarget","Popover","id","onClose","anchorOrigin","vertical","horizontal","transformOrigin","style","padding","cloneElement","styles","namepad","maxWidth","width","display","margin","PlayerMenu","handleToggle","isChecked","playerActions","updateBot","handleKeyPress","e","key","updateName","target","value","state","isBot","players","this","Grid","container","spacing","item","xs","Typography","map","p","i","name","TextField","defaultValue","onKeyPress","placeholder","Switch","checked","color","onChange","isC","disabled","nextProps","prevState","old","Component","connect","dispatch","bindActionCreators","flexLeft","alignItems","flexRight","marginRight","TopBar","toDarkTheme","themeActions","displayDarkTheme","setState","toggleSwitch","toLightTheme","displayLightTheme","theme","type","toggleOpen","showPlayers","fontColor","iconColor","AppBar","left","right","top","Toolbar","disableGutters","className","IconButton","aria-label","cursor","PureComponent","defaultProps","Header","isOpen","setIsOpen","handleNav","palette","Drawer","position","onItemClick","loc","withTheme","Menu","memo","menu","route","divider","index","Divider","MenuItem","GameHome","BlackJack","Connect4","DealOrNoDeal","Dota2Picker","Poker","Slots","TicTacToe","Yahtzee","Routes","match","url","paths","reduce","component","acc","obj","path","push","exact","from","to","fallback"],"mappings":"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","file":"static/js/games.476540fb.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function lazyWithPreload(ComponentPromise) {\n  return React.lazy(() => ComponentPromise);\n}\n","// React\nimport React, { useState, Fragment } from 'react';\nimport types from 'prop-types';\n// Material UI\nimport Button from '@material-ui/core/Button';\nimport Popover from '@material-ui/core/Popover';\n\nconst ButtonPopover = (props) => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const { children, buttonText } = props;\n  const open = Boolean(anchorEl);\n\n  return (\n    <Fragment>\n      <Button\n        aria-owns={open ? 'simple-popper' : null}\n        aria-haspopup=\"true\"\n        variant=\"contained\"\n        onClick={(event) => { setAnchorEl(event.currentTarget); }}\n      >\n        {buttonText}\n      </Button>\n      <Popover\n        id=\"simple-popper\"\n        open={open}\n        anchorEl={anchorEl}\n        onClose={() => { setAnchorEl(null); }}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n        <div style={{ padding: 15 }}>{React.cloneElement(children)}</div>\n      </Popover>\n    </Fragment>\n  );\n};\n\nButtonPopover.propTypes = {\n  children: types.element.isRequired,\n  buttonText: types.string.isRequired,\n};\n\nexport default ButtonPopover;\n","const styles = {\n  namepad: {\n    maxWidth: '420px',\n    width: '100%',\n    display: 'block',\n    margin: 'auto',\n  },\n};\n\nexport default styles;\n","import React, { Component } from 'react';\nimport types from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport Switch from '@material-ui/core/Switch';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport map from 'lodash/map';\nimport { updateName, updateBot } from '../../../store/modules/players';\nimport styles from './PlayerMenu.styles';\n// Parents: Main\n\n/** --------------------------------------------------\n* PlayerMenu\n* -------------------------------------------------- */\nclass PlayerMenu extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isBot: {},\n      players: {},\n    };\n  }\n\n  // https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html\n  // https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops\n  static getDerivedStateFromProps(nextProps, prevState) {\n    // get old player and current player\n    const { players: old } = prevState;\n    const { players } = nextProps;\n\n    return old !== players\n      ? { players, isBot: map(players, ['isBot', true]) }\n      : null;\n  }\n\n  handleToggle = (id, isChecked) => {\n    const { playerActions } = this.props;\n    playerActions.updateBot(id, isChecked);\n  };\n\n  handleKeyPress = (e, id) => {\n    const { playerActions } = this.props;\n    if (e.key === 'Enter') {\n      playerActions.updateName(id, e.target.value);\n    }\n  };\n\n  render() {\n    const { players } = this.props;\n    const { isBot } = this.state;\n\n    return (\n      <div style={styles.namepad}>\n        <Grid container spacing={1}>\n          <Grid item xs={9}>\n            <Typography variant=\"h5\">\n              Edit Player Names\n            </Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <Typography variant=\"h5\">\n              Is Bot?\n            </Typography>\n          </Grid>\n        </Grid>\n        {map(players, (p, i) => (p.id !== 0\n          ? (\n            <Grid key={`${p.name},${i}`} container spacing={1}>\n              <Grid item xs={9}>\n                <TextField\n                  defaultValue={p.name}\n                  onKeyPress={(e) => this.handleKeyPress(e, p.id)}\n                  placeholder=\"Enter Player Name\"\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <Switch\n                  checked={isBot[i]}\n                  color=\"primary\"\n                  onChange={(e, isC) => this.handleToggle(p.id, isC)}\n                />\n              </Grid>\n            </Grid>\n          ) : (\n            <Grid key={`${p.name},${i}`} container spacing={1}>\n              <Grid item xs={9}>\n                <Typography variant=\"h5\">\n                  {p.name}\n                </Typography>\n              </Grid>\n              <Grid item xs={3}>\n                <Switch checked disabled />\n              </Grid>\n            </Grid>\n          )\n        ))}\n      </div>\n    );\n  }\n}\n\nPlayerMenu.propTypes = {\n  playerActions: types.shape({\n    updateName: types.func.isRequired,\n    updateBot: types.func.isRequired,\n  }).isRequired,\n  players: types.arrayOf(\n    types.shape({\n      id: types.number.isRequired,\n      name: types.string.isRequired,\n      isBot: types.bool.isRequired,\n    }),\n  ).isRequired,\n};\n\n// react-redux export\nconst mapStateToProps = (state) => ({ players: state.players });\nconst mapDispatchToProps = (dispatch) => ({\n  playerActions: bindActionCreators({ updateName, updateBot }, dispatch),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PlayerMenu);\n","const styles = {\n  flexLeft: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  flexRight: {\n    display: 'flex',\n    marginRight: 15,\n  },\n};\n\nexport default styles;\n","import React, { PureComponent } from 'react';\nimport types from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Switch from '@material-ui/core/Switch';\nimport SimplePopover from '../ButtonPopover';\nimport PlayerMenu from './PlayerMenu';\nimport {\n  displayDarkTheme,\n  displayLightTheme,\n} from '../../../store/modules/theme';\nimport styles from './TopBar.styles';\n// Parents: App\n\nclass TopBar extends PureComponent {\n  constructor(props) {\n    super(props);\n    const { theme } = props;\n\n    if (theme.type === 'dark') {\n      this.state = { checked: false, toggleSwitch: this.toLightTheme };\n    } else {\n      this.state = { checked: true, toggleSwitch: this.toDarkTheme };\n    }\n  }\n\n  toDarkTheme = () => {\n    const { themeActions } = this.props;\n    themeActions.displayDarkTheme();\n    this.setState({ checked: false, toggleSwitch: this.toLightTheme });\n  };\n\n  toLightTheme = () => {\n    const { themeActions } = this.props;\n    themeActions.displayLightTheme();\n    this.setState({ checked: true, toggleSwitch: this.toDarkTheme });\n  };\n\n  render() {\n    const {\n      toggleOpen, showPlayers, fontColor, iconColor,\n    } = this.props;\n    const { checked, toggleSwitch } = this.state;\n    return (\n      <AppBar style={{ left: 0, right: 0, top: 0 }}>\n        <Toolbar disableGutters>\n          <div className=\"flex-container\">\n            <div style={styles.flexLeft}>\n              <IconButton\n                aria-label=\"Menu\"\n                onClick={toggleOpen}\n                color={iconColor}\n              >\n                <MenuIcon />\n              </IconButton>\n              <Typography\n                onClick={toggleOpen}\n                style={{ cursor: 'pointer' }}\n                variant=\"h6\"\n                color={fontColor}\n              >\n                Menu\n              </Typography>\n            </div>\n            {showPlayers && (\n              <div style={styles.flexRight}>\n                <SimplePopover buttonText=\"Players\">\n                  <PlayerMenu />\n                </SimplePopover>\n              </div>\n            )}\n            <div style={styles.flexRight}>\n              <Switch checked={checked} onChange={toggleSwitch} />\n            </div>\n          </div>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n\nTopBar.propTypes = {\n  fontColor: types.string.isRequired,\n  iconColor: types.string.isRequired,\n  showPlayers: types.bool,\n  theme: types.shape({\n    type: types.string,\n  }),\n  themeActions: types.shape({\n    displayDarkTheme: types.func.isRequired,\n    displayLightTheme: types.func.isRequired,\n  }),\n  toggleOpen: types.func.isRequired,\n};\n\nTopBar.defaultProps = {\n  showPlayers: false,\n};\n\n// react-redux export\nconst mapStateToProps = (state) => ({\n  theme: state.theme,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  themeActions: bindActionCreators(\n    { displayDarkTheme, displayLightTheme },\n    dispatch,\n  ),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TopBar);\n","import React, { useState, Fragment } from 'react';\nimport types from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Drawer from '@material-ui/core/Drawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport NavigationClose from '@material-ui/icons/Close';\nimport { withTheme } from '@material-ui/core/styles';\nimport TopBar from './TopBar';\n// Parents: App\n\nconst Header = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const {\n    children, handleNav, showPlayers, theme: { palette: { type }},\n  } = props;\n\n  const toggleOpen = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleNavigation = (loc) => {\n    setIsOpen(false);\n    handleNav(loc);\n  };\n\n  const iconColor = type === 'light' ? 'inherit' : 'default';\n  const fontColor = type === 'light' ? 'inherit' : 'initial';\n\n  return (\n    <Fragment>\n      <TopBar toggleOpen={toggleOpen} showPlayers={showPlayers} fontColor={fontColor} iconColor={iconColor} />\n      <Drawer onClose={toggleOpen} open={isOpen}>\n        <AppBar position=\"sticky\">\n          <Toolbar disableGutters>\n            <IconButton\n              aria-label=\"Menu Close\"\n              onClick={toggleOpen}\n              color={iconColor}\n            >\n              <NavigationClose />\n            </IconButton>\n            <Typography variant=\"h6\" color={fontColor}>\n              Menu\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        {React.cloneElement(children, { onItemClick: handleNavigation })}\n      </Drawer>\n    </Fragment>\n  );\n};\n\nHeader.propTypes = {\n  children: types.element.isRequired,\n  handleNav: types.func.isRequired,\n  showPlayers: types.bool,\n  theme: types.shape({\n    palette: types.shape({\n      type: types.string,\n    }).isRequired,\n  }),\n};\n\nHeader.defaultProps = {\n  showPlayers: false,\n};\n\nexport default withTheme(Header);\n","import React, { memo, Fragment } from 'react';\nimport types from 'prop-types';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Divider from '@material-ui/core/Divider';\nimport map from 'lodash/map';\n// Parents: Header\n\nconst Menu = memo((props) => {\n  const { onItemClick } = props;\n  const baseUrl = '/games';\n\n  // internal routes\n  const menu = map(\n    [\n      { name: 'Home - Games', route: '' },\n      { divider: true },\n      { name: 'BlackJack', route: 'blackjack' },\n      { name: 'Connect4', route: 'connect4' },\n      { name: 'Deal or No Deal', route: 'deal' },\n      { name: 'Dota 2 Picker', route: 'dota2' },\n      { name: 'Poker', route: 'poker' },\n      { name: 'Slot Machine', route: 'slots' },\n      { name: 'Tic-Tac-Toe', route: 'tictactoe' },\n      { name: 'Yahtzee', route: 'yahtzee' },\n    ],\n    (item, index) => (item.divider\n      ? (\n        <Divider key={index} />\n      ) : (\n        <MenuItem\n          key={item.name}\n          onClick={() => onItemClick(`${baseUrl}/${item.route}`)}\n        >\n          {item.name}\n        </MenuItem>\n      )\n    ),\n  );\n\n  // navigation\n  const home = () => onItemClick('/');\n\n  // render menu\n  return (\n    <Fragment>\n      <MenuItem onClick={home}>\n        Back to Resume\n      </MenuItem>\n      {menu}\n    </Fragment>\n  );\n});\n\nMenu.propTypes = {\n  onItemClick: types.func,\n};\n\nexport default Menu;\n","import React, { Suspense, Fragment } from 'react';\nimport types from 'prop-types';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport reduce from 'lodash/reduce';\n// custom\nimport lazyWithPreload from '../../helpers/lazyWithPreload';\nimport Header from '../common/header/Header';\nimport Menu from './Menu';\nimport LoadingSpinner from '../common/loading-spinner';\n// Parents: Routes (main)\n\n// lazy load page components\nconst GameHome = lazyWithPreload(import(/* webpackChunkName: \"g_home\" */ './Home'));\nconst BlackJack = lazyWithPreload(import(/* webpackChunkName: \"g_bj\" */ './blackjack'));\nconst Connect4 = lazyWithPreload(import(/* webpackChunkName: \"g_connect4\" */ './connect4'));\nconst DealOrNoDeal = lazyWithPreload(import(/* webpackChunkName: \"g_dond\" */ './deal-or-no-deal'));\nconst Dota2Picker = lazyWithPreload(import(/* webpackChunkName: \"g_d2p\" */ './dota-2-picker'));\nconst Poker = lazyWithPreload(import(/* webpackChunkName: \"g_poker\" */ './poker'));\nconst Slots = lazyWithPreload(import(/* webpackChunkName: \"g_slots\" */ './slots'));\nconst TicTacToe = lazyWithPreload(import(/* webpackChunkName: \"g_tictactoe\" */ './tictactoe'));\nconst Yahtzee = lazyWithPreload(import(/* webpackChunkName: \"g_yahtzee\" */ './yahtzee'));\n\nconst Routes = (props) => {\n  const { match, handleNav } = props;\n  const { url } = match;\n\n  const paths = reduce(\n    [\n      { name: 'blackjack', component: BlackJack },\n      { name: 'connect4', component: Connect4 },\n      { name: 'deal', component: DealOrNoDeal },\n      { name: 'dota2', component: Dota2Picker },\n      { name: 'poker', component: Poker },\n      { name: 'slots', component: Slots },\n      { name: 'tictactoe', component: TicTacToe },\n      { name: 'yahtzee', component: Yahtzee },\n    ],\n    (acc, obj) => {\n      const { name, component } = obj;\n      const path = `${url}/${name}`;\n      acc.push(<Route key={`${path}r`} exact {...{ path, component }} />);\n      acc.push(<Redirect key={`${path}d`} from={`${path}*`} to={path} />);\n      return acc;\n    },\n    [],\n  );\n\n  return (\n    <Fragment>\n      <Header handleNav={handleNav} showPlayers>\n        <Menu />\n      </Header>\n      <Suspense fallback={<LoadingSpinner />}>\n        <Switch>\n          <Route component={GameHome} exact path={`${url}`} />\n          {paths}\n          <Redirect from={`${url}/*`} to={`${url}`} />\n          <Route component={GameHome} />\n        </Switch>\n      </Suspense>\n    </Fragment>\n  );\n};\n\nRoutes.propTypes = {\n  handleNav: types.func.isRequired,\n  match: types.shape({\n    url: types.string.isRequired,\n  }).isRequired,\n};\n\nexport default Routes;\n"],"sourceRoot":""}