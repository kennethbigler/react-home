{"version":3,"file":"static/js/g_are_you_the_one.d24f0d5d.chunk.js","mappings":"+LA0EA,IA7DiB,SAACA,GAChB,IAAQC,EAAwCD,EAAxCC,UAAWC,EAA6BF,EAA7BE,MAAOC,EAAsBH,EAAtBG,QAASC,EAAaJ,EAAbI,SAGnC,EAAwBC,EAAAA,UAAe,GAAvC,eAAOC,EAAP,KAAaC,EAAb,KACMC,EAAYH,EAAAA,OAAgC,MAmBlD,OACE,iCACE,SAAC,IAAD,CACEI,IAAKD,EACL,gBAAeF,EAAO,yBAAsBI,EAC5C,gBAAeJ,EAAO,YAASI,EAC/B,aAAYT,EACZ,gBAAc,OACdU,SAAS,SAAC,IAAD,IACTC,KAAK,QACLC,QAAQ,YACRC,QApBe,kBAAMP,GAAQ,SAACQ,GAAD,OAAeA,CAAf,GAAd,EAWjB,SAWGZ,EAAQD,MAEX,SAAC,IAAD,CACEc,GAAG,oBACHC,SAAUT,EAAUU,QACpBZ,KAAMA,EACNa,WAAS,EACTC,WAAY,CAAEC,MAAO,CAAEC,UAAW,MAClCC,QA5Bc,SAACC,GAAkB,IAAD,EACpC,UAAIhB,EAAUU,eAAd,OAAI,EAAmBO,SAASD,EAAME,SAGtCnB,GAAQ,EACT,EAiBG,SAQGJ,EAAQwB,KAAI,SAACC,EAAQC,GAAT,OACX,SAAC,IAAD,CAEEC,SAAUD,IAAU3B,EACpBY,QAAS,SAACU,GAAD,OA5CS,SAC1BA,EACAK,GAEAzB,EAASyB,GACTtB,GAAQ,EACT,CAsC6BwB,CAAoBP,EAAOK,EAAtC,EAHX,SAKGD,GAJIA,EAFI,QAYpB,C,qJCvEYI,EAAc,CACzB,CACEC,OAAQ,CACN,QACA,WACA,WACA,WACA,OACA,UACA,QACA,QACA,UACA,UAEFC,MAAO,CACL,OACA,MACA,UACA,UACA,SACA,QACA,OACA,KACA,OACA,QAGJ,CACED,OAAQ,CACN,aACA,SACA,SACA,YACA,QACA,UACA,QACA,UACA,QACA,SACA,SAEFC,MAAO,CACL,OACA,UACA,UACA,SACA,QACA,UACA,OACA,SACA,SACA,UAGJ,CACED,OAAQ,CACN,SACA,SACA,UACA,SACA,QACA,OACA,WACA,UACA,UACA,UAEFC,MAAO,CACL,OACA,SACA,QACA,SACA,QACA,SACA,OACA,SACA,QACA,QAGJ,CACED,OAAQ,CACN,SACA,UACA,OACA,YACA,QACA,SACA,SACA,SACA,OACA,YAEFC,MAAO,CACL,OACA,MACA,UACA,WACA,OACA,SACA,UACA,MACA,UACA,UAGJ,CACED,OAAQ,CACN,SACA,WACA,MACA,SACA,SACA,MACA,OACA,UACA,UACA,SACA,WAEFC,MAAO,CACL,QACA,UACA,SACA,SACA,SACA,OACA,UACA,OACA,UACA,OACA,UAGJ,CACED,OAAQ,CACN,SACA,SACA,SACA,UACA,QACA,OACA,SACA,SACA,QACA,OACA,OAEFC,MAAO,CACL,UACA,UACA,QACA,UACA,QACA,MACA,SACA,QACA,UACA,UACA,UAGJ,CACED,OAAQ,CACN,OACA,OACA,OACA,UACA,QACA,QACA,SACA,QACA,SACA,QACA,YAEFC,MAAO,CACL,SACA,QACA,MACA,SACA,QACA,QACA,MACA,SACA,QACA,QACA,SAKOC,EAAU,CACrB,WACA,WACA,WACA,WACA,WACA,WACA,YAGWhC,EAAU,CACrB,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,aACA,cACA,gBClMIiC,EAAe,eAACC,EAAD,uDAFE,EAEF,MAAyC,CAC5DC,QAASN,EAAYK,GAAQJ,OAAON,KAAI,kBAAO,CAAP,IACxCY,QAASP,EAAYK,GAAQJ,OAAON,KAAI,kBACtCK,EAAYK,GAAQH,MAAMP,KAAI,kBAAM,CAAN,GADQ,IAGxCa,cAAe,GALI,EASRC,GAAmBC,EAAAA,EAAAA,IAAK,CACnCC,IAAK,mBACLC,QACGC,KAAKC,MACJC,aAAaC,QAAQ,yBAA2B,SAC/BZ,IACrBa,QAAS,CACP,aACEC,EADa,EAAZA,QACK,SAACC,GACLJ,aAAaK,QAAQ,uBAAwBP,KAAKQ,UAAUF,GAC7D,GACF,KAKCG,GAAiBZ,EAAAA,EAAAA,IAAK,CAC1BC,IAAK,aACLC,QACGC,KAAKC,MACJC,aAAaC,QAAQ,qBAAuB,SA/B3B,EAiCrBC,QAAS,CACP,aACEC,EADa,EAAZA,QACK,SAACC,GACLJ,aAAaK,QAAQ,mBAAoB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","sources":["components/common/dropdown/Dropdown.tsx","constants/ayto.ts","recoil/are-you-the-one-atom.ts","components/games/are-you-the-one/Controls.tsx","components/games/are-you-the-one/table/TBDialog.tsx","components/games/are-you-the-one/table/TableBody.tsx","components/games/are-you-the-one/table/Table.tsx","components/games/are-you-the-one/analysis/Analysis.tsx","components/games/are-you-the-one/analysis/useHist.ts","components/games/are-you-the-one/AreYouTheOne.tsx"],"sourcesContent":["import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport Menu from \"@mui/material/Menu\";\n\ninterface DropdownProps {\n  onSelect: (index: number) => void;\n  options: string[];\n  value: number;\n  ariaLabel: string;\n}\n\nconst Dropdown = (props: DropdownProps) => {\n  const { ariaLabel, value, options, onSelect } = props;\n\n  // hooks/state\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef<HTMLButtonElement>(null);\n\n  const handleMenuItemClick = (\n    event: React.MouseEvent<HTMLLIElement, MouseEvent>,\n    index: number\n  ) => {\n    onSelect(index);\n    setOpen(false);\n  };\n\n  const handleToggle = () => setOpen((prevOpen) => !prevOpen);\n\n  const handleClose = (event: Event) => {\n    if (anchorRef.current?.contains(event.target as HTMLElement)) {\n      return;\n    }\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button\n        ref={anchorRef}\n        aria-controls={open ? \"split-button-menu\" : undefined}\n        aria-expanded={open ? \"true\" : undefined}\n        aria-label={ariaLabel}\n        aria-haspopup=\"menu\"\n        endIcon={<ArrowDropDownIcon />}\n        size=\"small\"\n        variant=\"contained\"\n        onClick={handleToggle}\n      >\n        {options[value]}\n      </Button>\n      <Menu\n        id=\"split-button-menu\"\n        anchorEl={anchorRef.current}\n        open={open}\n        autoFocus\n        PaperProps={{ style: { maxHeight: 48 * 5.5 } }}\n        onClose={handleClose}\n      >\n        {options.map((option, index) => (\n          <MenuItem\n            key={option}\n            selected={index === value}\n            onClick={(event) => handleMenuItemClick(event, index)}\n          >\n            {option}\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n};\n\nexport default Dropdown;\n","// are-you-the-one\nexport const aytoSeasons = [\n  {\n    ladies: [\n      \"Amber\",\n      \"Ashleigh\",\n      \"Brittany\",\n      \"Coleysia\",\n      \"Jacy\",\n      \"Jessica\",\n      \"Kayla\",\n      \"Paige\",\n      \"Shanley\",\n      \"Simone\",\n    ],\n    gents: [\n      \"Adam\",\n      \"Dre\",\n      \"Chris S\",\n      \"Chris T\",\n      \"Dillan\",\n      \"Ethan\",\n      \"Joey\",\n      \"JJ\",\n      \"Ryan\",\n      \"Wes\",\n    ],\n  },\n  {\n    ladies: [\n      \"Alexandria\",\n      \"Ashley\",\n      \"Briana\",\n      \"Christina\",\n      \"Ellie\",\n      \"Jasmine\",\n      \"Jenni\",\n      \"Jessica\",\n      \"Paris\",\n      \"Shelby\",\n      \"Tyler\",\n    ],\n    gents: [\n      \"Alex\",\n      \"Anthony\",\n      \"Brandon\",\n      \"Curtis\",\n      \"Dario\",\n      \"Garland\",\n      \"John\",\n      \"Layton\",\n      \"Nathan\",\n      \"Tyler\",\n    ],\n  },\n  {\n    ladies: [\n      \"Amanda\",\n      \"Britni\",\n      \"Chelsey\",\n      \"Hannah\",\n      \"Kayla\",\n      \"Kiki\",\n      \"Cheyenne\",\n      \"Melanie\",\n      \"Rashida\",\n      \"Stacey\",\n    ],\n    gents: [\n      \"Alec\",\n      \"Austin\",\n      \"Chuck\",\n      \"Connor\",\n      \"Devin\",\n      \"Hunter\",\n      \"Mike\",\n      \"Nelson\",\n      \"Tyler\",\n      \"Zak\",\n    ],\n  },\n  {\n    ladies: [\n      \"Alyssa\",\n      \"Camille\",\n      \"Emma\",\n      \"Francesca\",\n      \"Julia\",\n      \"Kaylen\",\n      \"Mikala\",\n      \"Nicole\",\n      \"Tori\",\n      \"Victoria\",\n    ],\n    gents: [\n      \"Asaf\",\n      \"Cam\",\n      \"Cameron\",\n      \"Giovanni\",\n      \"John\",\n      \"Morgan\",\n      \"Prosper\",\n      \"Sam\",\n      \"Stephen\",\n      \"Tyler\",\n    ],\n  },\n  {\n    ladies: [\n      \"Alicia\",\n      \"Carolina\",\n      \"Cas\",\n      \"Gianna\",\n      \"Hannah\",\n      \"Kam\",\n      \"Kari\",\n      \"Kathryn\",\n      \"Shannon\",\n      \"Taylor\",\n      \"Tyranny\",\n    ],\n    gents: [\n      \"Andre\",\n      \"Derrick\",\n      \"Edward\",\n      \"Hayden\",\n      \"Jaylan\",\n      \"Joey\",\n      \"Michael\",\n      \"Mike\",\n      \"Osvaldo\",\n      \"Ozzy\",\n      \"Tyler\",\n    ],\n  },\n  {\n    ladies: [\n      \"Alexis\",\n      \"Alivia\",\n      \"Audrey\",\n      \"Diandra\",\n      \"Geles\",\n      \"Jada\",\n      \"Keyana\",\n      \"Nicole\",\n      \"Nurys\",\n      \"Uche\",\n      \"Zoe\",\n    ],\n    gents: [\n      \"Anthony\",\n      \"Clinton\",\n      \"David\",\n      \"Dimitri\",\n      \"Ethan\",\n      \"Joe\",\n      \"Kareem\",\n      \"Keith\",\n      \"Malcolm\",\n      \"Michael\",\n      \"Tyler\",\n    ],\n  },\n  {\n    ladies: [\n      \"Asia\",\n      \"Bria\",\n      \"Cali\",\n      \"Jasmine\",\n      \"Kayla\",\n      \"Kenya\",\n      \"Lauren\",\n      \"Maria\",\n      \"Morgan\",\n      \"Nutsa\",\n      \"Samantha\",\n    ],\n    gents: [\n      \"Andrew\",\n      \"Brett\",\n      \"Cam\",\n      \"Daniel\",\n      \"Kwasi\",\n      \"Lewis\",\n      \"Moe\",\n      \"Shamoy\",\n      \"Tevin\",\n      \"Tomas\",\n      \"Zak\",\n    ],\n  },\n];\n\nexport const seasons = [\n  \"Season 1\",\n  \"Season 2\",\n  \"Season 3\",\n  \"Season 4\",\n  \"Season 5\",\n  \"Season 6\",\n  \"Season 7\",\n];\n\nexport const options = [\n  \"Matchup 1\",\n  \"Matchup 2\",\n  \"Matchup 3\",\n  \"Matchup 4\",\n  \"Matchup 5\",\n  \"Matchup 6\",\n  \"Matchup 7\",\n  \"Matchup 8\",\n  \"Matchup 9\",\n  \"Matchup 10\",\n  \"Truth Booth\",\n  \"Consolidated\",\n];\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { aytoSeasons, options } from \"../constants/ayto\";\n\nexport interface RoundPairing {\n  /** [lady-i: gent-i] */\n  pairs: number[];\n  /** score of the round */\n  score: number;\n}\n\nexport interface AYTOState {\n  /** [lady-i: (gent-i | -1), -1, -1, ...] */\n  matches: number[];\n  /** [lady-i: [gent-i: bool]] */\n  noMatch: boolean[][];\n  /** [round-i: RoundPairing] */\n  roundPairings: RoundPairing[];\n}\n\nconst DEFAULT_SEASON = 6;\n\nconst newAYTOState = (season = DEFAULT_SEASON): AYTOState => ({\n  matches: aytoSeasons[season].ladies.map(() => -1),\n  noMatch: aytoSeasons[season].ladies.map(() =>\n    aytoSeasons[season].gents.map(() => false)\n  ),\n  roundPairings: [],\n});\n\n/** used for main game state */\nexport const areYouTheOneAtom = atom({\n  key: \"areYouTheOneAtom\",\n  default:\n    (JSON.parse(\n      localStorage.getItem(\"are-you-the-one-atom\") || \"null\"\n    ) as AYTOState) || newAYTOState(),\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"are-you-the-one-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\n/** used internally to store season */\nconst aytoSeasonAtom = atom({\n  key: \"aytoSeason\",\n  default:\n    (JSON.parse(\n      localStorage.getItem(\"ayto-season-atom\") || \"null\"\n    ) as number) || DEFAULT_SEASON,\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"ayto-season-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\n/** used externally to set season and side effects in main state */\nexport const aytoSeasonSelector = selector({\n  key: \"aytoSeasonSelector\",\n  get: ({ get }) => get(aytoSeasonAtom),\n  set: ({ set }, state) => {\n    if (!(state instanceof DefaultValue)) {\n      set(aytoSeasonAtom, state);\n      set(areYouTheOneAtom, newAYTOState(state));\n    }\n  },\n});\n\n/** used externally to get player info */\nexport const aytoPlayerSelector = selector({\n  key: \"aytoPlayerSelector\",\n  get: ({ get }) => {\n    const season = get(aytoSeasonAtom);\n    const newOptions = [...options];\n    // if season 1, there are only 9 TBs\n    if (season === 1) {\n      newOptions.splice(9, 1);\n    }\n\n    return { ...aytoSeasons[season], options };\n  },\n});\n\nexport default areYouTheOneAtom;\n","import * as React from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport { useRecoilState } from \"recoil\";\nimport {\n  aytoSeasonSelector,\n  RoundPairing,\n} from \"../../../recoil/are-you-the-one-atom\";\nimport { seasons } from \"../../../constants/ayto\";\nimport Dropdown from \"../../common/dropdown/Dropdown\";\n\ninterface ControlsProps {\n  onSelect: (index: number) => void;\n  options: string[];\n  roundNumber: number;\n  /** [round-i: RoundPairing] */\n  roundPairings: RoundPairing[];\n  updateScore: (score: number) => void;\n  onBlackout: (pairs: number[]) => void;\n}\n\n// eslint-disable-next-line no-restricted-globals\nconst getScore = (value: number) => (isNaN(value) ? -1 : value);\n\n/** Controls component for Are You The One */\nconst Controls = (props: ControlsProps) => {\n  const {\n    options,\n    onSelect,\n    roundNumber,\n    roundPairings,\n    onBlackout,\n    updateScore,\n  } = props;\n\n  // hooks/state\n  const [season, setSeason] = useRecoilState(aytoSeasonSelector);\n  const [score, setScore] = React.useState(\n    getScore(roundPairings[roundNumber]?.score)\n  );\n\n  // handlers\n  const handleSeasonSelect = (newSeason: number) => setSeason(newSeason);\n  const handleMatchupSelect = (index: number) => {\n    setScore(getScore(roundPairings[index]?.score));\n    onSelect(index);\n  };\n\n  const handleBlackout = () => onBlackout(roundPairings[roundNumber].pairs);\n\n  const handleTextFieldChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setScore(parseInt(event.target.value, 10) || 0);\n    updateScore(parseInt(event.target.value, 10));\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        flexWrap: \"wrap\",\n        gap: \"1em\",\n      }}\n    >\n      <Dropdown\n        ariaLabel=\"select season\"\n        value={season}\n        options={seasons}\n        onSelect={handleSeasonSelect}\n      />\n      <Dropdown\n        ariaLabel=\"select matchup\"\n        value={roundNumber}\n        options={options}\n        onSelect={handleMatchupSelect}\n      />\n      {roundNumber < options.length - 2 && (\n        <>\n          <Button variant=\"outlined\" color=\"secondary\" onClick={handleBlackout}>\n            Blackout\n          </Button>\n          <TextField\n            id=\"score-input\"\n            label=\"Score\"\n            variant=\"outlined\"\n            type=\"number\"\n            value={score}\n            onChange={handleTextFieldChange}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Controls;\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\n\nexport interface TBDialogProps {\n  open: boolean;\n  content: string;\n  onMatch: () => void;\n  onNoMatch: () => void;\n  onCancel: () => void;\n}\n\nconst TBDialog = ({\n  open,\n  content,\n  onMatch,\n  onNoMatch,\n  onCancel,\n}: TBDialogProps) => (\n  <Dialog onClose={onCancel} open={open}>\n    <DialogTitle>TB Result</DialogTitle>\n    <DialogContent>Are {content} a perfect match?</DialogContent>\n    <DialogActions>\n      <Button onClick={onMatch}>Match</Button>\n      <Button onClick={onNoMatch} color=\"error\">\n        No Match\n      </Button>\n      <Button onClick={onCancel} color=\"warning\">\n        Cancel\n      </Button>\n    </DialogActions>\n  </Dialog>\n);\n\nexport default TBDialog;\n","import * as React from \"react\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Button from \"@mui/material/Button\";\nimport { RoundPairing } from \"../../../../recoil/are-you-the-one-atom\";\nimport { ColorOptions } from \"../types\";\nimport TBDialog from \"./TBDialog\";\nimport { AYTOHist } from \"../analysis/useHist\";\n\nexport interface AYTOTableProps {\n  gents: string[];\n  hist: AYTOHist[][];\n  ladies: string[];\n  /** [lady-i: (gent-i | -1), -1, -1, ...] */\n  matches: number[];\n  /** [lady-i: [gent-i: bool]] */\n  noMatch: boolean[][];\n  options: string[];\n  roundNumber: number;\n  /** [round-i: RoundPairing] */\n  roundPairings: RoundPairing[];\n  updateMatch: (li: number, gi: number) => void;\n  updateNoMatch: (li: number, gi: number) => void;\n  updatePairs: (ri: number, li: number, gi: number) => void;\n}\n\nconst AYTOTableBody = (props: AYTOTableProps) => {\n  const {\n    gents,\n    hist,\n    ladies,\n    matches,\n    noMatch,\n    options,\n    roundNumber: ri,\n    roundPairings,\n    updateMatch,\n    updateNoMatch,\n    updatePairs,\n  } = props;\n  const isTB = options.length === ri + 2;\n  const isConsolidated = options.length === ri + 1;\n\n  // state\n  const [open, setOpen] = React.useState(false);\n  const [tbi, setTBI] = React.useState([-1, -1]);\n\n  // Handlers\n  const handleClick = (roundi: number, ladyi: number, genti: number) => () => {\n    if (isConsolidated) {\n      return;\n    }\n    if (isTB) {\n      setTBI([ladyi, genti]);\n      setOpen(true);\n      return;\n    }\n    // Regular Round, verify gent isn't already taken\n    const tempLi = roundPairings[roundi]?.pairs.indexOf(genti);\n    if (tempLi !== -1) {\n      // deselect gent from old lady\n      updatePairs(roundi, tempLi, -1);\n    }\n    // assign to new lady\n    updatePairs(roundi, ladyi, genti);\n  };\n\n  const handleCancel = () => {\n    setOpen(false);\n  };\n\n  const handleMatch = () => {\n    const [li, gi] = tbi;\n    updateMatch(li, gi);\n    handleCancel();\n  };\n\n  const handleNoMatch = () => {\n    const [li, gi] = tbi;\n    updateNoMatch(li, gi);\n    handleCancel();\n  };\n\n  return (\n    <TableBody>\n      {ladies.map((lName, li) => (\n        <TableRow\n          key={`ayto-table-row-${lName}`}\n          sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n        >\n          <TableCell component=\"th\" scope=\"row\">\n            {lName}\n          </TableCell>\n          {gents.map((gName, gi) => {\n            // variables\n            let variant: \"outlined\" | \"contained\" = \"outlined\";\n            let color: ColorOptions = \"primary\";\n\n            // logic\n            if (isTB) {\n              // if has data about match or no match\n              if ((noMatch[li] && noMatch[li][gi]) || matches[li] === gi) {\n                variant = \"contained\";\n              }\n            } else if (roundPairings[ri]?.pairs[li] === gi) {\n              // if paired this round\n              variant = \"contained\";\n            }\n\n            if (noMatch[li] && noMatch[li][gi]) {\n              color = \"error\";\n            }\n\n            // if match\n            if (matches[li] === gi) {\n              color = \"success\";\n            }\n\n            const histValue = (hist[li] && hist[li][gi]?.rounds?.length) || 0;\n            // if consolidated\n            if (isConsolidated && histValue > 0) {\n              variant = \"contained\";\n            }\n\n            // render\n            return (\n              <TableCell key={gName} sx={{ padding: 0, textAlign: \"center\" }}>\n                <Button\n                  variant={variant}\n                  color={color}\n                  onClick={handleClick(ri, li, gi)}\n                >\n                  {isConsolidated ? histValue : `${lName[0]}-${gName[0]}`}\n                </Button>\n              </TableCell>\n            );\n          })}\n        </TableRow>\n      ))}\n      <TBDialog\n        open={open}\n        content={`${ladies[tbi[0]]} & ${gents[tbi[1]]}`}\n        onCancel={handleCancel}\n        onMatch={handleMatch}\n        onNoMatch={handleNoMatch}\n      />\n    </TableBody>\n  );\n};\n\nexport default AYTOTableBody;\n","import * as React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport AYTOTableBody, { AYTOTableProps } from \"./TableBody\";\n\nconst AYTOTable = ({ gents, ...other }: AYTOTableProps) => (\n  <TableContainer component={Paper}>\n    <Table aria-label=\"are you the one data entry table\">\n      <TableHead>\n        <TableRow>\n          <TableCell>-</TableCell>\n          {gents.map((name) => (\n            <TableCell\n              key={name}\n              sx={{ paddingLeft: 0, paddingRight: 0, textAlign: \"center\" }}\n            >\n              {name}\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n      <AYTOTableBody gents={gents} {...other} />\n    </Table>\n  </TableContainer>\n);\n\nexport default AYTOTable;\n","import * as React from \"react\";\nimport Stack from \"@mui/material/Stack\";\nimport Chip from \"@mui/material/Chip\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Switch from \"@mui/material/Switch\";\nimport { RoundPairing } from \"../../../../recoil/are-you-the-one-atom\";\nimport { ChipColorOptions } from \"../types\";\nimport { AYTOHist } from \"./useHist\";\n\nexport interface AnalysisProps {\n  calculatedEquations: RoundPairing[];\n  gents: string[];\n  hist: AYTOHist[][];\n  ladies: string[];\n  /** [lady-i: (gent-i | -1), -1, -1, ...] */\n  matches: number[];\n  /** [lady-i: [gent-i: bool]] */\n  noMatch: boolean[][];\n  /** [round-i: RoundPairing] */\n  roundPairings: RoundPairing[];\n  tempScore: number[];\n}\n\nconst Analysis = (props: AnalysisProps) => {\n  const {\n    gents,\n    ladies,\n    matches,\n    noMatch,\n    roundPairings,\n    hist,\n    tempScore,\n    calculatedEquations,\n  } = props;\n\n  // state\n  const [showAll, setShowAll] = React.useState(false);\n\n  // handlers\n  const handleSwitch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setShowAll(event.target.checked);\n  };\n\n  return (\n    <div>\n      <Stack direction=\"row\" justifyContent=\"space-between\">\n        <h1>Analysis</h1>\n        <FormControlLabel\n          control={\n            <Switch checked={showAll} onChange={handleSwitch} name=\"show-all\" />\n          }\n          label=\"Show All Couples\"\n        />\n      </Stack>\n      <Stack spacing={1} direction=\"row\" flexWrap=\"wrap\">\n        {roundPairings.map(({ pairs, score }, ri) => {\n          const equation = pairs.map((gi, li) => {\n            // if cleared pairing\n            if (li < 0 || gi < 0) {\n              return null;\n            }\n\n            const isRepeat = hist[li][gi].rounds.length > 1;\n            let color: ChipColorOptions = isRepeat ? \"primary\" : \"default\";\n\n            if (!showAll) {\n              // hide matches and noMatches\n              if (noMatch[li][gi] || matches[li] === gi) {\n                return null;\n              }\n            } else {\n              // no match chip\n              if (noMatch[li][gi]) {\n                color = \"error\";\n              }\n              // match chip\n              if (matches[li] === gi) {\n                color = \"success\";\n              }\n            }\n\n            const label = `${ladies[li]}-${gents[gi]}${\n              isRepeat ? ` ${hist[li][gi].rounds.length}` : \"\"\n            } - ${hist[li][gi].odds}%`;\n\n            // create equation chips\n            return (\n              <Chip\n                key={`eq-r${ri}-l${li}-g${gi}`}\n                label={label}\n                color={color}\n              />\n            );\n          });\n\n          // return each equation stack\n          return !equation.every((e) => e === null) ? (\n            <Stack key={`equation-${ri}`} spacing={1}>\n              <h2 style={{ textAlign: \"center\" }}>Matchup {ri + 1}</h2>\n              {equation}\n              <Chip\n                label={showAll ? score : score - tempScore[ri]}\n                color=\"warning\"\n              />\n            </Stack>\n          ) : null;\n        })}\n      </Stack>\n      {calculatedEquations.length > 0 && <hr />}\n      <Stack spacing={1} direction=\"row\" flexWrap=\"wrap\">\n        {calculatedEquations.map(({ pairs, score }, cei) => (\n          <Stack key={`equation-${cei}`} spacing={1}>\n            <h2 style={{ textAlign: \"center\" }}>Calculated {cei + 1}</h2>\n            {pairs.map((gi, li) => (\n              <Chip\n                key={`eq-calc-l${li}-g${gi}`}\n                label={`${ladies[li]}-${gents[gi]} ${hist[li][gi].rounds.length} - ${hist[li][gi].odds}%`}\n                color=\"primary\"\n              />\n            ))}\n            <Chip label={`max ${score}`} color=\"warning\" />\n          </Stack>\n        ))}\n      </Stack>\n    </div>\n  );\n};\n\nexport default Analysis;\n","import { RoundPairing } from \"../../../../recoil/are-you-the-one-atom\";\n\nexport interface AYTOHist {\n  odds: number;\n  oddsWeight: number;\n  rounds: number[];\n}\n\nexport interface AYTODictObj {\n  couples: [number, number][];\n  score: number;\n}\n\nexport interface AYTODict {\n  [key: string]: AYTODictObj;\n}\n\n/** [lady-i: (gent-i | -1), -1, -1, ...] */\n/** [lady-i: [gent-i: bool]] */\n/** [round-i: RoundPairing] */\nconst useHist = (\n  len: number,\n  matches: number[],\n  noMatch: boolean[][],\n  roundPairings: RoundPairing[]\n) => {\n  // state\n  const hist: AYTOHist[][] = [];\n  const tempScore: number[] = [];\n  const totals: number[] = [];\n\n  // create histogram\n  roundPairings.forEach(({ pairs }, ri) => {\n    tempScore[ri] = 0;\n    totals[ri] = len;\n\n    pairs.forEach((gi, li) => {\n      // noMatch increases odds of the rest\n      if (li < 0 || gi < 0 || noMatch[li][gi]) {\n        totals[ri] -= 1;\n      }\n      // remove matches\n      if (matches[li] === gi) {\n        tempScore[ri] += 1;\n        totals[ri] -= 1;\n      }\n      // verify data obj\n      !hist[li] && (hist[li] = []);\n      !hist[li][gi] && (hist[li][gi] = { odds: 0, oddsWeight: 0, rounds: [] });\n      // histogram\n      hist[li][gi].rounds.push(ri);\n    });\n  });\n\n  // temp state\n  const dict: AYTODict = {};\n\n  // with histogram made, time to get some stats\n  roundPairings.forEach(({ pairs, score }, ri) => {\n    pairs.forEach((gi, li) => {\n      // ----------     odds     ---------- //\n      const histObj = hist[li][gi];\n      // 0% odds for no match\n      if (noMatch[li][gi]) {\n        return;\n      }\n      // 100% odds for match\n      if (matches[li] === gi) {\n        histObj.odds = 100;\n        return;\n      }\n      // calculate odds for the round\n      const odds = totals[ri]\n        ? ((score - tempScore[ri]) * 100) / totals[ri]\n        : 0;\n      // assign first odds\n      if (histObj.oddsWeight === 0) {\n        histObj.odds = Math.floor(odds);\n      } else if (!odds || !histObj.odds) {\n        // if odds for either are 0\n        histObj.odds = 0;\n      } else {\n        // rolling average\n        histObj.odds = Math.floor(\n          (histObj.odds * histObj.oddsWeight + odds) / (histObj.oddsWeight + 1)\n        );\n      }\n      // update odds weight\n      histObj.oddsWeight += 1;\n\n      // ----------     equations     ---------- //\n      // only care about repeats\n      if (histObj.rounds.length < 2) {\n        return;\n      }\n      // create key from round combination (length)\n      const keys = [\n        histObj.rounds.reduce((acc, val) => acc + val.toString(), \"\"),\n      ];\n      // add every pair of 2 rounds as keys\n      for (let i = ri + 1; i < histObj.rounds.length; i += 1) {\n        keys.push(`${histObj.rounds[ri]}${histObj.rounds[i]}`);\n      }\n      // NOTE: length (l) and 2 are covered, anything in-between is not directly considered (still covered in 2s)\n      keys.forEach((key) => {\n        // put that in the dictionary\n        !dict[key] && (dict[key] = { couples: [], score });\n        // calculate equations\n        let canAdd = true;\n        dict[key].couples.forEach(([tli, tgi]) => {\n          canAdd = canAdd && tli !== li && tgi !== gi;\n        });\n        canAdd && dict[key].couples.push([li, gi]);\n        dict[key].score = Math.min(score - tempScore[ri], dict[key].score);\n      });\n    });\n  });\n\n  // more state\n  const calculatedEquations: RoundPairing[] = [];\n\n  // convert qualifying couples to more equations\n  Object.keys(dict).forEach((key) => {\n    if (\n      // only care about repeat couples\n      dict[key].couples.length > 1 &&\n      // where there are more couples than score available\n      dict[key].couples.length > dict[key].score\n    ) {\n      const tempPairs: number[] = [];\n      // convert to RP\n      dict[key].couples.forEach(([li, gi]) => {\n        tempPairs[li] = gi;\n      });\n      // validate new equation doesn't already exist\n      let isRepeat = false;\n      calculatedEquations.forEach(({ pairs, score }, ci) => {\n        let hasExactRepeat = true;\n        let hasRoughRepeat = true;\n        for (let i = 0; i < pairs.length; i += 1) {\n          if (tempPairs[i] !== pairs[i]) {\n            if (tempPairs[i]) {\n              hasExactRepeat = false;\n              hasRoughRepeat = false;\n            } else {\n              // new equation has fewer couples, may still be a match but is missing some keys\n              hasExactRepeat = false;\n            }\n          }\n        }\n        isRepeat =\n          // compare against itself\n          isRepeat ||\n          // exclude if exact repeat\n          hasExactRepeat ||\n          // exclude if rough repeat with higher or equal score\n          (hasRoughRepeat && dict[key].score >= score);\n        // if exact repeat, pick the lower of the 2 scores\n        if (hasExactRepeat) {\n          calculatedEquations[ci].score = Math.min(score, dict[key].score);\n        }\n      });\n      // Add RP to equations\n      !isRepeat &&\n        calculatedEquations.push({\n          pairs: tempPairs,\n          score: dict[key].score,\n        });\n    }\n  });\n\n  return {\n    hist,\n    tempScore,\n    calculatedEquations,\n  };\n};\n\nexport default useHist;\n","import * as React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport Controls from \"./Controls\";\nimport Table from \"./table/Table\";\nimport Analysis from \"./analysis/Analysis\";\nimport aYTOAtom, {\n  aytoPlayerSelector,\n} from \"../../../recoil/are-you-the-one-atom\";\nimport useHist from \"./analysis/useHist\";\n\n/** TODO: replace Dropdown with MUI Dropdown when available */\nconst AreYouTheOne = () => {\n  const [{ matches, noMatch, roundPairings }, setState] =\n    useRecoilState(aYTOAtom);\n  const { ladies, gents, options } = useRecoilValue(aytoPlayerSelector);\n\n  // state\n  const [roundNumber, setRoundNumber] = React.useState(0);\n  const { hist, tempScore, calculatedEquations } = useHist(\n    ladies.length,\n    matches,\n    noMatch,\n    roundPairings\n  );\n\n  // handlers\n  const handleSelect = (selected: number) => {\n    setRoundNumber(selected);\n  };\n\n  const handleUpdateScore = (score: number) => {\n    const newRoundPairing = !roundPairings[roundNumber]\n      ? { pairs: [], score: 0 }\n      : { ...roundPairings[roundNumber] };\n    newRoundPairing.score = score;\n    const newRoundPairings = [...roundPairings];\n    newRoundPairings[roundNumber] = newRoundPairing;\n    setState({ matches, noMatch, roundPairings: newRoundPairings });\n  };\n\n  const handleUpdateNoMatch = (li: number, gi: number) => {\n    const newMatches = noMatch.map((gentArray: boolean[]) => [...gentArray]);\n    // if array for lady doesn't exist yet, create skeleton one\n    !newMatches[li] && (newMatches[li] = []);\n    // assign no match\n    newMatches[li][gi] = !newMatches[li][gi];\n    // update state\n    setState({ matches, noMatch: newMatches, roundPairings });\n  };\n\n  const handleBlackout = (pairs: number[]) => {\n    // create immutable copy for storage\n    const newNoMatches = noMatch.map((gentArray: boolean[]) => [...gentArray]);\n    // no match for all pairs\n    pairs.forEach((gi, li) => {\n      if (matches[li] !== gi && !noMatch[li][gi]) {\n        // if array for lady doesn't exist yet, create skeleton one\n        !newNoMatches[li] && (newNoMatches[li] = []);\n        // assign no match\n        newNoMatches[li][gi] = true;\n      }\n    });\n    // update state\n    setState({ matches, noMatch: newNoMatches, roundPairings });\n  };\n\n  const handleUpdatePairs = (ri: number, li: number, gi: number) => {\n    const newRoundPairing = !roundPairings[ri]\n      ? { pairs: [], score: 0 }\n      : { ...roundPairings[ri], pairs: [...roundPairings[ri].pairs] };\n    newRoundPairing.pairs[li] = gi;\n    const newRoundPairings = [...roundPairings];\n    newRoundPairings[roundNumber] = newRoundPairing;\n    setState({ matches, noMatch, roundPairings: newRoundPairings });\n  };\n\n  const handleUpdateMatch = (li: number, gi: number) => {\n    const newMatches = [...matches];\n    const newNoMatches = noMatch.map((gentArray: boolean[]) => [...gentArray]);\n    // if array for lady doesn't exist yet, create skeleton one\n    !newNoMatches[li] && (newNoMatches[li] = []);\n    // assign new match\n    newMatches[li] = gi;\n    // make all gent options no matches\n    for (let i = 0; i < gents.length; i += 1) {\n      newNoMatches[li][i] = i !== gi;\n    }\n    // make all ladies options no matches\n    for (let i = 0; i < ladies.length; i += 1) {\n      !newNoMatches[i] && (newNoMatches[i] = []);\n      newNoMatches[i][gi] = i !== li;\n    }\n\n    // update round pairings\n    const newRoundPairings = [...roundPairings];\n    for (let ri = 0; ri < options.length - 2; ri += 1) {\n      if (\n        !roundPairings[ri] ||\n        roundPairings[ri].pairs[li] < 0 ||\n        roundPairings[ri].pairs[li] === undefined\n      ) {\n        const newRoundPairing = !newRoundPairings[ri]\n          ? { pairs: [], score: 0 }\n          : { ...roundPairings[ri], pairs: [...roundPairings[ri].pairs] };\n        newRoundPairing.pairs[li] = gi;\n        newRoundPairings[ri] = newRoundPairing;\n      }\n    }\n\n    // update state\n    setState({\n      matches: newMatches,\n      noMatch: newNoMatches,\n      roundPairings: newRoundPairings,\n    });\n  };\n\n  return (\n    <>\n      <h1>Are You The One?</h1>\n      <Controls\n        onSelect={handleSelect}\n        options={options}\n        roundNumber={roundNumber}\n        roundPairings={roundPairings}\n        onBlackout={handleBlackout}\n        updateScore={handleUpdateScore}\n      />\n      <br />\n      <Table\n        gents={gents}\n        hist={hist}\n        ladies={ladies}\n        matches={matches}\n        noMatch={noMatch}\n        options={options}\n        roundNumber={roundNumber}\n        roundPairings={roundPairings}\n        updateMatch={handleUpdateMatch}\n        updateNoMatch={handleUpdateNoMatch}\n        updatePairs={handleUpdatePairs}\n      />\n      <Analysis\n        calculatedEquations={calculatedEquations}\n        gents={gents}\n        hist={hist}\n        ladies={ladies}\n        matches={matches}\n        noMatch={noMatch}\n        roundPairings={roundPairings}\n        tempScore={tempScore}\n      />\n    </>\n  );\n};\n\nexport default AreYouTheOne;\n"],"names":["props","ariaLabel","value","options","onSelect","React","open","setOpen","anchorRef","ref","undefined","endIcon","size","variant","onClick","prevOpen","id","anchorEl","current","autoFocus","PaperProps","style","maxHeight","onClose","event","contains","target","map","option","index","selected","handleMenuItemClick","aytoSeasons","ladies","gents","seasons","newAYTOState","season","matches","noMatch","roundPairings","areYouTheOneAtom","atom","key","default","JSON","parse","localStorage","getItem","effects","onSet","state","setItem","stringify","aytoSeasonAtom","aytoSeasonSelector","selector","get","set","DefaultValue","aytoPlayerSelector","newOptions","splice","getScore","isNaN","roundNumber","onBlackout","updateScore","useRecoilState","setSeason","score","setScore","display","justifyContent","flexWrap","gap","Dropdown","newSeason","length","Button","color","pairs","TextField","label","type","onChange","parseInt","content","onMatch","onNoMatch","onCancel","Dialog","DialogTitle","DialogContent","DialogActions","hist","ri","updateMatch","updateNoMatch","updatePairs","isTB","isConsolidated","tbi","setTBI","handleCancel","TableBody","lName","li","TableRow","sx","border","TableCell","component","scope","gName","gi","roundi","ladyi","genti","histValue","rounds","padding","textAlign","tempLi","indexOf","other","TableContainer","Paper","Table","TableHead","name","paddingLeft","paddingRight","tempScore","calculatedEquations","showAll","setShowAll","Stack","direction","FormControlLabel","control","Switch","checked","spacing","equation","isRepeat","odds","Chip","every","e","cei","len","totals","forEach","oddsWeight","push","dict","histObj","Math","floor","keys","reduce","acc","val","toString","i","couples","canAdd","tli","tgi","min","Object","tempPairs","ci","hasExactRepeat","hasRoughRepeat","aYTOAtom","setState","useRecoilValue","setRoundNumber","useHist","newNoMatches","gentArray","newRoundPairing","newRoundPairings","newMatches"],"sourceRoot":""}