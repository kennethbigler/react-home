{"version":3,"sources":["components/common/dark-table-cell/DarkTableCell.ts","constants/countries.ts","components/resume/travel-map/TravelTable.tsx","components/resume/travel-map/Popover.tsx","components/resume/travel-map/WorldMap.tsx","components/resume/travel-map/TravelMap.tsx"],"names":["DarkTableCell","withStyles","theme","head","backgroundColor","palette","common","black","color","white","TableCell","countries","Austria","deepOrange","continent","flag","Bahamas","amber","Canada","blue","Denmark","deepPurple","Estonia","green","Finland","indigo","France","lightBlue","Germany","lightGreen","Greece","lime","Iceland","orange","Ireland","pink","Italy","purple","Jamaica","Mexico","brown","Netherlands","red","Norway","teal","Poland","yellow","Portugal","Russia","Spain","cyan","Sweden","Switzerland","Turkey","Gibraltar","Malta","Monaco","Vatican","NA","EU","Object","entries","forEach","name","country","push","marginStyles","marginTop","marginBottom","separatorStyles","borderRight","grey","cellStyles","padding","textAlign","whiteSpace","overflow","len","Math","max","length","ceil","i","row","style","j","countryRow","TableRow","TravelMap","React","memo","Typography","variant","Table","TableHead","colSpan","TableBody","Popover","props","x","y","hide","content","popoverStyle","useMemo","position","left","top","display","borderRadius","STROKE","blueGrey","HOVER","VISITED_HOVER","FILL","PRESSED","defaultStyle","stroke","strokeWidth","outline","WorldMap","useState","setX","setY","setContent","setHide","handleEnter","geography","evt","properties","NAME","clientX","clientY","window","pageYOffset","handleLeave","useWorldMap","screenWidth","document","body","clientWidth","width","height","projectionConfig","scale","id","fill","geographies","map","geo","onMouseEnter","onMouseLeave","default","hover","pressed","rsmKey","TravelTable"],"mappings":"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","file":"static/js/r_travel.9383753b.chunk.js","sourcesContent":["import { withStyles } from '@material-ui/core/styles';\nimport TableCell from '@material-ui/core/TableCell';\n\nconst DarkTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n}))(TableCell);\n\nexport default DarkTableCell;\n","import {\n  amber, blue, brown, cyan,\n  deepOrange, deepPurple, green, indigo,\n  lightBlue, lightGreen, lime, orange,\n  pink, purple, red, teal, yellow,\n} from '@material-ui/core/colors/';\n\ninterface Country {\n  color?: string;\n  continent: string;\n  flag: string;\n}\nexport type Countries = Record<string, Country>;\n\nconst countries: Countries = {\n  Austria: { color: deepOrange[500], continent: 'EU', flag: 'ðŸ‡¦ðŸ‡¹' },\n  Bahamas: { color: amber[500], continent: 'NA', flag: 'ðŸ‡§ðŸ‡¸' },\n  Canada: { color: blue[500], continent: 'NA', flag: 'ðŸ‡¨ðŸ‡¦' },\n  Denmark: { color: deepPurple[500], continent: 'EU', flag: 'ðŸ‡©ðŸ‡°' },\n  Estonia: { color: green[500], continent: 'EU', flag: 'ðŸ‡ªðŸ‡ª' },\n  Finland: { color: indigo[500], continent: 'EU', flag: 'ðŸ‡«ðŸ‡®' },\n  France: { color: lightBlue[500], continent: 'EU', flag: 'ðŸ‡«ðŸ‡·' },\n  Germany: { color: lightGreen[500], continent: 'EU', flag: 'ðŸ‡©ðŸ‡ª' },\n  Greece: { color: lime[500], continent: 'EU', flag: 'ðŸ‡¬ðŸ‡·' },\n  Iceland: { color: orange[500], continent: 'EU', flag: 'ðŸ‡®ðŸ‡¸' },\n  Ireland: { color: pink[500], continent: 'EU', flag: 'ðŸ‡®ðŸ‡ª' },\n  Italy: { color: purple[500], continent: 'EU', flag: 'ðŸ‡®ðŸ‡¹' },\n  Jamaica: { color: lightBlue[800], continent: 'NA', flag: 'ðŸ‡¯ðŸ‡²' },\n  Mexico: { color: brown[500], continent: 'NA', flag: 'ðŸ‡²ðŸ‡½' },\n  Netherlands: { color: red[500], continent: 'EU', flag: 'ðŸ‡³ðŸ‡±' },\n  Norway: { color: teal[500], continent: 'EU', flag: 'ðŸ‡³ðŸ‡´' },\n  Poland: { color: yellow[500], continent: 'EU', flag: 'ðŸ‡µðŸ‡±' },\n  Portugal: { color: amber[800], continent: 'EU', flag: 'ðŸ‡µðŸ‡¹' },\n  Russia: { color: blue[800], continent: 'EU', flag: 'ðŸ‡·ðŸ‡º' },\n  Spain: { color: cyan[800], continent: 'EU', flag: 'ðŸ‡ªðŸ‡¸' },\n  Sweden: { color: deepOrange[800], continent: 'EU', flag: 'ðŸ‡¸ðŸ‡ª' },\n  Switzerland: { color: deepPurple[800], continent: 'EU', flag: 'ðŸ‡¨ðŸ‡­' },\n  Turkey: { color: green[800], continent: 'EU', flag: 'ðŸ‡¹ðŸ‡·' },\n  'United Kingdom': { color: indigo[800], continent: 'EU', flag: 'ðŸ‡¬ðŸ‡§' },\n  'United States of America': { color: cyan[500], continent: 'NA', flag: 'ðŸ‡ºðŸ‡¸' },\n  'British Virgin Islands': { continent: 'NA', flag: 'ðŸ‡»ðŸ‡¬' },\n  'Cayman Islands': { continent: 'NA', flag: 'ðŸ‡°ðŸ‡¾' },\n  'U.S. Virgin Islands': { continent: 'NA', flag: 'ðŸ‡»ðŸ‡®' },\n  Gibraltar: { continent: 'EU', flag: 'ðŸ‡¬ðŸ‡®' },\n  Malta: { continent: 'EU', flag: 'ðŸ‡²ðŸ‡¹' },\n  Monaco: { continent: 'EU', flag: 'ðŸ‡²ðŸ‡¨' },\n  Vatican: { continent: 'EU', flag: 'ðŸ‡»ðŸ‡¦' },\n};\n\nexport const NA: string[] = [];\nexport const EU: string[] = [];\n\nObject.entries(countries).forEach(([name, country]): void => {\n  country.continent === 'NA' && NA.push(`${name} ${country.flag}`);\n  country.continent === 'EU' && EU.push(`${name} ${country.flag}`);\n});\n\nexport default countries;\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Typography } from '@material-ui/core';\nimport grey from '@material-ui/core/colors/grey';\nimport DarkTableCell from '../../common/dark-table-cell/DarkTableCell';\nimport { NA, EU } from '../../../constants/countries';\n\nconst marginStyles: React.CSSProperties = { marginTop: 24, marginBottom: 16 };\nconst separatorStyles: React.CSSProperties = { borderRight: `1px solid ${grey[400]}` };\nconst cellStyles: React.CSSProperties = {\n  padding: 5,\n  textAlign: 'center',\n  whiteSpace: 'normal',\n  overflow: 'visible',\n};\n\n// ratio to display on table, 2:1 seemed to look best\nconst EURatio = 3;\n// export array of <li> elements for display\nconst countries: React.ReactNodeArray = [];\n// iterate to the end of the longer list\nconst len = Math.max(NA.length, Math.ceil(EU.length / EURatio));\nfor (let i = 0; i < len; i += 1) {\n  const row = [];\n  // add NA Country\n  row.push(\n    <TableCell\n      key={`tmc${i}`}\n      style={{ ...cellStyles, ...separatorStyles }}\n    >\n      {NA[i]}\n    </TableCell>,\n  );\n  // add EU Countries\n  for (let j = 0; j < EURatio; j += 1) {\n    row.push(\n      <TableCell key={`tmc${i}${j}`} style={cellStyles}>\n        {EU[EURatio * i + j]}\n      </TableCell>,\n    );\n  }\n  // form the row\n  const countryRow = (\n    <TableRow key={`tmr${i}`}>\n      {row}\n    </TableRow>\n  );\n  countries.push(countryRow);\n}\n\nconst TravelMap: React.FC = React.memo(() => (\n  <>\n    <Typography variant=\"h4\" style={marginStyles}>\n      {`I have been to ${NA.length + EU.length} countries:`}\n    </Typography>\n    <Table>\n      <TableHead>\n        <TableRow>\n          <DarkTableCell style={{ ...cellStyles, ...separatorStyles }}>\n            North America\n          </DarkTableCell>\n          <DarkTableCell colSpan={EURatio} style={cellStyles}>\n            Europe\n          </DarkTableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {countries}\n      </TableBody>\n    </Table>\n  </>\n));\n\nexport default TravelMap;\n","import React from 'react';\nimport grey from '@material-ui/core/colors/grey';\n\ninterface PopoverProps {\n  x: number;\n  y: number;\n  hide: boolean;\n  content: string;\n}\n\nconst Popover: React.FC<PopoverProps> = React.memo((props: PopoverProps) => {\n  const {\n    x, y, hide, content,\n  } = props;\n\n  const popoverStyle: React.CSSProperties = React.useMemo(() => ({\n    position: 'absolute',\n    left: x + 2,\n    top: y - 35,\n    display: hide ? 'none' : 'block',\n    backgroundColor: grey[800],\n    color: 'white',\n    padding: 5,\n    borderRadius: 2,\n  }), [hide, x, y]);\n\n  return (<div style={popoverStyle}>{content}</div>);\n});\n\nexport default Popover;\n","import React from 'react';\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n  Sphere,\n} from 'react-simple-maps';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport red from '@material-ui/core/colors/red';\nimport Popover from './Popover';\nimport countries from '../../../constants/countries';\n\ninterface GeographyType {\n  type: 'Feature';\n  rsmKey: string;\n  svgPath: string;\n  geometry: {\n    type: 'Polygon' | 'MultiPolygon';\n    coordinates: [number, number][];\n  };\n  properties: {\n    NAME: string;\n    NAME_LONG: string;\n    ABBREV: string;\n    FORMAL_EN: string;\n    POP_EST: number;\n    POP_RANK: number;\n    GDP_MD_EST: number;\n    POP_YEAR: number;\n    GDP_YEAR: number;\n    ISO_A2: string;\n    ISO_A3: string;\n    CONTINENT: string;\n    REGION_UN: string;\n    SUBREGION: string;\n  };\n}\n\ntype HandleEnter = (geography: GeographyType) => (evt: React.MouseEvent<SVGPathElement, MouseEvent>) => void;\n\ninterface WorldMapHook {\n  x: number;\n  y: number;\n  content: string;\n  hide: boolean;\n  handleEnter: HandleEnter;\n  handleLeave: () => void;\n}\n\nconst STROKE = blueGrey[900];\nconst HOVER = blueGrey[500];\nconst VISITED_HOVER = red[800];\nconst FILL = blueGrey[100];\nconst PRESSED = blueGrey[800];\nconst RATIO = 100 / 465.33;\n\nconst defaultStyle: React.CSSProperties = {\n  stroke: STROKE,\n  strokeWidth: 0.75,\n  outline: 'none',\n};\n\nfunction useWorldMap(): WorldMapHook {\n  const [x, setX] = React.useState(0);\n  const [y, setY] = React.useState(0);\n  const [content, setContent] = React.useState('');\n  const [hide, setHide] = React.useState(true);\n\n  const handleEnter: HandleEnter = (geography) => (evt): void => {\n    const name = geography.properties.NAME || '';\n    setX(evt.clientX);\n    setY(evt.clientY + window.pageYOffset);\n    setContent(`${name} ${countries[name] ? countries[name].flag : ''}`);\n    setHide(false);\n  };\n\n  const handleLeave = (): void => {\n    setHide(true);\n  };\n\n  return {\n    x,\n    y,\n    content,\n    hide,\n    handleEnter,\n    handleLeave,\n  };\n}\n\nconst WorldMap = React.memo(() => {\n  const {\n    x, y, content, hide,\n    handleEnter, handleLeave,\n  } = useWorldMap();\n\n  const screenWidth = document.body.clientWidth - 32;\n\n  return (\n    <>\n      <ComposableMap\n        width={screenWidth}\n        height={(screenWidth * 546) / 744}\n        projectionConfig={{ scale: screenWidth * RATIO }}\n      >\n        <ZoomableGroup>\n          <Sphere id=\"rsm-sphere\" stroke={FILL} strokeWidth={2} fill=\"transparent\" />\n          <Geographies geography=\"/world-110m.json\">\n            {({ geographies }): React.ReactNodeArray => geographies.map(\n              (geo: GeographyType) => (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  onMouseEnter={handleEnter(geo)}\n                  onMouseLeave={handleLeave}\n                  style={{\n                    default: {\n                      fill: countries[geo.properties.NAME] ? countries[geo.properties.NAME].color : FILL,\n                      ...defaultStyle,\n                    },\n                    hover: {\n                      fill: countries[geo.properties.NAME] ? VISITED_HOVER : HOVER,\n                      ...defaultStyle,\n                    },\n                    pressed: {\n                      fill: PRESSED,\n                      ...defaultStyle,\n                    },\n                  }}\n                />\n              ),\n            )}\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n      <Popover x={x} y={y} hide={hide} content={content} />\n    </>\n  );\n});\n\nexport default WorldMap;\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport TravelTable from './TravelTable';\nimport WorldMap from './WorldMap';\n\n/* TravelMap  ->  WorldMap  ->  Popover\n *           |->  TravelTable */\nconst TravelMap: React.FC = React.memo(() => (\n  <>\n    <Typography variant=\"h2\">My Travel Map</Typography>\n    <WorldMap />\n    <TravelTable />\n  </>\n));\n\nexport default TravelMap;\n"],"sourceRoot":""}