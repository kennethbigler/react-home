{"version":3,"sources":["hooks/useOpenState.ts","components/common/info-popover/InfoPopup.tsx","apis/Dice.ts","components/games/yahtzee/score-table/Header.tsx","components/games/yahtzee/score-table/TopScores.tsx","components/games/yahtzee/score-table/TopTable.tsx","components/games/yahtzee/types.ts","components/games/yahtzee/score-table/scoreTableHelper.ts","components/games/yahtzee/score-table/BottomScores.tsx","components/games/yahtzee/score-table/BottomTable.tsx","components/games/yahtzee/score-table/ScoreTable.tsx","components/games/yahtzee/ScoreGraph.tsx","components/games/yahtzee/Header.tsx","components/games/yahtzee/TableHeader.tsx","components/games/yahtzee/helpers.ts","components/games/yahtzee/Yahtzee.tsx"],"names":["useOpenState","defaultVal","React","useState","isOpen","setIsOpen","handleOpen","handleClose","InfoPopup","props","buttonText","title","children","color","onClick","variant","onClose","open","maxWidth","fullWidth","diceRoller","Math","floor","random","Header","memo","TableHead","TableRow","TableCell","style","TopScores","topSum","finalTopSum","colSpan","TopTable","values","showScoreButtons","getScoreButton","top","getButtonInfo","useCallback","d","reduce","count","val","getTopTableButtons","score","showButton","sum","i","generateTopTable","map","name","ADD_DICE","hasXDice","n","hist","hasDice","Object","forEach","value","isStraight","length","BottomScores","bottomSum","has3","has2","isFullHouse","console","error","BottomTable","getBottomTableButtons","points","hasYahtzee","entries","acc","key","Number","canYahtzeeBonus","bottom","generateBottomTable","gameScore","hint","parsedPoints","getDiceValue","centerStyle","textAlign","ScoreTable","onTopScore","onBottomScore","wasTop","Button","Table","size","TableBody","ScoreGraph","main","useTheme","palette","secondary","dBScores","scores","useMemo","generateScoreGraph","mostRecent","topScore","maxBy","ResponsiveContainer","width","height","AreaChart","data","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","XAxis","dataKey","interval","YAxis","orientation","tickLine","Tooltip","Area","type","stroke","fillOpacity","fill","Typography","className","wrapperStyles","display","margin","TableHeader","saved","roll","handleUnsave","handleSave","handleDiceRoll","getButtonText","getYahtzeeVars","topScores","bottomScores","finish","topConstants","bottomConstants","Yahtzee","useSelector","state","yahtzee","hasScored","dispatch","useDispatch","newYGame","addScore","newGame","nextRoll","DiceAPI","sort","updateRoll","push","splice","diceClick","rollNum","handleTopScore","updateTop","handleBottomScore","updateBottom"],"mappings":"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","file":"static/js/g_yahtzee.3de7e2c4.chunk.js","sourcesContent":["import React from 'react';\n\ntype OpenStateHook = [\n  boolean,\n  () => void,\n  () => void,\n]\n\nconst useOpenState = (defaultVal = false): OpenStateHook => {\n  const [isOpen, setIsOpen] = React.useState(defaultVal);\n\n  const handleOpen = (): void => { setIsOpen(true); };\n  const handleClose = (): void => { setIsOpen(false); };\n\n  return [isOpen, handleOpen, handleClose];\n};\n\nexport default useOpenState;\n","import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport useOpenState from '../../../hooks/useOpenState';\n\ninterface InfoPopupProps {\n  /** popup content */\n  children: React.ReactNode | React.ReactNodeArray;\n  /** title content */\n  title: string | React.ReactElement;\n  /** button content */\n  buttonText?: string | React.ReactElement;\n}\n\nconst InfoPopup = (props: InfoPopupProps): React.ReactElement => {\n  const [isOpen, handleOpen, handleClose] = useOpenState();\n  const { buttonText, title, children } = props;\n\n  return (\n    <>\n      <Button color=\"primary\" onClick={handleOpen as React.MouseEventHandler} variant=\"contained\">\n        {buttonText || title}\n      </Button>\n      <Dialog title=\"info-popup\" onClose={handleClose as React.MouseEventHandler} open={isOpen} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          {title}\n        </DialogTitle>\n        <DialogContent>\n          {children}\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={handleClose as React.MouseEventHandler}>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default InfoPopup;\n","import { Dice } from '../store/types';\n\nexport const diceRoller = (): Dice => Math.floor(Math.random() * 6) + 1 as Dice;\n\nexport default {\n  // randomize order of the cards\n  roll(): Dice {\n    return diceRoller();\n  },\n};\n\n// Dice as a react hook, seems kind of like an anti-pattern\nexport function useDice(): () => number {\n  function rollDice(): number {\n    return diceRoller();\n  }\n\n  return rollDice;\n}\n","import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\ninterface HeaderProps {\n  style: React.CSSProperties;\n}\n\nconst Header: React.FC<HeaderProps> = React.memo((props: HeaderProps) => (\n  <TableHead>\n    <TableRow>\n      <TableCell>Minimum Required for Bonus</TableCell>\n      <TableCell>How to Score</TableCell>\n      <TableCell style={props.style}>Game Score</TableCell>\n    </TableRow>\n  </TableHead>\n));\n\nexport default Header;\n","import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\ninterface TopScoresProps {\n  finalTopSum: number;\n  topSum: number;\n  style: React.CSSProperties;\n}\n\nconst TopScores: React.FC<TopScoresProps> = React.memo(({ topSum, finalTopSum, style }: TopScoresProps) => (\n  <>\n    <TableRow>\n      <TableCell colSpan={2}>Total == 63</TableCell>\n      <TableCell style={style}>{topSum}</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>Bonus if &gt;= 63</TableCell>\n      <TableCell>Score 35</TableCell>\n      <TableCell style={style}>{topSum >= 63 ? 35 : 0}</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell colSpan={2}>Upper Half Total</TableCell>\n      <TableCell style={style}>{finalTopSum}</TableCell>\n    </TableRow>\n    <TableRow />\n  </>\n));\n\nexport default TopScores;\n","import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { TopGameScore } from '../types';\nimport { Dice } from '../../../../store/types';\nimport TopScores from './TopScores';\n\ninterface TopTableProps {\n  finalTopSum: number;\n  getScoreButton: (showButton: boolean, points: number, wasTop: boolean, i: number) => React.ReactNode;\n  showScoreButtons: boolean;\n  style: React.CSSProperties;\n  top: TopGameScore[];\n  topSum: number;\n  values: Dice[];\n}\n\nconst TopTable: React.FC<TopTableProps> = (props: TopTableProps) => {\n  const {\n    values, showScoreButtons, getScoreButton, top, style,\n  } = props;\n\n  const getButtonInfo = React.useCallback(\n    (d: number): [number, number] => values.reduce(\n      (count, val) => {\n        if (val === d) {\n          count[0] += 1;\n          count[1] += d;\n        }\n        return count;\n      },\n      [0, 0],\n    ),\n    [values],\n  );\n\n  const getTopTableButtons = React.useCallback(\n    (score: number, showButton: boolean, sum: number, i: number): React.ReactNode | null => {\n      if (score >= 0) {\n        return score;\n      }\n      return showScoreButtons ? getScoreButton(showButton, sum, true, i) : null;\n    },\n    [getScoreButton, showScoreButtons],\n  );\n\n  const generateTopTable = React.useCallback(\n    (): React.ReactNode => top.map(({ name, score }, i) => {\n      const d = i + 1;\n      const [count, sum] = getButtonInfo(i + 1);\n      const showButton = count >= 1;\n\n      return (\n        <TableRow key={name}>\n          <TableCell>{`${name}: ${d},${d},${d} = ${d * 3}`}</TableCell>\n          <TableCell>{`Add Only ${name}`}</TableCell>\n          <TableCell style={style}>{getTopTableButtons(score, showButton, sum, i)}</TableCell>\n        </TableRow>\n      );\n    }),\n    [getButtonInfo, getTopTableButtons, style, top],\n  );\n\n  const { topSum, finalTopSum } = props;\n\n  return (\n    <>\n      {generateTopTable()}\n      <TopScores topSum={topSum} finalTopSum={finalTopSum} style={style} />\n    </>\n  );\n};\n\nexport default TopTable;\n","export const ADD_DICE = 'Sum of Dice';\ntype AddDice = 'Sum of Dice';\n\nexport interface TopGameScore {\n  name: string;\n  score: number;\n}\nexport interface BottomGameScore {\n  name: string;\n  score: number;\n  hint: string;\n  points: number | AddDice;\n}\n\nexport default ADD_DICE;\n","import { TopGameScore } from '../types';\nimport { Dice } from '../../../../store/types';\n\ninterface DiceHistogram {\n  0?: number;\n  1: number;\n  2: number;\n  3: number;\n  4: number;\n  5: number;\n  6: number;\n}\n\nexport const getHistogram = () => (hist: DiceHistogram, val: Dice): DiceHistogram => {\n  if (!hist[val]) {\n    hist[val] = 1;\n  } else {\n    hist[val] += 1;\n  }\n  return hist;\n};\n\nexport const hasXDice = (values: Dice[], n: number): boolean => {\n  const hist = values.reduce(getHistogram(), {} as DiceHistogram);\n  let hasDice = false;\n  Object.values(hist).forEach((value) => {\n    if (value >= n) {\n      hasDice = true;\n    }\n  });\n  return hasDice;\n};\n\nexport const isFullHouse = (values: Dice[]): boolean => {\n  const hist = values.reduce(getHistogram(), {} as DiceHistogram);\n\n  let has3 = false;\n  let has2 = false;\n\n  Object.values(hist).forEach((value) => {\n    if (value >= 3) {\n      has3 = true;\n    } else if (value >= 2) {\n      has2 = true;\n    }\n  });\n\n  return has3 && has2;\n};\n\nexport const isStraight = (values: Dice[], length: number): boolean => {\n  const hist = values.reduce(getHistogram(), {} as DiceHistogram);\n\n  let count = 0;\n  const dice: Dice[] = [1, 2, 3, 4, 5, 6];\n  dice.forEach((i: Dice) => {\n    if (count < length) {\n      const value = hist[i];\n      if (!value) {\n        count = 0;\n      } else {\n        count += 1;\n      }\n    }\n  });\n  return count >= length;\n};\n\nexport const canYahtzeeBonus = (values: Dice[], top: TopGameScore[]): boolean => Object.entries(\n  values.reduce(getHistogram(), {} as DiceHistogram),\n).reduce(\n  (acc: boolean, [key, value]) => {\n    if (value === 5 && top[Number(key) - 1].score >= 0) {\n      return true;\n    }\n    return acc;\n  },\n  false,\n);\n","import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\ninterface BottomScoresProps {\n  bottomSum: number;\n  finalTopSum: number;\n  style: React.CSSProperties;\n}\n\nconst BottomScores: React.FC<BottomScoresProps> = React.memo(({ finalTopSum, bottomSum, style }: BottomScoresProps) => (\n  <>\n    <TableRow>\n      <TableCell colSpan={2}>Lower Half Total</TableCell>\n      <TableCell style={style}>{bottomSum}</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell colSpan={2}>Upper Half Total</TableCell>\n      <TableCell style={style}>{finalTopSum}</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell colSpan={2}>Grand Total</TableCell>\n      <TableCell style={style}>{finalTopSum + bottomSum}</TableCell>\n    </TableRow>\n  </>\n));\n\nexport default BottomScores;\n","import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { TopGameScore, BottomGameScore, ADD_DICE } from '../types';\nimport { Dice } from '../../../../store/types';\nimport {\n  hasXDice, isFullHouse, isStraight, canYahtzeeBonus,\n} from './scoreTableHelper';\nimport BottomScores from './BottomScores';\n\ninterface BottomTableProps {\n  bottom: BottomGameScore[];\n  bottomSum: number;\n  finalTopSum: number;\n  getScoreButton: (showButton: boolean, points: number, wasTop: boolean, i: number) => React.ReactNode;\n  showScoreButtons: boolean;\n  style: React.CSSProperties;\n  top: TopGameScore[];\n  values: Dice[];\n}\n\nconst getDiceValue = (values: Dice[]): number => values.reduce((sum: number, d) => sum + d, 0);\n\nconst showButton = (i: number, values: Dice[]): boolean => {\n  switch (i) {\n    case 0: // 3 of a kind\n      return hasXDice(values, 3);\n    case 1: // 4 of a kind\n      return hasXDice(values, 4);\n    case 2: // Full House\n      return isFullHouse(values);\n    case 3: // Sm. Straight\n      return isStraight(values, 4);\n    case 4: // Lg. Straight\n      return isStraight(values, 5);\n    case 5: // Yahtzee\n      return hasXDice(values, 5);\n    case 6: // Chance\n      return true;\n    default:\n      // eslint-disable-next-line no-console\n      console.error('Unexpected Value');\n      return false;\n  }\n};\n\nconst BottomTable: React.FC<BottomTableProps> = (props: BottomTableProps) => {\n  const {\n    values, showScoreButtons, getScoreButton, top,\n  } = props;\n  const getBottomTableButtons = React.useCallback((score: number, points: number, hasYahtzee: boolean, i: number): React.ReactNode | null => {\n    if (score >= 0) {\n      return score;\n    }\n    if (showScoreButtons) {\n      // Yahtzee Bonus\n      if (hasYahtzee) {\n        if (canYahtzeeBonus(values, top)) {\n          return getScoreButton(true, points + 100, false, i);\n        }\n      }\n      return getScoreButton(showButton(i, values), points, false, i);\n    }\n    return null;\n  }, [getScoreButton, showScoreButtons, top, values]);\n\n  const { bottom, style } = props;\n  const generateBottomTable = React.useCallback((): React.ReactNode => {\n    const hasYahtzee = bottom[5].score > 0;\n    return bottom.map((gameScore, i) => {\n      const {\n        name, hint, points, score,\n      } = gameScore;\n\n      const parsedPoints = (points === ADD_DICE) ? getDiceValue(values) : points;\n\n      return (\n        <TableRow key={name}>\n          <TableCell>{name}</TableCell>\n          <TableCell>{hint}</TableCell>\n          <TableCell style={style}>{getBottomTableButtons(score, parsedPoints, hasYahtzee, i)}</TableCell>\n        </TableRow>\n      );\n    });\n  }, [bottom, getBottomTableButtons, style, values]);\n\n  const { finalTopSum, bottomSum } = props;\n\n  return (\n    <>\n      {generateBottomTable()}\n      <BottomScores bottomSum={bottomSum} finalTopSum={finalTopSum} style={style} />\n    </>\n  );\n};\n\nexport default BottomTable;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport { TopGameScore, BottomGameScore } from '../types';\nimport { Dice } from '../../../../store/types';\nimport Header from './Header';\nimport TopTable from './TopTable';\nimport BottomTable from './BottomTable';\n\ninterface ScoreTableProps {\n  bottom: BottomGameScore[];\n  bottomSum: number;\n  finalTopSum: number;\n  onTopScore: (points: number, i: number) => void;\n  onBottomScore: (points: number, i: number) => void;\n  showScoreButtons: boolean;\n  top: TopGameScore[];\n  topSum: number;\n  values: Dice[];\n}\n\nconst centerStyle: React.CSSProperties = { textAlign: 'center' };\n\nconst ScoreTable: React.FC<ScoreTableProps> = (props: ScoreTableProps) => {\n  const {\n    bottom, bottomSum, finalTopSum, showScoreButtons,\n    top, topSum, values, onTopScore, onBottomScore,\n  } = props;\n\n  const getScoreButton = React.useCallback(\n    (showButton: boolean, points: number, wasTop: boolean, i: number): React.ReactNode => (\n      showButton ? (\n        <Button\n          color=\"primary\"\n          variant=\"outlined\"\n          onClick={wasTop\n            ? (): void => onTopScore(points, i)\n            : (): void => onBottomScore(points, i)}\n        >\n          {`Add ${points} Points`}\n        </Button>\n      ) : (\n        <Button\n          color=\"primary\"\n          variant=\"outlined\"\n          onClick={wasTop\n            ? (): void => onTopScore(0, i)\n            : (): void => onBottomScore(0, i)}\n        >\n          0\n        </Button>\n      )\n    ),\n    [onBottomScore, onTopScore],\n  );\n\n  return (\n    <Table size=\"small\">\n      <Header style={centerStyle} />\n      <TableBody>\n        <TopTable\n          finalTopSum={finalTopSum}\n          getScoreButton={getScoreButton}\n          showScoreButtons={showScoreButtons}\n          style={centerStyle}\n          top={top}\n          values={values}\n          topSum={topSum}\n        />\n        <BottomTable\n          finalTopSum={finalTopSum}\n          getScoreButton={getScoreButton}\n          showScoreButtons={showScoreButtons}\n          style={centerStyle}\n          top={top}\n          values={values}\n          bottom={bottom}\n          bottomSum={bottomSum}\n        />\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default ScoreTable;\n","import React from 'react';\nimport maxBy from 'lodash/maxBy';\nimport {\n  ResponsiveContainer, XAxis, YAxis, Tooltip, AreaChart, Area,\n} from 'recharts';\nimport { useTheme } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport InfoPopup from '../../common/info-popover/InfoPopup';\n\ninterface ScoreGraphProps {\n  scores: number[];\n}\ninterface ScoreGraphEntry {\n  value: number;\n}\n\nconst generateScoreGraph = (scores: number[]): ScoreGraphEntry[] => (\n  scores.map((value) => ({ value }))\n);\n\nconst ScoreGraph: React.FC<ScoreGraphProps> = (props: ScoreGraphProps) => {\n  const { palette: { secondary: { main }}} = useTheme();\n  const { scores: dBScores } = props;\n\n  const scores = React.useMemo(() => generateScoreGraph(dBScores), [dBScores]);\n  const recent = scores[scores.length - 1] || { value: 0 };\n  const mostRecent = recent.value;\n  const top = maxBy(scores, 'value') || { value: 0 };\n  const topScore = top.value;\n\n  return (\n    <InfoPopup title=\"Yahtzee Score History\" buttonText=\"Score History\">\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <AreaChart data={scores}>\n          <defs>\n            <linearGradient id=\"mainColor\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"20%\" stopColor={main} stopOpacity={0.8} />\n              <stop offset=\"100%\" stopColor={main} stopOpacity={0} />\n            </linearGradient>\n          </defs>\n          <XAxis dataKey=\"name\" interval=\"preserveStartEnd\" />\n          <YAxis width={40} orientation=\"right\" tickLine={false} />\n          <Tooltip />\n          <Area type=\"monotone\" dataKey=\"value\" stroke={main} fillOpacity={1} fill=\"url(#mainColor)\" />\n        </AreaChart>\n      </ResponsiveContainer>\n      <Typography variant=\"h4\">{`Most Recent: ${mostRecent}`}</Typography>\n      <Typography variant=\"h4\">{`Top Score: ${topScore}`}</Typography>\n    </InfoPopup>\n  );\n};\n\nexport default ScoreGraph;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport ScoreGraph from './ScoreGraph';\n\ninterface HeaderProps {\n  scores: number[];\n}\n\nconst Header: React.FC<HeaderProps> = ({ scores }: HeaderProps) => (\n  <div className=\"flex-container\">\n    <Typography variant=\"h2\">Yahtzee</Typography>\n    <ScoreGraph scores={scores} />\n  </div>\n);\n\nexport default Header;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { Dice } from '../../../store/types';\n\ninterface TableHeaderProps {\n  roll: Dice;\n  values: Dice[];\n  saved: Dice[];\n  handleUnsave: (i: number) => void;\n  handleSave: (i: number) => void;\n  handleDiceRoll: React.MouseEventHandler;\n  getButtonText: (roll: Dice) => string;\n}\n\nconst wrapperStyles: React.CSSProperties = { display: 'block', margin: 'auto', width: 320 };\n\nconst TableHeader: React.FC<TableHeaderProps> = (props: TableHeaderProps) => {\n  const {\n    values, saved, roll, handleUnsave,\n    handleSave, handleDiceRoll, getButtonText,\n  } = props;\n\n  return (\n    <div className=\"flex-container\">\n      <Typography variant=\"h4\">{`Roll #${roll}/3`}</Typography>\n      <div style={wrapperStyles}>\n        {saved.map((val, i) => (\n          <Button color=\"secondary\" onClick={(): void => handleUnsave(i)} variant=\"outlined\" key={i}>\n            {val}\n          </Button>\n        ))}\n        {values.map((val, i) => (\n          <Button color=\"primary\" onClick={(): void => handleSave(i)} variant=\"outlined\" key={i}>\n            {val}\n          </Button>\n        ))}\n      </div>\n      <Button color=\"primary\" onClick={handleDiceRoll} variant=\"contained\">\n        {getButtonText(roll)}\n      </Button>\n    </div>\n  );\n};\n\nexport default TableHeader;\n","interface YahtzeeVars {\n  topSum: number;\n  bottomSum: number;\n  finalTopSum: number;\n  finish: boolean;\n}\n\nconst getYahtzeeVars = (topScores: number[], bottomScores: number[]): YahtzeeVars => {\n  let count = 0;\n\n  const topSum = topScores.reduce((sum, score) => {\n    if (score >= 0) {\n      count += 1;\n      sum += score;\n    }\n    return sum;\n  }, 0);\n\n  const bottomSum = bottomScores.reduce((sum, score) => {\n    if (score >= 0) {\n      count += 1;\n      sum += score;\n    }\n    return sum;\n  }, 0);\n\n  let finalTopSum = topSum;\n  if (topSum >= 63) {\n    finalTopSum += 35;\n  }\n\n  const finish = count >= 13;\n\n  return {\n    topSum,\n    bottomSum,\n    finalTopSum,\n    finish,\n  };\n};\n\nexport default getYahtzeeVars;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Typography from '@material-ui/core/Typography';\nimport DiceAPI from '../../../apis/Dice';\nimport ScoreTable from './score-table/ScoreTable';\nimport { ADD_DICE, BottomGameScore } from './types';\nimport Header from './Header';\nimport TableHeader from './TableHeader';\nimport { DBRootState, Dice } from '../../../store/types';\nimport {\n  addScore, diceClick, newGame, nextRoll,\n  updateTop, updateBottom, updateRoll,\n} from '../../../store/modules/yahtzee';\nimport getYahtzeeVars from './helpers';\n\nconst topConstants = [\n  { name: 'Aces' },\n  { name: 'Twos' },\n  { name: 'Threes' },\n  { name: 'Fours' },\n  { name: 'Fives' },\n  { name: 'Sixes' },\n];\nconst bottomConstants = [\n  { name: '3 of a kind', hint: ADD_DICE, points: ADD_DICE },\n  { name: '4 of a kind', hint: ADD_DICE, points: ADD_DICE },\n  { name: 'Full House', hint: 'Score 25', points: 25 },\n  { name: 'Sm. Straight (4)', hint: 'Score 30', points: 30 },\n  { name: 'Lg. Straight (5)', hint: 'Score 40', points: 40 },\n  { name: 'Yahtzee', hint: 'Score 50', points: 50 },\n  { name: 'Chance', hint: ADD_DICE, points: ADD_DICE },\n];\n\nconst Yahtzee: React.FC = () => {\n  const {\n    topScores, bottomScores, values, saved,\n    roll, showScoreButtons, scores, hasScored,\n  } = useSelector((state: DBRootState) => ({ ...state.yahtzee }));\n  const dispatch = useDispatch();\n\n  const {\n    topSum, bottomSum, finalTopSum, finish,\n  } = React.useMemo(() => getYahtzeeVars(topScores, bottomScores), [topScores, bottomScores]);\n\n  const newYGame = React.useCallback((): void => {\n    dispatch(addScore(finalTopSum + bottomSum));\n    dispatch(newGame());\n  }, [bottomSum, dispatch, finalTopSum]);\n\n  const handleDiceRoll = React.useCallback((): void => {\n    if (finish) {\n      newYGame();\n    }\n    if (roll >= 3) {\n      if (hasScored === true) {\n        dispatch(nextRoll());\n      }\n      return;\n    }\n\n    for (let i = 0; i < values.length; i += 1) {\n      values[i] = DiceAPI.roll() as Dice;\n    }\n    values.sort();\n    saved.sort();\n\n    if (roll === 2) {\n      dispatch(updateRoll(values, saved, roll + 1 as Dice, true));\n    } else {\n      dispatch(updateRoll(values, saved, roll + 1 as Dice));\n    }\n  }, [dispatch, finish, hasScored, newYGame, roll, saved, values]);\n\n  const handleSave = React.useCallback((i: number): void => {\n    if (values[i] === 0) {\n      return;\n    }\n    saved.push(values.splice(i, 1)[0]);\n    saved.sort();\n    dispatch(diceClick(values, saved));\n  }, [dispatch, saved, values]);\n\n  const handleUnsave = React.useCallback((i: number): void => {\n    values.push(saved.splice(i, 1)[0]);\n    values.sort();\n    dispatch(diceClick(values, saved));\n  }, [dispatch, saved, values]);\n\n  const getButtonText = React.useCallback((rollNum: Dice): string => {\n    if (finish) {\n      return 'New Game';\n    }\n\n    switch (rollNum) {\n      case 0:\n        return 'First Roll';\n      case 1:\n        return 'Second Roll';\n      case 2:\n        return 'Last Roll';\n      case 3:\n        return 'Next Turn';\n      default:\n        return 'Error';\n    }\n  }, [finish]);\n\n  const handleTopScore = React.useCallback((points: number, i: number): void => {\n    topScores[i] = points;\n    dispatch(updateTop(topScores));\n  }, [dispatch, topScores]);\n\n  const handleBottomScore = React.useCallback((points: number, i: number): void => {\n    bottomScores[i] = points;\n    dispatch(updateBottom(bottomScores));\n  }, [bottomScores, dispatch]);\n\n  const top = topScores.map((score, i) => ({ ...topConstants[i], score }));\n  const bottom = bottomScores.map((score, i) => ({ ...bottomConstants[i], score })) as BottomGameScore[];\n\n  return (\n    <>\n      <Header scores={scores} />\n      <hr />\n      <TableHeader\n        values={values}\n        saved={saved}\n        roll={roll}\n        handleUnsave={handleUnsave}\n        handleSave={handleSave}\n        handleDiceRoll={handleDiceRoll}\n        getButtonText={getButtonText}\n      />\n      <hr />\n      <Typography variant=\"h4\">{`Total: ${finalTopSum + bottomSum}`}</Typography>\n      <ScoreTable\n        values={[...saved, ...values]}\n        bottom={bottom}\n        top={top}\n        onTopScore={handleTopScore}\n        onBottomScore={handleBottomScore}\n        showScoreButtons={showScoreButtons}\n        topSum={topSum}\n        finalTopSum={finalTopSum}\n        bottomSum={bottomSum}\n      />\n    </>\n  );\n};\n\nexport default Yahtzee;\n"],"sourceRoot":""}