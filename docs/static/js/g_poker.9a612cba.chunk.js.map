{"version":3,"sources":["components/games/game-table/board/card/Card.styles.ts","components/games/game-table/board/card/Card.tsx","components/games/game-table/board/Hand.tsx","components/games/game-table/board/player/Player.styles.ts","components/games/game-table/board/player/Player.tsx","components/games/game-table/board/Board.tsx","components/games/game-table/button-group/Button.tsx","components/games/game-table/button-group/ButtonGroup.tsx","components/games/game-table/GameTable.tsx","components/games/poker/helpers.ts","components/games/poker/hooks.ts","components/games/poker/Poker.tsx"],"names":["cardFace","backgroundColor","borderRadius","cursor","display","fontWeight","height","margin","padding","width","cardTitle","textAlign","suit","marginTop","Card","React","memo","props","dropped","name","cardHandler","playerNo","handNo","cardNo","handleClick","useCallback","cardColor","color","red","style","styles","onClick","role","Typography","variant","boldStyle","normalStyle","Hand","cardsToDiscard","hand","isBlackJack","isHandTurn","isMultiHand","isPlayerTurn","useMemo","purple","handWeight","weight","cards","map","card","i","includes","key","player","minWidth","Player","betHandler","hideHands","turn","hands","length","showSlider","id","isBot","minBet","Math","max","min","money","maxBet","onSliderChange","event","value","background","cyan","status","green","blueGrey","Slider","onChange","step","bet","Board","players","buttonStyle","Button","ButtonGroup","gameFunctions","GameTable","cardClickHandler","gameOver","played","slice","future","playersToDisplay","defaultProps","rankHand","hist","has3","indexOf","has2","isStraight","lastIndexOf","isFlush","j","getHistogram","forEach","evaluate","rank","total","numCards","last","num","toString","reduce","a","c","getCardsToDiscard","n","nextCardsToDiscard","cardValues","push","usePokerFunctions","dispatch","endTurn","endPokerTurn","discard","cardsToDiscardInDB","swapCards","computer","endGame","endPokerGame","asyncForEach","winner","val","playerScore","parseInt","payout","checkUpdate","newGame","newPokerGame","startGame","startPokerGame","Deck","shuffle","then","newHand","handleDiscard","discardCards","handleGameFunctionClick","type","PGF","DISCARD_CARDS","END_TURN","NEW_GAME","START_GAME","console","error","Poker","useSelector","state","poker","useDispatch","newCardsToDiscard","splice","updateCardsToDiscard","gutterBottom"],"mappings":"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","file":"static/js/g_poker.9a612cba.chunk.js","sourcesContent":["const cardFace: React.CSSProperties = {\n  backgroundColor: 'white',\n  borderRadius: 5,\n  cursor: 'pointer',\n  display: 'inline-block',\n  fontWeight: 'bold',\n  height: 78,\n  margin: 5,\n  padding: 3,\n  width: 50,\n};\n\nconst cardTitle: React.CSSProperties = {\n  textAlign: 'left',\n};\n\nconst suit: React.CSSProperties = {\n  margin: 'auto',\n  marginTop: 5,\n  textAlign: 'center',\n  width: '100%',\n};\n\nexport default {\n  cardFace,\n  cardTitle,\n  suit,\n};\n","import React from 'react';\nimport red from '@material-ui/core/colors/red';\nimport { Typography } from '@material-ui/core';\nimport styles from './Card.styles';\n\ninterface CardProps {\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardNo: number;\n  dropped: boolean;\n  handNo: number;\n  name: string;\n  playerNo: number;\n  suit: string;\n}\n\nconst Card = React.memo((props: CardProps) => {\n  const {\n    dropped, suit, name, cardHandler,\n    playerNo, handNo, cardNo,\n  } = props;\n  // handle click to for card\n  const handleClick = React.useCallback((): void => {\n    cardHandler && cardHandler(playerNo, handNo, cardNo);\n  }, [cardHandler, cardNo, handNo, playerNo]);\n  // checking color based off suits: ♣♦♥♠\n  const cardColor: React.CSSProperties = {\n    color: suit === '♣' || suit === '♠' ? 'black' : red[500],\n    backgroundColor: dropped ? red[100] : 'white',\n  };\n\n  return (\n    <div style={{ ...styles.cardFace, ...cardColor }} onClick={handleClick} role=\"main\">\n      <div style={styles.cardTitle}>\n        {name + suit}\n      </div>\n      <Typography variant=\"h4\" style={{ ...styles.suit, ...cardColor }}>\n        {suit}\n      </Typography>\n    </div>\n  );\n});\n\nexport default Card;\n","import React from 'react';\nimport purple from '@material-ui/core/colors/purple';\nimport { Typography } from '@material-ui/core';\nimport Card from './card/Card';\nimport { DBHand } from '../../../../store/types';\n\nconst boldStyle: React.CSSProperties = { fontWeight: 'bold', marginTop: '0.5em' };\nconst normalStyle: React.CSSProperties = { fontWeight: 'normal', marginTop: '0.5em' };\n\ninterface HandProps {\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hand: DBHand;\n  handNo: number;\n  isBlackJack: boolean;\n  isHandTurn: boolean;\n  isMultiHand: boolean;\n  isPlayerTurn: boolean;\n  playerNo: number;\n}\n\nconst Hand: React.FC<HandProps> = (props: HandProps) => {\n  const {\n    cardHandler, cardsToDiscard, hand, handNo,\n    isBlackJack, isHandTurn, isMultiHand, isPlayerTurn,\n    playerNo,\n  } = props;\n\n  const styles = React.useMemo(() => (\n    isPlayerTurn && (!isMultiHand || (isMultiHand && isHandTurn))\n      ? { ...boldStyle, color: purple[700] } : normalStyle\n  ),\n  [isPlayerTurn, isMultiHand, isHandTurn]);\n  const handWeight = hand.weight || 0;\n\n  return (\n    <>\n      <Typography variant=\"h4\" style={styles}>\n        {isBlackJack && `${handWeight > 21 ? 'Bust' : 'Hand'}: ${handWeight}`}\n      </Typography>\n      {hand.cards.map((card, i) => {\n        const dropped: boolean = cardsToDiscard.includes(i);\n        return (\n          <Card\n            key={card.name + card.suit}\n            cardHandler={cardHandler}\n            cardNo={i}\n            dropped={dropped}\n            handNo={handNo}\n            name={card.name}\n            playerNo={playerNo}\n            suit={card.suit}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nexport default Hand;\n","const player: React.CSSProperties = {\n  borderRadius: 5,\n  display: 'inline-block',\n  margin: 10,\n  padding: 20,\n};\n\nconst width: React.CSSProperties = { minWidth: '100px' };\n\nexport default {\n  player,\n  width,\n};\n","import React from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport cyan from '@material-ui/core/colors/cyan';\nimport green from '@material-ui/core/colors/green';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport red from '@material-ui/core/colors/red';\nimport { Typography } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport Hand from '../Hand';\nimport { DBTurn, DBPlayer } from '../../../../../store/types';\nimport styles from './Player.styles';\n\ninterface PlayerProps {\n  betHandler?: (id: number, event: React.ChangeEvent<{}>, value: number) => void;\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  player: DBPlayer;\n  playerNo: number;\n  turn: DBTurn;\n}\n\nconst Player: React.FC<PlayerProps> = (props: PlayerProps) => {\n  // get vars from props\n  const {\n    betHandler, cardHandler, cardsToDiscard, hideHands,\n    isBlackJack, player, playerNo, turn,\n  } = props;\n  // set booleans\n  const isPlayerTurn: boolean = !!turn && playerNo === turn.player;\n  const isMultiHand: boolean = player.hands.length > 1;\n  const showSlider: boolean = !!hideHands && isBlackJack && player.id !== 0 && !player.isBot;\n  // set slider variables\n  const minBet: number = Math.max(Math.min(player.money, 5), 0);\n  const maxBet: number = Math.max(Math.min(player.money, 100), 10);\n  const step = 5;\n  const onSliderChange = React.useCallback(\n    (event: React.ChangeEvent<{}>, value: number | number[]): void => {\n      betHandler && betHandler(player.id, event, value as number);\n    },\n    [betHandler, player.id],\n  );\n  // set colors\n  let color: React.CSSProperties = isPlayerTurn ? { background: cyan[200] } : {};\n  const weight: React.CSSProperties = isPlayerTurn ? { fontWeight: 'bold' } : { fontWeight: 'normal' };\n  if (player.status === 'win') {\n    color = { background: green[300] };\n  }\n  if (player.status === 'draw') {\n    color = { background: blueGrey[300] };\n  }\n  if (player.status === 'lose') {\n    color = { background: red[300] };\n  }\n\n  return (\n    <Card style={{ ...styles.player, ...color }}>\n      <Typography variant=\"h4\" style={{ ...weight }}>\n        {`${player.name}: $${player.money}`}\n      </Typography>\n      {showSlider && (\n        <Slider\n          max={maxBet}\n          min={minBet}\n          onChange={onSliderChange}\n          step={step}\n          style={styles.width}\n          value={player.bet}\n        />\n      )}\n      {isBlackJack && player.id !== 0 && (\n        <Typography variant=\"h5\">\n          {`Bet: $${player.bet}`}\n        </Typography>\n      )}\n      {player.hands.map((hand, i) => {\n        const isHandTurn: boolean = !!turn && turn.hand === i;\n        return (\n          <div key={`hand${i}`}>\n            {!hideHands && (\n              <Hand\n                cardHandler={cardHandler}\n                cardsToDiscard={cardsToDiscard}\n                hand={hand}\n                handNo={i}\n                isBlackJack={isBlackJack}\n                isHandTurn={isHandTurn}\n                isMultiHand={isMultiHand}\n                isPlayerTurn={isPlayerTurn}\n                playerNo={playerNo}\n              />\n            )}\n          </div>\n        );\n      })}\n    </Card>\n  );\n};\n\nexport default Player;\n","import React from 'react';\nimport Player from './player/Player';\nimport { DBPlayer, DBTurn } from '../../../../store/types';\n// Parents: GameTable\n\ninterface BoardProps {\n  betHandler?: (id: number, event: React.ChangeEvent<{}>, value: number) => void;\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  players: DBPlayer[];\n  turn: DBTurn;\n}\n\nconst Board: React.FC<BoardProps> = (props: BoardProps) => {\n  const {\n    betHandler, cardHandler, cardsToDiscard, hideHands,\n    isBlackJack, players, turn,\n  } = props;\n\n  return (\n    <>\n      {players.map((player, i) => (\n        <Player\n          key={`player${i}`}\n          betHandler={betHandler}\n          cardHandler={cardHandler}\n          cardsToDiscard={cardsToDiscard}\n          hideHands={hideHands}\n          isBlackJack={isBlackJack}\n          player={player}\n          playerNo={i}\n          turn={turn}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport MuiButton from '@material-ui/core/Button';\nimport { PropTypes } from '@material-ui/core/';\n\nconst buttonStyle: React.CSSProperties = { margin: 12 };\nconst color: PropTypes.Color = 'primary';\n\nexport interface ButtonProps {\n  onClick: (name: string) => void;\n  name: string;\n}\n\nconst Button: React.FC<ButtonProps> = React.memo(({ onClick, name }: ButtonProps) => (\n  <MuiButton\n    color={color}\n    onClick={(): void => onClick(name)}\n    style={buttonStyle}\n    variant=\"contained\"\n  >\n    {name}\n  </MuiButton>\n));\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nexport interface ButtonGroupProps {\n  gameFunctions: string[];\n  onClick: (name: string) => void;\n}\n\nconst ButtonGroup: React.FC<ButtonGroupProps> = ({ gameFunctions, onClick }: ButtonGroupProps) => (\n  <div>\n    {gameFunctions.map((key) => (\n      <Button key={key} onClick={onClick} name={key} />\n    ))}\n  </div>\n);\n\nexport default ButtonGroup;\n","import React from 'react';\nimport Board from './board/Board';\nimport ButtonGroup from './button-group/ButtonGroup';\nimport { DBPlayer, DBTurn } from '../../../store/types';\n\ninterface GameTableProps {\n  betHandler?: (id: number, event: React.ChangeEvent<{}>, value: number) => void;\n  cardClickHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  gameFunctions: string[];\n  gameOver: boolean;\n  hideHands: boolean;\n  isBlackJack: boolean;\n  onClick: (name: string) => void;\n  players: DBPlayer[];\n  turn: DBTurn;\n}\n\n/* GameTable ->  Board -> Player -> Hand -> Card\n *          |->  Button Group  ->  Button        */\nconst GameTable = (props: GameTableProps): React.ReactElement => {\n  const {\n    betHandler, cardClickHandler, cardsToDiscard, gameFunctions,\n    gameOver, hideHands, isBlackJack, players, turn, onClick,\n  } = props;\n\n  // move game buttons to make turn more obvious and support mobile\n  const played: DBPlayer[] = React.useMemo(() => players.slice(0, turn.player + 1), [players, turn.player]);\n  const future: DBPlayer[] = React.useMemo(() => players.slice(turn.player + 1), [players, turn.player]);\n  const playersToDisplay: DBPlayer[] = React.useMemo(() => (\n    (!hideHands && gameOver === false)\n      ? players.slice(turn.player, turn.player + 1)\n      : players\n  ), [hideHands, gameOver, players, turn.player]);\n\n  return (\n    <>\n      {isBlackJack && !hideHands\n        ? (\n          <>\n            <Board\n              players={played}\n              betHandler={betHandler}\n              cardHandler={cardClickHandler}\n              cardsToDiscard={cardsToDiscard}\n              hideHands={hideHands}\n              isBlackJack={isBlackJack}\n              turn={turn}\n            />\n            <ButtonGroup gameFunctions={gameFunctions} onClick={onClick} />\n            <Board\n              players={future}\n              betHandler={betHandler}\n              cardHandler={cardClickHandler}\n              cardsToDiscard={cardsToDiscard}\n              hideHands={hideHands}\n              isBlackJack={isBlackJack}\n              turn={{ player: -1, hand: -1 }}\n            />\n          </>\n        ) : (\n          <>\n            <Board\n              players={playersToDisplay}\n              betHandler={betHandler}\n              cardHandler={cardClickHandler}\n              cardsToDiscard={cardsToDiscard}\n              hideHands={hideHands}\n              isBlackJack={isBlackJack}\n              turn={turn}\n            />\n            <ButtonGroup gameFunctions={gameFunctions} onClick={onClick} />\n          </>\n        )}\n    </>\n  );\n};\n\nGameTable.defaultProps = {\n  cardsToDiscard: [],\n  gameFunctions: [],\n  gameOver: false,\n  hideHands: false,\n  isBlackJack: true,\n};\n\nexport default GameTable;\n","import { DBCard } from '../../../store/types';\n\n/** Rankings:\n *   Straight Flush  8\n *   4 of a Kind     7\n *   Full House      6\n *   Flush           5\n *   Straight        4\n *   3 of a Kind     3\n *   2 Pair          2\n *   1 Pair          1\n *   High Card       0\n * @return {number} value is a base 14 string, to be converted into base 10 for comparison */\nexport const rankHand = (hand: DBCard[], hist: number[]): number => {\n  // iterate through and look for hands with multiple cards\n  if (hist.includes(4)) {\n    return 7; // 4 of a kind\n  }\n  // Check for hands with sets of 3 or 2 cards\n  const has3 = hist.includes(3);\n  const i = hist.indexOf(2);\n  const has2 = i !== -1;\n  if (has3 && has2) {\n    return 6; // full house\n  }\n  if (has3) {\n    return 3; // 3 of a kind\n  }\n  if (has2 && hist.includes(2, i + 1)) {\n    return 2; // 2 pair\n  }\n  if (has2) {\n    return 1; // 1 pair\n  }\n  // all single cards\n  // check for straight\n  const isStraight = hist.lastIndexOf(1) - hist.indexOf(1) === 4 // (end - start = 4)\n    || (hist[12] && hist[0] && hist[1] && hist[2] && hist[3]); // (A,2,3,4,5)\n  // check for flush\n  let isFlush = true;\n  for (let j = 0; j < hand.length; j += 1) {\n    if (hand[j].suit !== hand[0].suit) {\n      isFlush = false;\n      break;\n    }\n  }\n  if (isStraight && isFlush) {\n    return 8; // straight flush\n  }\n  if (isFlush) {\n    return 5; // flush\n  }\n  if (isStraight) {\n    return 4; // straight\n  }\n  return 0; // high card\n};\n\n\nexport const getHistogram = (hand: DBCard[]): number[] => {\n  // Histogram for the cards\n  const hist = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  // put hand into the histogram\n  hand.forEach((card) => {\n    hist[(card.weight || 2) - 2] += 1; // 2-14 - 2 = 0-12\n  });\n  return hist;\n};\n\n/**\n * Compare hands to see who wins\n * @param {array} hand - array of card objects\n * Hands is assigned a weight based on hand, then card values\n * Compare values to see who wins\n * @return {number} value is a base 14 string, to be converted into base 10 for comparison\n */\nexport const evaluate = (hand: DBCard[]): string => {\n  const hist = getHistogram(hand);\n  const rank = rankHand(hand, hist);\n\n  const cards = ['0', '0', '0', '0', '0'];\n  let total = 0; // track number of cards counted\n  let numCards = 4; // number of same cards in a set\n  let i = 0; // iterator\n  let last = -1; // track location of last in numCards set\n\n  // get card values and display them in order of importance\n  while (total < 5) {\n    const num = hist.indexOf(numCards, last + 1);\n    if (num === -1) {\n      numCards -= 1;\n      last = -1;\n    } else {\n      cards[i] = num.toString(14);\n      i += 1;\n      total += numCards;\n      last = num;\n    }\n  }\n  return `${rank}${cards.reduce((a, c) => `${a}${c}`)}`;\n};\n\n/** function to remove n number of cards */\nexport const getCardsToDiscard = (n: number, hist: number[], hand: DBCard[]): number[] => {\n  const nextCardsToDiscard = [];\n  const cardValues = [hist.indexOf(1)];\n  // find cards without pairs, starting with the smallest\n  for (let i = 1; i < n; i += 1) {\n    cardValues[i] = hist.indexOf(1, cardValues[i - 1] + 1);\n  }\n  // find hand index of individual cards\n  for (let i = 0; i < hand.length; i += 1) {\n    for (let j = 0; j < cardValues.length; j += 1) {\n      if (hand[i].weight - 2 === cardValues[j]) {\n        nextCardsToDiscard.push(i);\n        break;\n      }\n    }\n  }\n  return nextCardsToDiscard;\n};\n","import React from 'react';\nimport asyncForEach from '../../../helpers/asyncForEach';\nimport { swapCards, newHand, payout } from '../../../store/modules/players';\nimport Deck from '../../../apis/Deck';\nimport {\n  rankHand, getHistogram, evaluate, getCardsToDiscard,\n} from './helpers';\nimport {\n  newPokerGame, startPokerGame, endPokerTurn, endPokerGame,\n  discardCards,\n} from '../../../store/modules/poker';\nimport {\n  DBPlayer, PokerGameFunctions as PGF,\n} from '../../../store/types';\n\nconst DEALER = 0;\nconst LAST_PLAYER = 5;\n\ninterface UsePokerFunctions {\n  checkUpdate: () => Promise<void>;\n  handleGameFunctionClick: (type: string) => void;\n}\n\nconst usePokerFunctions = (\n  dispatch: Function,\n  cardsToDiscard: number[],\n  players: DBPlayer[],\n  turn: number,\n  hideHands: boolean,\n  gameOver: boolean,\n): UsePokerFunctions => {\n  // ----------     bot automation handlers     ---------- //\n  /** increment player turn and reset state */\n  const endTurn = React.useCallback(async (): Promise<void> => {\n    await dispatch(endPokerTurn());\n  }, [dispatch]);\n\n  /** iterate through array, removing each index number from hand\n   * then add new cards to the hand */\n  const discard = React.useCallback(async (cardsToDiscardInDB: number[], player: DBPlayer): Promise<void> => {\n    const { id, hands } = player;\n    await dispatch(swapCards(hands, id, cardsToDiscardInDB));\n  }, [dispatch]);\n\n  /** computer play algorithm:\n   * PAIRS\n   * draw 0 on 4 of a kind\n   * draw 0 on full house\n   * draw 1 on 3 of a kind, keep higher of 2\n   * draw 1 on 2 pair\n   * draw 3 on 2 of a kind\n   *\n   * This is a nice to have, for now we only follow the first half\n   * STRAIGHT/FLUSH\n   * draw 0 on straight\n   * draw 0 on flush\n   * draw 0 on straight flush\n   * if 1 away from sf -> draw 1\n   * if 1 away from S -> draw 1 if 5+ players, else regular hand\n   * if 1 away from F -> draw 1 if 5+ players, else regular hand\n   *\n   * REGULAR HAND\n   * if K / A -> draw 4\n   * else draw 5\n   */\n  const computer = React.useCallback(async (player: DBPlayer): Promise<void> => {\n    const hand = player.hands[0].cards;\n    const hist = getHistogram(hand);\n    const rank = rankHand(hand, hist);\n\n    switch (rank) {\n      case 0: /* draw 4-5 on high card */ {\n        const nextCardsToDiscard = hist.lastIndexOf(1) >= 11\n          ? getCardsToDiscard(4, hist, hand) // if ace || king draw 4\n          : [0, 1, 2, 3, 4]; // otherwise, draw all 5\n        await discard(nextCardsToDiscard, player);\n        break;\n      }\n      case 1: /* draw 3 on 2 of a kind */ {\n        const nextCardsToDiscard = getCardsToDiscard(3, hist, hand);\n        await discard(nextCardsToDiscard, player);\n        break;\n      }\n      case 2: /* draw 1 on 3 of a kind */\n      case 3: /* draw 1 on 2 Pair */ {\n        const nextCardsToDiscard = getCardsToDiscard(1, hist, hand);\n        await discard(nextCardsToDiscard, player);\n        break;\n      }\n      case 4: // draw 0 on straight\n      case 5: // draw 0 on flush\n      case 6: // draw 0 on full house\n      case 7: // draw 0 on 4 of a kind\n      case 8: // draw 0 on straight flush\n      default:\n        break;\n    }\n  }, [discard]);\n\n  const endGame = React.useCallback(async (): Promise<void> => {\n    await dispatch(endPokerGame());\n\n    await asyncForEach(players, async (player: DBPlayer, i: number) => {\n      if (turn <= i && i < LAST_PLAYER) {\n        await computer(player);\n      }\n    });\n\n    let winner = { val: 0, id: 0 };\n\n    players.forEach((player) => {\n      if (player.id === DEALER || player.id > LAST_PLAYER) { return; }\n\n      const playerScore = parseInt(evaluate(player.hands[0].cards), 14);\n      if (playerScore > winner.val) {\n        winner = { val: playerScore, id: player.id };\n      }\n    });\n\n    players.forEach((player) => {\n      if (player.id === DEALER || player.id > LAST_PLAYER) { return; }\n\n      if (player.id === winner.id) {\n        dispatch(payout(player.id, 'win', 20));\n      } else {\n        dispatch(payout(player.id, 'lose', -5));\n      }\n    });\n  }, [computer, dispatch, players, turn]);\n\n  const checkUpdate = React.useCallback(async (): Promise<void> => {\n    const player = players[turn] || { isBot: false };\n\n    if (!hideHands && !gameOver && player.isBot) {\n      await endGame();\n    }\n  }, [endGame, players, gameOver, hideHands, turn]);\n\n  // ----------     player handlers     ---------- //\n  const newGame = React.useCallback((): void => {\n    dispatch(newPokerGame(players));\n  }, [dispatch, players]);\n\n  /** function to finish betting and start the game */\n  const startGame = React.useCallback((): void => {\n    dispatch(startPokerGame());\n    // shuffle the deck\n    Deck.shuffle().then(() => {\n      // deal the hands\n      asyncForEach(players, async (player: DBPlayer) => {\n        if (player.id !== DEALER && player.id <= LAST_PLAYER) {\n          await dispatch(newHand(player.id, 5));\n        }\n      });\n    });\n  }, [dispatch, players]);\n\n  /** helper function wrapping discard, meant for UI */\n  const handleDiscard = React.useCallback((): void => {\n    discard(cardsToDiscard, players[turn]);\n    dispatch(discardCards());\n  }, [discard, dispatch, players, turn, cardsToDiscard]);\n\n  /** function to route click actions */\n  const handleGameFunctionClick = React.useCallback((type: string): void => {\n    switch (type) {\n      case PGF.DISCARD_CARDS:\n        handleDiscard(); break;\n      case PGF.END_TURN:\n        endTurn(); break;\n      case PGF.NEW_GAME:\n        newGame(); break;\n      case PGF.START_GAME:\n        startGame(); break;\n      default:\n        // eslint-disable-next-line no-console\n        console.error('Unknown Game Function: ', type);\n    }\n  }, [endTurn, handleDiscard, newGame, startGame]);\n\n  return {\n    checkUpdate,\n    handleGameFunctionClick,\n  };\n};\n\nexport default usePokerFunctions;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { useSelector, useDispatch } from 'react-redux';\nimport GameTable from '../game-table';\nimport { updateCardsToDiscard } from '../../../store/modules/poker';\nimport { DBRootState } from '../../../store/types';\nimport usePokerFunctions from './hooks';\n\nconst Poker: React.FC<{}> = () => {\n  const {\n    turn, players, cardsToDiscard, gameFunctions,\n    gameOver, hideHands,\n  } = useSelector((state: DBRootState) => ({\n    turn: state.turn,\n    players: state.players,\n    ...state.poker,\n  }));\n  const dispatch = useDispatch();\n\n  /** function to be called on card clicks */\n  const cardClickHandler = React.useCallback((playerNo: number, handNo: number, cardNo: number): void => {\n    const newCardsToDiscard = [...cardsToDiscard];\n    // find card\n    const i = newCardsToDiscard.indexOf(cardNo);\n    // toggle in array\n    i === -1 ? newCardsToDiscard.push(cardNo) : newCardsToDiscard.splice(i, 1);\n    // update state\n    dispatch(updateCardsToDiscard(newCardsToDiscard));\n  }, [cardsToDiscard, dispatch]);\n\n  const { checkUpdate, handleGameFunctionClick } = usePokerFunctions(\n    dispatch,\n    cardsToDiscard,\n    players,\n    turn.player,\n    hideHands,\n    gameOver,\n  );\n\n  checkUpdate();\n\n  return (\n    <>\n      <Typography variant=\"h2\" gutterBottom>\n        5 Card Draw Poker\n      </Typography>\n      <GameTable\n        cardClickHandler={cardClickHandler}\n        cardsToDiscard={cardsToDiscard}\n        gameFunctions={gameFunctions}\n        onClick={handleGameFunctionClick}\n        gameOver={gameOver}\n        hideHands={hideHands}\n        isBlackJack={false}\n        players={players}\n        turn={turn}\n      />\n    </>\n  );\n};\n\nexport default Poker;\n"],"sourceRoot":""}