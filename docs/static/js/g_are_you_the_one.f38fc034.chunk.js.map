{"version":3,"file":"static/js/g_are_you_the_one.f38fc034.chunk.js","mappings":"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","sources":["components/games/are-you-the-one/controls/Dropdown.tsx","components/games/are-you-the-one/controls/Controls.tsx","components/games/are-you-the-one/table/TBDialog.tsx","components/games/are-you-the-one/table/TableBody.tsx","components/games/are-you-the-one/table/Table.tsx","components/games/are-you-the-one/Equations.tsx","components/games/are-you-the-one/AreYouTheOne.tsx"],"sourcesContent":["import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\nimport ClickAwayListener from \"@mui/material/ClickAwayListener\";\nimport Grow from \"@mui/material/Grow\";\nimport Paper from \"@mui/material/Paper\";\nimport Popper from \"@mui/material/Popper\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport MenuList from \"@mui/material/MenuList\";\n\ninterface DropdownProps {\n  roundNumber: number;\n  options: string[];\n  onSelect: (index: number) => void;\n}\n\nconst Dropdown = (props: DropdownProps) => {\n  const { roundNumber, options, onSelect } = props;\n\n  // hooks/state\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef<HTMLDivElement>(null);\n\n  const handleMenuItemClick = (\n    event: React.MouseEvent<HTMLLIElement, MouseEvent>,\n    index: number\n  ) => {\n    onSelect(index);\n    setOpen(false);\n  };\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event: Event) => {\n    if (\n      anchorRef.current &&\n      anchorRef.current.contains(event.target as HTMLElement)\n    ) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <ButtonGroup\n        ref={anchorRef}\n        variant=\"contained\"\n        aria-label=\"split button\"\n        color={roundNumber + 2 === options.length ? \"error\" : \"primary\"}\n      >\n        <Button>{options[roundNumber]}</Button>\n        <Button\n          size=\"small\"\n          aria-controls={open ? \"split-button-menu\" : undefined}\n          aria-expanded={open ? \"true\" : undefined}\n          aria-label=\"select merge strategy\"\n          aria-haspopup=\"menu\"\n          onClick={handleToggle}\n        >\n          <ArrowDropDownIcon />\n        </Button>\n      </ButtonGroup>\n      <Popper\n        open={open}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n      >\n        {({ TransitionProps, placement }) => (\n          <Grow\n            {...TransitionProps}\n            style={{\n              transformOrigin:\n                placement === \"bottom\" ? \"center top\" : \"center bottom\",\n            }}\n          >\n            <Paper>\n              <ClickAwayListener onClickAway={handleClose}>\n                <MenuList id=\"split-button-menu\" autoFocusItem>\n                  {options.map((option, index) => (\n                    <MenuItem\n                      key={option}\n                      selected={index === roundNumber}\n                      onClick={(event) => handleMenuItemClick(event, index)}\n                    >\n                      {option}\n                    </MenuItem>\n                  ))}\n                </MenuList>\n              </ClickAwayListener>\n            </Paper>\n          </Grow>\n        )}\n      </Popper>\n    </>\n  );\n};\n\nexport default Dropdown;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport { DBRootState } from \"../../../../store/types\";\nimport { updateScore, updateNoMatch } from \"../../../../store/modules/ayto\";\nimport Dropdown from \"./Dropdown\";\n\ninterface ControlsProps {\n  roundNumber: number;\n  options: string[];\n  onSelect: (index: number) => void;\n}\n\n// eslint-disable-next-line no-restricted-globals\nconst getScore = (value: number) => (isNaN(value) ? -1 : value);\n\nconst Controls = (props: ControlsProps) => {\n  const { roundNumber, options, onSelect } = props;\n\n  // Redux\n  const { roundPairings, matches, noMatch } = useSelector(\n    (state: DBRootState) => ({ ...state.ayto })\n  );\n  const dispatch = useDispatch();\n\n  // hooks/state\n  const [score, setScore] = React.useState(\n    getScore(roundPairings[roundNumber]?.score)\n  );\n\n  // handlers\n  const handleSelect = (index: number) => {\n    setScore(getScore(roundPairings[index]?.score));\n    onSelect(index);\n  };\n\n  const handleBlackout = () => {\n    roundPairings[roundNumber].pairs.forEach((gi, li) => {\n      if (matches[li] !== gi && !noMatch[li][gi]) {\n        dispatch(updateNoMatch(li, gi));\n      }\n    });\n  };\n\n  const handleTextFieldChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setScore(parseInt(event.target.value, 10) || 0);\n    dispatch(updateScore(parseInt(event.target.value, 10), roundNumber));\n  };\n\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n      <Dropdown\n        roundNumber={roundNumber}\n        options={options}\n        onSelect={handleSelect}\n      />\n      {roundNumber < options.length - 2 && (\n        <>\n          <Button variant=\"outlined\" onClick={handleBlackout}>\n            Blackout\n          </Button>\n          <TextField\n            id=\"score-input\"\n            label=\"Score\"\n            variant=\"outlined\"\n            type=\"number\"\n            value={score}\n            onChange={handleTextFieldChange}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Controls;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\n\nexport interface TBDialogProps {\n  open: boolean;\n  content: string;\n  onMatch: () => void;\n  onNoMatch: () => void;\n  onCancel: () => void;\n}\n\nconst TBDialog = ({\n  open,\n  content,\n  onMatch,\n  onNoMatch,\n  onCancel,\n}: TBDialogProps) => (\n  <Dialog onClose={onCancel} open={open}>\n    <DialogTitle>TB Result</DialogTitle>\n    <DialogContent>Are {content} a perfect match?</DialogContent>\n    <DialogActions>\n      <Button onClick={onMatch}>Match</Button>\n      <Button onClick={onNoMatch} color=\"error\">\n        No Match\n      </Button>\n      <Button onClick={onCancel} color=\"warning\">\n        Cancel\n      </Button>\n    </DialogActions>\n  </Dialog>\n);\n\nexport default TBDialog;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { Button } from \"@mui/material\";\nimport { DBRootState } from \"../../../../store/types\";\nimport {\n  updatePairs,\n  updateNoMatch,\n  updateMatch,\n} from \"../../../../store/modules/ayto\";\nimport TBDialog from \"./TBDialog\";\n\ninterface AYTOTableProps {\n  ladies: string[];\n  gents: string[];\n  options: string[];\n  roundNumber: number;\n}\n\nconst AYTOTableBody = (props: AYTOTableProps) => {\n  const { ladies, gents, options, roundNumber: ri } = props;\n  const isTB = options.length === ri + 2;\n  const isConsolidated = options.length === ri + 1;\n\n  // Redux\n  const { roundPairings, matches, noMatch } = useSelector(\n    (state: DBRootState) => ({ ...state.ayto })\n  );\n  const dispatch = useDispatch();\n\n  // state\n  const [open, setOpen] = React.useState(false);\n  const [tbi, setTBI] = React.useState([-1, -1]);\n  const hist: number[][] = [];\n\n  // create histogram\n  roundPairings.forEach((RP) => {\n    RP.pairs.forEach((gi, li) => {\n      !hist[li] && (hist[li] = []);\n      hist[li][gi] = !hist[li][gi] ? 1 : hist[li][gi] + 1;\n    });\n  });\n\n  // Handlers\n  const handleClick = (roundi: number, ladyi: number, genti: number) => () => {\n    if (isConsolidated) {\n      return;\n    }\n    if (isTB) {\n      setTBI([ladyi, genti]);\n      setOpen(true);\n      return;\n    }\n    // Regular Round, verify gent isn't already taken\n    const tempLI = roundPairings[roundi]?.pairs.indexOf(genti);\n    if (tempLI !== -1) {\n      // deselect gent from old lady\n      dispatch(updatePairs(roundi, tempLI, -1));\n    }\n    // assign to new lady\n    dispatch(updatePairs(roundi, ladyi, genti));\n  };\n\n  const handleCancel = () => {\n    setOpen(false);\n  };\n\n  const handleMatch = () => {\n    const [li, gi] = tbi;\n    dispatch(updateMatch(li, gi));\n    handleCancel();\n  };\n\n  const handleNoMatch = () => {\n    const [li, gi] = tbi;\n    dispatch(updateNoMatch(li, gi));\n    handleCancel();\n  };\n\n  return (\n    <TableBody>\n      {ladies.map((lName, li) => (\n        <TableRow\n          key={`ayto-table-row-${lName}`}\n          sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n        >\n          <TableCell component=\"th\" scope=\"row\">\n            {lName}\n          </TableCell>\n          {gents.map((gName, gi) => {\n            // variables\n            let variant: \"outlined\" | \"contained\" = \"outlined\";\n            let color: \"primary\" | \"error\" | \"success\" = \"primary\";\n            let disabled = false;\n\n            // logic\n            if (isTB) {\n              color = \"error\";\n              // if noMatch\n              if (noMatch[li] && noMatch[li][gi]) {\n                variant = \"contained\";\n              }\n            } else {\n              // if paired this round\n              if (roundPairings[ri]?.pairs[li] === gi) {\n                variant = \"contained\";\n              }\n              // if no match\n              if (noMatch[li] && noMatch[li][gi]) {\n                variant = \"contained\";\n                disabled = true;\n              }\n            }\n            // if match\n            if (matches[li] === gi) {\n              variant = \"contained\";\n              color = \"success\";\n            }\n\n            const histValue = hist[li] ? hist[li][gi] || 0 : 0;\n            // if consolidated\n            if (isConsolidated && histValue > 0) {\n              variant = \"contained\";\n            }\n\n            // render\n            return (\n              <TableCell key={gName} sx={{ padding: 0, textAlign: \"center\" }}>\n                <Button\n                  variant={variant}\n                  color={color}\n                  onClick={handleClick(ri, li, gi)}\n                  disabled={disabled}\n                >\n                  {isConsolidated ? histValue : `${lName[0]}-${gName[0]}`}\n                </Button>\n              </TableCell>\n            );\n          })}\n        </TableRow>\n      ))}\n      <TBDialog\n        open={open}\n        content={`${ladies[tbi[0]]} & ${gents[tbi[1]]}`}\n        onCancel={handleCancel}\n        onMatch={handleMatch}\n        onNoMatch={handleNoMatch}\n      />\n    </TableBody>\n  );\n};\n\nexport default AYTOTableBody;\n","import React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport AYTOTableBody from \"./TableBody\";\n\ninterface AYTOTableProps {\n  ladies: string[];\n  gents: string[];\n  options: string[];\n  roundNumber: number;\n}\n\nconst AYTOTable = (props: AYTOTableProps) => {\n  const { ladies, gents, options, roundNumber } = props;\n\n  return (\n    <TableContainer component={Paper}>\n      <Table aria-label=\"are you the one data entry table\">\n        <TableHead>\n          <TableRow>\n            <TableCell />\n            {gents.map((name) => (\n              <TableCell\n                key={name}\n                sx={{ paddingLeft: 0, paddingRight: 0, textAlign: \"center\" }}\n              >\n                {name}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <AYTOTableBody\n          roundNumber={roundNumber}\n          ladies={ladies}\n          gents={gents}\n          options={options}\n        />\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default AYTOTable;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Stack from \"@mui/material/Stack\";\nimport Chip from \"@mui/material/Chip\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Switch from \"@mui/material/Switch\";\nimport { DBRootState } from \"../../../store/types\";\n\ninterface EquationsProps {\n  ladies: string[];\n  gents: string[];\n}\n\ninterface AYTOHist {\n  value: number;\n  maxOdds: number;\n}\n\nconst Equations = (props: EquationsProps) => {\n  const { ladies, gents } = props;\n  // Redux\n  const { roundPairings, noMatch, matches } = useSelector(\n    (state: DBRootState) => ({ ...state.ayto })\n  );\n\n  // state\n  const [showAll, setShowAll] = React.useState(false);\n  const hist: AYTOHist[][] = [];\n  const tempScore: number[] = [];\n  const totals: number[] = [];\n\n  // create histogram\n  roundPairings.forEach(({ pairs }, ri) => {\n    tempScore[ri] = 0;\n    totals[ri] = ladies.length;\n    pairs.forEach((gi, li) => {\n      if (li < 0 || gi < 0 || noMatch[li][gi]) {\n        totals[ri] -= 1;\n      }\n      if (matches[li] === gi) {\n        tempScore[ri] += 1;\n        totals[ri] -= 1;\n      }\n      !hist[li] && (hist[li] = []);\n      !hist[li][gi] && (hist[li][gi] = { value: 0, maxOdds: 0 });\n      hist[li][gi].value += 1;\n    });\n  });\n\n  roundPairings.forEach(({ pairs, score }, ri) => {\n    pairs.forEach((gi, li) => {\n      const odds = Math.floor(((score - tempScore[ri]) * 100) / totals[ri]);\n      hist[li][gi].maxOdds = Math.max(hist[li][gi].maxOdds, odds);\n    });\n  });\n\n  // handlers\n  const handleSwitch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setShowAll(event.target.checked);\n  };\n\n  return (\n    <div>\n      <Stack direction=\"row\" justifyContent=\"space-between\">\n        <h1>Equations</h1>\n        <FormControlLabel\n          control={\n            <Switch checked={showAll} onChange={handleSwitch} name=\"show-all\" />\n          }\n          label=\"Show All Couples\"\n        />\n      </Stack>\n      <Stack spacing={2} direction=\"row\">\n        {roundPairings.map(({ pairs, score }, ri) => {\n          const equation = pairs.map((gi, li) => {\n            // if noMatch or match, skip\n            if (li < 0 || gi < 0) {\n              return null;\n            }\n\n            const isRepeat = hist[li][gi].value > 1;\n            let color: \"primary\" | \"default\" | \"error\" | \"success\" = isRepeat\n              ? \"primary\"\n              : \"default\";\n\n            if (!showAll) {\n              if (noMatch[li][gi] || matches[li] === gi) {\n                return null;\n              }\n            } else {\n              // no match chip\n              if (noMatch[li][gi]) {\n                color = \"error\";\n              }\n              // match chip\n              if (matches[li] === gi) {\n                color = \"success\";\n              }\n            }\n\n            const label = `${ladies[li]}-${gents[gi]}${\n              isRepeat ? ` ${hist[li][gi].value}` : \"\"\n            } - ${hist[li][gi].maxOdds}%`;\n\n            // create equation chips\n            return (\n              <Chip\n                key={`eq-r${ri}-l${li}-g${gi}`}\n                label={label}\n                color={color}\n              />\n            );\n          });\n\n          // return each equation stack\n          return !equation.every((e) => e === null) ? (\n            <Stack key={`equation-${ri}`} spacing={1}>\n              <h2 style={{ textAlign: \"center\" }}>Matchup {ri + 1}</h2>\n              {equation}\n              <Chip label={`${score} - ${tempScore[ri]}`} color=\"warning\" />\n            </Stack>\n          ) : null;\n        })}\n      </Stack>\n    </div>\n  );\n};\n\nexport default Equations;\n","import React from \"react\";\nimport Controls from \"./controls/Controls\";\nimport Table from \"./table/Table\";\nimport Equations from \"./Equations\";\nimport { ladies, gents, options } from \"../../../constants/ayto\";\n\n/**\n * TODO:\n * replace Dropdown with MUI Dropdown when available\n * if an equation exists in another equation, sub it out for remaining number\n * add percent likelihood to equations\n * consider making this the connected component and pass redux info down\n * on Match, update so that all future matchup-s have that match\n */\nconst AreYouTheOne = () => {\n  const [roundNumber, setRoundNumber] = React.useState(0);\n\n  const handleSelect = (selected: number) => {\n    setRoundNumber(selected);\n  };\n\n  return (\n    <>\n      <h1>Are You The One?</h1>\n      <Controls\n        roundNumber={roundNumber}\n        options={options}\n        onSelect={handleSelect}\n      />\n      <br />\n      <Table\n        roundNumber={roundNumber}\n        ladies={ladies}\n        gents={gents}\n        options={options}\n      />\n      <Equations ladies={ladies} gents={gents} />\n    </>\n  );\n};\n\nexport default AreYouTheOne;\n"],"names":["props","roundNumber","options","onSelect","React","open","setOpen","anchorRef","handleClose","event","current","contains","target","ButtonGroup","ref","variant","color","length","Button","size","undefined","onClick","prevOpen","ArrowDropDown","Popper","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","id","autoFocusItem","map","option","index","MenuItem","selected","handleMenuItemClick","getScore","value","isNaN","useSelector","state","ayto","roundPairings","matches","noMatch","dispatch","useDispatch","score","setScore","display","justifyContent","pairs","forEach","gi","li","updateNoMatch","TextField","label","type","onChange","parseInt","updateScore","content","onMatch","onNoMatch","onCancel","Dialog","onClose","DialogTitle","DialogContent","DialogActions","ladies","gents","ri","isTB","isConsolidated","tbi","setTBI","hist","RP","handleCancel","TableBody","lName","TableRow","sx","border","TableCell","component","scope","gName","disabled","roundi","ladyi","genti","histValue","padding","textAlign","tempLI","indexOf","updatePairs","updateMatch","TableContainer","Table","TableHead","name","paddingLeft","paddingRight","showAll","setShowAll","tempScore","totals","maxOdds","odds","Math","floor","max","Stack","direction","FormControlLabel","control","Switch","checked","spacing","equation","isRepeat","Chip","every","e","setRoundNumber"],"sourceRoot":""}