{"version":3,"sources":["store/immutableHelpers.ts","store/modules/players.ts","components/Routes.tsx","wrappers/WithRouter.tsx","wrappers/WithTheme.tsx","store/index.ts","store/configureStore.ts","wrappers/WithStore.tsx","serviceWorker.ts","index.ts","store/modules/turn.ts","apis/Deck.ts","apis/SlotMachine.ts","store/types.ts","components/common/loading-spinner/LoadingSpinner.tsx","store/initialState.ts","helpers/asyncForEach.ts","store/modules/git.ts","store/modules/poker.ts","store/modules/theme.ts","store/modules/blackjack.ts","store/modules/connect4.ts","store/modules/dnd.ts","store/modules/gqlToken.ts","store/modules/slots.ts","store/modules/ticTacToe.ts","store/modules/yahtzee.ts"],"names":["updateObjectInArray","array","ins","key","map","item","updateArrayInArray","idx","i","pa","REMOVE","ADD","RESET","UPDATE_NAME","UPDATE_BOT","UPDATE_BET","PAY_PLAYER","SPLIT_HAND","DRAW_CARD","SWAP_CARD","NEW_HAND","updateName","id","name","type","player","updateBot","isBot","updateBet","bet","payout","status","money","resetStatus","hands","reducer","state","initialState","players","action","find","obj","undefined","playerMoney","addedMoney","newArr","slice","push","insertItem","filter","removeItem","defaultWeigh","weight","soft","newHand","num","weigh","dispatch","Deck","deal","then","cards","sort","rankSort","createNewHandAction","drawCard","hNum","drawnCards","newHands","createDrawCardAction","splitHand","hand","hand1","hand2","Object","assign","splice","createSplitHandAction","swapCards","cardsToDiscard","asyncForEach","a","updatedHands","createSwapCardsAction","ResumeRoutes","React","lazy","GameRoutes","withRouter","props","pathname","location","history","handleNav","useCallback","loc","resume","passProps","games","style","padding","paddingTop","Suspense","fallback","path","render","WithRouter","WithTheme","theme","useSelector","setTheme","createMuiTheme","palette","primary","secondary","typography","fontFamily","join","CssBaseline","rootReducer","combineReducers","blackjack","connect4","dnd","git","gqlToken","poker","slots","ticTacToe","turn","yahtzee","loadState","localForage","getItem","catch","composeEnhancers","composeWithDevTools","trace","traceLimit","configureStore","createStore","applyMiddleware","thunk","WithStore","PureComponent","constructor","super","this","componentDidMount","store","subscribe","throttle","saveState","getState","setItem","e","console","error","setState","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","ReactDOM","createElement","App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","ta","INCR_PLAYER","INCR_HAND","incrPlayerTurn","incrHandTurn","resetTurn","NEW_DECK","suit","getNewDeck","card","setDeck","deck","shuffle","shuffledDeck","j","Math","floor","random","k","temp","data","length","pop","b","reels","symbol","SO","CHERRY","start","stop","EMPTY","BAR","SEVEN","DOUBLE_BAR","TRIPLE_BAR","JACKPOT","machine","forEach","reel","prev","next","prepareSlotMachine","pullHandle","getPayout","bars","r0","r1","r2","fReel","includes","GameFunctions","C4Turn","PokerGameFunctions","DBSlotOptions","briefcasesToOpen","containerStyles","display","margin","marginTop","LoadingSpinner","memo","CircularProgress","size","title","newBlackjackGame","gameFunctions","FINISH_BETTING","hasFunctions","hideHands","NEW_BOARD","newConnect4Game","board","reduce","acc","row","winner","line","RED","newDNDGame","val","on","playerChoice","casesToOpen","sum","numCases","offer","dndOpen","isOver","arr","bc","newPlayer","newPokerGameState","START_GAME","gameOver","X","O","newTicTacToe","Array","fill","step","newYahtzee","roll","values","saved","showScoreButtons","hasScored","topScores","bottomScores","cyan","deepOrange","scores","storyID","branchMessage","branchPrefix","casePreference","commitPrefix","callback","index","SET_KEY","SET_BRANCH_MESSAGE","SET_BRANCH_PREFIX","SET_CASE_PREFERENCE","SET_COMMIT_PREFIX","setKey","setBranchMessage","setBranchPrefix","setCasePreference","setCommitPrefix","isSet","UPDATE_DISCARD_CARDS","NEW_GAME","END_TURN","END_GAME","DISCARD_CARDS","startPokerGame","endPokerGame","discardCards","updateCardsToDiscard","PGF","newPokerGame","promises","Promise","all","endPokerTurn","DARK_THEME","LIGHT_THEME","displayDarkTheme","displayLightTheme","blueGrey","UPDATE_GAME_FUNCTIONS","UPDATE_HIDE_HANDS","UPDATE_HAS_FUNCTIONS","updateGameFunctions","updateHideHands","updateHasFunctions","setNewGame","pSplitHand","hitHand","stayHand","readyForNextPlayer","doubleHand","lastHand","UPDATE_TURN","UPDATE_EVAL","newGame","updateTurn","updateEval","PLAYER_CHOICE","OPEN_CASE","OPEN_OFFER","NO_DEAL","FINISH_GAME","setOpenCase","setOpenOffer","setNoDeal","setPlayerChoice","promise1","updatePlayerChoice","promise2","setFinishGame","round","finishGame","SET_TOKEN","setToken","UPDATE","updateDBSlotMachine","dealerId","SlotMachine","exchange","updateSlots","promise3","SET","playTurn","DICE_CLICK","NEXT_ROLL","UPDATE_TOP","UPDATE_BOTTOM","UPDATE_ROLL","addScore","score","diceClick","nextRoll","updateTop","updateBottom","updateRoll","payload"],"mappings":"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","file":"static/js/main.56b55c9a.chunk.js","sourcesContent":["// Immutable helper functions\nexport function insertItem<T>(array: T[], item: T): T[] {\n  const newArr = array.slice();\n  newArr.push(item);\n  return newArr;\n}\n\nexport function updateObjectInArray<T extends Record<string, unknown>, K extends keyof T>(array: T[], ins: T, key: K): T[] {\n  return array.map(\n    (item) => (item[key] !== ins[key] ? item : { ...item, ...ins }),\n  );\n}\n\nexport function updateArrayInArray<T>(array: T[], ins: T, idx: number): T[] {\n  return array.map((item, i) => (i !== idx ? item : ins));\n}\n\nexport function removeItem<T extends { id: number }>(array: T[], id: number): T[] {\n  return array.filter((obj) => obj.id !== id);\n}\n\nexport function removeItemInArray<T>(array: T[], idx: number): T[] {\n  return [...array.slice(0, idx), ...array.slice(idx + 1)];\n}\n","import { Action, Dispatch } from 'redux';\nimport asyncForEach from '../../helpers/asyncForEach';\nimport Deck from '../../apis/Deck';\nimport {\n  removeItem, updateArrayInArray, updateObjectInArray, insertItem,\n} from '../immutableHelpers';\nimport { DBCard, DBHand, DBPlayer } from '../types';\nimport initialState, { newPlayer } from '../initialState';\n\n// --------------------     Actions     -------------------- //\nconst REMOVE = '@casino/player/REMOVE';\nenum pa {\n  'ADD' = '@casino/player/ADD',\n  'RESET' = '@casino/player/RESET',\n  'UPDATE_NAME' = '@casino/player/UPDATE_NAME',\n  'UPDATE_BOT' = '@casino/player/UPDATE_BOT',\n  'UPDATE_BET' = '@casino/player/UPDATE_BET',\n  'PAY_PLAYER' = '@casino/player/PAY_PLAYER',\n  'SPLIT_HAND' = '@casino/player/SPLIT_HAND',\n  'DRAW_CARD' = '@casino/player/DRAW_CARD',\n  'SWAP_CARD' = '@casino/player/SWAP_CARD',\n  'NEW_HAND' = '@casino/player/NEW_HAND',\n}\nconst {\n  ADD, RESET, UPDATE_NAME,\n  UPDATE_BOT, UPDATE_BET, PAY_PLAYER, SPLIT_HAND,\n  DRAW_CARD, SWAP_CARD, NEW_HAND,\n} = pa;\n\nexport interface PlayerAction extends Action<pa> { player: Partial<DBPlayer> }\n\n// -------------------- Action Creators     -------------------- //\n/** function to add a player to the state */\nexport function addPlayer(players: DBPlayer[], name: string): PlayerAction {\n  const player = newPlayer(players.length, name);\n  return { type: ADD, player };\n}\n\ninterface RemovePlayerAction extends Action<typeof REMOVE> { id: number }\n/** function to remove player from player array */\nexport function removePlayer(id: number): RemovePlayerAction {\n  return { type: REMOVE, id };\n}\n\n/** function to update a player's name */\nexport function updateName(id: number, name: string): PlayerAction {\n  return { type: UPDATE_NAME, player: { id, name }};\n}\n\n/** function to update a player's bot status */\nexport function updateBot(id: number, isBot = true): PlayerAction {\n  return { type: UPDATE_BOT, player: { id, isBot }};\n}\n\n/** function to update a player's bet */\nexport function updateBet(id = 0, bet = 5): PlayerAction {\n  return { type: UPDATE_BET, player: { id, bet }};\n}\n\n/** function to pay the winners and take money from the losers */\nexport function payout(id: number, status: string, money: number): PlayerAction {\n  return { type: PAY_PLAYER, player: { id, status, money }};\n}\n\nfunction createSplitHandAction(id: number, newHands: DBHand[]): PlayerAction {\n  return { type: SPLIT_HAND, player: { id, hands: newHands }};\n}\n\nfunction createDrawCardAction(id: number, newHands: DBHand[]): PlayerAction {\n  return { type: DRAW_CARD, player: { id, hands: newHands }};\n}\n\nfunction createSwapCardsAction(id: number, updatedHands: DBHand[]): PlayerAction {\n  return { type: SWAP_CARD, player: { id, hands: updatedHands }};\n}\n\nfunction createNewHandAction(id: number, cards: DBCard[], soft: boolean, weight: number): PlayerAction {\n  return { type: NEW_HAND, player: { id, hands: [{ cards, weight, soft }]}};\n}\n\n/** function to reset player status\n * @param {number} id - optional, what player should get a new hand, default 0\n * @return {Object}\n */\nexport function resetStatus(id = 0): PlayerAction {\n  return {\n    type: RESET,\n    player: {\n      id, status: '', hands: [], bet: 5,\n    },\n  };\n}\n\n// --------------------     Reducer     -------------------- //\ntype PlayerActions = PlayerAction | RemovePlayerAction;\nexport default function reducer(state: DBPlayer[] = initialState.players, action: PlayerActions): DBPlayer[] {\n  switch (action.type) {\n    case RESET:\n    case UPDATE_NAME:\n    case UPDATE_BOT:\n    case UPDATE_BET:\n    case SPLIT_HAND:\n    case DRAW_CARD:\n    case SWAP_CARD:\n    case NEW_HAND:\n      return updateObjectInArray(state, action.player, 'id') as DBPlayer[];\n    case PAY_PLAYER: {\n      const { id, status, money } = action.player;\n      const player = state.find((obj) => obj.id === id);\n\n      if (player !== undefined) {\n        const playerMoney = player.money || 0;\n        const addedMoney = money || 0;\n        const updatedPlayer = { ...player, money: (playerMoney + addedMoney), status };\n        return updateObjectInArray(state, updatedPlayer, 'id') as DBPlayer[];\n      }\n      return state;\n    }\n    case ADD:\n      return insertItem(state, action.player) as DBPlayer[];\n    case REMOVE:\n      return removeItem(state, action.id);\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\nexport type WeighFunc = (cards: DBCard[]) => { weight: number; soft: boolean };\nconst defaultWeigh: WeighFunc = () => ({ weight: 0, soft: false });\n\n/** function to have a player draw a card\n * @param {number} id - optional, what player should get a new hand, default 0\n * @param {number} num - optional, number of cards, default 1\n * @param {function} weigh - optional, get weight of hand for game\n * @return {Object}\n */\nexport function newHand(id = 0, num = 1, weigh = defaultWeigh) {\n  return (dispatch: Dispatch): Promise<PlayerAction> => Deck.deal(num)\n    .then((cards) => {\n      cards.sort(Deck.rankSort);\n      const { weight, soft } = weigh(cards);\n      return { weight, soft, cards };\n    })\n    .then(({ weight, soft, cards }) => dispatch(createNewHandAction(id, cards, soft, weight)));\n}\n\n/** function to have a player draw a card\n * @param {Object[]} hands - pass in player's hands to be mutated with new card\n * @param {number} id - tells us which player to update\n * @param {number} hNum - optional, if multiple hands\n * @param {number} num - optional, number of cards, default 1\n * @param {function} weigh - optional, get weight of hand for game\n * @return {Object}\n */\nexport function drawCard(hands: DBHand[], id: number, hNum = 0, num = 1, weigh = defaultWeigh) {\n  return (dispatch: Dispatch): Promise<PlayerAction> => Deck.deal(num)\n    .then((drawnCards) => {\n      const cards = [...hands[hNum].cards, ...drawnCards];\n      const { weight, soft } = weigh(cards);\n      const newHands = updateArrayInArray(hands, { cards, weight, soft }, hNum);\n      return newHands;\n    })\n    .then((newHands) => dispatch(createDrawCardAction(id, newHands)));\n}\n\n/** function to split players cards into 2 hands\n * @param {Object[]} hands - pass in player's hands to be mutated with new card\n * @param {number} id - tells us which player to update\n * @param {number} hNum - optional, if multiple hands\n * @param {function} weigh - optional, get weight of hand for game\n * @return {Object}\n */\nexport function splitHand(hands: DBHand[], id: number, hNum: number, weigh = defaultWeigh) {\n  return (dispatch: Dispatch): Promise<void> => {\n    const hand = hands[hNum];\n    // split the hands into 2\n    const hand1: DBHand = { cards: [hand.cards[0]]};\n    const hand2: DBHand = { cards: [hand.cards[1]]};\n\n    return Deck.deal(1)\n      .then((cards) => {\n        hand1.cards.push(cards[0]);\n      })\n      .then(() => {\n        Deck.deal(1)\n          .then((cards) => {\n            hand2.cards.push(cards[0]);\n\n            // update the weights\n            Object.assign(hand1, weigh(hand1.cards));\n            Object.assign(hand2, weigh(hand2.cards));\n            // update global hands\n            const newHands: DBHand[] = updateArrayInArray(hands, hand2, hNum);\n            newHands.splice(hNum, 0, hand1);\n            return newHands;\n          })\n          .then((newHands) => dispatch(createSplitHandAction(id, newHands)));\n      });\n  };\n}\n\n/** iterate through array, removing each index number from hand\n * then add new cards to the hand\n * @param {Object[]} hands - pass in player's hands to be mutated with new card\n * @param {number} id - tells us which player to update\n * @param {array} cardsToDiscard - array of index numbers\n * @return {Object}\n */\nexport function swapCards(hands: DBHand[], id: number, cardsToDiscard: number[]) {\n  return (dispatch: Dispatch): Promise<void> => {\n    const cards = [...hands[0].cards];\n    return asyncForEach(cardsToDiscard, async (idx: number) => {\n      [cards[idx]] = await Deck.deal(1);\n    }).then(() => {\n      cards.sort(Deck.rankSort);\n      const updatedHands: DBHand[] = updateArrayInArray(hands, { cards }, 0);\n      dispatch(createSwapCardsAction(id, updatedHands));\n    });\n  };\n}\n","import React from 'react';\nimport {\n  Switch, Route, withRouter, RouteComponentProps,\n} from 'react-router-dom';\nimport LoadingSpinner from './common/loading-spinner';\n\ntype RoutesProps = RouteComponentProps<{ url: string }>;\n\n// lazy load sub routers\nconst ResumeRoutes = React.lazy(() => import(/* webpackChunkName: \"resume\" */ './resume/Routes'));\nconst GameRoutes = React.lazy(() => import(/* webpackChunkName: \"games\" */ './games/Routes'));\n\nconst Routes: React.FC<RoutesProps> = (props: RoutesProps) => {\n  const { location: { pathname }, history } = props;\n\n  const handleNav = React.useCallback((loc: string): void => {\n    if (loc !== pathname) {\n      history.push(loc);\n    }\n  }, [history, pathname]);\n\n  const resume = React.useCallback(\n    (passProps: RoutesProps): React.ReactNode => <ResumeRoutes handleNav={handleNav} {...passProps} />,\n    [handleNav],\n  );\n  const games = React.useCallback(\n    (passProps: RoutesProps): React.ReactNode => <GameRoutes handleNav={handleNav} {...passProps} />,\n    [handleNav],\n  );\n\n  return (\n    <main style={{ padding: '1em', paddingTop: '5em' }}>\n      <React.Suspense fallback={<LoadingSpinner />}>\n        <Switch>\n          <Route path=\"/games\" render={games} />\n          <Route render={resume} />\n        </Switch>\n      </React.Suspense>\n    </main>\n  );\n};\n\nexport default withRouter(Routes);\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport Routes from '../components/Routes';\n\n/** App class that wraps higher level components of the application */\nconst WithRouter: React.FC = () => (\n  <HashRouter>\n    <Routes />\n  </HashRouter>\n);\n\nexport default WithRouter;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport WithRouter from './WithRouter';\nimport { DBRootState } from '../store/types';\n\n/** App class that wraps higher level components of the application */\nconst WithTheme: React.FC = () => {\n  const theme = useSelector((state: DBRootState) => state.theme);\n\n  const setTheme = createMuiTheme({\n    palette: {\n      type: theme.type,\n      primary: theme.primary,\n      secondary: theme.secondary,\n    },\n    typography: {\n      fontFamily: ['Montserrat', 'sans-serif'].join(','),\n    },\n  });\n\n  return (\n    <MuiThemeProvider theme={setTheme}>\n      <CssBaseline />\n      <WithRouter />\n    </MuiThemeProvider>\n  );\n};\n\nexport default WithTheme;\n","import { combineReducers } from 'redux';\nimport blackjack from './modules/blackjack';\nimport connect4 from './modules/connect4';\nimport dnd from './modules/dnd';\nimport git from './modules/git';\nimport gqlToken from './modules/gqlToken';\nimport players from './modules/players';\nimport poker from './modules/poker';\nimport slots from './modules/slots';\nimport theme from './modules/theme';\nimport ticTacToe from './modules/ticTacToe';\nimport turn from './modules/turn';\nimport yahtzee from './modules/yahtzee';\n\nconst rootReducer = combineReducers({\n  blackjack,\n  connect4,\n  dnd,\n  git,\n  gqlToken,\n  players,\n  poker,\n  slots,\n  theme,\n  ticTacToe,\n  turn,\n  yahtzee,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, Store } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport localForage from 'localforage';\n\nimport { DBRootState } from './types';\nimport rootReducer from '.';\nimport initialState from './initialState';\n\n/** funtion to read 'state' value from local storage and return it, or default state */\nexport const loadState = async (): Promise<DBRootState> => localForage\n  .getItem('state')\n  .then((state) => (state ? { ...initialState, ...state as DBRootState } : initialState))\n  // if there are any issues, just load default state\n  .catch(() => initialState);\n\n/** funtion to save 'state' value to local storage */\nexport const saveState = (state: DBRootState): Promise<void | DBRootState> => localForage\n  .setItem('state', state)\n  // eslint-disable-next-line no-console\n  .catch((e) => console.error('state to db save failed: ', e));\n\nconst composeEnhancers = composeWithDevTools({ trace: true, traceLimit: 25 });\n\nexport const configureStore = (state: DBRootState): Store => createStore(\n  rootReducer,\n  state,\n  composeEnhancers(applyMiddleware(thunk)),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport throttle from 'lodash/throttle';\nimport { Store } from 'redux';\nimport WithTheme from './WithTheme';\nimport { loadState, saveState, configureStore } from '../store/configureStore';\nimport LoadingSpinner from '../components/common/loading-spinner';\n\ninterface WithStoreState {\n  store?: Store;\n}\n\n/** App class that wraps higher level components of the application */\nclass WithStore extends React.PureComponent<Record<string, unknown>, WithStoreState> {\n  constructor(props: Record<string, unknown>) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount(): void {\n    loadState()\n      .then(configureStore)\n      .then((store) => {\n        store.subscribe(throttle(() => saveState(store.getState()), 1000));\n        this.setState({ store });\n      });\n  }\n\n  render(): React.ReactNode {\n    const { store } = this.state;\n    return store ? (\n      <Provider store={store}>\n        <WithTheme />\n      </Provider>\n    ) : <LoadingSpinner />;\n  }\n}\n\nexport default WithStore;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './wrappers/WithStore';\nimport { register } from './serviceWorker';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\nregister();\n","import { Action } from 'redux';\nimport { DBTurn } from '../types';\nimport initialState from '../initialState';\n\n// --------------------     Actions     -------------------- //\nexport enum ta {\n  INCR_PLAYER = 'casino/turn/INCR',\n  INCR_HAND = 'casino/turn/INCR_HAND',\n  RESET = 'casino/turn/RESET',\n}\nconst { INCR_PLAYER, INCR_HAND, RESET } = ta;\n\n// --------------------     Action Creators     -------------------- //\n/** increment player turn in Turn DB */\nexport const incrPlayerTurn = (): Action<typeof INCR_PLAYER> => ({ type: INCR_PLAYER });\n/** increment hand turn in Turn DB */\nexport const incrHandTurn = (): Action<typeof INCR_HAND> => ({ type: INCR_HAND });\n/** reset back to first player in Turn DB */\nexport const resetTurn = (): Action<typeof RESET> => ({ type: RESET });\n\n// --------------------     Reducers     -------------------- //\nexport default function reducer(state: DBTurn = initialState.turn, action: Action<ta>): DBTurn {\n  switch (action.type) {\n    case INCR_PLAYER:\n      return { ...state, ...{ player: state.player + 1, hand: 0 }};\n    case INCR_HAND:\n      return { ...state, ...{ hand: state.hand + 1 }};\n    case RESET:\n      return { ...state, ...{ player: 0, hand: 0 }};\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n","import localForage from 'localforage';\nimport { DBCard } from '../store/types';\n\nconst NEW_DECK: DBCard[] = [\n  { name: '2', weight: 2, suit: '♣' }, { name: '3', weight: 3, suit: '♣' },\n  { name: '4', weight: 4, suit: '♣' }, { name: '5', weight: 5, suit: '♣' },\n  { name: '6', weight: 6, suit: '♣' }, { name: '7', weight: 7, suit: '♣' },\n  { name: '8', weight: 8, suit: '♣' }, { name: '9', weight: 9, suit: '♣' },\n  { name: '10', weight: 10, suit: '♣' }, { name: 'J', weight: 11, suit: '♣' },\n  { name: 'Q', weight: 12, suit: '♣' }, { name: 'K', weight: 13, suit: '♣' },\n  { name: 'A', weight: 14, suit: '♣' }, { name: '2', weight: 2, suit: '♦' },\n  { name: '3', weight: 3, suit: '♦' }, { name: '4', weight: 4, suit: '♦' },\n  { name: '5', weight: 5, suit: '♦' }, { name: '6', weight: 6, suit: '♦' },\n  { name: '7', weight: 7, suit: '♦' }, { name: '8', weight: 8, suit: '♦' },\n  { name: '9', weight: 9, suit: '♦' }, { name: '10', weight: 10, suit: '♦' },\n  { name: 'J', weight: 11, suit: '♦' }, { name: 'Q', weight: 12, suit: '♦' },\n  { name: 'K', weight: 13, suit: '♦' }, { name: 'A', weight: 14, suit: '♦' },\n  { name: '2', weight: 2, suit: '♥' }, { name: '3', weight: 3, suit: '♥' },\n  { name: '4', weight: 4, suit: '♥' }, { name: '5', weight: 5, suit: '♥' },\n  { name: '6', weight: 6, suit: '♥' }, { name: '7', weight: 7, suit: '♥' },\n  { name: '8', weight: 8, suit: '♥' }, { name: '9', weight: 9, suit: '♥' },\n  { name: '10', weight: 10, suit: '♥' }, { name: 'J', weight: 11, suit: '♥' },\n  { name: 'Q', weight: 12, suit: '♥' }, { name: 'K', weight: 13, suit: '♥' },\n  { name: 'A', weight: 14, suit: '♥' }, { name: '2', weight: 2, suit: '♠' },\n  { name: '3', weight: 3, suit: '♠' }, { name: '4', weight: 4, suit: '♠' },\n  { name: '5', weight: 5, suit: '♠' }, { name: '6', weight: 6, suit: '♠' },\n  { name: '7', weight: 7, suit: '♠' }, { name: '8', weight: 8, suit: '♠' },\n  { name: '9', weight: 9, suit: '♠' }, { name: '10', weight: 10, suit: '♠' },\n  { name: 'J', weight: 11, suit: '♠' }, { name: 'Q', weight: 12, suit: '♠' },\n  { name: 'K', weight: 13, suit: '♠' }, { name: 'A', weight: 14, suit: '♠' },\n];\n\n/** immutably get a copy of new deck O(N) */\nconst getNewDeck = (): DBCard[] => NEW_DECK.map((card) => ({ ...card }));\n\n/** get immutable copy of deck O(N) */\nconst getDeck = (): Promise<DBCard[]> => localForage\n  .getItem('deck')\n  .then((data: unknown) => (data as DBCard[] || getNewDeck()))\n  .catch(() => getNewDeck());\n\n/** immutably update deck O(N) */\nconst setDeck = (deck: DBCard[]): Promise<DBCard[] | null> => localForage\n  .setItem('deck', deck)\n  .catch(() => null);\n\n/** randomize order of the cards O(N + M) */\nconst shuffle = (): Promise<DBCard[] | null> => {\n  // get a new deck\n  const shuffledDeck = getNewDeck();\n  // shuffle the cards\n  for (let i = 0; i < 100; i += 1) {\n    const j = Math.floor(Math.random() * 52);\n    const k = Math.floor(Math.random() * 52);\n    const temp = shuffledDeck[j];\n    shuffledDeck[j] = shuffledDeck[k];\n    shuffledDeck[k] = temp;\n  }\n  // update deck state\n  return setDeck(shuffledDeck);\n};\n\n/** return an array of a specified length O(2N) */\nconst deal = (num = 0): Promise<DBCard[]> => {\n  const cards: DBCard[] = [];\n  return getDeck()\n    .then((deck: DBCard[]): DBCard[] => {\n      // verify we have enough cards\n      if (num > deck.length) {\n        return deck;\n      }\n      // get the cards\n      for (let i = 0; i < num; i += 1) {\n        const card: DBCard | undefined = deck.pop();\n        card && cards.push(card);\n      }\n      return deck;\n    })\n    .then((deck: DBCard[]) => setDeck(deck))\n    .then(() => cards);\n};\n\n/** sort by card weight */\nconst rankSort = (a: DBCard, b: DBCard): number => a.weight - b.weight;\n\nexport default { shuffle, deal, rankSort };\n","import { DBSlotDisplay, DBSlotOptions as SO } from '../store/types';\n\ninterface Reel {\n  symbol: SO;\n  start: number;\n  stop: number;\n}\n\nconst NUM_REELS = 3;\n\n/** options to be displayed on slot machine */\nconst reels: Reel[] = [\n  { symbol: SO.CHERRY, start: 1, stop: 2 },\n  { symbol: SO.EMPTY, start: 3, stop: 7 },\n  { symbol: SO.BAR, start: 8, stop: 12 },\n  { symbol: SO.EMPTY, start: 13, stop: 17 },\n  { symbol: SO.SEVEN, start: 18, stop: 25 },\n  { symbol: SO.EMPTY, start: 26, stop: 30 },\n  { symbol: SO.BAR, start: 31, stop: 35 },\n  { symbol: SO.EMPTY, start: 36, stop: 41 },\n  { symbol: SO.CHERRY, start: 42, stop: 43 },\n  { symbol: SO.EMPTY, start: 44, stop: 49 },\n  { symbol: SO.DOUBLE_BAR, start: 50, stop: 56 },\n  { symbol: SO.EMPTY, start: 57, stop: 62 },\n  { symbol: SO.CHERRY, start: 63, stop: 63 },\n  { symbol: SO.EMPTY, start: 64, stop: 69 },\n  { symbol: SO.DOUBLE_BAR, start: 70, stop: 75 },\n  { symbol: SO.EMPTY, start: 76, stop: 81 },\n  { symbol: SO.BAR, start: 82, stop: 87 },\n  { symbol: SO.EMPTY, start: 88, stop: 93 },\n  { symbol: SO.TRIPLE_BAR, start: 94, stop: 104 },\n  { symbol: SO.EMPTY, start: 105, stop: 115 },\n  { symbol: SO.JACKPOT, start: 116, stop: 117 },\n  { symbol: SO.EMPTY, start: 118, stop: 128 },\n];\n\n/** prepare the slot machine */\nfunction prepareSlotMachine(): DBSlotDisplay[] {\n  const machine: DBSlotDisplay[] = [];\n  reels.forEach((reel: Reel, i: number) => {\n    // wrap the reels\n    const prev = i - 1 > 0 ? i - 1 : reels.length - 1;\n    const next = (i + 1) % reels.length;\n    // create the machine\n    for (let j = reel.start; j <= reel.stop; j += 1) {\n      machine.push([reels[prev].symbol, reel.symbol, reels[next].symbol]);\n    }\n  });\n  return machine;\n}\n\nconst machine = prepareSlotMachine();\n\n/** spin the slot machine and get a result */\nexport function spin(): DBSlotDisplay {\n  return machine[Math.floor(Math.random() * machine.length)];\n}\n\n/** Pull the slot machine handle, returns info needed for display */\nexport const pullHandle = (): DBSlotDisplay[] => {\n  const reel = [];\n  for (let i = 0; i < NUM_REELS; i += 1) {\n    reel[i] = spin();\n  }\n  return reel;\n};\n\n/** evaluate slot machine based of 3 reels */\nexport const getPayout = (reel: DBSlotDisplay[], bet: number): number => {\n  // for bar check\n  const bars = [SO.BAR, SO.DOUBLE_BAR, SO.TRIPLE_BAR];\n  // get reel values\n  const r0 = reel[0][1];\n  const r1 = reel[1][1];\n  const r2 = reel[2][1];\n  const fReel = [r0, r1, r2];\n  // check if they match\n  const m01 = r0 === r1;\n  const m02 = r0 === r2;\n  // if we have 3 of a kind\n  if (m01 && m02) {\n    switch (r0) {\n      case SO.JACKPOT:\n        return 1666 * bet;\n      case SO.SEVEN:\n        return 300 * bet;\n      case SO.TRIPLE_BAR:\n        return 100 * bet;\n      case SO.DOUBLE_BAR:\n        return 50 * bet;\n      case SO.BAR:\n        return 25 * bet;\n      case SO.CHERRY:\n        return 12 * bet;\n      default:\n        return 0;\n    }\n  } else if (bars.includes(r0) && bars.includes(r1) && bars.includes(r2)) {\n    // if we have 3 of any bar\n    return 12 * bet;\n  } else if (fReel.includes(SO.CHERRY, fReel.indexOf(SO.CHERRY) + 1)) {\n    // if we have 2 cherries\n    return 6 * bet;\n  } else if (fReel.includes(SO.CHERRY)) {\n    // if we have 1 cherry\n    return 3 * bet;\n  }\n  return 0;\n};\n\nexport default {\n  pullHandle,\n  getPayout,\n};\n","import { Color } from '@material-ui/core';\n\n// --------------------     blackjack     -------------------- //\nexport enum GameFunctions {\n  NEW_GAME = 'New Game',\n  FINISH_BETTING = 'Finish Betting',\n  STAY = 'Stay',\n  HIT = 'Hit',\n  DOUBLE = 'Double',\n  SPLIT = 'Split',\n}\n\nexport interface DBBlackjack {\n  gameFunctions: string[];\n  hasFunctions: boolean;\n  hideHands: boolean;\n}\n\n// --------------------     connect4     -------------------- //\nexport enum C4Turn {\n  EMPTY = 0,\n  RED = 1,\n  BLACK = 2,\n}\nexport interface DBConnect4 {\n  board: number[][];\n  winner?: number;\n  line: [number | undefined, [number, number][] | undefined, [number, number][] | undefined];\n  turn: C4Turn;\n}\n\n// --------------------     dnd     -------------------- //\nexport interface Briefcase {\n  on: boolean;\n  loc: number;\n  val: number;\n}\nexport interface DBDND {\n  board: Briefcase[];\n  turn: number;\n  playerChoice?: Briefcase;\n  casesToOpen: number;\n  sum: number;\n  numCases: number;\n  offer: number;\n  dndOpen: boolean;\n  isOver: boolean;\n}\nexport const briefcasesToOpen = 6;\n\n// --------------------     git     -------------------- //\nexport type BranchPrefixes = 'chores' | 'epics' | 'features' | 'fixes';\nexport type CasePreferences = 'snake_case' | 'kebab-case' | 'camelCase' | 'No Changes';\n\nexport interface DBGit {\n  storyID: string;\n  branchMessage: string;\n  branchPrefix: BranchPrefixes;\n  casePreference: CasePreferences;\n  commitPrefix: boolean;\n}\n\n// --------------------     players     -------------------- //\nexport interface DBCard {\n  name: string;\n  suit: string;\n  weight: number;\n}\nexport interface DBHand {\n  weight?: number;\n  soft?: boolean;\n  cards: DBCard[];\n}\nexport interface DBPlayer {\n  hands: DBHand[];\n  id: number;\n  isBot: boolean;\n  money: number;\n  status: string;\n  name: string;\n  bet: number;\n}\n\n// --------------------     poker     -------------------- //\nexport enum PokerGameFunctions {\n  DISCARD_CARDS = 'Discard Cards',\n  END_TURN = 'End Turn',\n  NEW_GAME = 'New Game',\n  START_GAME = 'Start Game',\n}\nexport interface DBPoker {\n  gameFunctions: PokerGameFunctions[];\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  gameOver: boolean;\n}\n\n// --------------------     slots     -------------------- //\nexport enum DBSlotOptions {\n  EMPTY = ' ',\n  CHERRY = 'C',\n  BAR = '—',\n  DOUBLE_BAR = '=',\n  TRIPLE_BAR = 'Ξ',\n  SEVEN = '7',\n  JACKPOT = 'J',\n}\nexport type DBSlotDisplay = [DBSlotOptions, DBSlotOptions, DBSlotOptions];\n\n// --------------------     theme     -------------------- //\nexport interface DBUITheme {\n  type: 'light' | 'dark';\n  primary: Color;\n  secondary: Color;\n}\n\n// --------------------     ticTacToe     -------------------- //\nexport interface DBHistoryEntry {\n  board: string[] | undefined[];\n  location?: number;\n}\nexport interface DBTicTacToe {\n  history: DBHistoryEntry[];\n  turn: string;\n  step: number;\n}\n\n// --------------------     turn     -------------------- //\nexport interface DBTurn {\n  player: number;\n  hand: number;\n}\n\n// --------------------     yahtzee     -------------------- //\nexport type Dice = 0 | 1 | 2 | 3 | 4 | 5 | 6;\nexport interface DBYahtzee {\n  roll: Dice;\n  values: Dice[];\n  saved: Dice[];\n  turn: number;\n  showScoreButtons: boolean;\n  hasScored: boolean;\n  topScores: number[];\n  bottomScores: number[];\n  scores: number[];\n}\n\n// --------------------     z-root     -------------------- //\nexport interface DBRootState {\n  blackjack: DBBlackjack;\n  connect4: DBConnect4;\n  dnd: DBDND;\n  git: DBGit;\n  gqlToken: string;\n  players: DBPlayer[];\n  poker: DBPoker;\n  theme: DBUITheme;\n  ticTacToe: DBTicTacToe;\n  turn: DBTurn;\n  yahtzee: DBYahtzee;\n  slots: DBSlotDisplay[];\n}\n","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst containerStyles: React.CSSProperties = {\n  display: 'block',\n  margin: 'auto',\n  marginTop: 40,\n};\n\nconst LoadingSpinner = React.memo(() => (\n  <CircularProgress size={100} style={containerStyles} title=\"Loading Spinner\" />\n));\n\nexport default LoadingSpinner;\n","import cyan from '@material-ui/core/colors/cyan';\nimport deepOrange from '@material-ui/core/colors/deepOrange';\nimport { pullHandle } from '../apis/SlotMachine';\n\nimport {\n  DBGit, DBPlayer, DBBlackjack, GameFunctions,\n  DBUITheme, DBTurn, DBRootState, DBSlotDisplay,\n  DBTicTacToe, DBConnect4, C4Turn, DBYahtzee, DBDND,\n  briefcasesToOpen, Briefcase, PokerGameFunctions, DBPoker,\n} from './types';\n\n// --------------------     helpers     -------------------- //\n// blackjack\nexport const newBlackjackGame = (): DBBlackjack => ({\n  gameFunctions: [GameFunctions.FINISH_BETTING],\n  hasFunctions: false,\n  hideHands: true,\n});\n// connect4\nconst NEW_BOARD = [\n  [0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0],\n];\nexport const newConnect4Game = (): DBConnect4 => ({\n  board: NEW_BOARD.reduce(\n    (acc: number[][], row) => {\n      acc.push([...row]);\n      return acc;\n    },\n    [],\n  ),\n  winner: undefined,\n  line: [undefined, undefined, undefined],\n  turn: C4Turn.RED,\n});\n\n// dnd\nconst getNewState = (): DBDND => ({\n  board: [\n    { val: 1, loc: 1, on: true }, { val: 2, loc: 2, on: true }, { val: 5, loc: 3, on: true },\n    { val: 10, loc: 4, on: true }, { val: 25, loc: 5, on: true }, { val: 50, loc: 6, on: true },\n    { val: 75, loc: 7, on: true }, { val: 100, loc: 8, on: true }, { val: 200, loc: 9, on: true },\n    { val: 300, loc: 10, on: true }, { val: 400, loc: 11, on: true }, { val: 500, loc: 12, on: true },\n    { val: 750, loc: 13, on: true }, { val: 1000, loc: 14, on: true }, { val: 5000, loc: 15, on: true },\n    { val: 10000, loc: 16, on: true }, { val: 25000, loc: 17, on: true }, { val: 50000, loc: 18, on: true },\n    { val: 75000, loc: 19, on: true }, { val: 100000, loc: 20, on: true }, { val: 200000, loc: 21, on: true },\n    { val: 300000, loc: 22, on: true }, { val: 400000, loc: 23, on: true }, { val: 500000, loc: 24, on: true },\n    { val: 750000, loc: 25, on: true }, { val: 1000000, loc: 26, on: true },\n  ],\n  turn: 1,\n  playerChoice: undefined,\n  casesToOpen: briefcasesToOpen,\n  sum: 0,\n  numCases: 0,\n  offer: 0,\n  dndOpen: false,\n  isOver: false,\n});\n/** function that takes an array and shuffles it's elements */\nconst shuffle = (arr: Briefcase[]): void => {\n  // shuffle values of briefcases\n  for (let i = 0; i < 100; i += 1) {\n    // get to random briefcases\n    const j = Math.floor(Math.random() * arr.length);\n    const k = Math.floor(Math.random() * arr.length);\n    // swap the briefcases\n    const temp = arr[j].loc;\n    arr[j].loc = arr[k].loc;\n    arr[k].loc = temp;\n  }\n};\n/** function to get a new game state */\nexport const newDNDGame = (): DBDND => {\n  const state = getNewState();\n  // mix up board\n  shuffle(state.board);\n  // set all flags to un-touched\n  state.board.forEach((bc) => {\n    // get sum and count of cases remaining\n    state.sum += bc.val;\n    state.numCases += 1;\n    // reset opened flag\n    bc.on = true;\n  });\n  // sort function for the briefcases\n  state.board.sort((a, b) => a.loc - b.loc);\n  return state;\n};\n\n// player\nexport const newPlayer = (id: number, name = 'Bot', isBot = true): DBPlayer => ({\n  id,\n  name,\n  isBot,\n  status: '',\n  money: 100,\n  bet: 5,\n  hands: [],\n});\n\n// poker\n/** function to generate the state of a new game */\nexport const newPokerGameState = (): DBPoker => ({\n  gameFunctions: [PokerGameFunctions.START_GAME],\n  cardsToDiscard: [],\n  hideHands: true,\n  gameOver: false,\n});\n\n// tic-tac-toe\nexport const X = 'X';\nexport const O = 'O';\nexport const EMPTY = undefined;\nexport const newTicTacToe = (): DBTicTacToe => ({\n  history: [{ board: Array(9).fill(EMPTY) }],\n  turn: X,\n  step: 0,\n});\n\n// yahtzee\nexport const newYahtzee = (): Omit<DBYahtzee, 'scores'> => ({\n  roll: 0,\n  values: [0, 0, 0, 0, 0],\n  saved: [],\n  turn: 0,\n  showScoreButtons: false,\n  hasScored: false,\n  topScores: [-1, -1, -1, -1, -1, -1],\n  bottomScores: [-1, -1, -1, -1, -1, -1, -1],\n});\n\n// --------------------     initial states     -------------------- //\nconst blackjack = newBlackjackGame();\nconst connect4 = newConnect4Game();\nconst dnd = newDNDGame();\nconst git: DBGit = {\n  storyID: '',\n  branchMessage: '',\n  branchPrefix: 'features',\n  casePreference: 'snake_case',\n  commitPrefix: true,\n};\nconst gqlToken = '';\nconst players: DBPlayer[] = [\n  newPlayer(1, 'Ken', false),\n  newPlayer(2),\n  newPlayer(3),\n  newPlayer(4),\n  newPlayer(5),\n  newPlayer(6),\n  newPlayer(0, 'Dealer', true),\n];\nconst poker = newPokerGameState();\nconst slots: DBSlotDisplay[] = pullHandle();\nconst theme: DBUITheme = {\n  primary: cyan,\n  secondary: deepOrange,\n  type: 'dark',\n};\nconst ticTacToe: DBTicTacToe = newTicTacToe();\nconst turn: DBTurn = { player: 0, hand: 0 };\nconst yahtzee: DBYahtzee = { ...newYahtzee(), scores: []};\n\n// --------------------     export     -------------------- //\nexport default {\n  blackjack,\n  connect4,\n  dnd,\n  git,\n  gqlToken,\n  players,\n  poker,\n  slots,\n  theme,\n  ticTacToe,\n  turn,\n  yahtzee,\n} as DBRootState;\n","type ForEachCallback<T> = (item: T, index: number, array: T[]) => Promise<void>;\nasync function asyncForEach<T>(array: T[], callback: ForEachCallback<T>): Promise<void> {\n  for (let index = 0; index < array.length; index += 1) {\n    // eslint-disable-next-line no-await-in-loop\n    await callback(array[index], index, array);\n  }\n}\n\nexport default asyncForEach;\n","import { Action } from 'redux';\nimport { DBGit, CasePreferences, BranchPrefixes } from '../types';\nimport initialState from '../initialState';\n\n// --------------------     Actions     -------------------- //\nconst SET_KEY = '@resume/git/SET_KEY';\nconst SET_BRANCH_MESSAGE = '@resume/git/SET_BRANCH_MESSAGE';\nconst SET_BRANCH_PREFIX = '@resume/git/SET_BRANCH_PREFIX';\nconst SET_CASE_PREFERENCE = '@resume/git/SET_CASE_PREFERENCE';\nconst SET_COMMIT_PREFIX = '@resume/git/SET_COMMIT_PREFIX';\n\n// --------------------     Action Creators     -------------------- //\ninterface SetKeyAction extends Action<typeof SET_KEY> { storyID: string }\n/** update the story id in Git DB */\nexport function setKey(storyID = ''): SetKeyAction {\n  return { type: SET_KEY, storyID };\n}\n\ninterface SetBranchMessageAction extends Action<typeof SET_BRANCH_MESSAGE> { branchMessage: string }\n/** update the branch message in Git DB */\nexport function setBranchMessage(branchMessage = ''): SetBranchMessageAction {\n  return { type: SET_BRANCH_MESSAGE, branchMessage };\n}\n\ninterface SetBranchPrefixAction extends Action<typeof SET_BRANCH_PREFIX> { branchPrefix: BranchPrefixes }\n/** update the branch prefix in Git DB */\nexport function setBranchPrefix(branchPrefix = 'features' as BranchPrefixes): SetBranchPrefixAction {\n  return { type: SET_BRANCH_PREFIX, branchPrefix };\n}\n\ninterface SetCasePreferenceAction extends Action<typeof SET_CASE_PREFERENCE> { casePreference: CasePreferences }\n/** update the casing of the branch in Git DB */\nexport function setCasePreference(casePreference = 'No Changes' as CasePreferences): SetCasePreferenceAction {\n  return { type: SET_CASE_PREFERENCE, casePreference };\n}\n\ninterface SetCommitPrefixAction extends Action<typeof SET_COMMIT_PREFIX> { commitPrefix: boolean }\n/** update commit text in Git DB */\nexport function setCommitPrefix(isSet = true): SetCommitPrefixAction {\n  return { type: SET_COMMIT_PREFIX, commitPrefix: isSet };\n}\n\n// --------------------     Reducers     -------------------- //\ntype GitActions = SetKeyAction | SetBranchMessageAction | SetBranchPrefixAction | SetCasePreferenceAction | SetCommitPrefixAction;\nexport default function reducer(state: DBGit = initialState.git, action: GitActions): DBGit {\n  switch (action.type) {\n    case SET_KEY:\n      return { ...state, ...{ storyID: action.storyID }};\n    case SET_BRANCH_PREFIX:\n      return { ...state, ...{ branchPrefix: action.branchPrefix }};\n    case SET_BRANCH_MESSAGE:\n      return { ...state, ...{ branchMessage: action.branchMessage }};\n    case SET_CASE_PREFERENCE:\n      return { ...state, ...{ casePreference: action.casePreference }};\n    case SET_COMMIT_PREFIX:\n      return { ...state, ...{ commitPrefix: action.commitPrefix }};\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n","import { Action, Dispatch } from 'redux';\nimport { DBPoker, DBPlayer, PokerGameFunctions as PGF } from '../types';\nimport initialState, { newPokerGameState } from '../initialState';\nimport { resetTurn, incrPlayerTurn, ta } from './turn';\nimport { resetStatus, PlayerAction } from './players';\n\n// --------------------     Actions     -------------------- //\nconst UPDATE_DISCARD_CARDS = 'casino/poker/UPDATE_DISCARD_CARDS';\nexport enum pa {\n  NEW_GAME = 'casino/poker/NEW_GAME',\n  START_GAME = 'casino/poker/START_GAME',\n  END_TURN = 'casino/poker/END_TURN',\n  END_GAME = 'casino/poker/END_GAME',\n  DISCARD_CARDS = 'casino/poker/DISCARD_CARDS',\n}\nconst {\n  NEW_GAME, START_GAME, END_TURN, END_GAME,\n  DISCARD_CARDS,\n} = pa;\n\n// --------------------     Action Creators     -------------------- //\n/** start a new game in Poker DB */\nconst newGame = (): Action<typeof NEW_GAME> => ({ type: NEW_GAME });\n/** deal cards and begin play (after betting) in Poker DB */\nexport const startPokerGame = (): Action<typeof START_GAME> => ({ type: START_GAME });\n/** move to the next player in Poker DB */\nconst endTurn = (): Action<typeof END_TURN> => ({ type: END_TURN });\n/** end the game by updating a flag in Poker DB */\nexport const endPokerGame = (): Action<typeof END_GAME> => ({ type: END_GAME });\n/** reset cards to discard back to empty in Poker DB */\nexport const discardCards = (): Action<typeof DISCARD_CARDS> => ({ type: DISCARD_CARDS });\n\nexport interface UpdateCardsToDiscardAction extends Action<typeof UPDATE_DISCARD_CARDS> { cardsToDiscard: number[] }\n/** mark a card for discard in Poker DB */\nexport const updateCardsToDiscard = (cardsToDiscard: number[]): UpdateCardsToDiscardAction => ({ type: UPDATE_DISCARD_CARDS, cardsToDiscard });\n\n// --------------------     Reducers     -------------------- //\ntype PokerActions = Action<pa> | UpdateCardsToDiscardAction;\nexport default function reducer(state: DBPoker = initialState.poker, action: PokerActions): DBPoker {\n  switch (action.type) {\n    case NEW_GAME:\n      return { ...newPokerGameState() };\n    case START_GAME:\n      return {\n        ...state,\n        gameFunctions: [PGF.DISCARD_CARDS],\n        hideHands: false,\n      };\n    case END_TURN:\n      return {\n        ...state,\n        gameFunctions: [PGF.DISCARD_CARDS],\n        cardsToDiscard: [],\n      };\n    case END_GAME:\n      return {\n        ...state,\n        gameFunctions: [PGF.NEW_GAME],\n        gameOver: true,\n      };\n    case DISCARD_CARDS:\n      return {\n        ...state,\n        gameFunctions: [PGF.END_TURN],\n        cardsToDiscard: [],\n      };\n    case UPDATE_DISCARD_CARDS:\n      return {\n        ...state,\n        cardsToDiscard: action.cardsToDiscard,\n      };\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n/** start a new game in Poker DB */\nexport function newPokerGame(players: DBPlayer[]) {\n  return (dispatch: Dispatch): Promise<(Action<ta.RESET> | Action<pa.NEW_GAME> | PlayerAction)[]> => {\n    const promises: (Action<ta.RESET> | Action<pa.NEW_GAME> | PlayerAction)[] = [];\n    promises.push(dispatch(newGame()));\n    promises.push(dispatch(resetTurn()));\n    players.forEach((player) => promises.push(dispatch(resetStatus(player.id))));\n    return Promise.all(promises);\n  };\n}\n\n/** move to the next player in Poker DB and Turn DB */\nexport function endPokerTurn() {\n  return async (dispatch: Dispatch): Promise<void> => {\n    await dispatch(endTurn());\n    await dispatch(incrPlayerTurn());\n  };\n}\n","import { Action } from 'redux';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport deepOrange from '@material-ui/core/colors/deepOrange';\nimport cyan from '@material-ui/core/colors/cyan';\n\nimport { DBUITheme } from '../types';\nimport initialState from '../initialState';\n\n// --------------------     Actions     -------------------- //\nenum ta {\n  DARK_THEME = 'resume/theme/DARK_THEME',\n  LIGHT_THEME = 'resume/theme/LIGHT_THEME',\n}\nconst { DARK_THEME, LIGHT_THEME } = ta;\n\n// --------------------     Action Creators     -------------------- //\n/** update to dark theme in Theme DB */\nexport const displayDarkTheme = (): Action<typeof DARK_THEME> => ({ type: DARK_THEME });\n/** update to light theme in Theme DB */\nexport const displayLightTheme = (): Action<typeof LIGHT_THEME> => ({ type: LIGHT_THEME });\n\n// --------------------     Reducers     -------------------- //\nexport default function reducer(state: DBUITheme = initialState.theme, action: Action<ta>): DBUITheme {\n  switch (action.type) {\n    case DARK_THEME:\n      return { ...state, ...{ type: 'dark', primary: cyan, secondary: deepOrange }};\n    case LIGHT_THEME:\n      return { ...state, ...{ type: 'light', primary: blueGrey, secondary: deepOrange }};\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n","import { Dispatch, Action } from 'redux';\nimport {\n  DBBlackjack, DBPlayer, DBHand, DBTurn,\n} from '../types';\nimport initialState, { newBlackjackGame } from '../initialState';\nimport {\n  resetStatus,\n  splitHand as pSplitHand,\n  drawCard,\n  WeighFunc,\n  updateBet,\n} from './players';\nimport {\n  resetTurn, incrHandTurn, incrPlayerTurn, ta,\n} from './turn';\n\n// --------------------     Actions     -------------------- //\nconst UPDATE_GAME_FUNCTIONS = '@casino/blackjack/UPDATE_GAME_FUNCTIONS';\nconst UPDATE_HIDE_HANDS = '@casino/blackjack/UPDATE_HIDE_HANDS';\nconst UPDATE_HAS_FUNCTIONS = '@casino/blackjack/UPDATE_HAS_FUNCTIONS';\n\n// -------------------- Action Creators     -------------------- //\ninterface UpdateGameFunctionsAction extends Action<typeof UPDATE_GAME_FUNCTIONS> { gameFunctions: string[] }\n/** update gameFunctions in Blackjack DB */\nexport const updateGameFunctions = (gameFunctions: string[]): UpdateGameFunctionsAction => ({ type: UPDATE_GAME_FUNCTIONS, gameFunctions });\n\ninterface UpdateHideHandsAction extends Action<typeof UPDATE_HIDE_HANDS> { hideHands: boolean }\n/** update hideHands in Blackjack DB */\nexport const updateHideHands = (hideHands: boolean): UpdateHideHandsAction => ({ type: UPDATE_HIDE_HANDS, hideHands });\n\ninterface UpdateHasFunctionsAction extends Action<typeof UPDATE_HAS_FUNCTIONS> { hasFunctions: boolean }\n/** update hasFunctions in Blackjack DB */\nexport const updateHasFunctions = (hasFunctions: boolean): UpdateHasFunctionsAction => ({ type: UPDATE_HAS_FUNCTIONS, hasFunctions });\n\n// --------------------     Reducers     -------------------- //\ntype BlackjackAction = UpdateGameFunctionsAction | UpdateHideHandsAction | UpdateHasFunctionsAction;\nexport default function reducer(state: DBBlackjack = initialState.blackjack, action: BlackjackAction): DBBlackjack {\n  switch (action.type) {\n    case UPDATE_GAME_FUNCTIONS:\n      return { ...state, gameFunctions: action.gameFunctions };\n    case UPDATE_HIDE_HANDS:\n      return { ...state, hideHands: action.hideHands };\n    case UPDATE_HAS_FUNCTIONS:\n      return { ...state, hasFunctions: action.hasFunctions };\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n/** start a new game in Blackjack DB */\nexport function setNewGame(players: DBPlayer[]) {\n  return (dispatch: Dispatch): Promise<(UpdateGameFunctionsAction | UpdateHideHandsAction | UpdateHasFunctionsAction | Action<ta.RESET>)[]> => {\n    const { gameFunctions, hideHands, hasFunctions } = newBlackjackGame();\n    const promises = [];\n    promises.push(dispatch(updateGameFunctions(gameFunctions)));\n    promises.push(dispatch(updateHasFunctions(hasFunctions)));\n    promises.push(dispatch(updateHideHands(hideHands)));\n    promises.push(dispatch(resetTurn()));\n    players.forEach((player) => promises.push(dispatch(resetStatus(player.id))));\n    return Promise.all(promises);\n  };\n}\n/** split hands of provided player/hand in Blackjack DB */\nexport function splitHand(hands: DBHand[], id: number, hNum: number, weigh: WeighFunc) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return async (dispatch: Dispatch<any>): Promise<void> => {\n    await dispatch(pSplitHand(hands, id, hNum, weigh));\n    await dispatch(updateHasFunctions(false));\n  };\n}\n/** get a new card for turn hand in Blackjack DB */\nexport function hitHand(hands: DBHand[], id: number, hNum: number, weigh: WeighFunc) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return async (dispatch: Dispatch<any>): Promise<void> => {\n    await dispatch(drawCard(hands, id, hNum, 1, weigh));\n    await dispatch(updateHasFunctions(false));\n  };\n}\n/** go to the next turn in Blackjack DB */\nexport function stayHand(readyForNextPlayer: boolean) {\n  return async (dispatch: Dispatch): Promise<void> => {\n    readyForNextPlayer\n      ? await dispatch(incrHandTurn())\n      : await dispatch(incrPlayerTurn());\n    await dispatch(updateHasFunctions(false));\n  };\n}\n/** double your bet and get 1 card in Blackjack DB */\nexport function doubleHand(player: DBPlayer, turn: DBTurn, weigh: WeighFunc) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return async (dispatch: Dispatch<any>): Promise<void> => {\n    const { id, bet, hands } = player;\n    const lastHand = hands.length - 1;\n\n    await dispatch(updateHasFunctions(true));\n    await dispatch(updateBet(id, bet * 2));\n    await dispatch(drawCard(hands, id, turn.hand, 1, weigh));\n    await dispatch(stayHand(turn.hand < lastHand));\n  };\n}\n","import { Action } from 'redux';\nimport { C4Turn, DBConnect4 } from '../types';\nimport initialState, { newConnect4Game } from '../initialState';\n\n// --------------------     Actions     -------------------- //\nconst NEW_GAME = '@casino/ticTacToe/NEW_GAME';\nconst UPDATE_TURN = '@casino/ticTacToe/UPDATE_TURN';\nconst UPDATE_EVAL = '@casino/ticTacToe/UPDATE_EVAL';\n\n// -------------------- Action Creators     -------------------- //\ntype NewGameAction = Action<typeof NEW_GAME>;\n/** start a new game in Connect4 DB */\nexport const newGame = (): NewGameAction => ({ type: NEW_GAME });\n\ninterface UpdateTurnAction extends Action<typeof UPDATE_TURN> { turn: C4Turn }\n/** change player turn/color in Connect4 DB */\nexport const updateTurn = (turn: C4Turn): UpdateTurnAction => ({ type: UPDATE_TURN, turn });\n\ninterface UpdateEvalAction extends Action<typeof UPDATE_EVAL> { winner: number; board: number[][] }\n/** update a winner and the board in Connect4 DB */\nexport const updateEval = (winner: number, board: number[][]): UpdateEvalAction => ({ type: UPDATE_EVAL, winner, board });\n\n// --------------------     Reducers     -------------------- //\ntype Connect4Actions = NewGameAction | UpdateTurnAction | UpdateEvalAction;\nexport default function reducer(state: DBConnect4 = initialState.connect4, action: Connect4Actions): DBConnect4 {\n  switch (action.type) {\n    case NEW_GAME:\n      return newConnect4Game();\n    case UPDATE_TURN:\n      return { ...state, turn: action.turn };\n    case UPDATE_EVAL:\n      return { ...state, winner: action.winner, board: action.board };\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n","import { Action, Dispatch } from 'redux';\nimport { DBDND, Briefcase } from '../types';\nimport initialState, { newDNDGame } from '../initialState';\nimport { payout, PlayerAction } from './players';\n\n// --------------------     Actions     -------------------- //\nconst NEW_GAME = '@casino/dnd/NEW_GAME';\nconst PLAYER_CHOICE = '@casino/dnd/PLAYER_CHOICE';\nconst OPEN_CASE = '@casino/dnd/OPEN_CASE';\nconst OPEN_OFFER = '@casino/dnd/OPEN_OFFER';\nconst NO_DEAL = '@casino/dnd/NO_DEAL';\nconst FINISH_GAME = '@casino/dnd/FINISH_GAME';\n\n// --------------------     Action Creators     -------------------- //\ntype NewGameAction = Action<typeof NEW_GAME>;\n/** set to a new game in Deal or No Deal DB */\nexport const newGame = (): NewGameAction => ({ type: NEW_GAME });\n\ninterface UpdatePlayerChoiceAction extends Action<typeof PLAYER_CHOICE> { playerChoice: Briefcase }\n/** update the player's case choice in Deal or No Deal DB */\nconst updatePlayerChoice = (playerChoice: Briefcase): UpdatePlayerChoiceAction => ({ type: PLAYER_CHOICE, playerChoice });\n\ninterface SetOpenCaseAction extends Action<typeof OPEN_CASE> {\n  board: Briefcase[];\n  sum: number;\n  numCases: number;\n  casesToOpen: number;\n}\n/** open a case and update game variables in Deal or No Deal DB */\nexport const setOpenCase = (board: Briefcase[], sum: number, numCases: number, casesToOpen: number): SetOpenCaseAction => ({\n  type: OPEN_CASE, board, sum, numCases, casesToOpen,\n});\n\ninterface SetOpenOfferAction extends Action<typeof OPEN_OFFER> { offer: number; casesToOpen: number }\n/** display the offer from the banker and open modal in Deal or No Deal DB */\nexport const setOpenOffer = (offer: number, casesToOpen: number): SetOpenOfferAction => ({ type: OPEN_OFFER, offer, casesToOpen });\n\ninterface SetNoDealAction extends Action<typeof NO_DEAL> { turn: number }\n/** reject the offer and continue playing in Deal or No Deal DB */\nexport const setNoDeal = (turn: number): SetNoDealAction => ({ type: NO_DEAL, turn });\n\ninterface FinishGameAction extends Action<typeof FINISH_GAME> { offer: number }\n/** finish the game in Deal or No Deal DB */\nconst finishGame = (offer: number): FinishGameAction => ({ type: FINISH_GAME, offer });\n\n// --------------------     Reducers     -------------------- //\ntype DNDActions = NewGameAction | UpdatePlayerChoiceAction | SetOpenCaseAction | SetOpenOfferAction | SetNoDealAction | FinishGameAction;\nexport default function reducer(state: DBDND = initialState.dnd, action: DNDActions): DBDND {\n  switch (action.type) {\n    case NEW_GAME:\n      return newDNDGame();\n    case PLAYER_CHOICE:\n      return { ...state, playerChoice: action.playerChoice };\n    case OPEN_CASE:\n      return {\n        ...state,\n        board: action.board,\n        sum: action.sum,\n        numCases: action.numCases,\n        casesToOpen: action.casesToOpen,\n      };\n    case OPEN_OFFER:\n      return {\n        ...state, offer: action.offer, casesToOpen: action.casesToOpen, dndOpen: true,\n      };\n    case NO_DEAL:\n      return { ...state, dndOpen: false, turn: action.turn + 1 };\n    case FINISH_GAME:\n      return {\n        ...state, dndOpen: false, isOver: true, offer: action.offer,\n      };\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n/** charge user to play and set player choice\n   * NOTE: avg (Expected win value) is 131477.62 / 1k = $132 */\nexport function setPlayerChoice(id: number, playerChoice: Briefcase) {\n  return (dispatch: Dispatch): Promise<[UpdatePlayerChoiceAction, PlayerAction]> => {\n    const promise1 = dispatch(updatePlayerChoice(playerChoice));\n    const promise2 = dispatch(payout(id, 'lose', -100));\n    return Promise.all([promise1, promise2]);\n  };\n}\n\n/** function to finish the game\n   * NOTE: payout to user offer / 1k */\nexport function setFinishGame(id: number, offer: number) {\n  return (dispatch: Dispatch): Promise<[PlayerAction, FinishGameAction]> => {\n    const promise1 = dispatch(payout(id, 'win', Math.round(offer / 1000)));\n    const promise2 = dispatch(finishGame(offer));\n    return Promise.all([promise1, promise2]);\n  };\n}\n","import { Action } from 'redux';\nimport initialState from '../initialState';\n\n// --------------------     Actions     -------------------- //\nconst SET_TOKEN = '@resume/graphql/SET_TOKEN';\n\n// --------------------     Action Creators     -------------------- //\ninterface SetTokenAction extends Action<typeof SET_TOKEN> { gqlToken: string }\nexport const setToken = (gqlToken = ''): SetTokenAction => ({ type: SET_TOKEN, gqlToken });\n\n// --------------------     Reducers     -------------------- //\ntype GQLActions = SetTokenAction;\nexport default function reducer(state: string = initialState.gqlToken, action: GQLActions): string {\n  switch (action.type) {\n    case SET_TOKEN:\n      return action.gqlToken;\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n","import { Dispatch, Action } from 'redux';\nimport { DBSlotDisplay } from '../types';\nimport initialState from '../initialState';\nimport SlotMachine from '../../apis/SlotMachine';\nimport { payout, PlayerAction } from './players';\n\n// --------------------     Actions     -------------------- //\nconst UPDATE = 'casino/slots/UPDATE';\n\n// -------------------- Action Creators     -------------------- //\ninterface UpdateSlotsAction extends Action<typeof UPDATE> { reel: DBSlotDisplay[] }\n/** update the slot reel in Slots DB */\nexport const updateSlots = (reel: DBSlotDisplay[]): UpdateSlotsAction => ({ type: UPDATE, reel });\n\n// --------------------     Reducers     -------------------- //\ntype SlotsActions = UpdateSlotsAction;\nexport default function reducer(state: DBSlotDisplay[] = initialState.slots, action: SlotsActions): DBSlotDisplay[] {\n  switch (action.type) {\n    case UPDATE:\n      return [...action.reel];\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n/** play the slots game, updating the slots reel in Slots DB and player/dealer money in Player DB */\nexport function updateDBSlotMachine(id: number, dealerId: number, bet: number) {\n  return (dispatch: Dispatch): Promise<[UpdateSlotsAction, PlayerAction, PlayerAction]> => {\n    const reel = SlotMachine.pullHandle();\n    const exchange = SlotMachine.getPayout(reel, bet) - bet;\n\n    const promise1 = dispatch(updateSlots(reel));\n    const promise2 = dispatch(payout(id, 'win', exchange));\n    const promise3 = dispatch(payout(dealerId, 'win', -exchange));\n    return Promise.all([promise1, promise2, promise3]);\n  };\n}\n","import { Action } from 'redux';\nimport { DBTicTacToe } from '../types';\nimport initialState, { newTicTacToe } from '../initialState';\n\n// --------------------     Actions     -------------------- //\nconst SET = 'casino/ticTacToe/SET';\nconst NEW_GAME = 'casino/ticTacToe/NEW_GAME';\n\n// -------------------- Action Creators     -------------------- //\ninterface PlayTurnAction extends Action<typeof SET> { turn: DBTicTacToe }\n/** update game variables in TicTacToe DB */\nexport const playTurn = (turn: DBTicTacToe): PlayTurnAction => ({ type: SET, turn });\n\ntype NewGameAction = Action<typeof NEW_GAME>\n/** reset game variables in TicTacToe DB */\nexport const newGame = (): NewGameAction => ({ type: NEW_GAME });\n\n// --------------------     Reducers     -------------------- //\ntype TicTacToeActions = PlayTurnAction | NewGameAction;\nexport default function reducer(state: DBTicTacToe = initialState.ticTacToe, action: TicTacToeActions): DBTicTacToe {\n  switch (action.type) {\n    case SET:\n      return action.turn;\n    case NEW_GAME:\n      return newTicTacToe();\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n","import { Action } from 'redux';\nimport initialState, { newYahtzee } from '../initialState';\nimport { DBYahtzee, Dice } from '../types';\n\n// --------------------     Actions     -------------------- //\nconst ADD = 'casino/yahtzee/SCORE';\nconst NEW_GAME = 'casino/yahtzee/NEW_GAME';\nconst DICE_CLICK = 'casino/yahtzee/DICE_CLICK';\nconst NEXT_ROLL = 'casino/yahtzee/NEXT_ROLL';\nconst UPDATE_TOP = 'casino/yahtzee/UPDATE_TOP';\nconst UPDATE_BOTTOM = 'casino/yahtzee/UPDATE_BOTTOM';\nconst UPDATE_ROLL = 'casino/yahtzee/UPDATE_ROLL';\n\n// -------------------- Action Creators     -------------------- //\ninterface AddScoreAction extends Action<typeof ADD> { score: number }\n/** add score to score table in Yahtzee DB */\nexport const addScore = (score: number): AddScoreAction => ({ type: ADD, score });\n\ntype NewGameAction = Action<typeof NEW_GAME>\n/** reset game in Yahtzee DB */\nexport const newGame = (): NewGameAction => ({ type: NEW_GAME });\n\ninterface DiceClickAction extends Action<typeof DICE_CLICK> { values: Dice[]; saved: Dice[] }\n/** save a dice in Yahtzee DB */\nexport const diceClick = (values: Dice[], saved: Dice[]): DiceClickAction => ({ type: DICE_CLICK, values, saved });\n\ntype NextRollAction = Action<typeof NEXT_ROLL>\n/** move to the next roll in Yahtzee DB */\nexport const nextRoll = (): NextRollAction => ({ type: NEXT_ROLL });\n\ninterface UpdateTopAction extends Action<typeof UPDATE_TOP> { topScores: number[] }\n/** update top scores in Yahtzee DB */\nexport const updateTop = (topScores: number[]): UpdateTopAction => ({ type: UPDATE_TOP, topScores });\n\ninterface UpdateBottomAction extends Action<typeof UPDATE_BOTTOM> { bottomScores: number[] }\n/** update bottom scores in Yahtzee DB */\nexport const updateBottom = (bottomScores: number[]): UpdateBottomAction => ({ type: UPDATE_BOTTOM, bottomScores });\n\ninterface UpdateRollAction extends Action<typeof UPDATE_ROLL> {\n  payload: { values: Dice[]; saved: Dice[]; roll: Dice; showScoreButtons: boolean };\n}\n/** new roll in Yahtzee DB */\nexport const updateRoll = (values: Dice[], saved: Dice[], roll: Dice, showScoreButtons = false): UpdateRollAction => ({\n  type: UPDATE_ROLL,\n  payload: {\n    values, saved, roll, showScoreButtons,\n  },\n});\n\n// --------------------     Reducers     -------------------- //\ntype YahtzeeActions = AddScoreAction | NewGameAction | DiceClickAction | NextRollAction | UpdateTopAction | UpdateBottomAction | UpdateRollAction\nexport default function reducer(state: DBYahtzee = initialState.yahtzee, action: YahtzeeActions): DBYahtzee {\n  switch (action.type) {\n    case ADD:\n      return { ...state, scores: [...state.scores, action.score]};\n    case NEW_GAME:\n      return { ...newYahtzee(), scores: state.scores };\n    case DICE_CLICK:\n      return { ...state, values: [...action.values], saved: [...action.saved]};\n    case UPDATE_TOP:\n      return {\n        ...state,\n        hasScored: true,\n        showScoreButtons: false,\n        topScores: action.topScores,\n      };\n    case UPDATE_BOTTOM:\n      return {\n        ...state,\n        hasScored: true,\n        showScoreButtons: false,\n        bottomScores: action.bottomScores,\n      };\n    case NEXT_ROLL:\n      return {\n        ...state,\n        ...{\n          roll: 0,\n          values: [0, 0, 0, 0, 0],\n          saved: [],\n          hasScored: false,\n        },\n      };\n    case UPDATE_ROLL:\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n}\n\n// --------------------     Thunks     -------------------- //\n"],"sourceRoot":""}