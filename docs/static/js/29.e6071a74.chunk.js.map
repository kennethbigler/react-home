{"version":3,"sources":["components/common/InfoPopup.jsx","components/games/gametable/Card.jsx","components/games/gametable/Hand.jsx","components/games/gametable/Player.jsx","components/games/gametable/Board.jsx","components/games/gametable/Button.jsx","components/games/gametable/ButtonGroup.jsx","components/games/gametable/index.jsx","components/games/blackjack/Rules.jsx","components/games/blackjack/help/Cell.jsx","components/games/blackjack/help/Row.jsx","components/games/blackjack/help/BlackjackTable.jsx","components/games/blackjack/help/index.jsx","components/games/blackjack/help/Help.jsx","components/games/blackjack/Header.jsx","components/games/blackjack/Blackjack.jsx","components/games/blackjack/index.jsx"],"names":["InfoPopup","props","_useState","useState","_useState2","Object","_Users_kennethbigler_GitHub_react_home_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isOpen","setIsOpen","buttonText","title","children","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_6__","color","onClick","variant","_material_ui_core_Dialog__WEBPACK_IMPORTED_MODULE_2__","onClose","open","maxWidth","fullWidth","_material_ui_core_DialogTitle__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core_DialogContent__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core_DialogActions__WEBPACK_IMPORTED_MODULE_5__","styles","cardFace","backgroundColor","borderRadius","cursor","display","fontWeight","height","margin","padding","width","cardTitle","textAlign","suit","Card","memo","dropped","name","cardColor","red","react_default","style","objectSpread","cardHandler","playerNo","handNo","cardNo","role","Typography","Hand","cardsToDiscard","hand","isBlackJack","isHandTurn","isMultiHand","isPlayerTurn","bold","purple","marginTop","weight","map","cards","card","i","includes","gametable_Card","key","player","minWidth","Player","betHandler","hideHands","turn","hands","length","showSlider","id","isBot","minBet","Math","max","min","money","maxBet","background","cyan","status","green","blueGrey","Slider","onChange","event","value","step","bet","concat","gametable_Hand","Board","players","gametable_Player","Button","func","ButtonGroup","gameFunctions","obj","gametable_Button","GameTable","cardClickHandler","gameOver","played","slice","future","playersToDisplay","passProps","gametable_Board","assign","gametable_ButtonGroup","defaultProps","Rules","Cell","text","otherProps","objectWithoutProperties","stl","TableCell","size","Row","data","TableRow","help_Cell","BlackjackTable","Table","TableHead","colSpan","TableBody","rowSpan","c","help_Row","Help","h","d","teal","s","p","orange","ds","deepPurple","hardTtl","softTtl","pairs","help_BlackjackTable","Header","className","gutterBottom","blackjack_Rules","help","DEALER","weighHand","arguments","undefined","soft","forEach","cardWeight","BlackJack","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getNewGameState","finishBetting","setNewGameRedux","_this$props","turnActions","playerActions","resetTurn","resetStatus","getGameFunctions","stay","hit","double","split","push","setState","_this$props2","_players$turn$player","splitHand","_this$props3","_players$turn$player2","updateBet","_this$props4","lastHand","incrHandTurn","incrPlayerTurn","_this$props5","_players$turn$player3","drawCard","dealHands","_this$props6","Deck","shuffle","num","newHand","newGame","finishGame","_this$props7","dealer","dealerLen","playerStats","house","payout","win","ps","mul","floor","loss","playDealer","_this$props8","_weighHand3","playBot","_assertThisInitialize","assertThisInitialized","_this$props9","n","x","y","console","log","state","prevProps","lp","lt","_this$props10","np","nt","get","_this$props11","_this$state","blackjack_Header","gametable","Component","connect","dispatch","bindActionCreators"],"mappings":"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","file":"static/js/29.e6071a74.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport types from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\n// Parents: Board\n\n/* ========================================\n * Popup\n * ======================================== */\nconst InfoPopup = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const { buttonText, title, children } = props;\n  return (\n    <div>\n      <Button color=\"primary\" onClick={() => { setIsOpen(true); }} variant=\"contained\">\n        {buttonText || title}\n      </Button>\n      <Dialog onClose={() => { setIsOpen(false); }} open={isOpen} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          {title}\n        </DialogTitle>\n        <DialogContent>\n          {children}\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={() => { setIsOpen(false); }}>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nInfoPopup.propTypes = {\n  // types = [array, bool, func, number, object, string, symbol].isRequired\n  children: types.oneOfType([types.arrayOf(types.node), types.node]).isRequired,\n  title: types.oneOfType([types.string, types.element]).isRequired,\n  buttonText: types.oneOfType([types.string, types.element]),\n};\n\nexport default InfoPopup;\n","import React, { memo } from 'react';\nimport types from 'prop-types';\nimport red from '@material-ui/core/colors/red';\nimport { Typography } from '@material-ui/core';\n// Parents: Hand\n\nconst styles = {\n  cardFace: {\n    backgroundColor: 'white',\n    borderRadius: 5,\n    cursor: 'pointer',\n    display: 'inline-block',\n    fontWeight: 'bold',\n    height: 78,\n    margin: 5,\n    padding: 3,\n    width: 50,\n  },\n  cardTitle: { textAlign: 'left' },\n  suit: {\n    margin: 'auto',\n    maxWidth: 30,\n    textAlign: 'center',\n    width: '100%',\n  },\n};\n\n/* --------------------------------------------------\n * Card\n * -------------------------------------------------- */\nconst Card = memo((props) => {\n  const { dropped, suit, name } = props;\n  // handle click to for card\n  const handleClick = () => {\n    const {\n      cardHandler, playerNo, handNo, cardNo,\n    } = props;\n    cardHandler(playerNo, handNo, cardNo);\n  };\n  // checking color based off suits: ♣♦♥♠\n  const cardColor = {\n    color: suit === '♣' || suit === '♠' ? 'black' : red[500],\n    backgroundColor: dropped ? red[100] : 'white',\n  };\n\n  // display in view\n  return (\n    <div style={{ ...styles.cardFace, ...cardColor }} onClick={handleClick} role=\"main\">\n      <div style={styles.cardTitle}>\n        {name + suit}\n      </div>\n      <Typography variant=\"h3\" style={{ ...styles.suit, ...cardColor }}>\n        {suit}\n      </Typography>\n    </div>\n  );\n});\n\nCard.propTypes = {\n  cardHandler: types.func,\n  cardNo: types.number.isRequired,\n  dropped: types.bool,\n  handNo: types.number.isRequired,\n  name: types.string.isRequired,\n  playerNo: types.number.isRequired,\n  suit: types.string.isRequired,\n};\n\nexport default Card;\n","import React from 'react';\nimport types from 'prop-types';\nimport purple from '@material-ui/core/colors/purple';\nimport map from 'lodash/map';\nimport includes from 'lodash/includes';\nimport { Typography } from '@material-ui/core';\nimport Card from './Card';\n// Parents: Player\n\n/* --------------------------------------------------\n * Hand\n * -------------------------------------------------- */\nconst Hand = (props) => {\n  const {\n    cardHandler,\n    cardsToDiscard,\n    hand,\n    handNo,\n    isBlackJack,\n    isHandTurn,\n    isMultiHand,\n    isPlayerTurn,\n    playerNo,\n  } = props;\n\n  const bold = (isHandTurn && isMultiHand && isPlayerTurn)\n    || (!isMultiHand && isPlayerTurn)\n    ? { fontWeight: 'bold', color: purple[700] }\n    : { fontWeight: 'normal' };\n\n  return (\n    <div>\n      <Typography variant=\"h4\" style={{ ...bold, marginTop: '0.5em' }}>\n        {isBlackJack\n          && (hand.weight > 21 ? 'Bust: ' : 'Hand Weight: ') + hand.weight}\n      </Typography>\n      {map(hand.cards, (card, i) => {\n        const dropped = includes(cardsToDiscard, i);\n        return (\n          <Card\n            key={card.name + card.suit}\n            cardHandler={cardHandler}\n            cardNo={i}\n            dropped={dropped}\n            handNo={handNo}\n            name={card.name}\n            playerNo={playerNo}\n            suit={card.suit}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nHand.propTypes = {\n  // types = [array, bool, func, number, object, string, symbol].isRequired\n  cardHandler: types.func,\n  cardsToDiscard: types.arrayOf(types.number),\n  hand: types.shape({\n    weight: types.number,\n    cards: types.arrayOf(\n      types.shape({\n        name: types.string.isRequired,\n        suit: types.string.isRequired,\n      }),\n    ).isRequired,\n  }).isRequired,\n  handNo: types.number.isRequired,\n  isBlackJack: types.bool.isRequired,\n  isHandTurn: types.bool.isRequired,\n  isMultiHand: types.bool.isRequired,\n  isPlayerTurn: types.bool.isRequired,\n  playerNo: types.number.isRequired,\n};\n\nexport default Hand;\n","import React from 'react';\nimport types from 'prop-types';\nimport Slider from '@material-ui/lab/Slider';\nimport cyan from '@material-ui/core/colors/cyan';\nimport green from '@material-ui/core/colors/green';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport red from '@material-ui/core/colors/red';\nimport map from 'lodash/map';\nimport { Typography } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport Hand from './Hand';\n// Parents: Board\n\nconst styles = {\n  player: {\n    borderRadius: 5,\n    display: 'inline-block',\n    margin: 10,\n    padding: 20,\n  },\n  width: { minWidth: '100px' },\n};\n\n/* --------------------------------------------------\n * Player\n * -------------------------------------------------- */\nconst Player = (props) => {\n  // get vars from props\n  const {\n    betHandler,\n    cardHandler,\n    cardsToDiscard,\n    hideHands,\n    isBlackJack,\n    player,\n    playerNo,\n    turn,\n  } = props;\n  // set booleans\n  const isPlayerTurn = !!turn && playerNo === turn.player;\n  const isMultiHand = player.hands.length > 1;\n  const showSlider = !!hideHands && isBlackJack && player.id !== 0 && !player.isBot;\n  // set slider variables\n  const minBet = Math.max(Math.min(player.money, 5), 0);\n  const maxBet = Math.max(Math.min(player.money, 100), 10);\n  const step = 5;\n  const onSliderChange = (event, value) => betHandler(player.id, event, value);\n  // set colors\n  let color = isPlayerTurn ? { background: cyan[200] } : {};\n  const weight = isPlayerTurn ? { fontWeight: 'bold' } : { fontWeight: 'normal' };\n  if (player.status === 'win') {\n    color = { background: green[300] };\n  }\n  if (player.status === 'draw') {\n    color = { background: blueGrey[300] };\n  }\n  if (player.status === 'lose') {\n    color = { background: red[300] };\n  }\n\n  return (\n    <Card style={{ ...styles.player, ...color }}>\n      <Typography variant=\"h4\" style={{ ...weight }}>\n        {player.name}\n        : $\n        {player.money}\n      </Typography>\n      {showSlider && (\n        <Slider\n          max={maxBet}\n          min={minBet}\n          onChange={onSliderChange}\n          step={step}\n          style={styles.width}\n          value={player.bet}\n        />\n      )}\n      {isBlackJack\n        && player.id !== 0 && (\n          <Typography variant=\"h5\">\n            Bet: $\n            {player.bet}\n          </Typography>\n      )}\n      {map(player.hands, (hand, i) => {\n        const isHandTurn = !!turn && turn.hand === i;\n        return (\n          <div key={`hand${i}`}>\n            {!hideHands && (\n              <Hand\n                cardHandler={cardHandler}\n                cardsToDiscard={cardsToDiscard}\n                hand={hand}\n                handNo={i}\n                isBlackJack={isBlackJack}\n                isHandTurn={isHandTurn}\n                isMultiHand={isMultiHand}\n                isPlayerTurn={isPlayerTurn}\n                playerNo={playerNo}\n              />\n            )}\n          </div>\n        );\n      })}\n    </Card>\n  );\n};\n\nPlayer.propTypes = {\n  // types = [array, bool, func, number, object, string, symbol].isRequired\n  betHandler: types.func,\n  cardHandler: types.func,\n  cardsToDiscard: types.arrayOf(types.number),\n  hideHands: types.bool,\n  isBlackJack: types.bool.isRequired,\n  player: types.shape({\n    hands: types.arrayOf(types.object).isRequired,\n    id: types.number.isRequired,\n    isBot: types.bool.isRequired,\n    money: types.number.isRequired,\n    status: types.string.isRequired,\n    name: types.string.isRequired,\n    bet: types.number.isRequired,\n  }).isRequired,\n  playerNo: types.number.isRequired,\n  turn: types.shape({\n    player: types.number.isRequired,\n    hand: types.number.isRequired,\n  }),\n};\n\nexport default Player;\n","import React from 'react';\nimport types from 'prop-types';\nimport map from 'lodash/map';\nimport Player from './Player';\n// Parents: GameTable\n\n/* --------------------------------------------------\n * Board\n * -------------------------------------------------- */\nconst Board = (props) => {\n  const {\n    betHandler,\n    cardHandler,\n    cardsToDiscard,\n    hideHands,\n    isBlackJack,\n    players,\n    turn,\n  } = props;\n\n  return (\n    <div>\n      {map(players, (player, i) => (\n        <Player\n          key={`player${i}`}\n          betHandler={betHandler}\n          cardHandler={cardHandler}\n          cardsToDiscard={cardsToDiscard}\n          hideHands={hideHands}\n          isBlackJack={isBlackJack}\n          player={player}\n          playerNo={i}\n          turn={turn}\n        />\n      ))}\n    </div>\n  );\n};\n\nBoard.propTypes = {\n  // types = [array, bool, func, number, object, string, symbol].isRequired\n  betHandler: types.func,\n  cardHandler: types.func,\n  cardsToDiscard: types.arrayOf(types.number),\n  hideHands: types.bool,\n  isBlackJack: types.bool.isRequired,\n  players: types.arrayOf(types.object).isRequired,\n  turn: types.shape({\n    player: types.number.isRequired,\n    hand: types.number.isRequired,\n  }),\n};\n\nexport default Board;\n","import React, { memo } from 'react';\nimport types from 'prop-types';\nimport MuiButton from '@material-ui/core/Button';\n// Parents: ButtonGroup\n\n/* --------------------------------------------------\n * Button\n * -------------------------------------------------- */\n\nconst Button = memo((props) => {\n  const { func, name } = props;\n\n  return (\n    <MuiButton\n      color=\"primary\"\n      onClick={func}\n      style={{ margin: 12 }}\n      variant=\"contained\"\n    >\n      {name}\n    </MuiButton>\n  );\n});\n\nButton.propTypes = {\n  // types = [array, bool, func, number, object, string, symbol].isRequired\n  func: types.func.isRequired,\n  name: types.string.isRequired,\n};\n\nexport default Button;\n","import React from 'react';\nimport types from 'prop-types';\nimport map from 'lodash/map';\nimport Button from './Button';\n// Parents: GameTable\n\n/* --------------------------------------------------\n * ButtonGroup\n * -------------------------------------------------- */\n\nconst ButtonGroup = (props) => {\n  const { gameFunctions } = props;\n  return (\n    <div>\n      {map(gameFunctions, obj => (\n        <Button key={obj.name} func={obj.func} name={obj.name} />\n      ))}\n    </div>\n  );\n};\n\nButtonGroup.propTypes = {\n  // types = [array, bool, func, number, object, string, symbol].isRequired\n  gameFunctions: types.arrayOf(\n    types.shape({\n      name: types.string.isRequired,\n      func: types.func.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default ButtonGroup;\n","import React from 'react';\nimport types from 'prop-types';\nimport Board from './Board';\nimport ButtonGroup from './ButtonGroup';\n// Parents: BlackJack\n\n/*\n * MAP:\n * GameTable ->  Board -> Player -> Hand -> Card\n *          |->  Button Group  ->  Button\n */\nconst GameTable = (props) => {\n  const {\n    betHandler,\n    cardClickHandler,\n    cardsToDiscard,\n    gameFunctions,\n    gameOver,\n    hideHands,\n    isBlackJack,\n    players,\n    turn,\n  } = props;\n\n  // move game buttons to make turn more obvious and support mobile\n  const played = players.slice(0, turn.player + 1);\n  const future = players.slice(turn.player + 1);\n  const playersToDisplay = !hideHands && gameOver === false\n    ? players.slice(turn.player, turn.player + 1)\n    : players;\n  // pass common props\n  const passProps = {\n    betHandler,\n    cardsToDiscard,\n    hideHands,\n    isBlackJack,\n    turn,\n    cardHandler: cardClickHandler,\n  };\n  return (\n    <div>\n      {isBlackJack && !hideHands\n        ? (\n          <div>\n            <Board players={played} {...passProps} />\n            <ButtonGroup gameFunctions={gameFunctions} />\n            <Board players={future} {...passProps} />\n          </div>\n        ) : (\n          <div>\n            <Board players={playersToDisplay} {...passProps} />\n            <ButtonGroup gameFunctions={gameFunctions} />\n          </div>\n        )}\n    </div>\n  );\n};\n\nGameTable.propTypes = {\n  // types = [array, bool, func, number, object, string, symbol].isRequired\n  betHandler: types.func,\n  cardClickHandler: types.func,\n  cardsToDiscard: types.arrayOf(types.number),\n  gameFunctions: types.arrayOf(types.object).isRequired,\n  gameOver: types.bool,\n  hideHands: types.bool,\n  isBlackJack: types.bool,\n  players: types.arrayOf(types.object).isRequired,\n  turn: types.shape({\n    player: types.number.isRequired,\n  }).isRequired,\n};\n\nGameTable.defaultProps = {\n  isBlackJack: true,\n};\n\nexport default GameTable;\n","import React, { memo } from 'react';\nimport Typography from '@material-ui/core/Typography';\n// Parents: Popup\n\n/* ========================================\n * Rules\n * ======================================== */\nconst Rules = memo(() => (\n  <div>\n    <Typography variant=\"h5\">\n      Objective:\n    </Typography>\n    <Typography>\n      Get as close to 21 as you can, without going over. Each card is worth\n      it&apos;s number, J/Q/K are worth 10, and an Ace is worth 11 unless you go\n      over 21, then it is worth 1.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Blackjack:\n    </Typography>\n    <Typography>\n      Delt an Ace and a 10/J/Q/K, this casino pays 3:2, but Vegas casinos do\n      6:5.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Hit:\n    </Typography>\n    <Typography>\n      Get an extra card which adds to your total.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Stay:\n    </Typography>\n    <Typography>\n      Move to the next player.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Double Down:\n    </Typography>\n    <Typography>\n      This option is available with a two card hand; before another card has\n      been drawn double your bet and receive one (and only one) additional card\n      to your hand. Play then moves to the next player.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Splitting Pairs:\n    </Typography>\n    <Typography>\n      When you are dealt a pair of cards of the same rank, you are allowed to\n      split into two separate hands and play them independently. You will match\n      your bet for the second hand. A double after a split is ok\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Resplitting:\n    </Typography>\n    <Typography>\n      When you get additional pairs in the first two cards of a hand you can\n      resplit. Typically a player is allowed to split up to 3 times (delt 4 of a\n      kind).\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Splitting Aces:\n    </Typography>\n    <Typography>\n      Player is limited to drawing only one additional card on each Ace. If you\n      draw a ten-valued card on one of your split Aces, the hand is not\n      considered a Blackjack (it is treated as a normal 21). You can re-split\n      Aces.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Other Rules:\n    </Typography>\n    <ul>\n      <Typography><li>Dealer hits on 16 or less and soft 17</li></Typography>\n      <Typography><li>Minimum bet is $5</li></Typography>\n    </ul>\n    <Typography variant=\"h5\">\n      AI Algorithm:\n    </Typography>\n    <ul>\n      <Typography><li>House Rules: 6 decks, H17, DAS, No Surrender, Peek</li></Typography>\n      <Typography><li>Estimated casino edge for these rules: 0.66%</li></Typography>\n    </ul>\n  </div>\n));\n\nexport default Rules;\n","import React from 'react';\nimport types from 'prop-types';\nimport TableCell from '@material-ui/core/TableCell';\n// Parents: Help\n\nconst Cell = (props) => {\n  const {\n    color, text, style, ...otherProps\n  } = props;\n  const stl = {\n    ...style,\n    textAlign: 'center',\n    backgroundColor: color,\n  };\n  return (\n    <TableCell size=\"small\" style={stl} {...otherProps}>\n      {text}\n    </TableCell>\n  );\n};\n\nCell.propTypes = {\n  // types = [array, bool, func, number, object, string, symbol].isRequired\n  color: types.string,\n  style: types.objectOf(types.oneOfType([types.string, types.number])),\n  text: types.string.isRequired,\n};\n\nexport default Cell;\n","import React from 'react';\nimport types from 'prop-types';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport map from 'lodash/map';\nimport Cell from './Cell';\n// Parents: Help\n\nconst Row = (props) => {\n  const { name, data } = props;\n\n  return (\n    <TableRow>\n      <TableCell style={{ textAlign: 'center', padding: 0 }}>\n        {name}\n      </TableCell>\n      {map(data, (text, i) => <Cell key={i} {...text} />)}\n    </TableRow>\n  );\n};\n\nRow.propTypes = {\n  // types = [array, bool, func, number, object, string, symbol].isRequired\n  data: types.arrayOf(types.object).isRequired,\n  name: types.string.isRequired,\n};\n\nexport default Row;\n","import React from 'react';\nimport types from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport map from 'lodash/map';\nimport Cell from './Cell';\nimport Row from './Row';\n// Parents: Popup\n\nconst BlackjackTable = (props) => {\n  const { title, data } = props;\n  const cards = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'A'];\n\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell colSpan=\"11\">\n            {title}\n          </TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        <TableRow>\n          <Cell rowSpan=\"2\" style={{ width: 60 }} text=\"Hand\" />\n          <Cell colSpan=\"10\" text=\"Dealer\" />\n        </TableRow>\n        <TableRow>\n          {map(cards, c => <Cell key={c} text={c} />)}\n        </TableRow>\n        {map(data, obj => <Row key={obj.name} {...obj} />)}\n      </TableBody>\n    </Table>\n  );\n};\n\nBlackjackTable.propTypes = {\n  // types = [array, bool, func, number, object, string, symbol].isRequired\n  data: types.arrayOf(\n    types.shape({\n      name: types.string.isRequired,\n    }),\n  ).isRequired,\n  title: types.string.isRequired,\n};\n\nexport default BlackjackTable;\n","import Help from './Help';\n\nexport default Help;\n","// react\nimport React, { memo } from 'react';\n// components\n// material-ui\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n// colors\nimport green from '@material-ui/core/colors/green';\nimport teal from '@material-ui/core/colors/teal';\nimport red from '@material-ui/core/colors/red';\nimport orange from '@material-ui/core/colors/orange';\nimport deepPurple from '@material-ui/core/colors/deepPurple';\nimport Cell from './Cell';\nimport BlackjackTable from './BlackjackTable';\n// Parents: Popup\n\nconst Help = memo(() => {\n  // options\n  const h = { color: green[200], text: 'H' };\n  const d = { color: teal[200], text: 'D' };\n  const s = { color: red[200], text: 'S' };\n  const p = { color: orange[200], text: 'P' };\n  const ds = { color: deepPurple[200], text: 'DS' };\n\n  // algorithms for options\n  const hardTtl = [\n    { name: 'Hard 5', data: [h, h, h, h, h, h, h, h, h, h] },\n    { name: 'Hard 6', data: [h, h, h, h, h, h, h, h, h, h] },\n    { name: 'Hard 7', data: [h, h, h, h, h, h, h, h, h, h] },\n    { name: 'Hard 8', data: [h, h, h, h, h, h, h, h, h, h] },\n    { name: 'Hard 9', data: [h, d, d, d, d, h, h, h, h, h] },\n    { name: 'Hard 10', data: [d, d, d, d, d, d, d, d, h, h] },\n    { name: 'Hard 11', data: [d, d, d, d, d, d, d, d, d, d] },\n    { name: 'Hard 12', data: [h, h, s, s, s, h, h, h, h, h] },\n    { name: 'Hard 13', data: [s, s, s, s, s, h, h, h, h, h] },\n    { name: 'Hard 14', data: [s, s, s, s, s, h, h, h, h, h] },\n    { name: 'Hard 15', data: [s, s, s, s, s, h, h, h, h, h] },\n    { name: 'Hard 16', data: [s, s, s, s, s, h, h, h, h, h] },\n    { name: 'Hard 17', data: [s, s, s, s, s, s, s, s, s, s] },\n    { name: 'Hard 18+', data: [s, s, s, s, s, s, s, s, s, s] },\n  ];\n  const softTtl = [\n    { name: 'Ace + 2', data: [h, h, h, d, d, h, h, h, h, h] },\n    { name: 'Ace + 3', data: [h, h, h, d, d, h, h, h, h, h] },\n    { name: 'Ace + 4', data: [h, h, d, d, d, h, h, h, h, h] },\n    { name: 'Ace + 5', data: [h, h, d, d, d, h, h, h, h, h] },\n    { name: 'Ace + 6', data: [h, d, d, d, d, h, h, h, h, h] },\n    { name: 'Ace + 7', data: [ds, ds, ds, ds, ds, s, s, h, h, h] },\n    { name: 'Ace + 8', data: [s, s, s, s, ds, s, s, s, s, s] },\n    { name: 'Ace + 9', data: [s, s, s, s, s, s, s, s, s, s] },\n  ];\n  const pairs = [\n    { name: '(2,2)', data: [p, p, p, p, p, p, h, h, h, h] },\n    { name: '(3,3)', data: [p, p, p, p, p, p, h, h, h, h] },\n    { name: '(4,4)', data: [h, h, h, p, p, h, h, h, h, h] },\n    { name: '(5,5)', data: [d, d, d, d, d, d, d, d, h, h] },\n    { name: '(6,6)', data: [p, p, p, p, p, h, h, h, h, h] },\n    { name: '(7,7)', data: [p, p, p, p, p, p, h, h, h, h] },\n    { name: '(8,8)', data: [p, p, p, p, p, p, p, p, p, p] },\n    { name: '(9,9)', data: [p, p, p, p, p, s, p, p, s, s] },\n    { name: '(T,T)', data: [s, s, s, s, s, s, s, s, s, s] },\n    { name: '(A,A)', data: [p, p, p, p, p, p, p, p, p, p] },\n  ];\n\n  return (\n    <div>\n      <BlackjackTable data={hardTtl} title=\"Hard Totals\" />\n      <BlackjackTable data={softTtl} title=\"Soft Totals\" />\n      <BlackjackTable data={pairs} title=\"Pairs\" />\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell colSpan=\"11\">\n              Key\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow>\n            <Cell {...h} />\n            <Cell colSpan=\"2\" text=\"= Hit\" />\n            <Cell {...s} />\n            <Cell colSpan=\"3\" text=\"= Stand\" />\n            <Cell {...p} />\n            <Cell colSpan=\"3\" text=\"= Split\" />\n          </TableRow>\n          <TableRow>\n            <Cell {...d} />\n            <Cell colSpan=\"10\" text=\"= Double (Hit if not allowed)\" />\n          </TableRow>\n          <TableRow>\n            <Cell {...ds} />\n            <Cell colSpan=\"10\" text=\"= Double (Stand if not allowed)\" />\n          </TableRow>\n        </TableBody>\n      </Table>\n    </div>\n  );\n});\n\nexport default Help;\n","import React, { memo } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport InfoPopup from '../../common/InfoPopup';\nimport Rules from './Rules';\nimport Help from './help';\n\nconst Header = memo(() => (\n  <div className=\"flex-container\">\n    <Typography variant=\"h2\" gutterBottom>Blackjack (21)</Typography>\n    <InfoPopup title=\"Blackjack Rules\">\n      <Rules />\n      <Help />\n    </InfoPopup>\n  </div>\n));\n\nexport default Header;\n","/* Theoretical Max Score:   386 everyone splits 3 times and busts with 30, dealer bust with 26\n * Card Point Value:        340-380\n * TODO: split aces is not blackjack\n * TODO: get second card for dealer and hide it\n * TODO: buy insurance on dealer's Ace\n */\nimport React, { Component } from 'react';\nimport types from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport get from 'lodash/get';\nimport forEach from 'lodash/forEach';\n// components\nimport Header from './Header';\nimport GameTable from '../gametable';\nimport Deck from '../../../apis/Deck';\n// redux functions\nimport {\n  incrHandTurn,\n  incrPlayerTurn,\n  resetTurn,\n} from '../../../store/modules/turn';\nimport {\n  drawCard,\n  newHand,\n  payout,\n  resetStatus,\n  splitHand,\n  updateBet,\n} from '../../../store/modules/players';\n// Parents: Main\n\n// Dealer constant\nconst DEALER = 0;\n\n/**\n * calculate the weight of a hand\n * stateChanges: none\n *\n * @param {Object[]} hand\n * @return {{string, string}}\n */\nfunction weighHand(hand = []) {\n  // set return values\n  let weight = 0;\n  let soft = false;\n\n  // find the weight of the hand\n  forEach(hand, (card) => {\n    const { weight: cardWeight } = card;\n    if (cardWeight === 14) {\n      // A\n      if (weight <= 10) {\n        weight += 11;\n        soft = true;\n      } else {\n        weight += 1;\n      }\n    } else if (cardWeight > 10) {\n      // J - K\n      weight += 10;\n    } else {\n      // 2 - 10\n      weight += cardWeight;\n    }\n    // reduce by 10 if bust and soft\n    if (weight > 21 && soft) {\n      weight -= 10;\n      soft = false;\n    }\n  });\n\n  // return object w/ useful information\n  return { weight, soft };\n}\n\n/* --------------------------------------------------\n* BlackJack\n* -------------------------------------------------- */\n\nclass BlackJack extends Component {\n  // Prop Validation\n  static propTypes = {\n    // types = [array, bool, func, number, object, string, symbol].isRequired\n    playerActions: types.shape({\n      drawCard: types.func.isRequired,\n      newHand: types.func.isRequired,\n      payout: types.func.isRequired,\n      resetStatus: types.func.isRequired,\n      splitHand: types.func.isRequired,\n      updateBet: types.func.isRequired,\n    }).isRequired,\n    players: types.arrayOf(\n      types.shape({\n        bet: types.number.isRequired,\n        id: types.number.isRequired,\n        status: types.string.isRequired,\n        money: types.number.isRequired,\n        hands: types.arrayOf(\n          types.shape({\n            weight: types.number.isRequired,\n            cards: types.arrayOf(\n              types.shape({ weight: types.number.isRequired }),\n            ).isRequired,\n          }),\n        ).isRequired,\n      }),\n    ).isRequired,\n    turn: types.shape({\n      player: types.number.isRequired,\n      hand: types.number.isRequired,\n    }).isRequired,\n    turnActions: types.shape({\n      incrHandTurn: types.func.isRequired,\n      incrPlayerTurn: types.func.isRequired,\n      resetTurn: types.func.isRequired,\n    }).isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.setNewGameRedux();\n    this.state = this.getNewGameState();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { players: lp, turn: lt } = prevProps;\n    const { players: np, turn: nt } = this.props;\n    const { hideHands } = this.state;\n    // verify player exists and is dealer\n    const player = np[nt.player];\n    if (hideHands || !player) {\n      return;\n    }\n    if (!player.isBot && player.id !== DEALER) {\n      // get the next Hand\n      const hand = get(player, `hands.${nt.hand}`);\n      // if the Hand updated, get the game functions\n      if (hand !== get(lp, `${lt.player}.hands.${lt.hand}`)) {\n        this.getGameFunctions(hand);\n      }\n    } else if (player.isBot && player.id !== DEALER) {\n      this.playBot();\n    } else {\n      // get the next Hand\n      const hand = player.hands[nt.hand];\n      // if the Hand updated, check for dealer\n      if (hand !== get(lp, `${lt.player}.hands.${lt.hand}`)) {\n        this.playDealer();\n      }\n    }\n  }\n\n  /**\n   * function to generate the state of a new game\n   * @return {Object}\n   */\n  getNewGameState = () => ({\n    gameFunctions: [{ name: 'Finish Betting', func: this.finishBetting }],\n    hideHands: true,\n  });\n\n  /** function to reset turn and player status */\n  setNewGameRedux = () => {\n    const { turnActions, playerActions, players } = this.props;\n    // reset redux actions\n    turnActions.resetTurn();\n    // reset player statuses\n    forEach(players, player => playerActions.resetStatus(player.id));\n  };\n\n  /**\n   * get the game functions for the present hand\n   * @param {Object[]} hand\n   */\n  getGameFunctions = (hand) => {\n    // check state\n    if (!hand) {\n      return;\n    }\n\n    // define game function options\n    const stay = { name: 'Stay', func: this.stay };\n    const hit = { name: 'Hit', func: this.hit };\n    const double = { name: 'Double', func: this.double };\n    const split = { name: 'Split', func: this.split };\n\n    // reset game functions\n    const gameFunctions = [stay];\n\n    // check if not a bust\n    if (hand.weight < 21) {\n      gameFunctions.push(hit);\n      // check if you only have 2 cards\n      if (hand.cards.length === 2) {\n        gameFunctions.push(double);\n        // check if card1 and card2 have equal weight\n        const { weight: weight1 } = weighHand([hand.cards[0]]);\n        const { weight: weight2 } = weighHand([hand.cards[1]]);\n        if (weight1 === weight2) {\n          gameFunctions.push(split);\n        }\n      }\n    }\n\n    // update game state\n    this.setState({ gameFunctions });\n  };\n\n  /**\n   * function that takes a hand of duplicates and makes 2 hands\n   * stateChanges: players\n   */\n  split = () => {\n    // get state values\n    const { turn, players, playerActions } = this.props;\n    const { id, hands } = players[turn.player];\n\n    playerActions.splitHand(hands, id, turn.hand, weighHand);\n  };\n\n  /** function that doubles your bet, but you only get 1 card */\n  double = () => {\n    const { turn, playerActions, players } = this.props;\n    // double bet\n    const { id, bet } = players[turn.player];\n    playerActions.updateBet(id, bet * 2);\n    // hit then stay\n    this.hit();\n    this.stay();\n  };\n\n  /**\n   * function to pass to the next player\n   * stateChanges: turn\n   */\n  stay = () => {\n    // get state values\n    const { turn, turnActions, players } = this.props;\n    const lastHand = players[turn.player].hands.length - 1;\n\n    // check if the player has more than 1 hand\n    turn.hand < lastHand\n      ? turnActions.incrHandTurn()\n      : turnActions.incrPlayerTurn();\n  };\n\n  /**\n   * function to get a new card\n   * stateChanges: players\n   */\n  hit = () => {\n    // get state values\n    const { turn, playerActions, players } = this.props;\n    const { id, hands } = players[turn.player];\n    // logic to hit\n    playerActions.drawCard(hands, id, turn.hand, 1, weighHand);\n  };\n\n  /**\n   * Start a new round of hands\n   * stateChanges: turn, players\n   */\n  dealHands = () => {\n    const { playerActions, players } = this.props;\n    // shuffle the deck\n    Deck.shuffle();\n    // deal the hands\n    forEach(players, (player) => {\n      const num = player.id !== DEALER ? 2 : 1;\n      playerActions.newHand(player.id, num, weighHand);\n    });\n  };\n\n  /**\n   * Start a new game\n   * stateChanges: hideHands\n   */\n  newGame = () => {\n    this.setNewGameRedux();\n    this.setState(this.getNewGameState());\n  };\n\n  /**\n   * function to finish betting and start the game\n   * stateChanges: hideHands\n   */\n  finishBetting = () => {\n    this.setState({ hideHands: false });\n    this.dealHands();\n  };\n\n  /**\n   * finish the game and check for a winner\n   * stateChanges: turn, player, gameFunctions\n   */\n  finishGame = () => {\n    // state variables\n    const { turn, players, playerActions } = this.props;\n    const dealer = players[turn.player].hands[DEALER].weight;\n    const dealerLen = players[turn.player].hands[DEALER].cards.length;\n    // track and find the winners\n    const playerStats = { house: 0, payout: 0, status: '' };\n    // helper functions\n    const win = (ps, bet, mul = 1) => {\n      ps.house -= Math.floor(mul * bet);\n      ps.payout = Math.floor(mul * bet);\n      ps.status = 'win';\n    };\n    const loss = (ps, bet) => {\n      ps.house += bet;\n      ps.payout = -bet;\n      ps.status = 'lose';\n    };\n    // iterate\n    forEach(players, (player) => {\n      const { id, bet } = player;\n      if (id === DEALER) {\n        if (playerStats.house > 0) {\n          playerStats.status = 'win';\n        } else if (playerStats.house < 0) {\n          playerStats.status = 'lose';\n        } else {\n          playerStats.status = 'push';\n        }\n        playerActions.payout(id, playerStats.status, playerStats.house);\n      } else {\n        forEach(player.hands, (hand) => {\n          const { weight, cards } = hand;\n          if (dealer === 21 && dealerLen === 2) {\n            // dealer BlackJack\n            loss(playerStats, bet);\n          } else if (weight === 21 && cards.length === 2) {\n            // player BlackJack\n            win(playerStats, bet, 6 / 5);\n          } else if (weight <= 21 && (weight > dealer || dealer > 21)) {\n            win(playerStats, bet);\n          } else if (weight <= 21 && weight === dealer) {\n            playerStats.payout = 0;\n            playerStats.status = 'push';\n          } else {\n            loss(playerStats, bet);\n          }\n        });\n        playerActions.payout(id, playerStats.status, playerStats.payout);\n      }\n    });\n\n    // update state variables\n    const gameFunctions = [{ name: 'New Game', func: this.newGame }];\n    // update state\n    this.setState({ gameFunctions });\n  };\n\n  /** function to execute dealer logic */\n  playDealer = () => {\n    const { players, turn } = this.props;\n    const hand = players[turn.player].hands[turn.hand].cards;\n    const { weight, soft } = weighHand(hand);\n    // Dealer hits on 16 or less and soft 17\n    if (weight <= 16 || (weight === 17 && soft)) {\n      this.hit();\n    } else {\n      this.finishGame();\n    }\n  };\n\n  // AI: https://www.blackjackinfo.com/blackjack-basic-strategy-engine/\n  playBot = () => {\n    // functions\n    const {\n      hit, split, double, stay,\n    } = this;\n    // player hand\n    const { players, turn } = this.props;\n    const hand = players[turn.player].hands[turn.hand];\n    // validate hand exists\n    if (!hand) {\n      return;\n    }\n    // get remaining vars\n    const dealer = players[players.length - 1].hands[DEALER];\n    const { weight: n, soft } = hand;\n    // card / dealer weight\n    const { weight: d } = weighHand([dealer.cards[0]]);\n    const { weight: x } = weighHand([hand.cards[0]]);\n    const { weight: y } = weighHand([hand.cards[1]]);\n\n    // play AI logic\n    if (n < 22) {\n      // split algorithm\n      if (x === y) {\n        if (x === 2 || x === 3 || x === 7) {\n          // 2,3,7, split d2-7, hit d8+\n          d <= 7 ? split() : hit();\n        } else if (x === 4) {\n          // 4, split d5-6, else hit\n          d === 5 || d === 6 ? split() : hit();\n        } else if (x === 5) {\n          // 5, double d2-9, hit d10+\n          d <= 9 ? double() : hit();\n        } else if (x === 6) {\n          // 6, split d2-6, else hit\n          d <= 6 ? split() : hit();\n        } else if (x === 9) {\n          // 9, d7,10+ stay, else split\n          d === 7 || d >= 10 ? stay() : split();\n        } else if (x === 8 || x === 14) {\n          // 8,A split\n          split();\n        } else {\n          // 10 Stay\n          stay();\n        }\n      } else if (n < 20 && soft) {\n        // soft hands, A9+ stays\n        if (n === 13 || n === 14) {\n          // A2-A3 double d5-6, hit d2-4, d7-A\n          d === 5 || d === 6 ? double() : hit();\n        } else if (n === 15 || n === 16) {\n          // A4-A5 double d4-6, hit d2-3, d7-A\n          d >= 4 && d <= 6 ? double() : hit();\n        } else if (n === 17) {\n          // A6 double d3-6, hit d2, d7-A\n          d >= 3 && d <= 6 ? double() : hit();\n        } else if (n === 18) {\n          // A7 double d2-6, stay d7-8, hit d9-A\n          if (n >= 2 && n <= 6) {\n            double();\n          } else if (n === 7 || n === 8) {\n            stay();\n          } else {\n            hit();\n          }\n        } else if (n === 19) {\n          // A8 double d6, else stay\n          d === 6 ? double() : stay();\n        }\n      } else if (n < 17 && !soft) {\n        // hard hands, 17+ stays\n        if (n >= 5 && n <= 8) {\n          // 5-8 hit\n          hit();\n        } else if (n === 9) {\n          // 9 double d3-6, hit d2, d7-A\n          d >= 3 && d <= 6 ? double() : hit();\n        } else if (n === 10) {\n          // 10 double d2-9, hit d10-A\n          d >= 2 && d <= 9 ? double() : hit();\n        } else if (n === 11) {\n          // 11 double\n          double();\n        } else if (n === 12) {\n          // 12 hit d2-3, stay d4-6, hit 7-A\n          d >= 4 && d <= 6 ? stay() : hit();\n        } else if (n >= 13 && n <= 16) {\n          // 13-16 stay d2-6, hit 7-A\n          d >= 2 && d <= 6 ? stay() : hit();\n        }\n      } else {\n        stay();\n      }\n    } else {\n      // bust\n      stay();\n    }\n  };\n\n  /**\n   * function to be called on card clicks\n   * @param {number} playerNo - player number\n   * @param {number} handNo - hand number\n   * @param {number} cardNo - card number\n   */\n  cardClickHandler = (playerNo, handNo, cardNo) => {\n    const { players } = this.props;\n    /* eslint-disable no-console */\n    console.log(players[playerNo].hands[handNo].cards[cardNo]);\n    /* eslint-enable no-console */\n  };\n\n  /**\n   * function to be called on card clicks\n   * @param {number} id\n   * @param {Object} event\n   * @param {number} bet\n   * stateChanges: player\n   */\n  betHandler = (id, event, bet) => {\n    const { playerActions } = this.props;\n    playerActions.updateBet(id, bet);\n  };\n\n  /* render the UI */\n  render() {\n    const { turn, players } = this.props;\n    const { gameFunctions, hideHands } = this.state;\n\n    return (\n      <div>\n        <Header />\n        <GameTable\n          betHandler={this.betHandler}\n          cardClickHandler={this.cardClickHandler}\n          gameFunctions={gameFunctions}\n          hideHands={hideHands}\n          players={players}\n          turn={turn}\n        />\n      </div>\n    );\n  }\n}\n\n// react-redux export\nconst mapStateToProps = state => ({\n  turn: state.turn,\n  players: state.players,\n});\nconst mapDispatchToProps = dispatch => ({\n  turnActions: bindActionCreators(\n    { incrPlayerTurn, resetTurn, incrHandTurn },\n    dispatch,\n  ),\n  playerActions: bindActionCreators(\n    {\n      drawCard,\n      newHand,\n      splitHand,\n      payout,\n      updateBet,\n      resetStatus,\n    },\n    dispatch,\n  ),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BlackJack);\n","import BlackJack from './Blackjack';\n\nexport default BlackJack;\n"],"sourceRoot":""}