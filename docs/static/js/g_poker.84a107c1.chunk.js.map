{"version":3,"sources":["components/games/game-table/board/card/Card.styles.ts","components/games/game-table/board/card/Card.tsx","components/games/game-table/board/Hand.tsx","components/games/game-table/board/player/Player.styles.ts","components/games/game-table/board/player/Player.tsx","components/games/game-table/board/Board.tsx","components/games/game-table/button-group/Button.tsx","components/games/game-table/button-group/ButtonGroup.tsx","components/games/game-table/GameTable.tsx","components/games/game-table/index.ts","components/games/poker/Poker.tsx","components/games/poker/index.ts"],"names":["cardFace","backgroundColor","borderRadius","cursor","display","fontWeight","height","margin","padding","width","cardTitle","textAlign","suit","marginTop","Card","memo","props","dropped","name","cardColor","color","red","style","styles","onClick","cardHandler","playerNo","handNo","cardNo","role","Typography","variant","Hand","cardsToDiscard","hand","isBlackJack","isHandTurn","isMultiHand","isPlayerTurn","bold","purple","handWeight","weight","cards","map","card","i","includes","key","player","minWidth","Player","betHandler","hideHands","turn","hands","length","showSlider","id","isBot","minBet","Math","max","min","money","maxBet","background","cyan","status","green","blueGrey","Slider","onChange","event","value","step","bet","Board","players","Button","func","ButtonGroup","gameFunctions","obj","GameTable","cardClickHandler","gameOver","played","slice","future","playersToDisplay","defaultProps","DEALER","LAST_PLAYER","Poker","setNewGameRedux","turnActions","playerActions","resetTurn","forEach","resetStatus","getNewGameState","startGame","getHand","getHistogram","hist","newGame","setState","handleDiscard","dealHands","endTurn","incrPlayerTurn","endGame","winner","val","playerScore","parseInt","evaluate","payout","rankHand","has3","indexOf","has2","isStraight","lastIndexOf","isFlush","j","discard","swapCards","state","discardHelper","n","discardCards","cardVals","push","computer","splice","rank","total","numCards","last","num","toString","reduce","a","c","Deck","shuffle","then","asyncForEach","newHand","this","canPlay","gutterBottom","Component","connect","dispatch","bindActionCreators"],"mappings":"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","file":"static/js/g_poker.84a107c1.chunk.js","sourcesContent":["const cardFace: React.CSSProperties = {\n  backgroundColor: 'white',\n  borderRadius: 5,\n  cursor: 'pointer',\n  display: 'inline-block',\n  fontWeight: 'bold',\n  height: 78,\n  margin: 5,\n  padding: 3,\n  width: 50,\n};\n\nconst cardTitle: React.CSSProperties = {\n  textAlign: 'left',\n};\n\nconst suit: React.CSSProperties = {\n  margin: 'auto',\n  marginTop: 5,\n  textAlign: 'center',\n  width: '100%',\n};\n\nexport default {\n  cardFace,\n  cardTitle,\n  suit,\n};\n","import React, { memo } from 'react';\nimport red from '@material-ui/core/colors/red';\nimport { Typography } from '@material-ui/core';\nimport styles from './Card.styles';\n// Parents: Hand\n\ninterface CardProps {\n  cardHandler?: Function;\n  cardNo: number;\n  dropped: boolean;\n  handNo: number;\n  name: string;\n  playerNo: number;\n  suit: string;\n}\n\nconst Card = memo((props: CardProps) => {\n  const { dropped, suit, name } = props;\n  // handle click to for card\n  const handleClick = (): void => {\n    const {\n      cardHandler, playerNo, handNo, cardNo,\n    } = props;\n    cardHandler && cardHandler(playerNo, handNo, cardNo);\n  };\n  // checking color based off suits: ♣♦♥♠\n  const cardColor: React.CSSProperties = {\n    color: suit === '♣' || suit === '♠' ? 'black' : red[500],\n    backgroundColor: dropped ? red[100] : 'white',\n  };\n\n  // display in view\n  return (\n    <div style={{ ...styles.cardFace, ...cardColor }} onClick={handleClick} role=\"main\">\n      <div style={styles.cardTitle}>\n        {name + suit}\n      </div>\n      <Typography variant=\"h4\" style={{ ...styles.suit, ...cardColor }}>\n        {suit}\n      </Typography>\n    </div>\n  );\n});\n\nexport default Card;\n","import React from 'react';\nimport purple from '@material-ui/core/colors/purple';\nimport { Typography } from '@material-ui/core';\nimport Card from './card/Card';\nimport { DBHand } from '../../../../store/types';\n\ninterface HandProps {\n  cardHandler?: Function;\n  cardsToDiscard: number[];\n  hand: DBHand;\n  handNo: number;\n  isBlackJack: boolean;\n  isHandTurn: boolean;\n  isMultiHand: boolean;\n  isPlayerTurn: boolean;\n  playerNo: number;\n}\n\nconst Hand: React.FC<HandProps> = (props: HandProps) => {\n  const {\n    cardHandler, cardsToDiscard, hand, handNo,\n    isBlackJack, isHandTurn, isMultiHand, isPlayerTurn,\n    playerNo,\n  } = props;\n\n  const bold: React.CSSProperties = (isHandTurn && isMultiHand && isPlayerTurn)\n    || (!isMultiHand && isPlayerTurn)\n    ? { fontWeight: 'bold', color: purple[700] }\n    : { fontWeight: 'normal' };\n\n  const handWeight = hand.weight || false;\n\n  return (\n    <>\n      <Typography variant=\"h4\" style={{ ...bold, marginTop: '0.5em' }}>\n        {isBlackJack\n          && (handWeight > 21 ? 'Bust: ' : 'Hand Weight: ') + hand.weight}\n      </Typography>\n      {hand.cards.map((card, i) => {\n        const dropped: boolean = cardsToDiscard.includes(i);\n        return (\n          <Card\n            key={card.name + card.suit}\n            cardHandler={cardHandler}\n            cardNo={i}\n            dropped={dropped}\n            handNo={handNo}\n            name={card.name}\n            playerNo={playerNo}\n            suit={card.suit}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nexport default Hand;\n","const player: React.CSSProperties = {\n  borderRadius: 5,\n  display: 'inline-block',\n  margin: 10,\n  padding: 20,\n};\n\nconst width: React.CSSProperties = { minWidth: '100px' };\n\nexport default {\n  player,\n  width,\n};\n","import React from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport cyan from '@material-ui/core/colors/cyan';\nimport green from '@material-ui/core/colors/green';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport red from '@material-ui/core/colors/red';\nimport { Typography } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport Hand from '../Hand';\nimport { DBTurn, DBPlayer } from '../../../../../store/types';\nimport styles from './Player.styles';\n// Parents: Board\n\ninterface PlayerProps {\n  betHandler?: Function;\n  cardHandler?: Function;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  player: DBPlayer;\n  playerNo: number;\n  turn: DBTurn;\n}\n\nconst Player: React.FC<PlayerProps> = (props: PlayerProps) => {\n  // get vars from props\n  const {\n    betHandler, cardHandler, cardsToDiscard, hideHands,\n    isBlackJack, player, playerNo, turn,\n  } = props;\n  // set booleans\n  const isPlayerTurn: boolean = !!turn && playerNo === turn.player;\n  const isMultiHand: boolean = player.hands.length > 1;\n  const showSlider: boolean = !!hideHands && isBlackJack && player.id !== 0 && !player.isBot;\n  // set slider variables\n  const minBet: number = Math.max(Math.min(player.money, 5), 0);\n  const maxBet: number = Math.max(Math.min(player.money, 100), 10);\n  const step = 5;\n  const onSliderChange = (event: React.ChangeEvent<{}>, value: number | number[]): void => {\n    betHandler && betHandler(player.id, event, value);\n  };\n  // set colors\n  let color: React.CSSProperties = isPlayerTurn ? { background: cyan[200] } : {};\n  const weight: React.CSSProperties = isPlayerTurn ? { fontWeight: 'bold' } : { fontWeight: 'normal' };\n  if (player.status === 'win') {\n    color = { background: green[300] };\n  }\n  if (player.status === 'draw') {\n    color = { background: blueGrey[300] };\n  }\n  if (player.status === 'lose') {\n    color = { background: red[300] };\n  }\n\n  return (\n    <Card style={{ ...styles.player, ...color }}>\n      <Typography variant=\"h4\" style={{ ...weight }}>\n        {`${player.name}: $${player.money}`}\n      </Typography>\n      {showSlider && (\n        <Slider\n          max={maxBet}\n          min={minBet}\n          onChange={onSliderChange}\n          step={step}\n          style={styles.width}\n          value={player.bet}\n        />\n      )}\n      {isBlackJack\n        && player.id !== 0 && (\n          <Typography variant=\"h5\">\n            Bet: $\n            {player.bet}\n          </Typography>\n      )}\n      {player.hands.map((hand, i) => {\n        const isHandTurn: boolean = !!turn && turn.hand === i;\n        return (\n          <div key={`hand${i}`}>\n            {!hideHands && (\n              <Hand\n                cardHandler={cardHandler}\n                cardsToDiscard={cardsToDiscard}\n                hand={hand}\n                handNo={i}\n                isBlackJack={isBlackJack}\n                isHandTurn={isHandTurn}\n                isMultiHand={isMultiHand}\n                isPlayerTurn={isPlayerTurn}\n                playerNo={playerNo}\n              />\n            )}\n          </div>\n        );\n      })}\n    </Card>\n  );\n};\n\nexport default Player;\n","import React from 'react';\nimport Player from './player/Player';\nimport { DBPlayer, DBTurn } from '../../../../store/types';\n// Parents: GameTable\n\ninterface BoardProps {\n  betHandler?: Function;\n  cardHandler?: Function;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  players: DBPlayer[];\n  turn: DBTurn;\n}\n\nconst Board: React.FC<BoardProps> = (props: BoardProps) => {\n  const {\n    betHandler, cardHandler, cardsToDiscard, hideHands,\n    isBlackJack, players, turn,\n  } = props;\n\n  return (\n    <>\n      {players.map((player, i) => (\n        <Player\n          key={`player${i}`}\n          betHandler={betHandler}\n          cardHandler={cardHandler}\n          cardsToDiscard={cardsToDiscard}\n          hideHands={hideHands}\n          isBlackJack={isBlackJack}\n          player={player}\n          playerNo={i}\n          turn={turn}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default Board;\n","import React, { memo } from 'react';\nimport MuiButton from '@material-ui/core/Button';\nimport { PropTypes } from '@material-ui/core/';\n// Parents: ButtonGroup\n\nexport interface ButtonProps {\n  func: React.MouseEventHandler;\n  name: string;\n}\n\nconst Button = memo((props: ButtonProps) => {\n  const { func, name } = props;\n\n  const buttonStyle: React.CSSProperties = { margin: 12 };\n  const color: PropTypes.Color = 'primary';\n\n  return (\n    <MuiButton\n      color={color}\n      onClick={func}\n      style={buttonStyle}\n      variant=\"contained\"\n    >\n      {name}\n    </MuiButton>\n  );\n});\n\nexport default Button;\n","import React from 'react';\nimport Button, { ButtonProps } from './Button';\n\nexport interface ButtonGroupProps {\n  gameFunctions: ButtonProps[];\n}\n\nconst ButtonGroup: React.FC<ButtonGroupProps> = (props: ButtonGroupProps) => {\n  const { gameFunctions } = props;\n  return (\n    <div>\n      {gameFunctions.map((obj) => (\n        <Button key={obj.name} func={obj.func} name={obj.name} />\n      ))}\n    </div>\n  );\n};\n\nexport default ButtonGroup;\n","import React from 'react';\nimport Board from './board/Board';\nimport ButtonGroup from './button-group/ButtonGroup';\nimport { ButtonProps } from './button-group/Button';\nimport { DBPlayer, DBTurn } from '../../../store/types';\n// Parents: BlackJack\n\ninterface GameTableProps {\n  betHandler?: Function;\n  cardClickHandler?: Function;\n  cardsToDiscard: number[];\n  gameFunctions: ButtonProps[];\n  gameOver: boolean;\n  hideHands: boolean;\n  isBlackJack: boolean;\n  players: DBPlayer[];\n  turn: DBTurn;\n}\n\n/* GameTable ->  Board -> Player -> Hand -> Card\n *          |->  Button Group  ->  Button\n */\nconst GameTable: React.FC<GameTableProps> & { defaultProps: Partial<GameTableProps> } = (props: GameTableProps) => {\n  const {\n    betHandler, cardClickHandler, cardsToDiscard, gameFunctions,\n    gameOver, hideHands, isBlackJack, players,\n    turn,\n  } = props;\n\n  // move game buttons to make turn more obvious and support mobile\n  const played: DBPlayer[] = players.slice(0, turn.player + 1);\n  const future: DBPlayer[] = players.slice(turn.player + 1);\n  const playersToDisplay: DBPlayer[] = (!hideHands && gameOver === false)\n    ? players.slice(turn.player, turn.player + 1)\n    : players;\n\n  return (\n    <>\n      {isBlackJack && !hideHands\n        ? (\n          <>\n            <Board\n              players={played}\n              betHandler={betHandler}\n              cardHandler={cardClickHandler}\n              cardsToDiscard={cardsToDiscard}\n              hideHands={hideHands}\n              isBlackJack={isBlackJack}\n              turn={turn}\n            />\n            <ButtonGroup gameFunctions={gameFunctions} />\n            <Board\n              players={future}\n              betHandler={betHandler}\n              cardHandler={cardClickHandler}\n              cardsToDiscard={cardsToDiscard}\n              hideHands={hideHands}\n              isBlackJack={isBlackJack}\n              turn={turn}\n            />\n          </>\n        ) : (\n          <>\n            <Board\n              players={playersToDisplay}\n              betHandler={betHandler}\n              cardHandler={cardClickHandler}\n              cardsToDiscard={cardsToDiscard}\n              hideHands={hideHands}\n              isBlackJack={isBlackJack}\n              turn={turn}\n            />\n            <ButtonGroup gameFunctions={gameFunctions} />\n          </>\n        )}\n    </>\n  );\n};\n\nGameTable.defaultProps = {\n  isBlackJack: true,\n  hideHands: false,\n  gameOver: false,\n  cardsToDiscard: [],\n};\n\nexport default GameTable;\n","import GameTable from './GameTable';\n\nexport default GameTable;\n","import React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport asyncForEach from '../../../helpers/asyncForEach';\nimport {\n  swapCards, newHand, payout, resetStatus,\n} from '../../../store/modules/players';\nimport { incrPlayerTurn, resetTurn } from '../../../store/modules/turn';\nimport GameTable from '../game-table';\nimport Deck from '../../../apis/Deck';\nimport {\n  DBPlayer, DBTurn, DBCard, DBRootState,\n} from '../../../store/types';\nimport { ButtonProps } from '../game-table/button-group/Button';\n\nconst DEALER = 0;\nconst LAST_PLAYER = 5;\n\ninterface PlayerActions {\n  swapCards: Function;\n  newHand: Function;\n  payout: Function;\n  resetStatus: Function;\n}\ninterface TurnActions {\n  incrPlayerTurn: Function;\n  resetTurn: Function;\n}\n\ninterface PokerProps {\n  playerActions: PlayerActions;\n  players: DBPlayer[];\n  turn: DBTurn;\n  turnActions: TurnActions;\n}\ninterface PokerState {\n  gameFunctions: ButtonProps[];\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  gameOver: boolean;\n}\n\nclass Poker extends Component<PokerProps, PokerState> {\n  constructor(props: PokerProps) {\n    super(props);\n    this.setNewGameRedux();\n    this.state = this.getNewGameState();\n  }\n\n  componentDidUpdate(): void {\n    const { players, turn } = this.props;\n    const { hideHands, gameOver } = this.state;\n\n    const player: DBPlayer = players[turn.player];\n    const canPlay: boolean = player.id !== DEALER && player.id <= LAST_PLAYER;\n\n    if (!hideHands && !gameOver && player.isBot) {\n      canPlay ? this.computer() : this.endGame();\n    }\n  }\n\n  /** function to reset turn and player status */\n  setNewGameRedux = (): void => {\n    const { turnActions, playerActions, players } = this.props;\n    // reset redux actions\n    turnActions.resetTurn();\n    // reset player statuses\n    players.forEach((player) => playerActions.resetStatus(player.id));\n  };\n\n  /** function to generate the state of a new game */\n  getNewGameState = (): PokerState => ({\n    gameFunctions: [{ name: 'Start Game', func: this.startGame }],\n    cardsToDiscard: [],\n    hideHands: true,\n    gameOver: false,\n  });\n\n  /** get hand from props */\n  getHand = (): DBCard[] => {\n    // get state vars\n    const { turn, players } = this.props;\n    return players[turn.player].hands[0].cards || null;\n  };\n\n  getHistogram = (hand: DBCard[]): number[] => {\n    // Histogram for the cards\n    const hist = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    // put hand into the histogram\n    hand.forEach((card) => {\n      hist[(card.weight || 2) - 2] += 1; // 2-14 - 2 = 0-12\n    });\n    return hist;\n  };\n\n  newGame = (): void => {\n    this.setNewGameRedux();\n    this.setState(this.getNewGameState());\n  };\n\n  /** function to finish betting and start the game\n   * stateChanges: hideHands\n   */\n  startGame = (): void => {\n    this.setState({\n      gameFunctions: [{ name: 'Discard Cards', func: this.handleDiscard }],\n      hideHands: false,\n    });\n    this.dealHands();\n  };\n\n  /** increment player turn and reset state */\n  endTurn = (): void => {\n    const { turnActions } = this.props;\n\n    turnActions.incrPlayerTurn();\n    this.setState({\n      gameFunctions: [{ name: 'Discard Cards', func: this.handleDiscard }],\n      cardsToDiscard: [],\n    });\n  };\n\n  endGame = (): void => {\n    const { players, playerActions } = this.props;\n\n    let winner = { val: 0, id: 0 };\n    players.forEach((player) => {\n      if (player.id === DEALER || player.id > LAST_PLAYER) {\n        return;\n      }\n      const playerScore = parseInt(this.evaluate(player.hands[0].cards), 14);\n      if (playerScore > winner.val) {\n        winner = { val: playerScore, id: player.id };\n      }\n    });\n    players.forEach((player) => {\n      if (player.id === DEALER || player.id > LAST_PLAYER) {\n        // do nothing\n      } else if (player.id === winner.id) {\n        playerActions.payout(player.id, 'win', 20);\n      } else {\n        playerActions.payout(player.id, 'lose', -5);\n      }\n    });\n    this.setState({\n      gameFunctions: [{ name: 'New Game', func: this.newGame }],\n      gameOver: true,\n    });\n  };\n\n  /** Rankings:\n   *   Straight Flush  8\n   *   4 of a Kind     7\n   *   Full House      6\n   *   Flush           5\n   *   Straight        4\n   *   3 of a Kind     3\n   *   2 Pair          2\n   *   1 Pair          1\n   *   High Card       0\n   * @return {number} value is a base 14 string, to be converted into base 10 for comparison\n   */\n  rankHand = (hand: DBCard[], hist: number[]): number => {\n    // iterate through and look for hands with multiple cards\n    if (hist.includes(4)) {\n      return 7; // 4 of a kind\n    }\n    // Check for hands with sets of 3 or 2 cards\n    const has3 = hist.includes(3);\n    const i = hist.indexOf(2);\n    const has2 = i !== -1;\n    if (has3 && has2) {\n      return 6; // full house\n    }\n    if (has3) {\n      return 3; // 3 of a kind\n    }\n    if (has2 && hist.includes(2, i + 1)) {\n      return 2; // 2 pair\n    }\n    if (has2) {\n      return 1; // 1 pair\n    }\n    // all single cards\n    // check for straight\n    const isStraight = hist.lastIndexOf(1) - hist.indexOf(1) === 4 // (end - start = 4)\n      || (hist[12] && hist[0] && hist[1] && hist[2] && hist[3]); // (A,2,3,4,5)\n    // check for flush\n    let isFlush = true;\n    for (let j = 0; j < hand.length; j += 1) {\n      if (hand[j].suit !== hand[0].suit) {\n        isFlush = false;\n        break;\n      }\n    }\n    if (isStraight && isFlush) {\n      return 8; // straight flush\n    }\n    if (isFlush) {\n      return 5; // flush\n    }\n    if (isStraight) {\n      return 4; // straight\n    }\n    return 0; // high card\n  };\n\n  /** iterate through array, removing each index number from hand\n   * then add new cards to the hand\n   */\n  discard = (cardsToDiscard: number[]): void => {\n    const { turn, playerActions, players } = this.props;\n\n    const { id, hands } = players[turn.player];\n    playerActions.swapCards(hands, id, cardsToDiscard);\n  };\n\n  /** helper function wrapping discard, meant for UI */\n  handleDiscard = (): void => {\n    const { cardsToDiscard } = this.state;\n    this.discard(cardsToDiscard);\n    this.setState({\n      gameFunctions: [{ name: 'End Turn', func: this.endTurn }],\n      cardsToDiscard: [],\n    });\n  };\n\n  /** function to remove n number of cards */\n  discardHelper = (n: number, hist: number[]): void => {\n    const hand = this.getHand();\n    const discardCards = [];\n    const cardVals = [hist.indexOf(1)];\n    // find cards without pairs, starting with the smallest\n    for (let i = 1; i < n; i += 1) {\n      cardVals[i] = hist.indexOf(1, cardVals[i - 1] + 1);\n    }\n    // find hand index of individual cards\n    for (let i = 0; i < hand.length; i += 1) {\n      for (let j = 0; j < cardVals.length; j += 1) {\n        if (hand[i].weight - 2 === cardVals[j]) {\n          discardCards.push(i);\n          break;\n        }\n      }\n    }\n\n    // discard lowest, non-pair n cards\n    this.discard(discardCards);\n  };\n\n  /** computer play algorithm:\n   * PAIRS\n   * draw 0 on 4 of a kind\n   * draw 0 on full house\n   * draw 1 on 3 of a kind, keep higher of 2\n   * draw 1 on 2 pair\n   * draw 3 on 2 of a kind\n   *\n   * This is a nice to have, for now we only follow the first half\n   * STRAIGHT/FLUSH\n   * draw 0 on straight\n   * draw 0 on flush\n   * draw 0 on straight flush\n   * if 1 away from sf -> draw 1\n   * if 1 away from S -> draw 1 if 5+ players, else regular hand\n   * if 1 away from F -> draw 1 if 5+ players, else regular hand\n   *\n   * REGULAR HAND\n   * if K / A -> draw 4\n   * else draw 5\n   */\n  computer = (): void => {\n    const hand = this.getHand();\n    const hist = this.getHistogram(hand);\n    const rank = this.rankHand(hand, hist);\n\n    switch (rank) {\n      case 0: // draw 4-5 on high card\n        hist.lastIndexOf(1) >= 11\n          ? this.discardHelper(4, hist) // if ace || king draw 4\n          : this.discard([0, 1, 2, 3, 4]); // otherwise, draw all 5\n        break;\n      case 1: // draw 3 on 2 of a kind\n        this.discardHelper(3, hist);\n        break;\n      case 2: // draw 1 on 3 of a kind\n      case 3: // draw 1 on 2 Pair\n        this.discardHelper(1, hist);\n        break;\n      case 4: // draw 0 on straight\n      case 5: // draw 0 on flush\n      case 6: // draw 0 on full house\n      case 7: // draw 0 on 4 of a kind\n      case 8: // draw 0 on straight flush\n      default:\n        break;\n    }\n    this.endTurn();\n  };\n\n  /** function to be called on card clicks */\n  cardClickHandler = (playerNo: number, handNo: number, cardNo: number): void => {\n    const { cardsToDiscard } = this.state;\n    // find card\n    const i = cardsToDiscard.indexOf(cardNo);\n    // toggle in array\n    i === -1 ? cardsToDiscard.push(cardNo) : cardsToDiscard.splice(i, 1);\n    // update state\n    this.setState({ cardsToDiscard });\n  };\n\n  /** Compare hands to see who wins\n   * @param {array} hand - array of card objects\n   * Hands is assigned a weight based on hand, then card values\n   * Compare values to see who wins\n   * @return {number} value is a base 14 string, to be converted into base 10 for comparison\n   */\n  evaluate = (hand: DBCard[]): string => {\n    const hist = this.getHistogram(hand);\n    const rank = this.rankHand(hand, hist);\n\n    const cards = ['0', '0', '0', '0', '0'];\n    let total = 0; // track number of cards counted\n    let numCards = 4; // number of same cards in a set\n    let i = 0; // iterator\n    let last = -1; // track location of last in numCards set\n\n    // get card values and display them in order of importance\n    while (total < 5) {\n      const num = hist.indexOf(numCards, last + 1);\n      if (num === -1) {\n        numCards -= 1;\n        last = -1;\n      } else {\n        cards[i] = num.toString(14);\n        i += 1;\n        total += numCards;\n        last = num;\n      }\n    }\n    return `${rank}${cards.reduce((a, c) => `${a}${c}`)}`;\n  };\n\n  /** Start a new round of hands\n   * stateChanges: turn, players\n   */\n  dealHands = (): void => {\n    const { playerActions, players } = this.props;\n    // shuffle the deck\n    Deck.shuffle().then(() => {\n      // deal the hands\n      asyncForEach(players, async (player: DBPlayer) => {\n        if (player.id !== DEALER && player.id <= LAST_PLAYER) {\n          await playerActions.newHand(player.id, 5);\n        }\n      });\n    });\n  };\n\n  render(): React.ReactNode {\n    const { turn, players } = this.props;\n    const {\n      cardsToDiscard, gameFunctions, gameOver, hideHands,\n    } = this.state;\n    return (\n      <>\n        <Typography variant=\"h2\" gutterBottom>\n          5 Card Draw Poker\n        </Typography>\n        <GameTable\n          cardClickHandler={this.cardClickHandler}\n          cardsToDiscard={cardsToDiscard}\n          gameFunctions={gameFunctions}\n          gameOver={gameOver}\n          hideHands={hideHands}\n          isBlackJack={false}\n          players={players}\n          turn={turn}\n        />\n      </>\n    );\n  }\n}\n\n// react-redux export\nfunction mapStateToProps(state: DBRootState): { turn: DBTurn; players: DBPlayer[] } {\n  return {\n    turn: state.turn,\n    players: state.players,\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): { turnActions: TurnActions; playerActions: PlayerActions } {\n  return {\n    turnActions: bindActionCreators({ incrPlayerTurn, resetTurn }, dispatch),\n    playerActions: bindActionCreators(\n      {\n        swapCards, newHand, payout, resetStatus,\n      },\n      dispatch,\n    ),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Poker);\n","import Poker from './Poker';\n\nexport default Poker;\n"],"sourceRoot":""}