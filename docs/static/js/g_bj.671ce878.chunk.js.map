{"version":3,"sources":["hooks/useOpenState.ts","components/common/info-popover/InfoPopup.tsx","components/games/game-table/board/card/Card.styles.ts","components/games/game-table/board/card/Card.tsx","components/games/game-table/board/Hand.tsx","components/games/game-table/board/player/Player.styles.ts","components/games/game-table/board/player/Player.tsx","components/games/game-table/board/Board.tsx","components/games/game-table/button-group/Button.tsx","components/games/game-table/button-group/ButtonGroup.tsx","components/games/game-table/GameTable.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/@material-ui/core/colors/teal.js","../node_modules/@material-ui/core/colors/orange.js","../node_modules/@material-ui/core/colors/deepPurple.js","components/games/blackjack/blackjackHelpers.ts","components/games/blackjack/Rules.tsx","components/games/blackjack/help/Cell.tsx","components/games/blackjack/help/Row.tsx","components/games/blackjack/help/BlackjackTable.tsx","components/games/blackjack/help/Help.tsx","components/games/blackjack/Header.tsx","components/games/blackjack/Blackjack.tsx"],"names":["useOpenState","defaultVal","React","useState","isOpen","setIsOpen","InfoPopup","props","handleOpen","handleClose","buttonText","title","children","color","onClick","variant","onClose","open","maxWidth","fullWidth","cardFace","backgroundColor","borderRadius","cursor","display","fontWeight","height","margin","padding","width","cardTitle","textAlign","suit","marginTop","Card","memo","dropped","name","cardHandler","playerNo","handNo","cardNo","handleClick","useCallback","cardColor","red","style","styles","role","Typography","boldStyle","normalStyle","Hand","cardsToDiscard","hand","isBlackJack","isHandTurn","isMultiHand","isPlayerTurn","useMemo","purple","handWeight","weight","cards","map","card","i","includes","player","minWidth","Player","betHandler","hideHands","turn","hands","length","showSlider","id","isBot","minBet","Math","max","min","money","maxBet","onSliderChange","event","value","background","cyan","status","green","blueGrey","Slider","onChange","step","bet","Board","players","buttonStyle","Button","ButtonGroup","gameFunctions","key","GameTable","cardClickHandler","gameOver","played","slice","future","playersToDisplay","defaultProps","_objectWithoutProperties","source","excluded","target","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","defineProperty","exports","default","_default","50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700","weighHand","soft","forEach","cardWeight","Rules","Cell","text","otherProps","stl","paddingLeft","paddingRight","TableCell","size","tableCellStyle","Row","data","TableRow","cellStyle","BlackjackTable","Table","TableHead","colSpan","TableBody","rowSpan","c","obj","Help","h","d","teal","s","p","orange","ds","deepPurple","hardTtl","softTtl","pairs","Header","className","gutterBottom","BlackJack","useSelector","state","blackjack","hasFunctions","dispatch","useDispatch","getGameFunctions","newGameFunctions","GameFunctions","STAY","push","HIT","DOUBLE","SPLIT","updateGameFunctions","updateHasFunctions","split","splitHand","stay","lastHand","stayHand","double","doubleHand","hit","hitHand","dealHands","Deck","shuffle","then","asyncForEach","a","num","newHand","newGame","setNewGame","finishBetting","updateHideHands","finishGame","dealer","filter","dWeight","dLength","playerStats","house","payout","win","ps","mul","floor","loss","NEW_GAME","hitDealer","playDealer","playBot","n","x","y","checkUpdate","console","log","updateBet","handleGameFunctionClick","type","FINISH_BETTING","error"],"mappings":"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","file":"static/js/g_bj.671ce878.chunk.js","sourcesContent":["import React from 'react';\n\ntype OpenStateHook = [\n  boolean,\n  () => void,\n  () => void,\n]\n\nconst useOpenState = (defaultVal = false): OpenStateHook => {\n  const [isOpen, setIsOpen] = React.useState(defaultVal);\n\n  const handleOpen = (): void => { setIsOpen(true); };\n  const handleClose = (): void => { setIsOpen(false); };\n\n  return [isOpen, handleOpen, handleClose];\n};\n\nexport default useOpenState;\n","import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport useOpenState from '../../../hooks/useOpenState';\n\ninterface InfoPopupProps {\n  /** popup content */\n  children: React.ReactNode | React.ReactNodeArray;\n  /** title content */\n  title: string | React.ReactElement;\n  /** button content */\n  buttonText?: string | React.ReactElement;\n}\n\nconst InfoPopup = (props: InfoPopupProps): React.ReactElement => {\n  const [isOpen, handleOpen, handleClose] = useOpenState();\n  const { buttonText, title, children } = props;\n\n  return (\n    <>\n      <Button color=\"primary\" onClick={handleOpen as React.MouseEventHandler} variant=\"contained\">\n        {buttonText || title}\n      </Button>\n      <Dialog title=\"info-popup\" onClose={handleClose as React.MouseEventHandler} open={isOpen} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          {title}\n        </DialogTitle>\n        <DialogContent>\n          {children}\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={handleClose as React.MouseEventHandler}>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default InfoPopup;\n","const cardFace: React.CSSProperties = {\n  backgroundColor: 'white',\n  borderRadius: 5,\n  cursor: 'pointer',\n  display: 'inline-block',\n  fontWeight: 'bold',\n  height: 78,\n  margin: 5,\n  padding: 3,\n  width: 50,\n};\n\nconst cardTitle: React.CSSProperties = {\n  textAlign: 'left',\n};\n\nconst suit: React.CSSProperties = {\n  margin: 'auto',\n  marginTop: 5,\n  textAlign: 'center',\n  width: '100%',\n};\n\nexport default {\n  cardFace,\n  cardTitle,\n  suit,\n};\n","import React from 'react';\nimport red from '@material-ui/core/colors/red';\nimport { Typography } from '@material-ui/core';\nimport styles from './Card.styles';\n\ninterface CardProps {\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardNo: number;\n  dropped: boolean;\n  handNo: number;\n  name: string;\n  playerNo: number;\n  suit: string;\n}\n\nconst Card = React.memo((props: CardProps) => {\n  const {\n    dropped, suit, name, cardHandler,\n    playerNo, handNo, cardNo,\n  } = props;\n  // handle click to for card\n  const handleClick = React.useCallback((): void => {\n    cardHandler && cardHandler(playerNo, handNo, cardNo);\n  }, [cardHandler, cardNo, handNo, playerNo]);\n  // checking color based off suits: ♣♦♥♠\n  const cardColor: React.CSSProperties = {\n    color: suit === '♣' || suit === '♠' ? 'black' : red[500],\n    backgroundColor: dropped ? red[100] : 'white',\n  };\n\n  return (\n    <div style={{ ...styles.cardFace, ...cardColor }} onClick={handleClick} role=\"main\">\n      <div style={styles.cardTitle}>\n        {name + suit}\n      </div>\n      <Typography variant=\"h4\" style={{ ...styles.suit, ...cardColor }}>\n        {suit}\n      </Typography>\n    </div>\n  );\n});\n\nexport default Card;\n","import React from 'react';\nimport purple from '@material-ui/core/colors/purple';\nimport { Typography } from '@material-ui/core';\nimport Card from './card/Card';\nimport { DBHand } from '../../../../store/types';\n\nconst boldStyle: React.CSSProperties = { fontWeight: 'bold', marginTop: '0.5em' };\nconst normalStyle: React.CSSProperties = { fontWeight: 'normal', marginTop: '0.5em' };\n\ninterface HandProps {\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hand: DBHand;\n  handNo: number;\n  isBlackJack: boolean;\n  isHandTurn: boolean;\n  isMultiHand: boolean;\n  isPlayerTurn: boolean;\n  playerNo: number;\n}\n\nconst Hand: React.FC<HandProps> = (props: HandProps) => {\n  const {\n    cardHandler, cardsToDiscard, hand, handNo,\n    isBlackJack, isHandTurn, isMultiHand, isPlayerTurn,\n    playerNo,\n  } = props;\n\n  const styles = React.useMemo(() => (\n    isPlayerTurn && (!isMultiHand || (isMultiHand && isHandTurn))\n      ? { ...boldStyle, color: purple[700] } : normalStyle\n  ),\n  [isPlayerTurn, isMultiHand, isHandTurn]);\n  const handWeight = hand.weight || 0;\n\n  return (\n    <>\n      <Typography variant=\"h4\" style={styles}>\n        {isBlackJack && `${handWeight > 21 ? 'Bust' : 'Hand'}: ${handWeight}`}\n      </Typography>\n      {hand.cards.map((card, i) => {\n        const dropped: boolean = cardsToDiscard.includes(i);\n        return (\n          <Card\n            key={card.name + card.suit}\n            cardHandler={cardHandler}\n            cardNo={i}\n            dropped={dropped}\n            handNo={handNo}\n            name={card.name}\n            playerNo={playerNo}\n            suit={card.suit}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nexport default Hand;\n","const player: React.CSSProperties = {\n  borderRadius: 5,\n  display: 'inline-block',\n  margin: 10,\n  padding: 20,\n};\n\nconst width: React.CSSProperties = { minWidth: '100px' };\n\nexport default {\n  player,\n  width,\n};\n","import React from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport cyan from '@material-ui/core/colors/cyan';\nimport green from '@material-ui/core/colors/green';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport red from '@material-ui/core/colors/red';\nimport { Typography } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport Hand from '../Hand';\nimport { DBTurn, DBPlayer } from '../../../../../store/types';\nimport styles from './Player.styles';\n\ninterface PlayerProps {\n  betHandler?: (id: number, event: React.ChangeEvent<Record<string, unknown>>, value: number) => void;\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  player: DBPlayer;\n  playerNo: number;\n  turn: DBTurn;\n}\n\nconst Player: React.FC<PlayerProps> = (props: PlayerProps) => {\n  // get vars from props\n  const {\n    betHandler, cardHandler, cardsToDiscard, hideHands,\n    isBlackJack, player, playerNo, turn,\n  } = props;\n  // set booleans\n  const isPlayerTurn: boolean = !!turn && playerNo === turn.player;\n  const isMultiHand: boolean = player.hands.length > 1;\n  const showSlider: boolean = !!hideHands && isBlackJack && player.id !== 0 && !player.isBot;\n  // set slider variables\n  const minBet: number = Math.max(Math.min(player.money, 5), 0);\n  const maxBet: number = Math.max(Math.min(player.money, 100), 10);\n  const step = 5;\n  const onSliderChange = React.useCallback(\n    (event: React.ChangeEvent<Record<string, unknown>>, value: number | number[]): void => {\n      betHandler && betHandler(player.id, event, value as number);\n    },\n    [betHandler, player.id],\n  );\n  // set colors\n  let color: React.CSSProperties = isPlayerTurn ? { background: cyan[200] } : {};\n  const weight: React.CSSProperties = isPlayerTurn ? { fontWeight: 'bold' } : { fontWeight: 'normal' };\n  if (player.status === 'win') {\n    color = { background: green[300] };\n  }\n  if (player.status === 'draw') {\n    color = { background: blueGrey[300] };\n  }\n  if (player.status === 'lose') {\n    color = { background: red[300] };\n  }\n\n  return (\n    <Card style={{ ...styles.player, ...color }}>\n      <Typography variant=\"h4\" style={{ ...weight }}>\n        {`${player.name}: $${player.money}`}\n      </Typography>\n      {showSlider && (\n        <Slider\n          max={maxBet}\n          min={minBet}\n          onChange={onSliderChange}\n          step={step}\n          style={styles.width}\n          value={player.bet}\n        />\n      )}\n      {isBlackJack && player.id !== 0 && (\n        <Typography variant=\"h5\">\n          {`Bet: $${player.bet}`}\n        </Typography>\n      )}\n      {player.hands.map((hand, i) => {\n        const isHandTurn: boolean = !!turn && turn.hand === i;\n        return (\n          <div key={`hand${i}`}>\n            {!hideHands && (\n              <Hand\n                cardHandler={cardHandler}\n                cardsToDiscard={cardsToDiscard}\n                hand={hand}\n                handNo={i}\n                isBlackJack={isBlackJack}\n                isHandTurn={isHandTurn}\n                isMultiHand={isMultiHand}\n                isPlayerTurn={isPlayerTurn}\n                playerNo={playerNo}\n              />\n            )}\n          </div>\n        );\n      })}\n    </Card>\n  );\n};\n\nexport default Player;\n","import React from 'react';\nimport Player from './player/Player';\nimport { DBPlayer, DBTurn } from '../../../../store/types';\n// Parents: GameTable\n\ninterface BoardProps {\n  betHandler?: (id: number, event: React.ChangeEvent<Record<string, unknown>>, value: number) => void;\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  players: DBPlayer[];\n  turn: DBTurn;\n}\n\nconst Board: React.FC<BoardProps> = (props: BoardProps) => {\n  const {\n    betHandler, cardHandler, cardsToDiscard, hideHands,\n    isBlackJack, players, turn,\n  } = props;\n\n  return (\n    <>\n      {players.map((player, i) => (\n        <Player\n          key={`player${i}`}\n          betHandler={betHandler}\n          cardHandler={cardHandler}\n          cardsToDiscard={cardsToDiscard}\n          hideHands={hideHands}\n          isBlackJack={isBlackJack}\n          player={player}\n          playerNo={i}\n          turn={turn}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport MuiButton from '@material-ui/core/Button';\nimport { PropTypes } from '@material-ui/core/';\n\nconst buttonStyle: React.CSSProperties = { margin: 12 };\nconst color: PropTypes.Color = 'primary';\n\nexport interface ButtonProps {\n  onClick: (name: string) => void;\n  name: string;\n}\n\nconst Button: React.FC<ButtonProps> = React.memo(({ onClick, name }: ButtonProps) => (\n  <MuiButton\n    color={color}\n    onClick={(): void => onClick(name)}\n    style={buttonStyle}\n    variant=\"contained\"\n  >\n    {name}\n  </MuiButton>\n));\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nexport interface ButtonGroupProps {\n  gameFunctions: string[];\n  onClick: (name: string) => void;\n}\n\nconst ButtonGroup: React.FC<ButtonGroupProps> = ({ gameFunctions, onClick }: ButtonGroupProps) => (\n  <div>\n    {gameFunctions.map((key) => (\n      <Button key={key} onClick={onClick} name={key} />\n    ))}\n  </div>\n);\n\nexport default ButtonGroup;\n","import React from 'react';\nimport Board from './board/Board';\nimport ButtonGroup from './button-group/ButtonGroup';\nimport { DBPlayer, DBTurn } from '../../../store/types';\n\ninterface GameTableProps {\n  betHandler?: (id: number, event: React.ChangeEvent<Record<string, unknown>>, value: number) => void;\n  cardClickHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  gameFunctions: string[];\n  gameOver: boolean;\n  hideHands: boolean;\n  isBlackJack: boolean;\n  onClick: (name: string) => void;\n  players: DBPlayer[];\n  turn: DBTurn;\n}\n\n/* GameTable ->  Board -> Player -> Hand -> Card\n *          |->  Button Group  ->  Button        */\nconst GameTable = (props: GameTableProps): React.ReactElement => {\n  const {\n    betHandler, cardClickHandler, cardsToDiscard, gameFunctions,\n    gameOver, hideHands, isBlackJack, players, turn, onClick,\n  } = props;\n\n  // move game buttons to make turn more obvious and support mobile\n  const played: DBPlayer[] = React.useMemo(() => players.slice(0, turn.player + 1), [players, turn.player]);\n  const future: DBPlayer[] = React.useMemo(() => players.slice(turn.player + 1), [players, turn.player]);\n  const playersToDisplay: DBPlayer[] = React.useMemo(() => (\n    (!hideHands && gameOver === false)\n      ? players.slice(turn.player, turn.player + 1)\n      : players\n  ), [hideHands, gameOver, players, turn.player]);\n\n  return (\n    <>\n      {isBlackJack && !hideHands\n        ? (\n          <>\n            <Board\n              players={played}\n              betHandler={betHandler}\n              cardHandler={cardClickHandler}\n              cardsToDiscard={cardsToDiscard}\n              hideHands={hideHands}\n              isBlackJack={isBlackJack}\n              turn={turn}\n            />\n            <ButtonGroup gameFunctions={gameFunctions} onClick={onClick} />\n            <Board\n              players={future}\n              betHandler={betHandler}\n              cardHandler={cardClickHandler}\n              cardsToDiscard={cardsToDiscard}\n              hideHands={hideHands}\n              isBlackJack={isBlackJack}\n              turn={{ player: -1, hand: -1 }}\n            />\n          </>\n        ) : (\n          <>\n            <Board\n              players={playersToDisplay}\n              betHandler={betHandler}\n              cardHandler={cardClickHandler}\n              cardsToDiscard={cardsToDiscard}\n              hideHands={hideHands}\n              isBlackJack={isBlackJack}\n              turn={turn}\n            />\n            <ButtonGroup gameFunctions={gameFunctions} onClick={onClick} />\n          </>\n        )}\n    </>\n  );\n};\n\nGameTable.defaultProps = {\n  cardsToDiscard: [],\n  gameFunctions: [],\n  gameOver: false,\n  hideHands: false,\n  isBlackJack: true,\n};\n\nexport default GameTable;\n","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar teal = {\n  50: '#e0f2f1',\n  100: '#b2dfdb',\n  200: '#80cbc4',\n  300: '#4db6ac',\n  400: '#26a69a',\n  500: '#009688',\n  600: '#00897b',\n  700: '#00796b',\n  800: '#00695c',\n  900: '#004d40',\n  A100: '#a7ffeb',\n  A200: '#64ffda',\n  A400: '#1de9b6',\n  A700: '#00bfa5'\n};\nvar _default = teal;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar orange = {\n  50: '#fff3e0',\n  100: '#ffe0b2',\n  200: '#ffcc80',\n  300: '#ffb74d',\n  400: '#ffa726',\n  500: '#ff9800',\n  600: '#fb8c00',\n  700: '#f57c00',\n  800: '#ef6c00',\n  900: '#e65100',\n  A100: '#ffd180',\n  A200: '#ffab40',\n  A400: '#ff9100',\n  A700: '#ff6d00'\n};\nvar _default = orange;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar deepPurple = {\n  50: '#ede7f6',\n  100: '#d1c4e9',\n  200: '#b39ddb',\n  300: '#9575cd',\n  400: '#7e57c2',\n  500: '#673ab7',\n  600: '#5e35b1',\n  700: '#512da8',\n  800: '#4527a0',\n  900: '#311b92',\n  A100: '#b388ff',\n  A200: '#7c4dff',\n  A400: '#651fff',\n  A700: '#6200ea'\n};\nvar _default = deepPurple;\nexports.default = _default;","import { DBCard } from '../../../store/types';\n\n/** calculate the weight of a hand */\nexport default function weighHand(hand: DBCard[] = []): { weight: number; soft: boolean } {\n  // set return values\n  let weight = 0;\n  let soft = false;\n\n  // find the weight of the hand\n  hand.forEach((card) => {\n    const cardWeight = card.weight || 0;\n    if (cardWeight === 14) {\n      // A\n      if (weight <= 10) {\n        weight += 11;\n        soft = true;\n      } else {\n        weight += 1;\n      }\n    } else if (cardWeight > 10) {\n      // J - K\n      weight += 10;\n    } else {\n      // 2 - 10\n      weight += cardWeight;\n    }\n    // reduce by 10 if bust and soft\n    if (weight > 21 && soft) {\n      weight -= 10;\n      soft = false;\n    }\n  });\n\n  // return object w/ useful information\n  return { weight, soft };\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nconst Rules: React.FC = React.memo(() => (\n  <>\n    <Typography variant=\"h5\">\n      Objective:\n    </Typography>\n    <Typography>\n      Get as close to 21 as you can, without going over. Each card is worth\n      it&apos;s number, J/Q/K are worth 10, and an Ace is worth 11 unless you go\n      over 21, then it is worth 1.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Blackjack:\n    </Typography>\n    <Typography>\n      Delt an Ace and a 10/J/Q/K, this casino pays 3:2, but Vegas casinos do\n      6:5.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Hit:\n    </Typography>\n    <Typography>\n      Get an extra card which adds to your total.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Stay:\n    </Typography>\n    <Typography>\n      Move to the next player.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Double Down:\n    </Typography>\n    <Typography>\n      This option is available with a two card hand; before another card has\n      been drawn double your bet and receive one (and only one) additional card\n      to your hand. Play then moves to the next player.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Splitting Pairs:\n    </Typography>\n    <Typography>\n      When you are dealt a pair of cards of the same rank, you are allowed to\n      split into two separate hands and play them independently. You will match\n      your bet for the second hand. A double after a split is ok\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Resplitting:\n    </Typography>\n    <Typography>\n      When you get additional pairs in the first two cards of a hand you can\n      resplit. Typically a player is allowed to split up to 3 times (delt 4 of a\n      kind).\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Splitting Aces:\n    </Typography>\n    <Typography>\n      Player is limited to drawing only one additional card on each Ace. If you\n      draw a ten-valued card on one of your split Aces, the hand is not\n      considered a Blackjack (it is treated as a normal 21). You can re-split\n      Aces.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Other Rules:\n    </Typography>\n    <ul>\n      <Typography><li>Dealer hits on 16 or less and soft 17</li></Typography>\n      <Typography><li>Minimum bet is $5</li></Typography>\n    </ul>\n    <Typography variant=\"h5\">\n      AI Algorithm:\n    </Typography>\n    <ul>\n      <Typography><li>House Rules: 6 decks, H17, DAS, No Surrender, Peek</li></Typography>\n      <Typography><li>Estimated casino edge for these rules: 0.66%</li></Typography>\n    </ul>\n  </>\n));\n\nexport default Rules;\n","import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\n\nexport interface CellProps {\n  color?: string;\n  style?: React.CSSProperties;\n  text: string;\n  rowSpan?: number;\n  colSpan?: number;\n}\n\nconst Cell: React.FC<CellProps> = React.memo((props: CellProps) => {\n  const {\n    color, text, style, ...otherProps\n  } = props;\n\n  const stl: React.CSSProperties = {\n    ...style,\n    textAlign: 'center',\n    paddingLeft: 0,\n    paddingRight: 0,\n    backgroundColor: color,\n  };\n\n  return (\n    <TableCell size=\"small\" style={stl} {...otherProps}>\n      {text}\n    </TableCell>\n  );\n});\n\nexport default Cell;\n","import React from 'react';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Cell, { CellProps } from './Cell';\n\nexport interface RowProps {\n  data: CellProps[];\n  name: string;\n}\n\nconst tableCellStyle: React.CSSProperties = { textAlign: 'center', padding: 0 };\n\nconst Row: React.FC<RowProps> = ({ name, data }: RowProps) => (\n  <TableRow>\n    <TableCell style={tableCellStyle}>\n      {name}\n    </TableCell>\n    {data.map((text, i) => <Cell key={i} {...text} />)}\n  </TableRow>\n);\n\nexport default Row;\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Cell from './Cell';\nimport Row, { RowProps } from './Row';\n\ninterface BlackjackTable {\n  data: RowProps[];\n  title: string;\n}\n\nconst cards: string[] = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'A'];\nconst cellStyle: React.CSSProperties = { width: 60 };\n\nconst BlackjackTable: React.FC<BlackjackTable> = ({ title, data }: BlackjackTable) => (\n  <Table>\n    <TableHead>\n      <TableRow>\n        <TableCell colSpan={11}>\n          {title}\n        </TableCell>\n      </TableRow>\n    </TableHead>\n    <TableBody>\n      <TableRow>\n        <Cell rowSpan={2} style={cellStyle} text=\"Hand\" />\n        <Cell colSpan={10} text=\"Dealer\" />\n      </TableRow>\n      <TableRow>\n        {cards.map((c) => <Cell key={c} text={c} />)}\n      </TableRow>\n      {data.map((obj) => <Row key={obj.name} name={obj.name} data={obj.data} />)}\n    </TableBody>\n  </Table>\n);\n\nexport default BlackjackTable;\n","// react\nimport React from 'react';\n// material-ui\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n// colors\nimport green from '@material-ui/core/colors/green';\nimport teal from '@material-ui/core/colors/teal';\nimport red from '@material-ui/core/colors/red';\nimport orange from '@material-ui/core/colors/orange';\nimport deepPurple from '@material-ui/core/colors/deepPurple';\n// components\nimport Cell, { CellProps } from './Cell';\nimport { RowProps } from './Row';\nimport BlackjackTable from './BlackjackTable';\n// Parents: blackjack/Header\n\n/* Help  ->  BlackJackTable  ->  Row  -->  Cell */\nconst Help: React.FC = React.memo(() => {\n  // options\n  const h: CellProps = { color: green[200], text: 'H' };\n  const d: CellProps = { color: teal[200], text: 'D' };\n  const s: CellProps = { color: red[200], text: 'S' };\n  const p: CellProps = { color: orange[200], text: 'P' };\n  const ds: CellProps = { color: deepPurple[200], text: 'DS' };\n\n  // algorithms for options\n  const hardTtl: RowProps[] = [\n    { name: 'Hard 5', data: [h, h, h, h, h, h, h, h, h, h]},\n    { name: 'Hard 6', data: [h, h, h, h, h, h, h, h, h, h]},\n    { name: 'Hard 7', data: [h, h, h, h, h, h, h, h, h, h]},\n    { name: 'Hard 8', data: [h, h, h, h, h, h, h, h, h, h]},\n    { name: 'Hard 9', data: [h, d, d, d, d, h, h, h, h, h]},\n    { name: 'Hard 10', data: [d, d, d, d, d, d, d, d, h, h]},\n    { name: 'Hard 11', data: [d, d, d, d, d, d, d, d, d, d]},\n    { name: 'Hard 12', data: [h, h, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 13', data: [s, s, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 14', data: [s, s, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 15', data: [s, s, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 16', data: [s, s, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 17', data: [s, s, s, s, s, s, s, s, s, s]},\n    { name: 'Hard 18+', data: [s, s, s, s, s, s, s, s, s, s]},\n  ];\n  const softTtl: RowProps[] = [\n    { name: 'Ace + 2', data: [h, h, h, d, d, h, h, h, h, h]},\n    { name: 'Ace + 3', data: [h, h, h, d, d, h, h, h, h, h]},\n    { name: 'Ace + 4', data: [h, h, d, d, d, h, h, h, h, h]},\n    { name: 'Ace + 5', data: [h, h, d, d, d, h, h, h, h, h]},\n    { name: 'Ace + 6', data: [h, d, d, d, d, h, h, h, h, h]},\n    { name: 'Ace + 7', data: [ds, ds, ds, ds, ds, s, s, h, h, h]},\n    { name: 'Ace + 8', data: [s, s, s, s, ds, s, s, s, s, s]},\n    { name: 'Ace + 9', data: [s, s, s, s, s, s, s, s, s, s]},\n  ];\n  const pairs: RowProps[] = [\n    { name: '(2,2)', data: [p, p, p, p, p, p, h, h, h, h]},\n    { name: '(3,3)', data: [p, p, p, p, p, p, h, h, h, h]},\n    { name: '(4,4)', data: [h, h, h, p, p, h, h, h, h, h]},\n    { name: '(5,5)', data: [d, d, d, d, d, d, d, d, h, h]},\n    { name: '(6,6)', data: [p, p, p, p, p, h, h, h, h, h]},\n    { name: '(7,7)', data: [p, p, p, p, p, p, h, h, h, h]},\n    { name: '(8,8)', data: [p, p, p, p, p, p, p, p, p, p]},\n    { name: '(9,9)', data: [p, p, p, p, p, s, p, p, s, s]},\n    { name: '(T,T)', data: [s, s, s, s, s, s, s, s, s, s]},\n    { name: '(A,A)', data: [p, p, p, p, p, p, p, p, p, p]},\n  ];\n\n  return (\n    <>\n      <BlackjackTable data={hardTtl} title=\"Hard Totals\" />\n      <BlackjackTable data={softTtl} title=\"Soft Totals\" />\n      <BlackjackTable data={pairs} title=\"Pairs\" />\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell colSpan={11}>\n              Key\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow>\n            <Cell {...h} />\n            <Cell colSpan={2} text=\"= Hit\" />\n            <Cell {...s} />\n            <Cell colSpan={3} text=\"= Stand\" />\n            <Cell {...p} />\n            <Cell colSpan={3} text=\"= Split\" />\n          </TableRow>\n          <TableRow>\n            <Cell {...d} />\n            <Cell colSpan={10} text=\"= Double (Hit if not allowed)\" />\n          </TableRow>\n          <TableRow>\n            <Cell {...ds} />\n            <Cell colSpan={10} text=\"= Double (Stand if not allowed)\" />\n          </TableRow>\n        </TableBody>\n      </Table>\n    </>\n  );\n});\n\nexport default Help;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport InfoPopup from '../../common/info-popover/InfoPopup';\nimport Rules from './Rules';\nimport Help from './help';\n\nconst Header: React.FC = React.memo(() => (\n  <div className=\"flex-container\">\n    <Typography variant=\"h2\" gutterBottom>Blackjack (21)</Typography>\n    <InfoPopup title=\"Rules\">\n      <Rules />\n      <Help />\n    </InfoPopup>\n  </div>\n));\n\nexport default Header;\n","/* Theoretical Max Score:   386 everyone splits 3 times and busts with 30, dealer bust with 26\n * Card Point Value:        340-380\n * split aces is not blackjack\n * get second card for dealer and hide it\n * buy insurance on dealer's Ace\n */\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport asyncForEach from '../../../helpers/asyncForEach';\nimport weighHand from './blackjackHelpers';\nimport Header from './Header';\nimport GameTable from '../game-table';\nimport Deck from '../../../apis/Deck';\nimport {\n  DBHand, DBPlayer, DBRootState, GameFunctions,\n} from '../../../store/types';\nimport {\n  doubleHand, hitHand, setNewGame, splitHand, stayHand,\n  updateGameFunctions, updateHasFunctions, updateHideHands,\n} from '../../../store/modules/blackjack';\nimport { newHand, payout, updateBet } from '../../../store/modules/players';\n\ninterface PlayerStats {\n  house: number;\n  payout: number;\n  status: string;\n}\n\n// Dealer constant\nconst DEALER = 0;\n\nconst BlackJack: React.FC = () => {\n  const {\n    turn, players, gameFunctions, hideHands,\n    hasFunctions,\n  } = useSelector((state: DBRootState) => ({\n    ...state.blackjack,\n    players: state.players,\n    turn: state.turn,\n  }));\n  const dispatch = useDispatch();\n\n  /** get the game functions for the present hand */\n  const getGameFunctions = React.useCallback((hand: DBHand): void => {\n    if (!hand) { return; }\n\n    // reset game functions\n    const newGameFunctions = [GameFunctions.STAY];\n    const handWeight = hand.weight || 0;\n\n    // check if not a bust\n    if (handWeight < 21) {\n      newGameFunctions.push(GameFunctions.HIT);\n      // check if you only have 2 cards\n      if (hand.cards.length === 2) {\n        newGameFunctions.push(GameFunctions.DOUBLE);\n        // check if card1 and card2 have equal weight\n        const { weight: weight1 } = weighHand([hand.cards[0]]);\n        const { weight: weight2 } = weighHand([hand.cards[1]]);\n        if (weight1 === weight2) {\n          newGameFunctions.push(GameFunctions.SPLIT);\n        }\n      }\n    }\n\n    // update game state\n    dispatch(updateGameFunctions(newGameFunctions));\n    dispatch(updateHasFunctions(true));\n  }, [dispatch]);\n\n  /** function that takes a hand of duplicates and makes 2 hands */\n  const split = React.useCallback((): void => {\n    // get state values\n    const { id, hands } = players[turn.player];\n    dispatch(splitHand(hands, id, turn.hand, weighHand));\n  }, [dispatch, players, turn.hand, turn.player]);\n\n  /** function to pass to the next player */\n  const stay = React.useCallback((): void => {\n    // get state values\n    const lastHand = players[turn.player].hands.length - 1;\n    // check if the player has more than 1 hand\n    dispatch(stayHand(turn.hand < lastHand));\n  }, [dispatch, players, turn.hand, turn.player]);\n\n  /** function that doubles your bet, but you only get 1 card */\n  const double = React.useCallback((): void => {\n    dispatch(doubleHand(players[turn.player], turn, weighHand));\n  }, [dispatch, players, turn]);\n\n  /** function to get a new card */\n  const hit = React.useCallback((): void => {\n    // get state values\n    const { id, hands } = players[turn.player];\n    // logic to hit\n    dispatch(hitHand(hands, id, turn.hand, weighHand));\n  }, [dispatch, players, turn.hand, turn.player]);\n\n  /** Start a new round of hands */\n  const dealHands = React.useCallback((): void => {\n    // shuffle the deck\n    Deck.shuffle().then(() => {\n      // deal the hands\n      asyncForEach(players, async (player: DBPlayer) => {\n        const num = player.id !== DEALER ? 2 : 1;\n        await dispatch(newHand(player.id, num, weighHand));\n      });\n    });\n    dispatch(updateHasFunctions(false));\n  }, [dispatch, players]);\n\n  /** Start a new game */\n  const newGame = React.useCallback((): void => {\n    dispatch(setNewGame(players));\n  }, [dispatch, players]);\n\n  /** function to finish betting and start the game */\n  const finishBetting = React.useCallback((): void => {\n    dispatch(updateHideHands(false));\n    dealHands();\n  }, [dealHands, dispatch]);\n\n  /** finish the game and check for a winner */\n  const finishGame = React.useCallback((): void => {\n    // state variables\n    const dealer = players.filter((p) => p.id === DEALER)[0];\n    const dWeight = dealer.hands[0].weight || 0;\n    const dLength = dealer.hands[0].cards.length;\n    // track and find the winners\n    const playerStats: PlayerStats = { house: 0, payout: 0, status: '' };\n    // helper functions\n    const win = (ps: PlayerStats, bet: number, mul = 1): void => {\n      ps.house -= Math.floor(mul * bet);\n      ps.payout = Math.floor(mul * bet);\n      ps.status = 'win';\n    };\n    const loss = (ps: PlayerStats, bet: number): void => {\n      ps.house += bet;\n      ps.payout = -bet;\n      ps.status = 'lose';\n    };\n    players.forEach((player) => {\n      const { id, bet } = player;\n      if (id === DEALER) {\n        if (playerStats.house > 0) {\n          playerStats.status = 'win';\n        } else if (playerStats.house < 0) {\n          playerStats.status = 'lose';\n        } else {\n          playerStats.status = 'push';\n        }\n        dispatch(payout(id, playerStats.status, playerStats.house));\n      } else {\n        player.hands.forEach((hand) => {\n          const { weight = 0, cards } = hand;\n          if (dWeight === 21 && dLength === 2) {\n            // dealer BlackJack\n            loss(playerStats, bet);\n          } else if (weight === 21 && cards.length === 2) {\n            // player BlackJack\n            win(playerStats, bet, 6 / 5);\n          } else if (weight <= 21 && (weight > dWeight || dWeight > 21)) {\n            win(playerStats, bet);\n          } else if (weight <= 21 && weight === dWeight) {\n            playerStats.payout = 0;\n            playerStats.status = 'push';\n          } else {\n            loss(playerStats, bet);\n          }\n        });\n        dispatch(payout(id, playerStats.status, playerStats.payout));\n      }\n    });\n\n    // update game functions\n    dispatch(updateGameFunctions([GameFunctions.NEW_GAME]));\n  }, [dispatch, players]);\n\n  /** function to get a new card */\n  const hitDealer = React.useCallback((): void => {\n    // get state values\n    const { hands } = players.filter((p) => p.id === DEALER)[0];\n    // logic to hit\n    dispatch(hitHand(hands, DEALER, 0, weighHand));\n  }, [dispatch, players]);\n\n  /** function to execute dealer logic */\n  const playDealer = React.useCallback((): void => {\n    const dealer = players.filter((p) => p.id === DEALER)[0];\n    const hand = dealer.hands[0].cards;\n    const { weight, soft } = weighHand(hand);\n    // Dealer hits on 16 or less and soft 17\n    if (weight <= 16 || (weight === 17 && soft)) {\n      dispatch(updateHasFunctions(true));\n      hitDealer();\n    } else {\n      finishGame();\n    }\n  }, [dispatch, finishGame, hitDealer, players]);\n\n  // AI: https://www.blackjackinfo.com/blackjack-basic-strategy-engine/\n  const playBot = React.useCallback((): void => {\n    // player hand\n    const hand = players[turn.player].hands[turn.hand];\n    // validate hand exists\n    if (!hand) { return; }\n    // get remaining vars\n    const dealer = players[players.length - 1].hands[0];\n    const n = hand.weight || 0;\n    const { soft } = hand;\n    // card / dealer weight\n    const { weight: d } = weighHand([dealer.cards[0]]);\n    const { weight: x } = weighHand([hand.cards[0]]);\n    const { weight: y } = weighHand([hand.cards[1]]);\n\n    // play AI logic\n    if (n < 22) {\n      // split algorithm\n      if (x === y) {\n        if (x === 2 || x === 3 || x === 7) {\n          // 2,3,7, split d2-7, hit d8+\n          d <= 7 ? split() : hit();\n        } else if (x === 4) {\n          // 4, split d5-6, else hit\n          d === 5 || d === 6 ? split() : hit();\n        } else if (x === 5) {\n          // 5, double d2-9, hit d10+\n          d <= 9 ? double() : hit();\n        } else if (x === 6) {\n          // 6, split d2-6, else hit\n          d <= 6 ? split() : hit();\n        } else if (x === 9) {\n          // 9, d7,10+ stay, else split\n          d === 7 || d >= 10 ? stay() : split();\n        } else if (x === 8 || x === 14) {\n          // 8,A split\n          split();\n        } else {\n          // 10 Stay\n          stay();\n        }\n      } else if (n < 20 && soft) {\n        // soft hands, A9+ stays\n        if (n === 13 || n === 14) {\n          // A2-A3 double d5-6, hit d2-4, d7-A\n          d === 5 || d === 6 ? double() : hit();\n        } else if (n === 15 || n === 16) {\n          // A4-A5 double d4-6, hit d2-3, d7-A\n          d >= 4 && d <= 6 ? double() : hit();\n        } else if (n === 17) {\n          // A6 double d3-6, hit d2, d7-A\n          d >= 3 && d <= 6 ? double() : hit();\n        } else if (n === 18) {\n          // A7 double d2-6, stay d7-8, hit d9-A\n          if (d >= 2 && d <= 6) {\n            double();\n          } else if (d === 7 || d === 8) {\n            stay();\n          } else {\n            hit();\n          }\n        } else if (n === 19) {\n          // A8 double d6, else stay\n          d === 6 ? double() : stay();\n        }\n      } else if (n < 17 && !soft) {\n        // hard hands, 17+ stays\n        if (n >= 5 && n <= 8) {\n          // 5-8 hit\n          hit();\n        } else if (n === 9) {\n          // 9 double d3-6, hit d2, d7-A\n          d >= 3 && d <= 6 ? double() : hit();\n        } else if (n === 10) {\n          // 10 double d2-9, hit d10-A\n          d >= 2 && d <= 9 ? double() : hit();\n        } else if (n === 11) {\n          // 11 double\n          double();\n        } else if (n === 12) {\n          // 12 hit d2-3, stay d4-6, hit 7-A\n          d >= 4 && d <= 6 ? stay() : hit();\n        } else if (n >= 13 && n <= 16) {\n          // 13-16 stay d2-6, hit 7-A\n          d >= 2 && d <= 6 ? stay() : hit();\n        }\n      } else {\n        stay();\n      }\n    } else {\n      // bust\n      stay();\n    }\n  }, [double, hit, players, split, stay, turn.hand, turn.player]);\n\n  const checkUpdate = React.useCallback((): void => {\n    const player = players[turn.player];\n\n    if (hasFunctions || hideHands) { return; }\n    if (player) {\n      if (!player.isBot && player.id !== DEALER) {\n        getGameFunctions(player.hands[turn.hand]);\n        return;\n      }\n      if (player.isBot && player.id !== DEALER) {\n        playBot();\n        return;\n      }\n    }\n    !gameFunctions.includes(GameFunctions.NEW_GAME) && playDealer();\n  }, [gameFunctions, getGameFunctions, hasFunctions, hideHands, playBot, playDealer, players, turn.hand, turn.player]);\n\n  /** function to be called on card clicks */\n  const cardClickHandler = React.useCallback((playerNo: number, handNo: number, cardNo: number): void => {\n    // eslint-disable-next-line no-console\n    console.log(players[playerNo].hands[handNo].cards[cardNo]);\n  }, [players]);\n\n  /** function to be called on card clicks */\n  const betHandler = React.useCallback((id: number, event: React.ChangeEvent<Record<string, unknown>>, bet: number): void => {\n    dispatch(updateBet(id, bet));\n  }, [dispatch]);\n\n  /** function to route click actions */\n  const handleGameFunctionClick = React.useCallback((type: string): void => {\n    switch (type) {\n      case GameFunctions.NEW_GAME:\n        newGame(); break;\n      case GameFunctions.FINISH_BETTING:\n        finishBetting(); break;\n      case GameFunctions.STAY:\n        stay(); break;\n      case GameFunctions.HIT:\n        hit(); break;\n      case GameFunctions.DOUBLE:\n        double(); break;\n      case GameFunctions.SPLIT:\n        split(); break;\n      default:\n        // eslint-disable-next-line no-console\n        console.error('Unknown Game Function: ', type);\n    }\n  }, [double, finishBetting, hit, newGame, split, stay]);\n\n  /* render the UI */\n  checkUpdate();\n\n  return (\n    <>\n      <Header />\n      <GameTable\n        betHandler={betHandler}\n        cardClickHandler={cardClickHandler}\n        gameFunctions={gameFunctions}\n        onClick={handleGameFunctionClick}\n        hideHands={hideHands}\n        players={players}\n        turn={turn}\n      />\n    </>\n  );\n};\n\nexport default BlackJack;\n"],"sourceRoot":""}