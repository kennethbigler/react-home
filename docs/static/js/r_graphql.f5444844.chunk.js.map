{"version":3,"sources":["components/resume/graphql/common/Loading.tsx","components/resume/graphql/repository/fragments.ts","components/resume/graphql/repository/item/Link.tsx","components/resume/graphql/repository/item/Description.tsx","components/resume/graphql/repository/item/WatchRepository.tsx","components/resume/graphql/repository/item/StarRepository.tsx","components/resume/graphql/repository/item/UnstarRepository.tsx","components/resume/graphql/repository/item/RepositoryItem.tsx","components/resume/graphql/repository/item/FetchMore.tsx","components/resume/graphql/repository/RepositoryList.tsx","components/resume/graphql/ErrorMessage.tsx","components/resume/graphql/Profile.tsx","components/resume/graphql/Header.tsx","components/resume/graphql/NoToken.tsx","components/resume/graphql/GraphQL.tsx"],"names":["Loading","React","memo","REPOSITORY_FRAGMENT","gql","Link","props","children","otherProps","target","rel","Description","descriptionHTML","primaryLanguage","owner","className","dangerouslySetInnerHTML","__html","Typography","display","name","href","url","login","WATCH_REPOSITORY","VIEWER_SUBSCRIPTIONS","isWatch","viewerSubscription","updateWatch","cache","mutationResult","data","updateSubscription","subscribable","id","repository","readFragment","fragment","totalCount","watchers","writeFragment","WatchRepository","useMutation","variables","optimisticResponse","__typename","update","Button","onClick","variant","color","STAR_REPOSITORY","updateAddStar","addStar","starrable","stargazers","StarRepository","viewerHasStarred","UNSTAR_REPOSITORY","updateRemoveStar","removeStar","UnstarRepository","RepositoryItem","FetchMore","loading","hasNextPage","updateQuery","fetchMore","previousResult","fetchMoreResult","viewer","repositories","edges","RepositoryList","map","node","pageInfo","cursor","endCursor","ErrorMessage","error","toString","GET_REPOSITORIES_OF_CURRENT_USER","Profile","useQuery","Header","authToken","onChange","TextField","label","placeholder","value","style","margin","fullWidth","NoToken","errorLink","onError","InMemoryCache","GraphQL","gqlToken","useSelector","state","dispatch","useDispatch","useState","setAuthToken","handleChange","e","token","setToken","httpLink","HttpLink","uri","headers","authorization","link","ApolloLink","from","client","ApolloClient"],"mappings":"+OAIeA,I,EAAAA,EAFWC,IAAMC,MAAK,IAAM,gDCwB5BC,MAxBaC,YAAH,gV,yBCaVC,MAToBC,IAAsB,MAC/CC,EAA4BD,EAA5BC,SAAaC,EADiC,YAClBF,EADkB,cAEtD,OACE,6CAAOE,GAAP,IAAmBC,OAAO,SAASC,IAAI,sBAAvC,SACGH,MC4BQI,I,EAAAA,EA5BkCL,IAA6B,MACpEM,EAA4CN,EAA5CM,gBAAiBC,EAA2BP,EAA3BO,gBAAiBC,EAAUR,EAAVQ,MAE1C,OACE,sBAAKC,UAAU,6BAAf,UACE,qBACEA,UAAU,kCAEVC,wBAAyB,CAAEC,OAAQL,KAErC,sBAAKG,UAAU,qCAAf,UACGF,GACC,cAACK,EAAA,EAAD,CAAYC,QAAQ,SAApB,6BACgBN,EAAgBO,QAGjCN,GACC,eAACI,EAAA,EAAD,CAAYC,QAAQ,SAApB,mBAEG,IACD,mBAAGE,KAAMP,EAAMQ,IAAf,SAAqBR,EAAMS,kB,SCjBvC,MAAMC,EAAmBpB,YAAH,qRAahBqB,EACQ,aADRA,EAEU,eAGVC,EAAWC,GAAwCA,IAAuBF,EAEnEG,EAAiC,CAACC,EAAOC,KAAoB,MAChEC,EAASD,EAATC,KACR,IAAKA,EACH,OAHqE,QAMIA,EAAnEC,mBAAsBC,aAAgBC,EANyB,EAMzBA,GAAIP,EANqB,EAMrBA,mBAE5CQ,EAA0CN,EAAMO,aAAa,CACjEF,GAAG,cAAD,OAAgBA,GAClBG,SAAUlC,IAGZ,IAAKgC,EACH,OAdqE,IAiBjEG,EAAeH,EAAWI,SAA1BD,WACNA,EAAaX,IAAuBF,EAChCa,EAAa,EACbA,EAAa,EAEjBT,EAAMW,cAAc,CAClBN,GAAG,cAAD,OAAgBA,GAClBG,SAAUlC,EACV4B,KAAK,2BACAI,GADD,IAEFI,SAAS,2BACJJ,EAAWI,UADR,IAEND,oBA0COG,I,EAAAA,EApC0CnC,IAAiC,MAChF4B,EAAqC5B,EAArC4B,GAAIK,EAAiCjC,EAAjCiC,SAAUZ,EAAuBrB,EAAvBqB,mBADiE,EAE1De,sBAAYlB,EAAkB,CACzDmB,UAAW,CACTT,KACAP,mBAAoBD,EAAQC,GACxBF,EACAA,GAENmB,mBAAoB,CAClBZ,mBAAoB,CAClBa,WAAY,WACZZ,aAAc,CACZY,WAAY,aACZX,KACAP,mBAAoBD,EAAQC,GACxBF,EACAA,KAIVqB,OAAQlB,IAnBHI,EAFgF,oBAwBvF,OACE,cAACe,EAAA,EAAD,CACEhC,UAAU,8BACViC,QAAShB,EACTiB,QAAQ,WACRC,MAAM,UAJR,mBAMMxB,EAAQC,GAAsB,UAAY,QANhD,aAM4DY,EAASD,WANrE,QCtFJ,MAAMa,EAAkB/C,YAAH,8KAWRgD,EAAmC,CAACvB,EAAOC,KAA0B,MACxEC,EAASD,EAATC,KACR,IAAKA,EACH,OAH6E,MAK/CG,EAASH,EAAjCsB,QAAWC,UAAapB,GAE1BC,EAAyCN,EAAMO,aAAa,CAChEF,GAAG,cAAD,OAAgBA,GAClBG,SAAUlC,IAGZ,IAAKgC,EACH,OAGF,MAAMG,EAAaH,EAAWoB,WAAWjB,WAAa,EAEtDT,EAAMW,cAAc,CAClBN,GAAG,cAAD,OAAgBA,GAClBG,SAAUlC,EACV4B,KAAK,2BACAI,GADD,IAEFoB,WAAW,2BACNpB,EAAWoB,YADN,IAERjB,oBA+BOkB,I,EAAAA,EAzBwClD,IAAgC,MAC7E4B,EAAmB5B,EAAnB4B,GAAIqB,EAAejD,EAAfiD,WADwE,EAElEb,sBAAYS,EAAiB,CAC7CR,UAAW,CAAET,MACbY,OAAQM,EACRR,mBAAoB,CAClBS,QAAS,CACPR,WAAY,WACZS,UAAW,CAAET,WAAY,aAAcX,KAAIuB,kBAAkB,OAN5DJ,EAF6E,oBAapF,OACE,cAACN,EAAA,EAAD,CACEhC,UAAU,8BACViC,QAASK,EACTJ,QAAQ,WACRC,MAAM,UAJR,yBAMYK,EAAWjB,WANvB,QCxDJ,MAAMoB,EAAoBtD,YAAH,iLAWVuD,EAAsC,CAAC9B,EAAOC,KAAoB,MACrEC,EAASD,EAATC,KACR,IAAKA,EACH,OAH0E,MAMzCG,EAASH,EAApC6B,WAAcN,UAAapB,GAC7BC,EAAyCN,EAAMO,aAAa,CAChEF,GAAG,cAAD,OAAgBA,GAClBG,SAAUlC,IAGZ,IAAKgC,EACH,OAGF,MAAMG,EAAaH,EAAWoB,WAAWjB,WAAa,EAEtDT,EAAMW,cAAc,CAClBN,GAAG,cAAD,OAAgBA,GAClBG,SAAUlC,EACV4B,KAAK,2BACAI,GADD,IAEFoB,WAAW,2BACNpB,EAAWoB,YADN,IAERjB,oBAmCOuB,MA7B0CvD,IAAgC,MAC/E4B,EAAmB5B,EAAnB4B,GAAIqB,EAAejD,EAAfiD,WAD0E,EAEjEb,sBAAYgB,EAAmB,CAClDf,UAAW,CAAET,MACbU,mBAAoB,CAClBgB,WAAY,CACVf,WAAY,WACZS,UAAW,CACTT,WAAY,aACZX,KACAuB,kBAAkB,KAIxBX,OAAQa,IAZHC,EAF+E,oBAiBtF,OACE,cAACb,EAAA,EAAD,CACEhC,UAAU,8BACViC,QAASY,EACTX,QAAQ,WACRC,MAAM,UAJR,2BAMcK,EAAWjB,WANzB,QCRWwB,MA/BwCxD,IAAgC,MAEnF4B,EAUE5B,EAVF4B,GACAd,EASEd,EATFc,KACAE,EAQEhB,EARFgB,IACAV,EAOEN,EAPFM,gBACAC,EAMEP,EANFO,gBACAC,EAKER,EALFQ,MACAyC,EAIEjD,EAJFiD,WACAhB,EAGEjC,EAHFiC,SACAZ,EAEErB,EAFFqB,mBACA8B,EACEnD,EADFmD,iBAGF,OACE,qCACE,sBAAK1C,UAAU,uBAAf,UACE,cAACG,EAAA,EAAD,CAAY+B,QAAQ,KAApB,SACE,cAAC,EAAD,CAAM5B,KAAMC,EAAZ,SAAkBF,MAElBqC,EAEG,cAAC,EAAD,CAAkBvB,GAAIA,EAAIqB,WAAYA,IADtC,cAAC,EAAD,CAAgBrB,GAAIA,EAAIqB,WAAYA,IAEzC,cAAC,EAAD,CAAiBrB,GAAIA,EAAIK,SAAUA,EAAUZ,mBAAoBA,OAGnE,cAAC,EAAD,CAAaf,gBAAiBA,EAAiBC,gBAAiBA,EAAiBC,MAAOA,QCY/EiD,MA3B8BzD,IAA2B,MAEpE0D,EAEE1D,EAFF0D,QAASC,EAEP3D,EAFO2D,YAAatB,EAEpBrC,EAFoBqC,UAAWuB,EAE/B5D,EAF+B4D,YACjCC,EACE7D,EADF6D,UAAW5D,EACTD,EADSC,SAGb,OACE,qBAAKQ,UAAU,YAAf,SACGiD,EAEG,cAAC,EAAD,IAEAC,GACE,cAAClB,EAAA,EAAD,CACEhC,UAAU,mBACViC,QAAS,IAAYmB,EAAU,CAAExB,YAAWuB,gBAC5CjB,QAAQ,WACRC,MAAM,UAJR,wBAMW3C,QC/CvB,MAAM2D,EAA+B,CAACE,GAAkBC,qBACjDA,EAIE,2BACFD,GADL,IAEEE,OAAO,2BACFF,EAAeE,QADd,IAEJC,aAAa,uCACRH,EAAeE,OAAOC,cACtBF,EAAgBC,OAAOC,cAFhB,IAGVC,MAAO,IACFJ,EAAeE,OAAOC,aAAaC,SACnCH,EAAgBC,OAAOC,aAAaC,aAZtCJ,EA6CIK,MA1BwCnE,IAAgC,MAC7EiE,EAAqCjE,EAArCiE,aAAcP,EAAuB1D,EAAvB0D,QAASG,EAAc7D,EAAd6D,UAE/B,OACE,qCACGI,EAAaC,MAAME,KAAI,EAAGC,UACzB,qBAAmB5D,UAAU,iBAA7B,SACE,cAAC,EAAD,eAAoB4D,KADZA,EAAKzC,MAKjB,cAAC,EAAD,CACE8B,QAASA,EACTC,YAAaM,EAAaK,SAASX,YACnCtB,UAAW,CACTkC,OAAQN,EAAaK,SAASE,WAEhCZ,YAAaA,EACbC,UAAWA,EAPb,8BC1BSY,I,EAAAA,EAVoCzE,IAA8B,MACvE0E,EAAU1E,EAAV0E,MAER,OACE,8BACE,gCAAQA,EAAQA,EAAMC,WAAa,4BCLlC,MAAMC,EAAmC9E,YAAH,qYAoBzCD,GA4BWgF,MAzBWlF,IAAMC,MAAK,KAAO,MAAD,EAGrCkF,mBAASF,GADXF,EAFuC,EAEvCA,MAAOjD,EAFgC,EAEhCA,KAAMiC,EAF0B,EAE1BA,QAASG,EAFiB,EAEjBA,UAIxB,OAAIa,IAAWhB,IAAYjC,EAClB,cAAC,EAAD,CAAciD,MAAOA,KAI1BhB,GAAajC,GAASA,EAAKuC,OAM7B,cAAC,EAAD,CACEN,QAASA,EACTO,aAAcxC,EAAKuC,OAAOC,aAC1BJ,UAAWA,IARN,cAAC,EAAD,O,iBCfIkB,MAlBuBpF,IAAMC,MAAMI,IAAwB,MAChEgF,EAAwBhF,EAAxBgF,UAAWC,EAAajF,EAAbiF,SAEnB,OACE,qCACE,cAACrE,EAAA,EAAD,CAAY+B,QAAQ,KAApB,0BACA,cAACuC,EAAA,EAAD,CACEC,MAAM,qBACNC,YAAY,uCACZC,MAAOL,EACPC,SAAUA,EACVK,MAAO,CAAEC,OAAQ,iBACjBC,WAAS,UCPFC,MAXW9F,IAAMC,MAAK,IACnC,qCACE,cAACgB,EAAA,EAAD,CAAY+B,QAAQ,KAApB,yGAGA,cAAC/B,EAAA,EAAD,CAAY+B,QAAQ,KAApB,wECIJ,MACM+C,EAAYC,aAAQ,SAIpBpE,EAAQ,IAAIqE,gBA4CHC,MAtCWlG,IAAMC,MAAK,KACnC,MAAMkG,EAAWC,aAAaC,GAAuBA,EAAMF,WACrDG,EAAWC,cAFwB,EAIPvG,IAAMwG,SAASL,GAJR,mBAIlCd,EAJkC,KAIvBoB,EAJuB,KAMnCC,EAAgBC,IACpB,MAAMC,EAAQD,EAAEnG,OAAOkF,MACvBY,EAASO,YAASD,IAClBH,EAAaG,IAGf,IAAKT,EACH,OACE,qCACE,cAAC,EAAD,CAAQd,UAAWA,EAAWC,SAAUoB,IACxC,cAAC,EAAD,OAKN,MAAMI,EAAW,IAAIC,WAAS,CAC5BC,IAjCoB,iCAkCpBC,QAAS,CACPC,cAAc,UAAD,OAAYf,MAGvBgB,EAAOC,aAAWC,KAAK,CAACtB,EAAWe,IACnCQ,EAAS,IAAIC,eAAa,CAAEJ,OAAMvF,MAAR,IAEhC,OACE,eAAC,iBAAD,CAAgB0F,OAAQA,EAAxB,UACE,cAAC,EAAD,CAAQjC,UAAWA,EAAWC,SAAUoB,IACxC,cAAC,EAAD","file":"static/js/r_graphql.f5444844.chunk.js","sourcesContent":["import React from 'react';\n\nconst Loading: React.FC = React.memo(() => <div>Loading ...</div>);\n\nexport default Loading;\n","import gql from 'graphql-tag';\n\nconst REPOSITORY_FRAGMENT = gql`\n  fragment repository on Repository {\n    id\n    name\n    url\n    descriptionHTML\n    primaryLanguage {\n      name\n    }\n    owner {\n      login\n      url\n    }\n    stargazers {\n      totalCount\n    }\n    viewerHasStarred\n    watchers {\n      totalCount\n    }\n    viewerSubscription\n  }\n`;\n\nexport default REPOSITORY_FRAGMENT;\n","import React from 'react';\n\ninterface LinkProps extends React.AnchorHTMLAttributes<HTMLAnchorElement> {\n  children: React.ReactNode | React.ReactNodeArray;\n}\n\nconst Link: React.FC<LinkProps> = (props: LinkProps) => {\n  const { children, ...otherProps } = props;\n  return (\n    <a {...otherProps} target=\"_blank\" rel=\"noopener noreferrer\">\n      {children}\n    </a>\n  );\n};\n\nexport default Link;\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { PrimaryLanguage, Owner } from './types';\n\ninterface DescriptionProps {\n  descriptionHTML: string;\n  primaryLanguage: PrimaryLanguage;\n  owner: Owner;\n}\n\nconst Description: React.FC<DescriptionProps> = (props: DescriptionProps) => {\n  const { descriptionHTML, primaryLanguage, owner } = props;\n\n  return (\n    <div className=\"RepositoryItem-description\">\n      <div\n        className=\"RepositoryItem-description-info\"\n        // eslint-disable-next-line react/no-danger\n        dangerouslySetInnerHTML={{ __html: descriptionHTML }}\n      />\n      <div className=\"RepositoryItem-description-details\">\n        {primaryLanguage && (\n          <Typography display=\"inline\">\n            {`Language: ${primaryLanguage.name}`}\n          </Typography>\n        )}\n        {owner && (\n          <Typography display=\"inline\">\n            Owner:\n            {' '}\n            <a href={owner.url}>{owner.login}</a>\n          </Typography>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Description;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport Button from '@material-ui/core/Button';\nimport { useMutation, MutationUpdaterFn } from '@apollo/client';\nimport REPOSITORY_FRAGMENT from '../fragments';\nimport { Watchers } from './types';\n\ninterface WatchRepositoryProps {\n  id: string;\n  watchers: Watchers;\n  viewerSubscription: string;\n}\n\nconst WATCH_REPOSITORY = gql`\n  mutation ($id: ID!, $viewerSubscription: SubscriptionState!) {\n    updateSubscription(\n      input: { state: $viewerSubscription, subscribableId: $id }\n    ) {\n      subscribable {\n        id\n        viewerSubscription\n      }\n    }\n  }\n`;\n\nconst VIEWER_SUBSCRIPTIONS = {\n  SUBSCRIBED: 'SUBSCRIBED',\n  UNSUBSCRIBED: 'UNSUBSCRIBED',\n};\n\nconst isWatch = (viewerSubscription: string): boolean => viewerSubscription === VIEWER_SUBSCRIPTIONS.SUBSCRIBED;\n\nexport const updateWatch: MutationUpdaterFn = (cache, mutationResult) => {\n  const { data } = mutationResult;\n  if (!data) {\n    return;\n  }\n\n  const { updateSubscription: { subscribable: { id, viewerSubscription }}} = data;\n\n  const repository: WatchRepositoryProps | null = cache.readFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  if (!repository) {\n    return;\n  }\n\n  let { totalCount } = repository.watchers;\n  totalCount = viewerSubscription === VIEWER_SUBSCRIPTIONS.SUBSCRIBED\n    ? totalCount + 1\n    : totalCount - 1;\n\n  cache.writeFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: {\n      ...repository,\n      watchers: {\n        ...repository.watchers,\n        totalCount,\n      },\n    },\n  });\n};\n\nconst WatchRepository: React.FC<WatchRepositoryProps> = (props: WatchRepositoryProps) => {\n  const { id, watchers, viewerSubscription } = props;\n  const [updateSubscription] = useMutation(WATCH_REPOSITORY, {\n    variables: {\n      id,\n      viewerSubscription: isWatch(viewerSubscription)\n        ? VIEWER_SUBSCRIPTIONS.UNSUBSCRIBED\n        : VIEWER_SUBSCRIPTIONS.SUBSCRIBED,\n    },\n    optimisticResponse: {\n      updateSubscription: {\n        __typename: 'Mutation',\n        subscribable: {\n          __typename: 'Repository',\n          id,\n          viewerSubscription: isWatch(viewerSubscription)\n            ? VIEWER_SUBSCRIPTIONS.UNSUBSCRIBED\n            : VIEWER_SUBSCRIPTIONS.SUBSCRIBED,\n        },\n      },\n    },\n    update: updateWatch,\n  });\n\n  return (\n    <Button\n      className=\"RepositoryItem-title-action\"\n      onClick={updateSubscription as React.MouseEventHandler}\n      variant=\"outlined\"\n      color=\"primary\"\n    >\n      {`${isWatch(viewerSubscription) ? 'Unwatch' : 'Watch'} (${watchers.totalCount})`}\n    </Button>\n  );\n};\n\nexport default WatchRepository;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport Button from '@material-ui/core/Button';\nimport { useMutation, MutationUpdaterFn } from '@apollo/client';\nimport REPOSITORY_FRAGMENT from '../fragments';\nimport { StarRepositoryProps } from './types';\n\nconst STAR_REPOSITORY = gql`\n  mutation($id: ID!) {\n    addStar(input: { starrableId: $id }) {\n      starrable {\n        id\n        viewerHasStarred\n      }\n    }\n  }\n`;\n\nexport const updateAddStar: MutationUpdaterFn = (cache, mutationResult): void => {\n  const { data } = mutationResult;\n  if (!data) {\n    return;\n  }\n  const { addStar: { starrable: { id }}} = data;\n\n  const repository: StarRepositoryProps | null = cache.readFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  if (!repository) {\n    return;\n  }\n\n  const totalCount = repository.stargazers.totalCount + 1;\n\n  cache.writeFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: {\n      ...repository,\n      stargazers: {\n        ...repository.stargazers,\n        totalCount,\n      },\n    },\n  });\n};\n\nconst StarRepository: React.FC<StarRepositoryProps> = (props: StarRepositoryProps) => {\n  const { id, stargazers } = props;\n  const [addStar] = useMutation(STAR_REPOSITORY, {\n    variables: { id },\n    update: updateAddStar,\n    optimisticResponse: {\n      addStar: {\n        __typename: 'Mutation',\n        starrable: { __typename: 'Repository', id, viewerHasStarred: true },\n      },\n    },\n  });\n\n  return (\n    <Button\n      className=\"RepositoryItem-title-action\"\n      onClick={addStar as React.MouseEventHandler}\n      variant=\"outlined\"\n      color=\"primary\"\n    >\n      {`Star (${stargazers.totalCount})`}\n    </Button>\n  );\n};\n\nexport default StarRepository;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport Button from '@material-ui/core/Button';\nimport { useMutation, MutationUpdaterFn } from '@apollo/client';\nimport REPOSITORY_FRAGMENT from '../fragments';\nimport { StarRepositoryProps } from './types';\n\nconst UNSTAR_REPOSITORY = gql`\n  mutation($id: ID!) {\n    removeStar(input: { starrableId: $id }) {\n      starrable {\n        id\n        viewerHasStarred\n      }\n    }\n  }\n`;\n\nexport const updateRemoveStar: MutationUpdaterFn = (cache, mutationResult) => {\n  const { data } = mutationResult;\n  if (!data) {\n    return;\n  }\n\n  const { removeStar: { starrable: { id }}} = data;\n  const repository: StarRepositoryProps | null = cache.readFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n  });\n\n  if (!repository) {\n    return;\n  }\n\n  const totalCount = repository.stargazers.totalCount - 1;\n\n  cache.writeFragment({\n    id: `Repository:${id}`,\n    fragment: REPOSITORY_FRAGMENT,\n    data: {\n      ...repository,\n      stargazers: {\n        ...repository.stargazers,\n        totalCount,\n      },\n    },\n  });\n};\n\nconst UnstarRepository: React.FC<StarRepositoryProps> = (props: StarRepositoryProps) => {\n  const { id, stargazers } = props;\n  const [removeStar] = useMutation(UNSTAR_REPOSITORY, {\n    variables: { id },\n    optimisticResponse: {\n      removeStar: {\n        __typename: 'Mutation',\n        starrable: {\n          __typename: 'Repository',\n          id,\n          viewerHasStarred: false,\n        },\n      },\n    },\n    update: updateRemoveStar,\n  });\n\n  return (\n    <Button\n      className=\"RepositoryItem-title-action\"\n      onClick={removeStar as React.MouseEventHandler}\n      variant=\"outlined\"\n      color=\"primary\"\n    >\n      {`UnStar (${stargazers.totalCount})`}\n    </Button>\n  );\n};\n\nexport default UnstarRepository;\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport Link from './Link';\nimport Description from './Description';\nimport WatchRepository from './WatchRepository';\nimport StarRepository from './StarRepository';\nimport UnstarRepository from './UnstarRepository';\nimport {\n  Owner, PrimaryLanguage, StarGazers, Watchers,\n} from './types';\n\nexport interface RepositoryItemProps {\n  id: string;\n  name: string;\n  url: string;\n  descriptionHTML: string;\n  primaryLanguage: PrimaryLanguage;\n  owner: Owner;\n  stargazers: StarGazers;\n  watchers: Watchers;\n  viewerSubscription: string;\n  viewerHasStarred: boolean;\n}\n\n/* RepositoryItem  ->  StarRepository\n *                |->  UnstarRepository\n *                | -> WatchRepository\n *                | -> Description */\nconst RepositoryItem: React.FC<RepositoryItemProps> = (props: RepositoryItemProps) => {\n  const {\n    id,\n    name,\n    url,\n    descriptionHTML,\n    primaryLanguage,\n    owner,\n    stargazers,\n    watchers,\n    viewerSubscription,\n    viewerHasStarred,\n  } = props;\n\n  return (\n    <>\n      <div className=\"RepositoryItem-title\">\n        <Typography variant=\"h3\">\n          <Link href={url}>{name}</Link>\n        </Typography>\n        {!viewerHasStarred\n          ? (<StarRepository id={id} stargazers={stargazers} />)\n          : (<UnstarRepository id={id} stargazers={stargazers} />)}\n        <WatchRepository id={id} watchers={watchers} viewerSubscription={viewerSubscription} />\n      </div>\n\n      <Description descriptionHTML={descriptionHTML} primaryLanguage={primaryLanguage} owner={owner} />\n    </>\n  );\n};\n\nexport default RepositoryItem;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Loading from '../../common/Loading';\nimport type { RepositoryItemProps } from './RepositoryItem';\n\ninterface Variables {\n  cursor: unknown;\n}\ninterface PageInto {\n  hasNextPage: boolean;\n  endCursor: string;\n}\ninterface Edge {\n  node: RepositoryItemProps;\n}\nexport interface Repository {\n  edges: Edge[];\n  pageInfo: PageInto;\n}\ninterface Result {\n  viewer: {\n    repositories: Repository;\n    [props: string]: unknown;\n  }\n  [props: string]: unknown;\n}\nexport type UpdateQueryType = (previousResult: Result, { fetchMoreResult }: {\n  fetchMoreResult: Result;\n}) => Result;\ninterface FetchMoreProps {\n  loading: boolean;\n  hasNextPage: boolean;\n  variables: Variables;\n  updateQuery: UpdateQueryType;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fetchMore: Function;\n  children?: React.ReactNodeArray | string;\n}\n\nconst FetchMore: React.FC<FetchMoreProps> = (props: FetchMoreProps) => {\n  const {\n    loading, hasNextPage, variables, updateQuery,\n    fetchMore, children,\n  } = props;\n\n  return (\n    <div className=\"FetchMore\">\n      {loading\n        ? (\n          <Loading />\n        ) : (\n          hasNextPage && (\n            <Button\n              className=\"FetchMore-button\"\n              onClick={(): void => fetchMore({ variables, updateQuery })}\n              variant=\"outlined\"\n              color=\"primary\"\n            >\n              {`More ${children}`}\n            </Button>\n          )\n        )}\n    </div>\n  );\n};\n\nexport default FetchMore;\n","import React from 'react';\nimport RepositoryItem from './item';\nimport FetchMore, { UpdateQueryType, Repository } from './item/FetchMore';\n\nexport interface RepositoryListProps {\n  repositories: Repository;\n  loading: boolean;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fetchMore: Function;\n}\n\nconst updateQuery: UpdateQueryType = (previousResult, { fetchMoreResult }) => {\n  if (!fetchMoreResult) {\n    return previousResult;\n  }\n\n  return {\n    ...previousResult,\n    viewer: {\n      ...previousResult.viewer,\n      repositories: {\n        ...previousResult.viewer.repositories,\n        ...fetchMoreResult.viewer.repositories,\n        edges: [\n          ...previousResult.viewer.repositories.edges,\n          ...fetchMoreResult.viewer.repositories.edges,\n        ],\n      },\n    },\n  };\n};\n\nconst RepositoryList: React.FC<RepositoryListProps> = (props: RepositoryListProps) => {\n  const { repositories, loading, fetchMore } = props;\n\n  return (\n    <>\n      {repositories.edges.map(({ node }) => (\n        <div key={node.id} className=\"RepositoryItem\">\n          <RepositoryItem {...node} />\n        </div>\n      ))}\n\n      <FetchMore\n        loading={loading}\n        hasNextPage={repositories.pageInfo.hasNextPage}\n        variables={{\n          cursor: repositories.pageInfo.endCursor,\n        }}\n        updateQuery={updateQuery}\n        fetchMore={fetchMore}\n      >\n        Repositories\n      </FetchMore>\n    </>\n  );\n};\n\nexport default RepositoryList;\n","import React from 'react';\nimport { ApolloError } from '@apollo/client/core/';\n\ninterface ErrorMessageProps {\n  error?: ApolloError;\n}\n\nconst ErrorMessage: React.FC<ErrorMessageProps> = (props: ErrorMessageProps) => {\n  const { error } = props;\n\n  return (\n    <div>\n      <small>{error ? error.toString() : 'Something Went Wrong'}</small>\n    </div>\n  );\n};\n\nexport default ErrorMessage;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport Loading from './common/Loading';\nimport RepositoryList, { REPOSITORY_FRAGMENT } from './repository';\nimport ErrorMessage from './ErrorMessage';\n\nexport const GET_REPOSITORIES_OF_CURRENT_USER = gql`\n  query($cursor: String) {\n    viewer {\n      repositories(\n        first: 5\n        orderBy: { direction: DESC, field: STARGAZERS }\n        after: $cursor\n      ) {\n        edges {\n          node {\n            ...repository\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  }\n  ${REPOSITORY_FRAGMENT}\n`;\n\nconst Profile: React.FC = React.memo(() => {\n  const {\n    error, data, loading, fetchMore,\n  } = useQuery(GET_REPOSITORIES_OF_CURRENT_USER);\n\n  // check errors\n  if (error || (!loading && !data)) {\n    return <ErrorMessage error={error} />;\n  }\n\n  // check for data\n  if (loading && (!data || !data.viewer)) {\n    return <Loading />;\n  }\n\n  // display data\n  return (\n    <RepositoryList\n      loading={loading}\n      repositories={data.viewer.repositories}\n      fetchMore={fetchMore}\n    />\n  );\n});\n\nexport default Profile;\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\n\ninterface HeaderProps {\n  authToken?: string;\n  onChange: React.ChangeEventHandler;\n}\n\nconst Header: React.FC<HeaderProps> = React.memo((props: HeaderProps) => {\n  const { authToken, onChange } = props;\n\n  return (\n    <>\n      <Typography variant=\"h2\">GraphQL Demo</Typography>\n      <TextField\n        label=\"Authorization Code\"\n        placeholder=\"some 32 character string from github\"\n        value={authToken}\n        onChange={onChange}\n        style={{ margin: '20px 0 20px 0' }}\n        fullWidth\n      />\n    </>\n  );\n});\n\nexport default Header;\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\n\nconst NoToken: React.FC = React.memo(() => (\n  <>\n    <Typography variant=\"h6\">\n      You need to generate a personal access token with &quot;repo&quot; and &quot;admin:repo_hook&quot; permissions.\n    </Typography>\n    <Typography variant=\"h6\">\n      This can be done in the Developer settings on GitHub.\n    </Typography>\n  </>\n));\n\nexport default NoToken;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  ApolloProvider, ApolloClient, ApolloLink, HttpLink, InMemoryCache,\n} from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\nimport Profile from './Profile';\nimport { setToken } from '../../../store/modules/gqlToken';\nimport Header from './Header';\nimport NoToken from './NoToken';\nimport { DBRootState } from '../../../store/types';\n\nconst GITHUB_BASE_URL = 'https://api.github.com/graphql';\nconst errorLink = onError((/* { graphQLErrors, networkError } */) => {\n  /* if (graphQLErrors) { do something with graphql error } */\n  /* if (networkError) { do something with network error } */\n});\nconst cache = new InMemoryCache();\n\n/* GraphQL  ->  Header\n *         |->  NoToken\n *         |->  Profile  ->  Repository\n *            Loading  <-|->  ErrorMessage */\nconst GraphQL: React.FC = React.memo(() => {\n  const gqlToken = useSelector((state: DBRootState) => state.gqlToken);\n  const dispatch = useDispatch();\n\n  const [authToken, setAuthToken] = React.useState(gqlToken);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const token = e.target.value;\n    dispatch(setToken(token));\n    setAuthToken(token);\n  };\n\n  if (!gqlToken) {\n    return (\n      <>\n        <Header authToken={authToken} onChange={handleChange} />\n        <NoToken />\n      </>\n    );\n  }\n\n  const httpLink = new HttpLink({\n    uri: GITHUB_BASE_URL,\n    headers: {\n      authorization: `Bearer ${gqlToken}`,\n    },\n  });\n  const link = ApolloLink.from([errorLink, httpLink]);\n  const client = new ApolloClient({ link, cache });\n\n  return (\n    <ApolloProvider client={client}>\n      <Header authToken={authToken} onChange={handleChange} />\n      <Profile />\n    </ApolloProvider>\n  );\n});\n\nexport default GraphQL;\n"],"sourceRoot":""}