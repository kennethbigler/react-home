{"version":3,"sources":["apis/lazyWithPreload.js","components/common/ButtonPopover.jsx","components/common/header/PlayerMenu.jsx","components/common/header/TopBar.jsx","components/common/header/Header.jsx","components/games/Menu.jsx","components/games/Routes.jsx"],"names":["__webpack_require__","d","__webpack_exports__","lazyWithPreload","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","ComponentPromise","React","lazy","ButtonPopover","props","_useState","useState","_useState2","Object","slicedToArray","anchorEl","setAnchorEl","children","buttonText","open","Boolean","react_default","a","createElement","Button","aria-owns","aria-haspopup","variant","onClick","event","currentTarget","Popover","id","onClose","anchorOrigin","vertical","horizontal","transformOrigin","style","padding","cloneElement","Home","styles","namepad","maxWidth","width","display","margin","state","isBot","players","handleToggle","isChecked","_this","playerActions","updateBot","handleKeyPress","e","key","updateName","target","value","_this2","this","Grid","container","spacing","item","xs","Typography","map","p","i","concat","name","TextField","defaultValue","onKeyPress","placeholder","Switch","checked","color","onChange","isC","disabled","nextProps","prevState","old","Component","connect","dispatch","bindActionCreators","flexLeft","alignItems","flexRight","marginRight","TopBar","toggleSwitch","noop","toDarkTheme","themeActions","displayDarkTheme","setState","toLightTheme","displayLightTheme","theme","type","_this$props","toggleOpen","showPlayers","fontColor","iconColor","_this$state","AppBar","left","right","top","Toolbar","disableGutters","className","IconButton","aria-label","Menu_default","cursor","common_ButtonPopover","PlayerMenu","PureComponent","defaultProps","Header","isOpen","setIsOpen","handleNav","palette","header_TopBar","Drawer","position","Close_default","onItemClick","loc","withTheme","Menu","memo","menu","route","divider","index","Divider","MenuItem","GameHome","then","bind","BlackJack","Promise","all","Connect4","DealOrNoDeal","Dota2Picker","Poker","Slots","TicTacToe","Yahtzee","Routes","match","url","paths","reduce","component","acc","obj","path","push","react_router","assign","exact","from","to","games_Menu","react","fallback","LoadingSpinner"],"mappings":"2FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,GAAAK,EAAAL,EAAAM,EAAAF,GAEe,SAASD,EAAgBI,GACtC,OAAOC,IAAMC,KAAK,kBAAMF,kQC4CXG,EAxCO,SAACC,GAAU,IAAAC,EACCC,mBAAS,MADVC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACxBK,EADwBH,EAAA,GACdI,EADcJ,EAAA,GAEvBK,EAAyBR,EAAzBQ,SAAUC,EAAeT,EAAfS,WACZC,EAAOC,QAAQL,GAErB,OACEM,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,YAAWN,EAAO,gBAAkB,KACpCO,gBAAc,OACdC,QAAQ,YACRC,QAAS,SAACC,GAAYb,EAAYa,EAAMC,iBAEvCZ,GAEHG,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEC,GAAG,gBACHb,KAAMA,EACNJ,SAAUA,EACVkB,QAAS,WAAQjB,EAAY,OAC7BkB,aAAc,CACZC,SAAU,SACVC,WAAY,UAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,WAGdf,EAAAC,EAAAC,cAAA,OAAKe,MAAO,CAAEC,QAAS,KAAOjC,IAAMkC,aAAavB,kDCrBnDwB,6MACJC,OAAS,CACPC,QAAS,CACPC,SAAU,QACVC,MAAO,OACPC,QAAS,QACTC,OAAQ,WAoBZC,MAAQ,CACNC,MAAO,GACPC,QAAS,MAeXC,aAAe,SAACnB,EAAIoB,GACQC,EAAK5C,MAAvB6C,cACMC,UAAUvB,EAAIoB,MAG9BI,eAAiB,SAACC,EAAGzB,GAAO,IAClBsB,EAAkBD,EAAK5C,MAAvB6C,cACM,UAAVG,EAAEC,KACJJ,EAAcK,WAAW3B,EAAIyB,EAAEG,OAAOC,gFAIjC,IAAAC,EAAAC,KACCb,EAAYa,KAAKtD,MAAjByC,QACAD,EAAUc,KAAKf,MAAfC,MACAN,EAAYoB,KAAKrB,OAAjBC,QACR,OACEtB,EAAAC,EAAAC,cAAA,OAAKe,MAAOK,GACVtB,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB7C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb/C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAY1C,QAAQ,MAApB,sBAIFN,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb/C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAY1C,QAAQ,MAApB,aAKH2C,IAAIpB,EAAS,SAACqB,EAAGC,GAAJ,OAAoB,IAATD,EAAEvC,GAEvBX,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAMN,IAAG,GAAAe,OAAKF,EAAEG,KAAP,KAAAD,OAAeD,GAAKP,WAAS,EAACC,QAAS,GAC9C7C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb/C,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CACEC,aAAcL,EAAEG,KAChBG,WAAY,SAAApB,GAAC,OAAIK,EAAKN,eAAeC,EAAGc,EAAEvC,KAC1C8C,YAAY,uBAGhBzD,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb/C,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CACEC,QAAS/B,EAAMuB,GACfS,MAAM,UACNC,SAAU,SAACzB,EAAG0B,GAAJ,OAAYrB,EAAKX,aAAaoB,EAAEvC,GAAImD,QAKpD9D,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAMN,IAAG,GAAAe,OAAKF,EAAEG,KAAP,KAAAD,OAAeD,GAAKP,WAAS,EAACC,QAAS,GAC9C7C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb/C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAY1C,QAAQ,MACjB4C,EAAEG,OAGPrD,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb/C,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAQC,SAAO,EAACI,UAAQ,4DAlENC,EAAWC,GAAW,IAEnCC,EAAQD,EAAjBpC,QACAA,EAAYmC,EAAZnC,QAER,OAAOqC,IAAQrC,EACX,CAAEA,UAASD,MAAOqB,IAAIpB,EAAS,CAAC,SAAS,KACzC,YAxCWsC,aAkHJC,cAJS,SAAAzC,GAAK,MAAK,CAAEE,QAASF,EAAME,UACxB,SAAAwC,GAAQ,MAAK,CACtCpC,cAAeqC,YAAmB,CAAEhC,eAAYJ,eAAamC,KAEhDD,CAGbhD,WCjHIC,EAAS,CACbkD,SAAU,CACR9C,QAAS,OACT+C,WAAY,UAEdC,UAAW,CACThD,QAAS,OACTiD,YAAa,KAIXC,6MAmBJhD,MAAQ,CACNgC,SAAS,EACTiB,aAAcC,OAahBC,YAAc,WACa9C,EAAK5C,MAAtB2F,aACKC,mBACbhD,EAAKiD,SAAS,CAAEtB,SAAS,EAAOiB,aAAc5C,EAAKkD,kBAGrDA,aAAe,WACYlD,EAAK5C,MAAtB2F,aACKI,oBACbnD,EAAKiD,SAAS,CAAEtB,SAAS,EAAMiB,aAAc5C,EAAK8C,kGAhB/B,SAFDpC,KAAKtD,MAAfgG,MAEEC,KACR3C,KAAKuC,SAAS,CAAEtB,SAAS,EAAOiB,aAAclC,KAAKwC,eAEnDxC,KAAKuC,SAAS,CAAEtB,SAAS,EAAMiB,aAAclC,KAAKoC,+CAgB7C,IAAAQ,EAGH5C,KAAKtD,MADPmG,EAFKD,EAELC,WAAYC,EAFPF,EAEOE,YAAaC,EAFpBH,EAEoBG,UAAWC,EAF/BJ,EAE+BI,UAF/BC,EAI2BjD,KAAKf,MAA/BgC,EAJDgC,EAIChC,QAASiB,EAJVe,EAIUf,aACjB,OACE5E,EAAAC,EAAAC,cAAC0F,EAAA,EAAD,CAAQ3E,MAAO,CAAE4E,KAAM,EAAGC,MAAO,EAAGC,IAAK,IACvC/F,EAAAC,EAAAC,cAAC8F,EAAA,EAAD,CAASC,gBAAc,GACrBjG,EAAAC,EAAAC,cAAA,OAAKgG,UAAU,kBACblG,EAAAC,EAAAC,cAAA,OAAKe,MAAOI,EAAOkD,UACjBvE,EAAAC,EAAAC,cAACiG,EAAA,EAAD,CACEC,aAAW,OACX7F,QAASgF,EACT3B,MAAO8B,GAEP1F,EAAAC,EAAAC,cAACmG,EAAApG,EAAD,OAEFD,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CACEzC,QAASgF,EACTtE,MAAO,CAAEqF,OAAQ,WACjBhG,QAAQ,KACRsD,MAAO6B,GAJT,SASDD,GACCxF,EAAAC,EAAAC,cAAA,OAAKe,MAAOI,EAAOoD,WACjBzE,EAAAC,EAAAC,cAACqG,EAAD,CAAe1G,WAAW,WACxBG,EAAAC,EAAAC,cAACsG,EAAD,QAINxG,EAAAC,EAAAC,cAAA,OAAKe,MAAOI,EAAOoD,WACjBzE,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAQC,QAASA,EAASE,SAAUe,eAhF7B6B,iBAAf9B,EAeG+B,aAAe,CACpBlB,aAAa,GA0EjB,IAUepB,cAVS,SAAAzC,GAAK,MAAK,CAChCyD,MAAOzD,EAAMyD,QAEY,SAAAf,GAAQ,MAAK,CACtCU,aAAcT,YACZ,CAAEU,qBAAkBG,uBACpBd,KAIWD,CAA6CO,GCtHtDgC,EAAS,SAACvH,GAAU,IAAAC,EACIC,oBAAS,GADbC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACjBuH,EADiBrH,EAAA,GACTsH,EADStH,EAAA,GAGtBK,EACER,EADFQ,SAAUkH,EACR1H,EADQ0H,UAAWtB,EACnBpG,EADmBoG,YAAiCH,EACpDjG,EADgCgG,MAAS2B,QAAW1B,KAGlDE,EAAa,WACjBsB,GAAWD,IAQPlB,EAAqB,UAATL,EAAmB,UAAY,UAC3CI,EAAqB,UAATJ,EAAmB,UAAY,UAEjD,OACErF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8G,EAAD,CAAQzB,WAAYA,EAAYC,YAAaA,EAAaC,UAAWA,EAAWC,UAAWA,IAC3F1F,EAAAC,EAAAC,cAAC+G,EAAA,EAAD,CAAQrG,QAAS2E,EAAYzF,KAAM8G,GACjC5G,EAAAC,EAAAC,cAAC0F,EAAA,EAAD,CAAQsB,SAAS,UACflH,EAAAC,EAAAC,cAAC8F,EAAA,EAAD,CAASC,gBAAc,GACrBjG,EAAAC,EAAAC,cAACiG,EAAA,EAAD,CACEC,aAAW,aACX7F,QAASgF,EACT3B,MAAO8B,GAEP1F,EAAAC,EAAAC,cAACiH,EAAAlH,EAAD,OAEFD,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAY1C,QAAQ,KAAKsD,MAAO6B,GAAhC,UAKHxG,IAAMkC,aAAavB,EAAU,CAAEwH,YA1Bb,SAACC,GACxBR,GAAU,GACVC,EAAUO,SA0CdV,EAAOD,aAAe,CACpBlB,aAAa,GAGA8B,gBAAUX,+ICXVY,EApDFC,eAAK,SAACpI,GAAU,IACnBgI,EAAgBhI,EAAhBgI,YAIFK,EAAOxE,IACX,CACE,CAAEI,KAAM,eAAgBqE,MAAO,IAC/B,CAAEC,SAAS,GAEX,CAAEtE,KAAM,YAAaqE,MAAO,aAC5B,CAAErE,KAAM,WAAYqE,MAAO,YAC3B,CAAErE,KAAM,kBAAmBqE,MAAO,QAClC,CAAErE,KAAM,gBAAiBqE,MAAO,SAChC,CAAErE,KAAM,QAASqE,MAAO,SACxB,CAAErE,KAAM,eAAgBqE,MAAO,SAC/B,CAAErE,KAAM,cAAeqE,MAAO,aAC9B,CAAErE,KAAM,UAAWqE,MAAO,YAE5B,SAAC5E,EAAM8E,GAAP,OAAkB9E,EAAK6E,QAEnB3H,EAAAC,EAAAC,cAAC2H,EAAA,EAAD,CAASxF,IAAKuF,IAEd5H,EAAAC,EAAAC,cAAC4H,EAAA,EAAD,CACEzF,IAAKS,EAAKO,KACV9C,QAAS,kBAAM6G,EAAW,GAAAhE,OAvBlB,SAuBkB,KAAAA,OAAeN,EAAK4E,UAE7C5E,EAAKO,QAUd,OACErD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4H,EAAA,EAAD,CAAUvH,QALD,kBAAM6G,EAAY,OAK3B,kBAGCK,aCrCDM,EAAWnJ,YAAgBH,EAAA2D,EAAA,IAAA4F,KAAAvJ,EAAAwJ,KAAA,YAC3BC,EAAYtJ,YAAgBuJ,QAAAC,IAAA,CAAA3J,EAAA2D,EAAA,GAAA3D,EAAA2D,EAAA,IAAA3D,EAAA2D,EAAA,MAAA4F,KAAAvJ,EAAAwJ,KAAA,YAC5BI,EAAWzJ,YAAgBH,EAAA2D,EAAA,IAAA4F,KAAAvJ,EAAAwJ,KAAA,YAC3BK,EAAe1J,YAAgBH,EAAA2D,EAAA,IAAA4F,KAAAvJ,EAAAwJ,KAAA,YAC/BM,EAAc3J,YAAgBuJ,QAAAC,IAAA,CAAA3J,EAAA2D,EAAA,IAAA3D,EAAA2D,EAAA,MAAA4F,KAAAvJ,EAAAwJ,KAAA,YAC9BO,EAAQ5J,YAAgBuJ,QAAAC,IAAA,CAAA3J,EAAA2D,EAAA,IAAA3D,EAAA2D,EAAA,MAAA4F,KAAAvJ,EAAAwJ,KAAA,YACxBQ,EAAQ7J,YAAgBH,EAAA2D,EAAA,IAAA4F,KAAAvJ,EAAAwJ,KAAA,YACxBS,EAAY9J,YAAgBH,EAAA2D,EAAA,IAAA4F,KAAAvJ,EAAAwJ,KAAA,YAC5BU,EAAU/J,YAAgBuJ,QAAAC,IAAA,CAAA3J,EAAA2D,EAAA,GAAA3D,EAAA2D,EAAA,GAAA3D,EAAA2D,EAAA,MAAA4F,KAAAvJ,EAAAwJ,KAAA,YAoDjBW,UAlDA,SAACxJ,GAAU,IAChByJ,EAAqBzJ,EAArByJ,MAAO/B,EAAc1H,EAAd0H,UACPgC,EAAQD,EAARC,IAEFC,EAAQC,IACZ,CACE,CAAE3F,KAAM,YAAa4F,UAAWf,GAChC,CAAE7E,KAAM,WAAY4F,UAAWZ,GAC/B,CAAEhF,KAAM,OAAQ4F,UAAWX,GAC3B,CAAEjF,KAAM,QAAS4F,UAAWV,GAC5B,CAAElF,KAAM,QAAS4F,UAAWT,GAC5B,CAAEnF,KAAM,QAAS4F,UAAWR,GAC5B,CAAEpF,KAAM,YAAa4F,UAAWP,GAChC,CAAErF,KAAM,UAAW4F,UAAWN,IAEhC,SAACO,EAAKC,GAAQ,IACJ9F,EAAoB8F,EAApB9F,KAAM4F,EAAcE,EAAdF,UACRG,EAAI,GAAAhG,OAAM0F,EAAN,KAAA1F,OAAaC,GAGvB,OAFA6F,EAAIG,KAAKrJ,EAAAC,EAAAC,cAACoJ,EAAA,EAAD9J,OAAA+J,OAAA,CAAOlH,IAAG,GAAAe,OAAKgG,EAAL,KAAcI,OAAK,GAAK,CAAEJ,OAAMH,gBACnDC,EAAIG,KAAKrJ,EAAAC,EAAAC,cAACoJ,EAAA,EAAD,CAAUjH,IAAG,GAAAe,OAAKgG,EAAL,KAAcK,KAAI,GAAArG,OAAKgG,EAAL,KAAcM,GAAIN,KACnDF,GAET,IAGF,OACElJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyG,EAAA,EAAD,CAAQG,UAAWA,EAAWtB,aAAW,GACvCxF,EAAAC,EAAAC,cAACyJ,EAAD,OAEF3J,EAAAC,EAAAC,cAAC0J,EAAA,SAAD,CAAUC,SAAU7J,EAAAC,EAAAC,cAAC4J,EAAA,EAAD,OAClB9J,EAAAC,EAAAC,cAACoJ,EAAA,EAAD,KACEtJ,EAAAC,EAAAC,cAACoJ,EAAA,EAAD,CAAOL,UAAWlB,EAAUyB,OAAK,EAACJ,KAAI,GAAAhG,OAAK0F,KAC1CC,EACD/I,EAAAC,EAAAC,cAACoJ,EAAA,EAAD,CAAUG,KAAI,GAAArG,OAAK0F,EAAL,MAAcY,GAAE,GAAAtG,OAAK0F,KACnC9I,EAAAC,EAAAC,cAACoJ,EAAA,EAAD,CAAOL,UAAWlB","file":"static/js/26.b331c05b.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function lazyWithPreload(ComponentPromise) {\n  return React.lazy(() => ComponentPromise);\n}\n","// React\nimport React, { useState } from 'react';\nimport types from 'prop-types';\n// Material UI\nimport Button from '@material-ui/core/Button';\nimport Popover from '@material-ui/core/Popover';\n\nconst ButtonPopover = (props) => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const { children, buttonText } = props;\n  const open = Boolean(anchorEl);\n\n  return (\n    <div>\n      <Button\n        aria-owns={open ? 'simple-popper' : null}\n        aria-haspopup=\"true\"\n        variant=\"contained\"\n        onClick={(event) => { setAnchorEl(event.currentTarget); }}\n      >\n        {buttonText}\n      </Button>\n      <Popover\n        id=\"simple-popper\"\n        open={open}\n        anchorEl={anchorEl}\n        onClose={() => { setAnchorEl(null); }}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n        <div style={{ padding: 15 }}>{React.cloneElement(children)}</div>\n      </Popover>\n    </div>\n  );\n};\n\nButtonPopover.propTypes = {\n  children: types.element.isRequired,\n  buttonText: types.string.isRequired,\n};\n\nexport default ButtonPopover;\n","import React, { Component } from 'react';\nimport types from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport Switch from '@material-ui/core/Switch';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport map from 'lodash/map';\nimport { updateName, updateBot } from '../../../store/modules/players';\n// Parents: Main\n\n/* --------------------------------------------------\n* Home\n* -------------------------------------------------- */\nclass Home extends Component {\n  styles = {\n    namepad: {\n      maxWidth: '420px',\n      width: '100%',\n      display: 'block',\n      margin: 'auto',\n    },\n  };\n\n  // Prop Validation\n  static propTypes = {\n    // types = [array, bool, func, number, object, string, symbol].isRequired\n    playerActions: types.shape({\n      updateName: types.func.isRequired,\n      updateBot: types.func.isRequired,\n    }).isRequired,\n    players: types.arrayOf(\n      types.shape({\n        id: types.number.isRequired,\n        name: types.string.isRequired,\n        isBot: types.bool.isRequired,\n      }),\n    ).isRequired,\n  };\n\n  state = {\n    isBot: {},\n    players: {},\n  };\n\n  // https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html\n  // https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops\n  static getDerivedStateFromProps(nextProps, prevState) {\n    // get old player and current player\n    const { players: old } = prevState;\n    const { players } = nextProps;\n\n    return old !== players\n      ? { players, isBot: map(players, ['isBot', true]) }\n      : null;\n  }\n\n  handleToggle = (id, isChecked) => {\n    const { playerActions } = this.props;\n    playerActions.updateBot(id, isChecked);\n  };\n\n  handleKeyPress = (e, id) => {\n    const { playerActions } = this.props;\n    if (e.key === 'Enter') {\n      playerActions.updateName(id, e.target.value);\n    }\n  };\n\n  render() {\n    const { players } = this.props;\n    const { isBot } = this.state;\n    const { namepad } = this.styles;\n    return (\n      <div style={namepad}>\n        <Grid container spacing={1}>\n          <Grid item xs={9}>\n            <Typography variant=\"h5\">\n              Edit Player Names\n            </Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <Typography variant=\"h5\">\n              Is Bot?\n            </Typography>\n          </Grid>\n        </Grid>\n        {map(players, (p, i) => (p.id !== 0\n          ? (\n            <Grid key={`${p.name},${i}`} container spacing={1}>\n              <Grid item xs={9}>\n                <TextField\n                  defaultValue={p.name}\n                  onKeyPress={e => this.handleKeyPress(e, p.id)}\n                  placeholder=\"Enter Player Name\"\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <Switch\n                  checked={isBot[i]}\n                  color=\"primary\"\n                  onChange={(e, isC) => this.handleToggle(p.id, isC)}\n                />\n              </Grid>\n            </Grid>\n          ) : (\n            <Grid key={`${p.name},${i}`} container spacing={1}>\n              <Grid item xs={9}>\n                <Typography variant=\"h5\">\n                  {p.name}\n                </Typography>\n              </Grid>\n              <Grid item xs={3}>\n                <Switch checked disabled />\n              </Grid>\n            </Grid>\n          )\n        ))}\n      </div>\n    );\n  }\n}\n\n// react-redux export\nconst mapStateToProps = state => ({ players: state.players });\nconst mapDispatchToProps = dispatch => ({\n  playerActions: bindActionCreators({ updateName, updateBot }, dispatch),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Home);\n","import React, { PureComponent } from 'react';\nimport types from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Switch from '@material-ui/core/Switch';\nimport noop from 'lodash/noop';\nimport SimplePopover from '../ButtonPopover';\nimport PlayerMenu from './PlayerMenu';\nimport {\n  displayDarkTheme,\n  displayLightTheme,\n} from '../../../store/modules/theme';\n// Parents: App\n\nconst styles = {\n  flexLeft: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  flexRight: {\n    display: 'flex',\n    marginRight: 15,\n  },\n};\n\nclass TopBar extends PureComponent {\n  static propTypes = {\n    fontColor: types.string.isRequired,\n    iconColor: types.string.isRequired,\n    showPlayers: types.bool,\n    theme: types.shape({\n      type: types.string,\n    }),\n    themeActions: types.shape({\n      displayDarkTheme: types.func.isRequired,\n      displayLightTheme: types.func.isRequired,\n    }),\n    toggleOpen: types.func.isRequired,\n  };\n\n  static defaultProps = {\n    showPlayers: false,\n  }\n\n  state = {\n    checked: true,\n    toggleSwitch: noop,\n  }\n\n  componentDidMount() {\n    const { theme } = this.props;\n\n    if (theme.type === 'dark') {\n      this.setState({ checked: false, toggleSwitch: this.toLightTheme });\n    } else {\n      this.setState({ checked: true, toggleSwitch: this.toDarkTheme });\n    }\n  }\n\n  toDarkTheme = () => {\n    const { themeActions } = this.props;\n    themeActions.displayDarkTheme();\n    this.setState({ checked: false, toggleSwitch: this.toLightTheme });\n  };\n\n  toLightTheme = () => {\n    const { themeActions } = this.props;\n    themeActions.displayLightTheme();\n    this.setState({ checked: true, toggleSwitch: this.toDarkTheme });\n  };\n\n  render() {\n    const {\n      toggleOpen, showPlayers, fontColor, iconColor,\n    } = this.props;\n    const { checked, toggleSwitch } = this.state;\n    return (\n      <AppBar style={{ left: 0, right: 0, top: 0 }}>\n        <Toolbar disableGutters>\n          <div className=\"flex-container\">\n            <div style={styles.flexLeft}>\n              <IconButton\n                aria-label=\"Menu\"\n                onClick={toggleOpen}\n                color={iconColor}\n              >\n                <MenuIcon />\n              </IconButton>\n              <Typography\n                onClick={toggleOpen}\n                style={{ cursor: 'pointer' }}\n                variant=\"h6\"\n                color={fontColor}\n              >\n                Menu\n              </Typography>\n            </div>\n            {showPlayers && (\n              <div style={styles.flexRight}>\n                <SimplePopover buttonText=\"Players\">\n                  <PlayerMenu />\n                </SimplePopover>\n              </div>\n            )}\n            <div style={styles.flexRight}>\n              <Switch checked={checked} onChange={toggleSwitch} />\n            </div>\n          </div>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n\n// react-redux export\nconst mapStateToProps = state => ({\n  theme: state.theme,\n});\nconst mapDispatchToProps = dispatch => ({\n  themeActions: bindActionCreators(\n    { displayDarkTheme, displayLightTheme },\n    dispatch,\n  ),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TopBar);\n","import React, { useState } from 'react';\nimport types from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Drawer from '@material-ui/core/Drawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport NavigationClose from '@material-ui/icons/Close';\nimport { withTheme } from '@material-ui/core/styles';\nimport TopBar from './TopBar';\n// Parents: App\n\nconst Header = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const {\n    children, handleNav, showPlayers, theme: { palette: { type } },\n  } = props;\n\n  const toggleOpen = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleNavigation = (loc) => {\n    setIsOpen(false);\n    handleNav(loc);\n  };\n\n  const iconColor = type === 'light' ? 'inherit' : 'default';\n  const fontColor = type === 'light' ? 'inherit' : 'initial';\n\n  return (\n    <div>\n      <TopBar toggleOpen={toggleOpen} showPlayers={showPlayers} fontColor={fontColor} iconColor={iconColor} />\n      <Drawer onClose={toggleOpen} open={isOpen}>\n        <AppBar position=\"sticky\">\n          <Toolbar disableGutters>\n            <IconButton\n              aria-label=\"Menu Close\"\n              onClick={toggleOpen}\n              color={iconColor}\n            >\n              <NavigationClose />\n            </IconButton>\n            <Typography variant=\"h6\" color={fontColor}>\n              Menu\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        {React.cloneElement(children, { onItemClick: handleNavigation })}\n      </Drawer>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  // types = [array, bool, func, number, object, string, symbol].isRequired\n  children: types.element.isRequired,\n  handleNav: types.func.isRequired,\n  showPlayers: types.bool,\n  theme: types.shape({\n    palette: types.shape({\n      type: types.string,\n    }).isRequired,\n  }),\n};\n\nHeader.defaultProps = {\n  showPlayers: false,\n};\n\nexport default withTheme(Header);\n","import React, { memo } from 'react';\nimport types from 'prop-types';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Divider from '@material-ui/core/Divider';\nimport map from 'lodash/map';\n// Parents: Header\n\nconst Menu = memo((props) => {\n  const { onItemClick } = props;\n  const baseUrl = '/games';\n\n  // internal routes\n  const menu = map(\n    [\n      { name: 'Home - Games', route: '' },\n      { divider: true },\n      // { name: 'Bingo', route: 'bingo' }\n      { name: 'BlackJack', route: 'blackjack' },\n      { name: 'Connect4', route: 'connect4' },\n      { name: 'Deal or No Deal', route: 'deal' },\n      { name: 'Dota 2 Picker', route: 'dota2' },\n      { name: 'Poker', route: 'poker' },\n      { name: 'Slot Machine', route: 'slots' },\n      { name: 'Tic-Tac-Toe', route: 'tictactoe' },\n      { name: 'Yahtzee', route: 'yahtzee' },\n    ],\n    (item, index) => (item.divider\n      ? (\n        <Divider key={index} />\n      ) : (\n        <MenuItem\n          key={item.name}\n          onClick={() => onItemClick(`${baseUrl}/${item.route}`)}\n        >\n          {item.name}\n        </MenuItem>\n      )\n    ),\n  );\n\n  // navigation\n  const home = () => onItemClick('/');\n\n  // render menu\n  return (\n    <div>\n      <MenuItem onClick={home}>\n        Back to Resume\n      </MenuItem>\n      {menu}\n    </div>\n  );\n});\n\nMenu.propTypes = {\n  // types = [array, bool, func, number, object, string, symbol].isRequired\n  onItemClick: types.func,\n};\n\nexport default Menu;\n","import React, { Suspense } from 'react';\nimport types from 'prop-types';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport reduce from 'lodash/reduce';\n// custom\nimport lazyWithPreload from '../../apis/lazyWithPreload';\nimport Header from '../common/header/Header';\nimport Menu from './Menu';\nimport LoadingSpinner from '../common/LoadingSpinner';\n// Parents: Routes (main)\n\n// lazy load page components\nconst GameHome = lazyWithPreload(import('./Home'));\nconst BlackJack = lazyWithPreload(import('./blackjack'));\nconst Connect4 = lazyWithPreload(import('./connect4'));\nconst DealOrNoDeal = lazyWithPreload(import('./deal-or-no-deal'));\nconst Dota2Picker = lazyWithPreload(import('./dota-2-picker'));\nconst Poker = lazyWithPreload(import('./poker'));\nconst Slots = lazyWithPreload(import('./slots'));\nconst TicTacToe = lazyWithPreload(import('./tictactoe'));\nconst Yahtzee = lazyWithPreload(import('./yahtzee'));\n\nconst Routes = (props) => {\n  const { match, handleNav } = props;\n  const { url } = match;\n\n  const paths = reduce(\n    [\n      { name: 'blackjack', component: BlackJack },\n      { name: 'connect4', component: Connect4 },\n      { name: 'deal', component: DealOrNoDeal },\n      { name: 'dota2', component: Dota2Picker },\n      { name: 'poker', component: Poker },\n      { name: 'slots', component: Slots },\n      { name: 'tictactoe', component: TicTacToe },\n      { name: 'yahtzee', component: Yahtzee },\n    ],\n    (acc, obj) => {\n      const { name, component } = obj;\n      const path = `${url}/${name}`;\n      acc.push(<Route key={`${path}r`} exact {...{ path, component }} />);\n      acc.push(<Redirect key={`${path}d`} from={`${path}*`} to={path} />);\n      return acc;\n    },\n    [],\n  );\n\n  return (\n    <div>\n      <Header handleNav={handleNav} showPlayers>\n        <Menu />\n      </Header>\n      <Suspense fallback={<LoadingSpinner />}>\n        <Switch>\n          <Route component={GameHome} exact path={`${url}`} />\n          {paths}\n          <Redirect from={`${url}/*`} to={`${url}`} />\n          <Route component={GameHome} />\n        </Switch>\n      </Suspense>\n    </div>\n  );\n};\n\nRoutes.propTypes = {\n  // types = [array, bool, func, number, object, string, symbol].isRequired\n  handleNav: types.func.isRequired,\n  match: types.shape({\n    url: types.string.isRequired,\n  }).isRequired,\n};\n\nexport default Routes;\n"],"sourceRoot":""}