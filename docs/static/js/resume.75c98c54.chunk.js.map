{"version":3,"sources":["hooks/useToggle.ts","apis/noop.ts","helpers/lazyWithPreload.ts","hooks/useAnchorEl.ts","components/common/header/ButtonPopover.tsx","components/common/header/PlayerMenu.tsx","components/common/header/TopBar.tsx","components/common/header/Header.tsx","components/resume/Menu.tsx","components/resume/Routes.tsx"],"names":["useToggleState","defaultVal","React","useState","isToggled","setIsToggled","lazyWithPreload","ComponentPromise","lazy","useAnchorEl","anchorEl","setAnchorEl","setAnchor","e","currentTarget","clearAnchor","contentStyle","padding","ButtonPopover","props","children","buttonText","open","Boolean","Button","aria-haspopup","variant","component","onClick","Popover","id","onClose","anchorOrigin","vertical","horizontal","transformOrigin","title","style","namePadStyles","maxWidth","width","display","margin","PlayerMenu","players","useSelector","state","dispatch","useDispatch","isBot","useMemo","map","a","handleToggle","useCallback","isChecked","updateBot","handleBlur","updateName","target","value","handleKeyPress","key","Grid","container","spacing","item","xs","Typography","p","i","TextField","defaultValue","name","onBlur","onKeyPress","placeholder","Switch","checked","color","onChange","_e","isC","disabled","cursorStyles","cursor","flexLeftStyles","alignItems","flexRightStyles","marginRight","spanTopStyles","left","right","top","TopBar","theme","type","setChecked","toggleTheme","displayDarkTheme","displayLightTheme","toggleOpen","showPlayers","fontColor","iconColor","AppBar","className","Toolbar","disableGutters","IconButton","aria-label","defaultProps","memo","Header","isOpen","setIsOpen","useTheme","palette","handleNav","handleNavigation","loc","Drawer","position","noop","github","window","linkedIn","stackOverflow","Menu","onItemClick","menu","route","divider","index","Divider","MenuItem","alt","src","paddingLeft","paddingRight","Summary","Work","Education","TravelMap","Resume","GitTools","Poker","MurderMystery","GraphQL","Cars","Routes","url","match","paths","reduce","acc","obj","path","push","exact","from","to","Suspense","fallback"],"mappings":"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","file":"static/js/resume.75c98c54.chunk.js","sourcesContent":["import React from 'react';\n\ntype ToggleStateHook = [ boolean, React.MouseEventHandler, React.Dispatch<React.SetStateAction<boolean>> ];\n\nconst useToggleState = (defaultVal = false): ToggleStateHook => {\n  const [isToggled, setIsToggled] = React.useState(defaultVal);\n\n  const handleToggle = (): void => { setIsToggled(!isToggled); };\n\n  return [isToggled, handleToggle, setIsToggled];\n};\n\nexport default useToggleState;\n","export default (): void => { /* do nothing */ };\n","import React from 'react';\n\ntype ImportPromise = Promise<{ default: React.ComponentType }>;\ntype LazyComponent = React.LazyExoticComponent<React.ComponentType>;\n\nexport default function lazyWithPreload(ComponentPromise: ImportPromise): LazyComponent {\n  return React.lazy(() => ComponentPromise);\n}\n","import React from 'react';\n\ninterface AnchorElHook {\n  anchorEl: null | HTMLElement;\n  setAnchor: React.MouseEventHandler;\n  clearAnchor: React.MouseEventHandler;\n}\n\nconst useAnchorEl = (): AnchorElHook => {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const setAnchor = (e: React.MouseEvent<HTMLButtonElement>): void => {\n    setAnchorEl(e.currentTarget);\n  };\n  const clearAnchor = (): void => {\n    setAnchorEl(null);\n  };\n  return { anchorEl, setAnchor, clearAnchor };\n};\n\nexport default useAnchorEl;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Popover from '@material-ui/core/Popover';\nimport useAnchorEl from '../../../hooks/useAnchorEl';\n\ninterface ButtonPopoverProps {\n  children: React.ReactElement;\n  buttonText: string;\n}\n\nconst contentStyle: React.CSSProperties = { padding: 15 };\n\nconst ButtonPopover = (props: ButtonPopoverProps): React.ReactElement => {\n  const { anchorEl, setAnchor, clearAnchor } = useAnchorEl();\n  const { children, buttonText } = props;\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <Button\n        aria-haspopup=\"true\"\n        variant=\"contained\"\n        component=\"button\"\n        onClick={setAnchor}\n      >\n        {buttonText}\n      </Button>\n      <Popover\n        id=\"player-popover\"\n        open={open}\n        anchorEl={anchorEl}\n        onClose={clearAnchor}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'center' }}\n        title=\"player-popover\"\n      >\n        <div style={contentStyle}>\n          {children}\n        </div>\n      </Popover>\n    </>\n  );\n};\n\nexport default ButtonPopover;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Switch from '@material-ui/core/Switch';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { updateName, updateBot } from '../../../store/modules/players';\nimport { DBRootState } from '../../../store/types';\n\nconst namePadStyles: React.CSSProperties = {\n  maxWidth: '420px',\n  width: '100%',\n  display: 'block',\n  margin: 'auto',\n};\n\nconst PlayerMenu: React.FC = () => {\n  const players = useSelector((state: DBRootState) => state.players);\n  const dispatch = useDispatch();\n\n  const isBot = React.useMemo(() => players.map((a) => a.isBot), [players]);\n\n  /** toggle between bot and human player - dispatch to redux */\n  const handleToggle = React.useCallback(\n    (id: number, isChecked: boolean): void => {\n      dispatch(updateBot(id, isChecked));\n    },\n    [dispatch],\n  );\n\n  /** update player name onBlur - dispatch to redux */\n  const handleBlur = React.useCallback(\n    (id: number) => (e: React.FocusEvent<HTMLInputElement>): void => {\n      dispatch(updateName(id, e.target.value || ''));\n    },\n    [dispatch],\n  );\n\n  /** if enter key was pressed in textfield, update name - dispatch to redux */\n  const handleKeyPress = React.useCallback(\n    (id: number) => (e: React.KeyboardEvent<HTMLDivElement>): void => {\n      if (e.key === 'Enter') {\n        dispatch(updateName(id, (e.target as HTMLInputElement).value || ''));\n      }\n    },\n    [dispatch],\n  );\n\n  return (\n    <div style={namePadStyles}>\n      <Grid container spacing={1}>\n        <Grid item xs={9}>\n          <Typography variant=\"h5\">\n            Edit Player Names\n          </Typography>\n        </Grid>\n        <Grid item xs={3}>\n          <Typography variant=\"h5\">\n            Is Bot?\n          </Typography>\n        </Grid>\n      </Grid>\n      {players.map((p, i) => (p.id !== 0\n        ? (\n          <Grid key={`${p.name},${i}`} container spacing={1}>\n            <Grid item xs={9}>\n              <TextField\n                defaultValue={p.name}\n                onBlur={handleBlur(p.id)}\n                onKeyPress={handleKeyPress(p.id)}\n                placeholder=\"Enter Player Name\"\n                title={`player ${i} name`}\n              />\n            </Grid>\n            <Grid item xs={3}>\n              <Switch\n                checked={isBot[i]}\n                value={isBot[i]}\n                color=\"primary\"\n                onChange={(_e, isC): void => handleToggle(p.id, isC)}\n                title={`isBot-switch-${i}`}\n              />\n            </Grid>\n          </Grid>\n        ) : (\n          <Grid key={`${p.name},${i}`} container spacing={1}>\n            <Grid item xs={9}>\n              <Typography variant=\"h5\">\n                {p.name}\n              </Typography>\n            </Grid>\n            <Grid item xs={3}>\n              <Switch checked disabled />\n            </Grid>\n          </Grid>\n        )\n      ))}\n    </div>\n  );\n};\n\nexport default PlayerMenu;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Switch from '@material-ui/core/Switch';\nimport SimplePopover from './ButtonPopover';\nimport PlayerMenu from './PlayerMenu';\nimport {\n  displayDarkTheme,\n  displayLightTheme,\n} from '../../../store/modules/theme';\nimport { DBRootState } from '../../../store/types';\n\nconst cursorStyles: React.CSSProperties = { cursor: 'pointer' };\nconst flexLeftStyles: React.CSSProperties = { display: 'flex', alignItems: 'center' };\nconst flexRightStyles: React.CSSProperties = { display: 'flex', marginRight: 15 };\nconst spanTopStyles: React.CSSProperties = { left: 0, right: 0, top: 0 };\n\ninterface TopBarProps {\n  /** change the color scheme of the Menu text */\n  fontColor: TypographyProps['color'];\n  /** change the color scheme of the icon */\n  iconColor: 'inherit' | 'primary' | 'secondary' | 'default' | undefined;\n  /** show/hide the player editor button */\n  showPlayers: boolean;\n  /** callback called onClick of Icon or Menu text */\n  toggleOpen: React.MouseEventHandler;\n}\n\nconst TopBar = (props: TopBarProps): React.ReactElement => {\n  const theme = useSelector((state: DBRootState) => state.theme);\n  const dispatch = useDispatch();\n  const [checked, setChecked] = React.useState(theme.type !== 'dark');\n\n  /** function toggle between site's light and dark theme - dispatch to Redux */\n  const toggleTheme = React.useCallback(\n    (): void => {\n      checked\n        ? dispatch(displayDarkTheme())\n        : dispatch(displayLightTheme());\n      setChecked(!checked);\n    },\n    [checked, dispatch],\n  );\n\n  const {\n    toggleOpen, showPlayers, fontColor, iconColor,\n  } = props;\n\n  return (\n    <AppBar style={spanTopStyles} className={`header-${theme.type}-theme`}>\n      <Toolbar disableGutters>\n        <div className=\"flex-container\">\n          <div style={flexLeftStyles}>\n            <IconButton\n              aria-label=\"Menu\"\n              onClick={toggleOpen}\n              color={iconColor}\n              title=\"Icon Menu Button\"\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography\n              onClick={toggleOpen}\n              style={cursorStyles}\n              variant=\"h6\"\n              color={fontColor}\n            >\n              Menu\n            </Typography>\n          </div>\n          {showPlayers && (\n            <div style={flexRightStyles}>\n              <SimplePopover buttonText=\"Players\">\n                <PlayerMenu />\n              </SimplePopover>\n            </div>\n          )}\n          <div style={flexRightStyles}>\n            <Switch checked={checked} value={checked} onChange={toggleTheme} title=\"Theme Toggle Switch\" />\n          </div>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nTopBar.defaultProps = {\n  showPlayers: false,\n};\n\nexport default React.memo(TopBar);\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Drawer from '@material-ui/core/Drawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport NavigationClose from '@material-ui/icons/Close';\nimport { useTheme } from '@material-ui/core/styles';\nimport TopBar from './TopBar';\nimport useToggleState from '../../../hooks/useToggle';\nimport noop from '../../../apis/noop';\n\ntype ItemClick = (loc: string) => void;\n\nexport interface NavProps {\n  onItemClick: ItemClick;\n}\n\ninterface HeaderProps {\n  /** content of the header bar via render props */\n  children: (onItemClick: ItemClick) => React.ReactElement<NavProps>;\n  /** callback function, wrapped with logic, then passed as onItemClick to children */\n  handleNav: (loc: string) => void;\n  /** show/hide the player editor button */\n  showPlayers: boolean;\n}\n\nconst Header = (props: HeaderProps): React.ReactElement => {\n  const [isOpen, toggleOpen, setIsOpen] = useToggleState(false);\n  const { palette: { type }} = useTheme();\n  const { children, handleNav, showPlayers } = props;\n\n  /** close the menu and call the passed callback */\n  const handleNavigation = React.useCallback((loc: string): void => {\n    setIsOpen(false);\n    handleNav(loc);\n  }, [handleNav, setIsOpen]);\n\n  const iconColor = type === 'light' ? 'inherit' : 'default';\n  const fontColor = type === 'light' ? 'inherit' : 'initial';\n\n  return (\n    <>\n      <TopBar toggleOpen={toggleOpen} showPlayers={showPlayers} fontColor={fontColor} iconColor={iconColor} />\n      <Drawer onClose={toggleOpen} open={isOpen}>\n        <AppBar position=\"sticky\">\n          <Toolbar disableGutters>\n            <IconButton\n              aria-label=\"Menu Close\"\n              onClick={toggleOpen}\n              color={iconColor}\n              title=\"Close Side Menu\"\n            >\n              <NavigationClose />\n            </IconButton>\n            <Typography variant=\"h6\" color={fontColor}>\n              Menu\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        {children(handleNavigation)}\n      </Drawer>\n    </>\n  );\n};\n\nHeader.defaultProps = {\n  showPlayers: false,\n  handleNav: noop,\n};\n\nexport default Header;\n","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Divider from '@material-ui/core/Divider';\nimport noop from '../../apis/noop';\n\ninterface MenuProps {\n  onItemClick?: (loc: string) => void;\n}\n\n// external links\nconst github = (): void => { window.open('https://github.com/kennethbigler/react-home'); };\nconst linkedIn = (): void => { window.open('https://www.linkedin.com/in/kennethbigler'); };\nconst stackOverflow = (): void => { window.open('https://stackoverflow.com/users/4830309/ken-bigler'); };\n\nconst Menu: React.FC<MenuProps> = React.memo((props: MenuProps) => {\n  const { onItemClick } = props;\n  // internal routes\n  const menu = React.useMemo(() => [\n    { name: 'Summary', route: '' },\n    { name: 'Work', route: 'work' },\n    { name: 'Resume', route: 'resume' },\n    { name: 'Hackathons & Education', route: 'education' },\n    { divider: true },\n    { name: 'Git Tools', route: 'git-tools' },\n    { name: 'GraphQL Demo', route: 'graphql' },\n    { divider: true },\n    { name: 'Cars', route: 'cars' },\n    { name: 'Travel Map', route: 'travel' },\n    { name: 'Murder Mystery', route: 'murder' },\n    { name: 'Poker Night Scores', route: 'poker' },\n    { name: 'React Games', route: 'games' },\n  ].map((item, index) => (item.divider\n    ? (\n      <Divider key={index} />\n    ) : (\n      <MenuItem key={item.name} onClick={(): void => (onItemClick ? onItemClick(`/${item.route}`) : noop())}>\n        {item.name}\n      </MenuItem>\n    )\n  )), [onItemClick]);\n\n  return (\n    <>\n      {menu}\n      <Divider />\n      <MenuItem onClick={github}>\n        GitHub\n      </MenuItem>\n      <MenuItem onClick={linkedIn}>\n        LinkedIn\n      </MenuItem>\n      <Divider />\n      <br />\n      <img\n        alt=\"profile for Ken Bigler at Stack Overflow, Q&A for professional and enthusiast programmers\"\n        id=\"stackOverflow\"\n        onClick={stackOverflow}\n        src=\"https://stackoverflow.com/users/flair/4830309.png?theme=dark\"\n        style={{\n          display: 'block',\n          margin: 'auto',\n          cursor: 'pointer',\n          width: 240,\n          paddingLeft: 16,\n          paddingRight: 16,\n        }}\n      />\n    </>\n  );\n});\n\nexport default Menu;\n","import React from 'react';\nimport {\n  Switch, Route, Redirect, match as Match,\n} from 'react-router-dom';\nimport lazyWithPreload from '../../helpers/lazyWithPreload';\nimport Header, { NavProps } from '../common/header/Header';\nimport Menu from './Menu';\nimport LoadingSpinner from '../common/loading-spinner';\n\n// lazy load page components\nconst Summary = lazyWithPreload(import(/* webpackChunkName: \"r_summary\" */ './summary'));\nconst Work = lazyWithPreload(import(/* webpackChunkName: \"r_work\" */ './work'));\nconst Education = lazyWithPreload(import(/* webpackChunkName: \"r_education\" */ './education'));\nconst TravelMap = lazyWithPreload(import(/* webpackChunkName: \"r_travel\" */ './travel-map'));\nconst Resume = lazyWithPreload(import(/* webpackChunkName: \"r_resume\" */ './resume'));\nconst GitTools = lazyWithPreload(import(/* webpackChunkName: \"r_git\" */ './git-tools'));\nconst Poker = lazyWithPreload(import(/* webpackChunkName: \"r_poker\" */ './poker'));\nconst MurderMystery = lazyWithPreload(import(/* webpackChunkName: \"r_poker\" */ './murder-mystery'));\nconst GraphQL = lazyWithPreload(import(/* webpackChunkName: \"r_graphql\" */ './graphql'));\nconst Cars = lazyWithPreload(import(/* webpackChunkName: \"r_cars\" */ './cars'));\n\ninterface RoutesProps {\n  handleNav: (loc: string) => void;\n  match: Match;\n}\n\nconst Routes: React.FC<RoutesProps> = (props: RoutesProps) => {\n  const { match: { url }, handleNav } = props;\n\n  const paths = React.useMemo(() => [\n    { name: 'work', component: Work },\n    { name: 'education', component: Education },\n    { name: 'travel', component: TravelMap },\n    { name: 'resume', component: Resume },\n    { name: 'git-tools', component: GitTools },\n    { name: 'poker', component: Poker },\n    { name: 'murder', component: MurderMystery },\n    { name: 'graphql', component: GraphQL },\n    { name: 'cars', component: Cars },\n  ].reduce((acc: React.ReactNodeArray, obj) => {\n    const { name, component } = obj;\n    const path = `${url}${name}`;\n    acc.push(<Route key={`${path}r`} exact {...{ path, component }} />);\n    acc.push(<Redirect key={`${path}d`} from={`${path}*`} to={path} />);\n    return acc;\n  },\n  []), [url]);\n\n  return (\n    <>\n      <Header handleNav={handleNav}>\n        {(onItemClick): React.ReactElement<NavProps> => <Menu onItemClick={onItemClick} />}\n      </Header>\n      <React.Suspense fallback={<LoadingSpinner />}>\n        <Switch>\n          <Route component={Summary} exact path={`${url}`} />\n          {paths}\n          <Redirect from={`${url}*`} to={`${url}`} />\n          <Route component={Summary} />\n        </Switch>\n      </React.Suspense>\n    </>\n  );\n};\n\nexport default Routes;\n"],"sourceRoot":""}