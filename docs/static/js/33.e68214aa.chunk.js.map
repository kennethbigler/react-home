{"version":3,"sources":["components/games/gametable/Card.jsx","components/games/gametable/Hand.jsx","components/games/gametable/Player.jsx","components/games/gametable/Board.jsx","components/games/gametable/Button.jsx","components/games/gametable/ButtonGroup.jsx","components/games/gametable/index.jsx","components/games/poker/Poker.jsx","components/games/poker/index.jsx"],"names":["styles","cardFace","backgroundColor","borderRadius","cursor","display","fontWeight","height","margin","padding","width","cardTitle","textAlign","suit","maxWidth","Card","memo","props","dropped","name","cardColor","color","red","react_default","a","createElement","style","Object","objectSpread","onClick","cardHandler","playerNo","handNo","cardNo","role","Typography","variant","Hand","cardsToDiscard","hand","isBlackJack","isHandTurn","isMultiHand","isPlayerTurn","bold","purple","marginTop","weight","map","cards","card","i","includes","gametable_Card","key","player","minWidth","Player","betHandler","hideHands","turn","hands","length","showSlider","id","isBot","minBet","Math","max","min","money","maxBet","background","cyan","status","green","blueGrey","Slider","onChange","event","value","step","bet","concat","gametable_Hand","Board","players","gametable_Player","Button","func","ButtonGroup","gameFunctions","obj","gametable_Button","GameTable","cardClickHandler","gameOver","played","slice","future","playersToDisplay","passProps","gametable_Board","assign","gametable_ButtonGroup","defaultProps","DEALER","LAST_PLAYER","Poker","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setNewGameRedux","_this$props","turnActions","playerActions","resetTurn","forEach","resetStatus","getNewGameState","startGame","getHand","_this$props2","get","getHistogram","hist","newGame","setState","handleDiscard","dealHands","endTurn","incrPlayerTurn","endGame","_this$props3","winner","val","playerScore","parseInt","evaluate","payout","rankHand","has3","indexOf","has2","isStraight","lastIndexOf","isFlush","j","discard","_this$props4","_players$turn$player","swapCards","state","discardHelper","n","discardCards","cardVals","push","computer","splice","rank","total","numCards","last","num","toString","reduce","c","_this$props5","Deck","shuffle","newHand","_this$props6","_this$state","canPlay","_this$props7","_this$state2","gutterBottom","gametable","Component","connect","dispatch","bindActionCreators"],"mappings":"8QAMMA,EAAS,CACbC,SAAU,CACRC,gBAAiB,QACjBC,aAAc,EACdC,OAAQ,UACRC,QAAS,eACTC,WAAY,OACZC,OAAQ,GACRC,OAAQ,EACRC,QAAS,EACTC,MAAO,IAETC,UAAW,CAAEC,UAAW,QACxBC,KAAM,CACJL,OAAQ,OACRM,SAAU,GACVF,UAAW,SACXF,MAAO,SA6CIK,EAtCFC,eAAK,SAACC,GAAU,IACnBC,EAAwBD,EAAxBC,QAASL,EAAeI,EAAfJ,KAAMM,EAASF,EAATE,KASjBC,EAAY,CAChBC,MAAgB,WAATR,GAAyB,WAATA,EAAe,QAAUS,IAAI,KACpDpB,gBAAiBgB,EAAUI,IAAI,KAAO,SAIxC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAKC,OAAAC,EAAA,EAAAD,CAAA,GAAO3B,EAAOC,SAAamB,GAAaS,QAdhC,YAIlBC,EADIb,EADFa,aACEb,EADWc,SACXd,EADqBe,OACrBf,EAD6BgB,SAYuCC,KAAK,QAC3EX,EAAAC,EAAAC,cAAA,OAAKC,MAAO1B,EAAOW,WAChBQ,EAAON,GAEVU,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAYC,QAAQ,KAAKV,MAAKC,OAAAC,EAAA,EAAAD,CAAA,GAAO3B,EAAOa,KAASO,IAClDP,MCwBMwB,EAhEF,SAACpB,GAAU,IAEpBa,EASEb,EATFa,YACAQ,EAQErB,EARFqB,eACAC,EAOEtB,EAPFsB,KACAP,EAMEf,EANFe,OACAQ,EAKEvB,EALFuB,YACAC,EAIExB,EAJFwB,WACAC,EAGEzB,EAHFyB,YACAC,EAEE1B,EAFF0B,aACAZ,EACEd,EADFc,SAGIa,EAAQH,GAAcC,GAAeC,IACpCD,GAAeC,EAClB,CAAErC,WAAY,OAAQe,MAAOwB,IAAO,MACpC,CAAEvC,WAAY,UAElB,OACEiB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAYC,QAAQ,KAAKV,MAAKC,OAAAC,EAAA,EAAAD,CAAA,GAAOiB,EAAP,CAAaE,UAAW,WACnDN,IACKD,EAAKQ,OAAS,GAAK,SAAW,iBAAmBR,EAAKQ,QAE7DC,IAAIT,EAAKU,MAAO,SAACC,EAAMC,GACtB,IAAMjC,EAAUkC,IAASd,EAAgBa,GACzC,OACE5B,EAAAC,EAAAC,cAAC4B,EAAD,CACEC,IAAKJ,EAAK/B,KAAO+B,EAAKrC,KACtBiB,YAAaA,EACbG,OAAQkB,EACRjC,QAASA,EACTc,OAAQA,EACRb,KAAM+B,EAAK/B,KACXY,SAAUA,EACVlB,KAAMqC,EAAKrC,WClCjBb,EAAS,CACbuD,OAAQ,CACNpD,aAAc,EACdE,QAAS,eACTG,OAAQ,GACRC,QAAS,IAEXC,MAAO,CAAE8C,SAAU,UA+GNC,EAzGA,SAACxC,GAAU,IAGtByC,EAQEzC,EARFyC,WACA5B,EAOEb,EAPFa,YACAQ,EAMErB,EANFqB,eACAqB,EAKE1C,EALF0C,UACAnB,EAIEvB,EAJFuB,YACAe,EAGEtC,EAHFsC,OACAxB,EAEEd,EAFFc,SACA6B,EACE3C,EADF2C,KAGIjB,IAAiBiB,GAAQ7B,IAAa6B,EAAKL,OAC3Cb,EAAca,EAAOM,MAAMC,OAAS,EACpCC,IAAeJ,GAAanB,GAA6B,IAAde,EAAOS,KAAaT,EAAOU,MAEtEC,EAASC,KAAKC,IAAID,KAAKE,IAAId,EAAOe,MAAO,GAAI,GAC7CC,EAASJ,KAAKC,IAAID,KAAKE,IAAId,EAAOe,MAAO,KAAM,IAIjDjD,EAAQsB,EAAe,CAAE6B,WAAYC,IAAK,MAAS,GACjD1B,EAASJ,EAAe,CAAErC,WAAY,QAAW,CAAEA,WAAY,UAWrE,MAVsB,QAAlBiD,EAAOmB,SACTrD,EAAQ,CAAEmD,WAAYG,IAAM,OAER,SAAlBpB,EAAOmB,SACTrD,EAAQ,CAAEmD,WAAYI,IAAS,OAEX,SAAlBrB,EAAOmB,SACTrD,EAAQ,CAAEmD,WAAYlD,IAAI,OAI1BC,EAAAC,EAAAC,cAACV,EAAA,EAAD,CAAMW,MAAKC,OAAAC,EAAA,EAAAD,CAAA,GAAO3B,EAAOuD,OAAWlC,IAClCE,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAYC,QAAQ,KAAKV,MAAKC,OAAAC,EAAA,EAAAD,CAAA,GAAOoB,IAClCQ,EAAOpC,KADV,MAGGoC,EAAOe,OAETP,GACCxC,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CACET,IAAKG,EACLF,IAAKH,EACLY,SAzBe,SAACC,EAAOC,GAAR,OAAkBtB,EAAWH,EAAOS,GAAIe,EAAOC,IA0B9DC,KA3BK,EA4BLvD,MAAO1B,EAAOU,MACdsE,MAAOzB,EAAO2B,MAGjB1C,GACkB,IAAde,EAAOS,IACRzC,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAYC,QAAQ,MAApB,SAEGmB,EAAO2B,KAGblC,IAAIO,EAAOM,MAAO,SAACtB,EAAMY,GACxB,IAAMV,IAAemB,GAAQA,EAAKrB,OAASY,EAC3C,OACE5B,EAAAC,EAAAC,cAAA,OAAK6B,IAAG,OAAA6B,OAAShC,KACbQ,GACApC,EAAAC,EAAAC,cAAC2D,EAAD,CACEtD,YAAaA,EACbQ,eAAgBA,EAChBC,KAAMA,EACNP,OAAQmB,EACRX,YAAaA,EACbC,WAAYA,EACZC,YAAaA,EACbC,aAAcA,EACdZ,SAAUA,SC7CXsD,EA5CD,SAACpE,GAAU,IAErByC,EAOEzC,EAPFyC,WACA5B,EAMEb,EANFa,YACAQ,EAKErB,EALFqB,eACAqB,EAIE1C,EAJF0C,UACAnB,EAGEvB,EAHFuB,YACA8C,EAEErE,EAFFqE,QACA1B,EACE3C,EADF2C,KAGF,OACErC,EAAAC,EAAAC,cAAA,WACGuB,IAAIsC,EAAS,SAAC/B,EAAQJ,GAAT,OACZ5B,EAAAC,EAAAC,cAAC8D,EAAD,CACEjC,IAAG,SAAA6B,OAAWhC,GACdO,WAAYA,EACZ5B,YAAaA,EACbQ,eAAgBA,EAChBqB,UAAWA,EACXnB,YAAaA,EACbe,OAAQA,EACRxB,SAAUoB,EACVS,KAAMA,iBCFD4B,EArBAxE,eAAK,SAACC,GAAU,IACrBwE,EAAexE,EAAfwE,KAAMtE,EAASF,EAATE,KAEd,OACEI,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,CACEnE,MAAM,UACNQ,QAAS4D,EACT/D,MAAO,CAAElB,OAAQ,IACjB4B,QAAQ,aAEPjB,KCYQuE,EArBK,SAACzE,GAAU,IACrB0E,EAAkB1E,EAAlB0E,cACR,OACEpE,EAAAC,EAAAC,cAAA,WACGuB,IAAI2C,EAAe,SAAAC,GAAG,OACrBrE,EAAAC,EAAAC,cAACoE,EAAD,CAAQvC,IAAKsC,EAAIzE,KAAMsE,KAAMG,EAAIH,KAAMtE,KAAMyE,EAAIzE,WCJnD2E,EAAY,SAAC7E,GAAU,IAEzByC,EASEzC,EATFyC,WACAqC,EAQE9E,EARF8E,iBACAzD,EAOErB,EAPFqB,eACAqD,EAME1E,EANF0E,cACAK,EAKE/E,EALF+E,SACArC,EAIE1C,EAJF0C,UACAnB,EAGEvB,EAHFuB,YACA8C,EAEErE,EAFFqE,QACA1B,EACE3C,EADF2C,KAIIqC,EAASX,EAAQY,MAAM,EAAGtC,EAAKL,OAAS,GACxC4C,EAASb,EAAQY,MAAMtC,EAAKL,OAAS,GACrC6C,EAAoBzC,IAA0B,IAAbqC,EAEnCV,EADAA,EAAQY,MAAMtC,EAAKL,OAAQK,EAAKL,OAAS,GAGvC8C,EAAY,CAChB3C,aACApB,iBACAqB,YACAnB,cACAoB,OACA9B,YAAaiE,GAEf,OACExE,EAAAC,EAAAC,cAAA,WACGe,IAAgBmB,EAEbpC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6E,EAAD3E,OAAA4E,OAAA,CAAOjB,QAASW,GAAYI,IAC5B9E,EAAAC,EAAAC,cAAC+E,EAAD,CAAab,cAAeA,IAC5BpE,EAAAC,EAAAC,cAAC6E,EAAD3E,OAAA4E,OAAA,CAAOjB,QAASa,GAAYE,KAG9B9E,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6E,EAAD3E,OAAA4E,OAAA,CAAOjB,QAASc,GAAsBC,IACtC9E,EAAAC,EAAAC,cAAC+E,EAAD,CAAab,cAAeA,OAsBxCG,EAAUW,aAAe,CACvBjE,aAAa,GAGAsD,6OCzDTY,EAAS,EACTC,EAAc,EAKdC,cAmCJ,SAAAA,EAAY3F,GAAO,IAAA4F,EAAA,OAAAlF,OAAAmF,EAAA,EAAAnF,CAAAoF,KAAAH,IACjBC,EAAAlF,OAAAqF,EAAA,EAAArF,CAAAoF,KAAApF,OAAAsF,EAAA,EAAAtF,CAAAiF,GAAAM,KAAAH,KAAM9F,KAiBRkG,gBAAkB,WAAM,IAAAC,EAC0BP,EAAK5F,MAA7CoG,EADcD,EACdC,YAAaC,EADCF,EACDE,cAAehC,EADd8B,EACc9B,QAEpC+B,EAAYE,YAEZC,IAAQlC,EAAS,SAAA/B,GAAM,OAAI+D,EAAcG,YAAYlE,EAAOS,OAvB3C6C,EA8BnBa,gBAAkB,iBAAO,CACvB/B,cAAe,CAAC,CAAExE,KAAM,aAAcsE,KAAMoB,EAAKc,YACjDrF,eAAgB,GAChBqB,WAAW,EACXqC,UAAU,IAlCOa,EAyCnBe,QAAU,WAAM,IAAAC,EAEYhB,EAAK5F,MAAvB2C,EAFMiE,EAENjE,KAAM0B,EAFAuC,EAEAvC,QACd,OAAOwC,IAAIxC,EAAQ1B,EAAKL,QAAS,iBAAkB,OA5ClCsD,EA+CnBkB,aAAe,SAACxF,GAEd,IAAMyF,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAKlD,OAHAR,IAAQjF,EAAM,SAACW,GACb8E,EAAK9E,EAAKH,OAAS,IAAM,IAEpBiF,GAtDUnB,EAyDnBoB,QAAU,WACRpB,EAAKM,kBACLN,EAAKqB,SAASrB,EAAKa,oBA3DFb,EAkEnBc,UAAY,WACVd,EAAKqB,SAAS,CACZvC,cAAe,CAAC,CAAExE,KAAM,gBAAiBsE,KAAMoB,EAAKsB,gBACpDxE,WAAW,IAEbkD,EAAKuB,aAvEYvB,EA2EnBwB,QAAU,WACgBxB,EAAK5F,MAArBoG,YACIiB,iBACZzB,EAAKqB,SAAS,CACZvC,cAAe,CAAC,CAAExE,KAAM,gBAAiBsE,KAAMoB,EAAKsB,gBACpD7F,eAAgB,MAhFDuE,EAoFnB0B,QAAU,WAAM,IAAAC,EACqB3B,EAAK5F,MAAhCqE,EADMkD,EACNlD,QAASgC,EADHkB,EACGlB,cACbmB,EAAS,CAAEC,IAAK,EAAG1E,GAAI,GAC3BwD,IAAQlC,EAAS,SAAC/B,GAChB,KAAIA,EAAOS,KAAO0C,GAAUnD,EAAOS,GAAK2C,GAAxC,CAGA,IAAMgC,EAAcC,SAAS/B,EAAKgC,SAAStF,EAAOM,MAAM,GAAGZ,OAAQ,IAC/D0F,EAAcF,EAAOC,MACvBD,EAAS,CAAEC,IAAKC,EAAa3E,GAAIT,EAAOS,QAG5CwD,IAAQlC,EAAS,SAAC/B,GACZA,EAAOS,KAAO0C,GAAUnD,EAAOS,GAAK2C,IAE7BpD,EAAOS,KAAOyE,EAAOzE,GAC9BsD,EAAcwB,OAAOvF,EAAOS,GAAI,MAAO,IAEvCsD,EAAcwB,OAAOvF,EAAOS,GAAI,QAAS,MAG7C6C,EAAKqB,SAAS,CACZvC,cAAe,CAAC,CAAExE,KAAM,WAAYsE,KAAMoB,EAAKoB,UAC/CjC,UAAU,KA3GKa,EA+HnBkC,SAAW,SAACxG,EAAMyF,GAEhB,GAAI5E,IAAS4E,EAAM,GACjB,OAAO,EAGT,IAAMgB,EAAO5F,IAAS4E,EAAM,GACtB7E,EAAI6E,EAAKiB,QAAQ,GACjBC,GAAc,IAAP/F,EACb,GAAI6F,GAAQE,EACV,OAAO,EAET,GAAIF,EACF,OAAO,EAET,GAAIE,GAAQ9F,IAAS4E,EAAM,EAAG7E,EAAI,GAChC,OAAO,EAET,GAAI+F,EACF,OAAO,EAQT,IAJA,IAAMC,EAAanB,EAAKoB,YAAY,GAAKpB,EAAKiB,QAAQ,KAAO,GACvDjB,EAAK,KAAOA,EAAK,IAAMA,EAAK,IAAMA,EAAK,IAAMA,EAAK,GAEpDqB,GAAU,EACLC,EAAI,EAAGA,EAAI/G,EAAKuB,OAAQwF,GAAK,EACpC,GAAI/G,EAAK+G,GAAGzI,OAAS0B,EAAK,GAAG1B,KAAM,CACjCwI,GAAU,EACV,MAGJ,OAAIF,GAAcE,EACT,EAELA,EACK,EAELF,EACK,EAEF,GAzKUtC,EAiLnB0C,QAAU,SAACtG,GAAU,IAAAuG,EAEsB3C,EAAK5F,MAAtC2C,EAFW4F,EAEX5F,KAAM0D,EAFKkC,EAELlC,cAFKmC,EAAAD,EAEUlE,QACC1B,EAAKL,QAA3BS,EAHWyF,EAGXzF,GAAIH,EAHO4F,EAGP5F,MAEZyD,EAAcoC,UAAU7F,EAAOG,EAAIf,IAtLlB4D,EA0LnBsB,cAAgB,WAAM,IACZ7F,EAAmBuE,EAAK8C,MAAxBrH,eACRuE,EAAK0C,QAAQjH,GACbuE,EAAKqB,SAAS,CACZvC,cAAe,CAAC,CAAExE,KAAM,WAAYsE,KAAMoB,EAAKwB,UAC/C/F,eAAgB,MA/LDuE,EAwMnB+C,cAAgB,SAACC,EAAG7B,GAKlB,IAJA,IAAMzF,EAAOsE,EAAKe,UACZkC,EAAe,GACfC,EAAW,CAAC/B,EAAKiB,QAAQ,IAEtB9F,EAAI,EAAGA,EAAI0G,EAAG1G,GAAK,EAC1B4G,EAAS5G,GAAK6E,EAAKiB,QAAQ,EAAGc,EAAS5G,EAAI,GAAK,GAGlD,IAAK,IAAIA,EAAI,EAAGA,EAAIZ,EAAKuB,OAAQX,GAAK,EACpC,IAAK,IAAImG,EAAI,EAAGA,EAAIS,EAASjG,OAAQwF,GAAK,EACxC,GAAI/G,EAAKY,GAAGJ,OAAS,IAAMgH,EAAST,GAAI,CACtCQ,EAAaE,KAAK7G,GAClB,MAMN0D,EAAK0C,QAAQO,IA3NIjD,EAmPnBoD,SAAW,WACT,IAAM1H,EAAOsE,EAAKe,UACZI,EAAOnB,EAAKkB,aAAaxF,GAG/B,OAFasE,EAAKkC,SAASxG,EAAMyF,IAG/B,KAAK,EACHA,EAAKoB,YAAY,IAAM,GACnBvC,EAAK+C,cAAc,EAAG5B,GACtBnB,EAAK0C,QAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,IAC9B,MACF,KAAK,EACH1C,EAAK+C,cAAc,EAAG5B,GACtB,MACF,KAAK,EACL,KAAK,EACHnB,EAAK+C,cAAc,EAAG5B,GAU1BnB,EAAKwB,WA7QYxB,EAsRnBd,iBAAmB,SAAChE,EAAUC,EAAQC,GAAW,IACvCK,EAAmBuE,EAAK8C,MAAxBrH,eAEFa,EAAIb,EAAe2G,QAAQhH,IAE1B,IAAPkB,EAAWb,EAAe0H,KAAK/H,GAAUK,EAAe4H,OAAO/G,EAAG,GAElE0D,EAAKqB,SAAS,CAAE5F,oBA7RCuE,EAuSnBgC,SAAW,SAACtG,GAWV,IAVA,IAAMyF,EAAOnB,EAAKkB,aAAaxF,GACzB4H,EAAOtD,EAAKkC,SAASxG,EAAMyF,GAE3B/E,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,GACvBmH,EAAQ,EACRC,EAAW,EACXlH,EAAI,EACJmH,GAAQ,EAGLF,EAAQ,GAAG,CAChB,IAAMG,EAAMvC,EAAKiB,QAAQoB,EAAUC,EAAO,IAC7B,IAATC,GACFF,GAAY,EACZC,GAAQ,IAERrH,EAAME,GAAKoH,EAAIC,SAAS,IACxBrH,GAAK,EACLiH,GAASC,EACTC,EAAOC,GAGX,SAAApF,OAAUgF,GAAVhF,OAAiBsF,IAAOxH,EAAO,SAACzB,EAAGkJ,GAAJ,SAAAvF,OAAa3D,GAAb2D,OAAiBuF,OA9T/B7D,EAqUnBuB,UAAY,WAAM,IAAAuC,EACmB9D,EAAK5F,MAAhCqG,EADQqD,EACRrD,cAAehC,EADPqF,EACOrF,QAEvBsF,IAAKC,UAELrD,IACElC,EACA,SAAA/B,GAAM,OAAIA,EAAOS,KAAO0C,GACnBnD,EAAOS,IAAM2C,GACbW,EAAcwD,QAAQvH,EAAOS,GAAI,MA5UxC6C,EAAKM,kBACLN,EAAK8C,MAAQ9C,EAAKa,kBAHDb,oFAME,IAAAkE,EACOhE,KAAK9F,MAAvBqE,EADWyF,EACXzF,QAAS1B,EADEmH,EACFnH,KADEoH,EAEajE,KAAK4C,MAA7BhG,EAFWqH,EAEXrH,UAAWqC,EAFAgF,EAEAhF,SACbzC,EAAS+B,EAAQ1B,EAAKL,QACtB0H,EAAU1H,EAAOS,KAAO0C,GAAUnD,EAAOS,IAAM2C,EAEhDhD,GAAcqC,IAAYzC,EAAOU,QACpCgH,EAAUlE,KAAKkD,WAAalD,KAAKwB,4CAsU5B,IAAA2C,EACmBnE,KAAK9F,MAAvB2C,EADDsH,EACCtH,KAAM0B,EADP4F,EACO5F,QADP6F,EAIHpE,KAAK4C,MADPrH,EAHK6I,EAGL7I,eAAgBqD,EAHXwF,EAGWxF,cAAeK,EAH1BmF,EAG0BnF,SAAUrC,EAHpCwH,EAGoCxH,UAE3C,OACEpC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAYC,QAAQ,KAAKgJ,cAAY,GAArC,qBAGA7J,EAAAC,EAAAC,cAAC4J,EAAA,EAAD,CACEtF,iBAAkBgB,KAAKhB,iBACvBzD,eAAgBA,EAChBqD,cAAeA,EACfK,SAAUA,EACVrC,UAAWA,EACXnB,aAAa,EACb8C,QAASA,EACT1B,KAAMA,YAxYI0H,aAsaLC,kBAtBf,SAAyB5B,GACvB,MAAO,CACL/F,KAAM+F,EAAM/F,KACZ0B,QAASqE,EAAMrE,UAInB,SAA4BkG,GAC1B,MAAO,CACLnE,YAAaoE,YAAmB,CAAEnD,mBAAgBf,eAAaiE,GAC/DlE,cAAemE,YACb,CACE/B,cACAoB,YACAhC,WACArB,iBAEF+D,KAKSD,CAGb3E,GCjcaA","file":"static/js/33.e68214aa.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport types from 'prop-types';\nimport red from '@material-ui/core/colors/red';\nimport { Typography } from '@material-ui/core';\n// Parents: Hand\n\nconst styles = {\n  cardFace: {\n    backgroundColor: 'white',\n    borderRadius: 5,\n    cursor: 'pointer',\n    display: 'inline-block',\n    fontWeight: 'bold',\n    height: 78,\n    margin: 5,\n    padding: 3,\n    width: 50,\n  },\n  cardTitle: { textAlign: 'left' },\n  suit: {\n    margin: 'auto',\n    maxWidth: 30,\n    textAlign: 'center',\n    width: '100%',\n  },\n};\n\n/* --------------------------------------------------\n * Card\n * -------------------------------------------------- */\nconst Card = memo((props) => {\n  const { dropped, suit, name } = props;\n  // handle click to for card\n  const handleClick = () => {\n    const {\n      cardHandler, playerNo, handNo, cardNo,\n    } = props;\n    cardHandler(playerNo, handNo, cardNo);\n  };\n  // checking color based off suits: ♣♦♥♠\n  const cardColor = {\n    color: suit === '♣' || suit === '♠' ? 'black' : red[500],\n    backgroundColor: dropped ? red[100] : 'white',\n  };\n\n  // display in view\n  return (\n    <div style={{ ...styles.cardFace, ...cardColor }} onClick={handleClick} role=\"main\">\n      <div style={styles.cardTitle}>\n        {name + suit}\n      </div>\n      <Typography variant=\"h3\" style={{ ...styles.suit, ...cardColor }}>\n        {suit}\n      </Typography>\n    </div>\n  );\n});\n\nCard.propTypes = {\n  cardHandler: types.func,\n  cardNo: types.number.isRequired,\n  dropped: types.bool,\n  handNo: types.number.isRequired,\n  name: types.string.isRequired,\n  playerNo: types.number.isRequired,\n  suit: types.string.isRequired,\n};\n\nexport default Card;\n","import React from 'react';\nimport types from 'prop-types';\nimport purple from '@material-ui/core/colors/purple';\nimport map from 'lodash/map';\nimport includes from 'lodash/includes';\nimport { Typography } from '@material-ui/core';\nimport Card from './Card';\n// Parents: Player\n\n/* --------------------------------------------------\n * Hand\n * -------------------------------------------------- */\nconst Hand = (props) => {\n  const {\n    cardHandler,\n    cardsToDiscard,\n    hand,\n    handNo,\n    isBlackJack,\n    isHandTurn,\n    isMultiHand,\n    isPlayerTurn,\n    playerNo,\n  } = props;\n\n  const bold = (isHandTurn && isMultiHand && isPlayerTurn)\n    || (!isMultiHand && isPlayerTurn)\n    ? { fontWeight: 'bold', color: purple[700] }\n    : { fontWeight: 'normal' };\n\n  return (\n    <div>\n      <Typography variant=\"h4\" style={{ ...bold, marginTop: '0.5em' }}>\n        {isBlackJack\n          && (hand.weight > 21 ? 'Bust: ' : 'Hand Weight: ') + hand.weight}\n      </Typography>\n      {map(hand.cards, (card, i) => {\n        const dropped = includes(cardsToDiscard, i);\n        return (\n          <Card\n            key={card.name + card.suit}\n            cardHandler={cardHandler}\n            cardNo={i}\n            dropped={dropped}\n            handNo={handNo}\n            name={card.name}\n            playerNo={playerNo}\n            suit={card.suit}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nHand.propTypes = {\n  // types = [array, bool, func, number, object, string, symbol].isRequired\n  cardHandler: types.func,\n  cardsToDiscard: types.arrayOf(types.number),\n  hand: types.shape({\n    weight: types.number,\n    cards: types.arrayOf(\n      types.shape({\n        name: types.string.isRequired,\n        suit: types.string.isRequired,\n      }),\n    ).isRequired,\n  }).isRequired,\n  handNo: types.number.isRequired,\n  isBlackJack: types.bool.isRequired,\n  isHandTurn: types.bool.isRequired,\n  isMultiHand: types.bool.isRequired,\n  isPlayerTurn: types.bool.isRequired,\n  playerNo: types.number.isRequired,\n};\n\nexport default Hand;\n","import React from 'react';\nimport types from 'prop-types';\nimport Slider from '@material-ui/lab/Slider';\nimport cyan from '@material-ui/core/colors/cyan';\nimport green from '@material-ui/core/colors/green';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport red from '@material-ui/core/colors/red';\nimport map from 'lodash/map';\nimport { Typography } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport Hand from './Hand';\n// Parents: Board\n\nconst styles = {\n  player: {\n    borderRadius: 5,\n    display: 'inline-block',\n    margin: 10,\n    padding: 20,\n  },\n  width: { minWidth: '100px' },\n};\n\n/* --------------------------------------------------\n * Player\n * -------------------------------------------------- */\nconst Player = (props) => {\n  // get vars from props\n  const {\n    betHandler,\n    cardHandler,\n    cardsToDiscard,\n    hideHands,\n    isBlackJack,\n    player,\n    playerNo,\n    turn,\n  } = props;\n  // set booleans\n  const isPlayerTurn = !!turn && playerNo === turn.player;\n  const isMultiHand = player.hands.length > 1;\n  const showSlider = !!hideHands && isBlackJack && player.id !== 0 && !player.isBot;\n  // set slider variables\n  const minBet = Math.max(Math.min(player.money, 5), 0);\n  const maxBet = Math.max(Math.min(player.money, 100), 10);\n  const step = 5;\n  const onSliderChange = (event, value) => betHandler(player.id, event, value);\n  // set colors\n  let color = isPlayerTurn ? { background: cyan[200] } : {};\n  const weight = isPlayerTurn ? { fontWeight: 'bold' } : { fontWeight: 'normal' };\n  if (player.status === 'win') {\n    color = { background: green[300] };\n  }\n  if (player.status === 'draw') {\n    color = { background: blueGrey[300] };\n  }\n  if (player.status === 'lose') {\n    color = { background: red[300] };\n  }\n\n  return (\n    <Card style={{ ...styles.player, ...color }}>\n      <Typography variant=\"h4\" style={{ ...weight }}>\n        {player.name}\n        : $\n        {player.money}\n      </Typography>\n      {showSlider && (\n        <Slider\n          max={maxBet}\n          min={minBet}\n          onChange={onSliderChange}\n          step={step}\n          style={styles.width}\n          value={player.bet}\n        />\n      )}\n      {isBlackJack\n        && player.id !== 0 && (\n          <Typography variant=\"h5\">\n            Bet: $\n            {player.bet}\n          </Typography>\n      )}\n      {map(player.hands, (hand, i) => {\n        const isHandTurn = !!turn && turn.hand === i;\n        return (\n          <div key={`hand${i}`}>\n            {!hideHands && (\n              <Hand\n                cardHandler={cardHandler}\n                cardsToDiscard={cardsToDiscard}\n                hand={hand}\n                handNo={i}\n                isBlackJack={isBlackJack}\n                isHandTurn={isHandTurn}\n                isMultiHand={isMultiHand}\n                isPlayerTurn={isPlayerTurn}\n                playerNo={playerNo}\n              />\n            )}\n          </div>\n        );\n      })}\n    </Card>\n  );\n};\n\nPlayer.propTypes = {\n  // types = [array, bool, func, number, object, string, symbol].isRequired\n  betHandler: types.func,\n  cardHandler: types.func,\n  cardsToDiscard: types.arrayOf(types.number),\n  hideHands: types.bool,\n  isBlackJack: types.bool.isRequired,\n  player: types.shape({\n    hands: types.arrayOf(types.object).isRequired,\n    id: types.number.isRequired,\n    isBot: types.bool.isRequired,\n    money: types.number.isRequired,\n    status: types.string.isRequired,\n    name: types.string.isRequired,\n    bet: types.number.isRequired,\n  }).isRequired,\n  playerNo: types.number.isRequired,\n  turn: types.shape({\n    player: types.number.isRequired,\n    hand: types.number.isRequired,\n  }),\n};\n\nexport default Player;\n","import React from 'react';\nimport types from 'prop-types';\nimport map from 'lodash/map';\nimport Player from './Player';\n// Parents: GameTable\n\n/* --------------------------------------------------\n * Board\n * -------------------------------------------------- */\nconst Board = (props) => {\n  const {\n    betHandler,\n    cardHandler,\n    cardsToDiscard,\n    hideHands,\n    isBlackJack,\n    players,\n    turn,\n  } = props;\n\n  return (\n    <div>\n      {map(players, (player, i) => (\n        <Player\n          key={`player${i}`}\n          betHandler={betHandler}\n          cardHandler={cardHandler}\n          cardsToDiscard={cardsToDiscard}\n          hideHands={hideHands}\n          isBlackJack={isBlackJack}\n          player={player}\n          playerNo={i}\n          turn={turn}\n        />\n      ))}\n    </div>\n  );\n};\n\nBoard.propTypes = {\n  // types = [array, bool, func, number, object, string, symbol].isRequired\n  betHandler: types.func,\n  cardHandler: types.func,\n  cardsToDiscard: types.arrayOf(types.number),\n  hideHands: types.bool,\n  isBlackJack: types.bool.isRequired,\n  players: types.arrayOf(types.object).isRequired,\n  turn: types.shape({\n    player: types.number.isRequired,\n    hand: types.number.isRequired,\n  }),\n};\n\nexport default Board;\n","import React, { memo } from 'react';\nimport types from 'prop-types';\nimport MuiButton from '@material-ui/core/Button';\n// Parents: ButtonGroup\n\n/* --------------------------------------------------\n * Button\n * -------------------------------------------------- */\n\nconst Button = memo((props) => {\n  const { func, name } = props;\n\n  return (\n    <MuiButton\n      color=\"primary\"\n      onClick={func}\n      style={{ margin: 12 }}\n      variant=\"contained\"\n    >\n      {name}\n    </MuiButton>\n  );\n});\n\nButton.propTypes = {\n  // types = [array, bool, func, number, object, string, symbol].isRequired\n  func: types.func.isRequired,\n  name: types.string.isRequired,\n};\n\nexport default Button;\n","import React from 'react';\nimport types from 'prop-types';\nimport map from 'lodash/map';\nimport Button from './Button';\n// Parents: GameTable\n\n/* --------------------------------------------------\n * ButtonGroup\n * -------------------------------------------------- */\n\nconst ButtonGroup = (props) => {\n  const { gameFunctions } = props;\n  return (\n    <div>\n      {map(gameFunctions, obj => (\n        <Button key={obj.name} func={obj.func} name={obj.name} />\n      ))}\n    </div>\n  );\n};\n\nButtonGroup.propTypes = {\n  // types = [array, bool, func, number, object, string, symbol].isRequired\n  gameFunctions: types.arrayOf(\n    types.shape({\n      name: types.string.isRequired,\n      func: types.func.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default ButtonGroup;\n","import React from 'react';\nimport types from 'prop-types';\nimport Board from './Board';\nimport ButtonGroup from './ButtonGroup';\n// Parents: BlackJack\n\n/*\n * MAP:\n * GameTable ->  Board -> Player -> Hand -> Card\n *          |->  Button Group  ->  Button\n */\nconst GameTable = (props) => {\n  const {\n    betHandler,\n    cardClickHandler,\n    cardsToDiscard,\n    gameFunctions,\n    gameOver,\n    hideHands,\n    isBlackJack,\n    players,\n    turn,\n  } = props;\n\n  // move game buttons to make turn more obvious and support mobile\n  const played = players.slice(0, turn.player + 1);\n  const future = players.slice(turn.player + 1);\n  const playersToDisplay = !hideHands && gameOver === false\n    ? players.slice(turn.player, turn.player + 1)\n    : players;\n  // pass common props\n  const passProps = {\n    betHandler,\n    cardsToDiscard,\n    hideHands,\n    isBlackJack,\n    turn,\n    cardHandler: cardClickHandler,\n  };\n  return (\n    <div>\n      {isBlackJack && !hideHands\n        ? (\n          <div>\n            <Board players={played} {...passProps} />\n            <ButtonGroup gameFunctions={gameFunctions} />\n            <Board players={future} {...passProps} />\n          </div>\n        ) : (\n          <div>\n            <Board players={playersToDisplay} {...passProps} />\n            <ButtonGroup gameFunctions={gameFunctions} />\n          </div>\n        )}\n    </div>\n  );\n};\n\nGameTable.propTypes = {\n  // types = [array, bool, func, number, object, string, symbol].isRequired\n  betHandler: types.func,\n  cardClickHandler: types.func,\n  cardsToDiscard: types.arrayOf(types.number),\n  gameFunctions: types.arrayOf(types.object).isRequired,\n  gameOver: types.bool,\n  hideHands: types.bool,\n  isBlackJack: types.bool,\n  players: types.arrayOf(types.object).isRequired,\n  turn: types.shape({\n    player: types.number.isRequired,\n  }).isRequired,\n};\n\nGameTable.defaultProps = {\n  isBlackJack: true,\n};\n\nexport default GameTable;\n","import React, { Component } from 'react';\nimport types from 'prop-types';\nimport forEach from 'lodash/forEach';\nimport includes from 'lodash/includes';\nimport reduce from 'lodash/reduce';\nimport get from 'lodash/get';\nimport Typography from '@material-ui/core/Typography';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport {\n  swapCards,\n  newHand,\n  payout,\n  resetStatus,\n} from '../../../store/modules/players';\nimport { incrPlayerTurn, resetTurn } from '../../../store/modules/turn';\nimport GameTable from '../gametable';\nimport Deck from '../../../apis/Deck';\n// Parents: Main\n\nconst DEALER = 0;\nconst LAST_PLAYER = 5;\n\n/* --------------------------------------------------\n* Poker\n* -------------------------------------------------- */\nclass Poker extends Component {\n  // Prop Validation\n  static propTypes = {\n    // types = [array, bool, func, number, object, string, symbol].isRequired\n    playerActions: types.shape({\n      swapCards: types.func.isRequired,\n      newHand: types.func.isRequired,\n      payout: types.func.isRequired,\n      resetStatus: types.func.isRequired,\n    }).isRequired,\n    players: types.arrayOf(\n      types.shape({\n        id: types.number.isRequired,\n        hands: types.arrayOf(\n          types.shape({\n            cards: types.arrayOf(\n              types.shape({\n                weight: types.number.isRequired,\n                suit: types.string.isRequired,\n              }),\n            ).isRequired,\n          }).isRequired,\n        ).isRequired,\n      }),\n    ).isRequired,\n    turn: types.shape({\n      player: types.number.isRequired,\n      hand: types.number.isRequired,\n    }).isRequired,\n    turnActions: types.shape({\n      incrPlayerTurn: types.func.isRequired,\n      resetTurn: types.func.isRequired,\n    }).isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.setNewGameRedux();\n    this.state = this.getNewGameState();\n  }\n\n  componentDidUpdate() {\n    const { players, turn } = this.props;\n    const { hideHands, gameOver } = this.state;\n    const player = players[turn.player];\n    const canPlay = player.id !== DEALER && player.id <= LAST_PLAYER;\n\n    if (!hideHands && !gameOver && player.isBot) {\n      canPlay ? this.computer() : this.endGame();\n    }\n  }\n\n  /** function to reset turn and player status */\n  setNewGameRedux = () => {\n    const { turnActions, playerActions, players } = this.props;\n    // reset redux actions\n    turnActions.resetTurn();\n    // reset player statuses\n    forEach(players, player => playerActions.resetStatus(player.id));\n  };\n\n  /**\n   * function to generate the state of a new game\n   * @return {Object}\n   */\n  getNewGameState = () => ({\n    gameFunctions: [{ name: 'Start Game', func: this.startGame }],\n    cardsToDiscard: [],\n    hideHands: true,\n    gameOver: false,\n  });\n\n  /**\n   * get hand from props\n   * @return {Array}\n   */\n  getHand = () => {\n    // get state vars\n    const { turn, players } = this.props;\n    return get(players[turn.player], 'hands[0].cards', null);\n  };\n\n  getHistogram = (hand) => {\n    // Histogram for the cards\n    const hist = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    // put hand into the histrogram\n    forEach(hand, (card) => {\n      hist[card.weight - 2] += 1; // 2-14 - 2 = 0-12\n    });\n    return hist;\n  };\n\n  newGame = () => {\n    this.setNewGameRedux();\n    this.setState(this.getNewGameState());\n  };\n\n  /**\n   * function to finish betting and start the game\n   * stateChanges: hideHands\n   */\n  startGame = () => {\n    this.setState({\n      gameFunctions: [{ name: 'Discard Cards', func: this.handleDiscard }],\n      hideHands: false,\n    });\n    this.dealHands();\n  };\n\n  /** increment player turn and reset state */\n  endTurn = () => {\n    const { turnActions } = this.props;\n    turnActions.incrPlayerTurn();\n    this.setState({\n      gameFunctions: [{ name: 'Discard Cards', func: this.handleDiscard }],\n      cardsToDiscard: [],\n    });\n  };\n\n  endGame = () => {\n    const { players, playerActions } = this.props;\n    let winner = { val: 0, id: 0 };\n    forEach(players, (player) => {\n      if (player.id === DEALER || player.id > LAST_PLAYER) {\n        return;\n      }\n      const playerScore = parseInt(this.evaluate(player.hands[0].cards), 14);\n      if (playerScore > winner.val) {\n        winner = { val: playerScore, id: player.id };\n      }\n    });\n    forEach(players, (player) => {\n      if (player.id === DEALER || player.id > LAST_PLAYER) {\n        // do nothing\n      } else if (player.id === winner.id) {\n        playerActions.payout(player.id, 'win', 20);\n      } else {\n        playerActions.payout(player.id, 'lose', -5);\n      }\n    });\n    this.setState({\n      gameFunctions: [{ name: 'New Game', func: this.newGame }],\n      gameOver: true,\n    });\n  };\n\n  /**\n   * Rankings:\n   *   Straight Flush  8\n   *   4 of a Kind     7\n   *   Full House      6\n   *   Flush           5\n   *   Straight        4\n   *   3 of a Kind     3\n   *   2 Pair          2\n   *   1 Pair          1\n   *   High Card       0\n   *\n   * @param {Array} hand\n   * @param {Object} hist\n   * @return {number} value is a base 14 string, to be converted into base 10 for comparison\n   */\n  rankHand = (hand, hist) => {\n    // iterate through and look for hands with multiple cards\n    if (includes(hist, 4)) {\n      return 7; // 4 of a kind\n    }\n    // Check for hands with sets of 3 or 2 cards\n    const has3 = includes(hist, 3);\n    const i = hist.indexOf(2);\n    const has2 = i !== -1;\n    if (has3 && has2) {\n      return 6; // full house\n    }\n    if (has3) {\n      return 3; // 3 of a kind\n    }\n    if (has2 && includes(hist, 2, i + 1)) {\n      return 2; // 2 pair\n    }\n    if (has2) {\n      return 1; // 1 pair\n    }\n    // all single cards\n    // check for straight\n    const isStraight = hist.lastIndexOf(1) - hist.indexOf(1) === 4 // (end - start = 4)\n      || (hist[12] && hist[0] && hist[1] && hist[2] && hist[3]); // (A,2,3,4,5)\n    // check for flush\n    let isFlush = true;\n    for (let j = 0; j < hand.length; j += 1) {\n      if (hand[j].suit !== hand[0].suit) {\n        isFlush = false;\n        break;\n      }\n    }\n    if (isStraight && isFlush) {\n      return 8; // straight flush\n    }\n    if (isFlush) {\n      return 5; // flush\n    }\n    if (isStraight) {\n      return 4; // straight\n    }\n    return 0; // high card\n  };\n\n  /**\n   * iterate through array, removing each index number from hand\n   * then add new cards to the hand\n   * @param {array} cards - array of index numbers\n   */\n  discard = (cards) => {\n    // get state values\n    const { turn, playerActions, players } = this.props;\n    const { id, hands } = players[turn.player];\n    // logic to swap cards\n    playerActions.swapCards(hands, id, cards);\n  };\n\n  /** helper function wrapping discard, meant for UI */\n  handleDiscard = () => {\n    const { cardsToDiscard } = this.state;\n    this.discard(cardsToDiscard);\n    this.setState({\n      gameFunctions: [{ name: 'End Turn', func: this.endTurn }],\n      cardsToDiscard: [],\n    });\n  };\n\n  /**\n   * function to remove n number of cards\n   * @param {number} n - number of cards to remove\n   * @param {[number]} hist - number of each respective card in hand\n   */\n  discardHelper = (n, hist) => {\n    const hand = this.getHand();\n    const discardCards = [];\n    const cardVals = [hist.indexOf(1)];\n    // find cards without pairs, starting with the smallest\n    for (let i = 1; i < n; i += 1) {\n      cardVals[i] = hist.indexOf(1, cardVals[i - 1] + 1);\n    }\n    // find hand indecies of individual cards\n    for (let i = 0; i < hand.length; i += 1) {\n      for (let j = 0; j < cardVals.length; j += 1) {\n        if (hand[i].weight - 2 === cardVals[j]) {\n          discardCards.push(i);\n          break;\n        }\n      }\n    }\n\n    // discard lowest, non-pair n cards\n    this.discard(discardCards);\n  };\n\n  /** computer play algorithm:\n    PAIRS\n    draw 0 on 4 of a kind\n    draw 0 on full house\n    draw 1 on 3 of a kind, keep higher of 2\n    draw 1 on 2 pair\n    draw 3 on 2 of a kind\n\n    This is a nice to have, for now we only follow the first half\n    STRAIGHT/FLUSH\n    draw 0 on straight\n    draw 0 on flush\n    draw 0 on straight flush\n    if 1 away from sf -> draw 1\n    if 1 away from S -> draw 1 if 5+ players, else regular hand\n    if 1 away from F -> draw 1 if 5+ players, else regular hand\n\n    REGULAR HAND\n    if K / A -> draw 4\n    else draw 5\n    */\n  computer = () => {\n    const hand = this.getHand();\n    const hist = this.getHistogram(hand);\n    const rank = this.rankHand(hand, hist);\n\n    switch (rank) {\n      case 0: // draw 4-5 on high card\n        hist.lastIndexOf(1) >= 11\n          ? this.discardHelper(4, hist) // if ace || king draw 4\n          : this.discard([0, 1, 2, 3, 4]); // otherwise, draw all 5\n        break;\n      case 1: // draw 3 on 2 of a kind\n        this.discardHelper(3, hist);\n        break;\n      case 2: // draw 1 on 3 of a kind\n      case 3: // draw 1 on 2 Pair\n        this.discardHelper(1, hist);\n        break;\n      case 4: // draw 0 on straight\n      case 5: // draw 0 on flush\n      case 6: // draw 0 on full house\n      case 7: // draw 0 on 4 of a kind\n      case 8: // draw 0 on straight flush\n      default:\n        break;\n    }\n    this.endTurn();\n  };\n\n  /**\n   * function to be called on card clicks\n   * @param {number} playerNo - player number\n   * @param {number} handNo - hand number\n   * @param {number} cardNo - card number\n   */\n  cardClickHandler = (playerNo, handNo, cardNo) => {\n    const { cardsToDiscard } = this.state;\n    // find card\n    const i = cardsToDiscard.indexOf(cardNo);\n    // toggle in array\n    i === -1 ? cardsToDiscard.push(cardNo) : cardsToDiscard.splice(i, 1);\n    // update state\n    this.setState({ cardsToDiscard });\n  };\n\n  /**\n   * Compare hands to see who wins\n   * @param {array} hand - array of card objects\n   * Hands is assigned a weight based on hand, then card values\n   * Compare values to see who wins\n   * @return {number} value is a base 14 string, to be converted into base 10 for comparison\n   */\n  evaluate = (hand) => {\n    const hist = this.getHistogram(hand);\n    const rank = this.rankHand(hand, hist);\n\n    const cards = [0, 0, 0, 0, 0]; // placeholder for card value\n    let total = 0; // track number of cards counted\n    let numCards = 4; // number of same cards in a set\n    let i = 0; // iterator\n    let last = -1; // track location of last in numCards set\n\n    // get card values and display them in order of importance\n    while (total < 5) {\n      const num = hist.indexOf(numCards, last + 1);\n      if (num === -1) {\n        numCards -= 1;\n        last = -1;\n      } else {\n        cards[i] = num.toString(14);\n        i += 1;\n        total += numCards;\n        last = num;\n      }\n    }\n    return `${rank}${reduce(cards, (a, c) => `${a}${c}`)}`;\n  };\n\n  /**\n   * Start a new round of hands\n   * stateChanges: turn, players\n   */\n  dealHands = () => {\n    const { playerActions, players } = this.props;\n    // shuffle the deck\n    Deck.shuffle();\n    // deal the hands\n    forEach(\n      players,\n      player => player.id !== DEALER\n        && player.id <= LAST_PLAYER\n        && playerActions.newHand(player.id, 5),\n    );\n  };\n\n  // render standard board\n  render() {\n    const { turn, players } = this.props;\n    const {\n      cardsToDiscard, gameFunctions, gameOver, hideHands,\n    } = this.state;\n    return (\n      <div>\n        <Typography variant=\"h2\" gutterBottom>\n          5 Card Draw Poker\n        </Typography>\n        <GameTable\n          cardClickHandler={this.cardClickHandler}\n          cardsToDiscard={cardsToDiscard}\n          gameFunctions={gameFunctions}\n          gameOver={gameOver}\n          hideHands={hideHands}\n          isBlackJack={false}\n          players={players}\n          turn={turn}\n        />\n      </div>\n    );\n  }\n}\n\n// react-redux export\nfunction mapStateToProps(state /* , ownProps */) {\n  return {\n    turn: state.turn,\n    players: state.players,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    turnActions: bindActionCreators({ incrPlayerTurn, resetTurn }, dispatch),\n    playerActions: bindActionCreators(\n      {\n        swapCards,\n        newHand,\n        payout,\n        resetStatus,\n      },\n      dispatch,\n    ),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Poker);\n","import Poker from './Poker';\n\nexport default Poker;\n"],"sourceRoot":""}