{"version":3,"file":"static/js/r_travel.e7495618.chunk.js","mappings":"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","sources":["constants/countries.ts","components/resume/travel-map/TravelTable.tsx","components/resume/travel-map/Popover.tsx","components/resume/travel-map/WorldMap.tsx","components/resume/travel-map/TravelMap.tsx"],"sourcesContent":["import {\n  amber,\n  blue,\n  brown,\n  cyan,\n  deepOrange,\n  deepPurple,\n  green,\n  indigo,\n  lightBlue,\n  lightGreen,\n  lime,\n  orange,\n  pink,\n  purple,\n  red,\n  teal,\n  yellow,\n} from \"@mui/material/colors/\";\n\ninterface Country {\n  color?: string;\n  continent: string;\n  flag: string;\n}\nexport type Countries = Record<string, Country>;\n\nconst countries: Countries = {\n  Austria: { color: deepOrange[500], continent: \"EU\", flag: \"ðŸ‡¦ðŸ‡¹\" },\n  Bahamas: { color: amber[500], continent: \"NA\", flag: \"ðŸ‡§ðŸ‡¸\" },\n  Canada: { color: blue[500], continent: \"NA\", flag: \"ðŸ‡¨ðŸ‡¦\" },\n  Denmark: { color: deepPurple[500], continent: \"EU\", flag: \"ðŸ‡©ðŸ‡°\" },\n  Estonia: { color: green[500], continent: \"EU\", flag: \"ðŸ‡ªðŸ‡ª\" },\n  Finland: { color: indigo[500], continent: \"EU\", flag: \"ðŸ‡«ðŸ‡®\" },\n  France: { color: lightBlue[500], continent: \"EU\", flag: \"ðŸ‡«ðŸ‡·\" },\n  Germany: { color: lightGreen[500], continent: \"EU\", flag: \"ðŸ‡©ðŸ‡ª\" },\n  Greece: { color: lime[500], continent: \"EU\", flag: \"ðŸ‡¬ðŸ‡·\" },\n  Iceland: { color: orange[500], continent: \"EU\", flag: \"ðŸ‡®ðŸ‡¸\" },\n  Ireland: { color: pink[500], continent: \"EU\", flag: \"ðŸ‡®ðŸ‡ª\" },\n  Italy: { color: purple[500], continent: \"EU\", flag: \"ðŸ‡®ðŸ‡¹\" },\n  Jamaica: { color: lightBlue[800], continent: \"NA\", flag: \"ðŸ‡¯ðŸ‡²\" },\n  Mexico: { color: brown[500], continent: \"NA\", flag: \"ðŸ‡²ðŸ‡½\" },\n  Netherlands: { color: red[500], continent: \"EU\", flag: \"ðŸ‡³ðŸ‡±\" },\n  Norway: { color: teal[500], continent: \"EU\", flag: \"ðŸ‡³ðŸ‡´\" },\n  Poland: { color: yellow[500], continent: \"EU\", flag: \"ðŸ‡µðŸ‡±\" },\n  Portugal: { color: amber[800], continent: \"EU\", flag: \"ðŸ‡µðŸ‡¹\" },\n  Russia: { color: blue[800], continent: \"EU\", flag: \"ðŸ‡·ðŸ‡º\" },\n  Spain: { color: cyan[800], continent: \"EU\", flag: \"ðŸ‡ªðŸ‡¸\" },\n  Sweden: { color: deepOrange[800], continent: \"EU\", flag: \"ðŸ‡¸ðŸ‡ª\" },\n  Switzerland: { color: deepPurple[800], continent: \"EU\", flag: \"ðŸ‡¨ðŸ‡­\" },\n  Turkey: { color: green[800], continent: \"EU\", flag: \"ðŸ‡¹ðŸ‡·\" },\n  \"United Kingdom\": { color: indigo[800], continent: \"EU\", flag: \"ðŸ‡¬ðŸ‡§\" },\n  \"United States of America\": { color: cyan[500], continent: \"NA\", flag: \"ðŸ‡ºðŸ‡¸\" },\n  \"British Virgin Islands\": { continent: \"NA\", flag: \"ðŸ‡»ðŸ‡¬\" },\n  \"Cayman Islands\": { continent: \"NA\", flag: \"ðŸ‡°ðŸ‡¾\" },\n  \"U.S. Virgin Islands\": { continent: \"NA\", flag: \"ðŸ‡»ðŸ‡®\" },\n  Gibraltar: { continent: \"EU\", flag: \"ðŸ‡¬ðŸ‡®\" },\n  Malta: { continent: \"EU\", flag: \"ðŸ‡²ðŸ‡¹\" },\n  Monaco: { continent: \"EU\", flag: \"ðŸ‡²ðŸ‡¨\" },\n  Vatican: { continent: \"EU\", flag: \"ðŸ‡»ðŸ‡¦\" },\n};\n\nexport const NA: string[] = [];\nexport const EU: string[] = [];\n\nObject.entries(countries).forEach(([name, country]): void => {\n  country.continent === \"NA\" && NA.push(`${name} ${country.flag}`);\n  country.continent === \"EU\" && EU.push(`${name} ${country.flag}`);\n});\n\nexport default countries;\n","import React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { Typography } from \"@mui/material\";\nimport { grey } from \"@mui/material/colors\";\nimport { NA, EU } from \"../../../constants/countries\";\n\nconst marginStyles: React.CSSProperties = { marginTop: 24, marginBottom: 16 };\nconst separatorStyles: React.CSSProperties = {\n  borderRight: `1px solid ${grey[400]}`,\n};\nconst cellStyles: React.CSSProperties = {\n  padding: 5,\n  textAlign: \"center\",\n  whiteSpace: \"normal\",\n  overflow: \"visible\",\n};\n\n// ratio to display on table, 2:1 seemed to look best\nconst EURatio = 3;\n// export array of <li> elements for display\nconst countries: React.ReactNode[] = [];\n// iterate to the end of the longer list\nconst len = Math.max(NA.length, Math.ceil(EU.length / EURatio));\nfor (let i = 0; i < len; i += 1) {\n  const row = [];\n  // add NA Country\n  row.push(\n    <TableCell key={`tmc${i}`} style={{ ...cellStyles, ...separatorStyles }}>\n      {NA[i]}\n    </TableCell>\n  );\n  // add EU Countries\n  for (let j = 0; j < EURatio; j += 1) {\n    row.push(\n      <TableCell key={`tmc${i}${j}`} style={cellStyles}>\n        {EU[EURatio * i + j]}\n      </TableCell>\n    );\n  }\n  // form the row\n  const countryRow = <TableRow key={`tmr${i}`}>{row}</TableRow>;\n  countries.push(countryRow);\n}\n\nconst TravelMap: React.FC = React.memo(() => (\n  <>\n    <Typography variant=\"h4\" style={marginStyles}>\n      {`I have been to ${NA.length + EU.length} countries:`}\n    </Typography>\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell style={{ ...cellStyles, ...separatorStyles }}>\n            North America\n          </TableCell>\n          <TableCell colSpan={EURatio} style={cellStyles}>\n            Europe\n          </TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>{countries}</TableBody>\n    </Table>\n  </>\n));\n\nexport default TravelMap;\n","import React from \"react\";\nimport { grey } from \"@mui/material/colors\";\n\ninterface PopoverProps {\n  x: number;\n  y: number;\n  hide: boolean;\n  content: string;\n}\n\nconst Popover: React.FC<PopoverProps> = React.memo((props: PopoverProps) => {\n  const { x, y, hide, content } = props;\n\n  const popoverStyle: React.CSSProperties = React.useMemo(\n    () => ({\n      position: \"absolute\",\n      left: x + 2,\n      top: y - 35,\n      display: hide ? \"none\" : \"block\",\n      backgroundColor: grey[800],\n      color: \"white\",\n      padding: 5,\n      borderRadius: 2,\n    }),\n    [hide, x, y]\n  );\n\n  return <div style={popoverStyle}>{content}</div>;\n});\n\nexport default Popover;\n","import React from \"react\";\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n  Sphere,\n} from \"react-simple-maps\";\nimport { blueGrey, red } from \"@mui/material/colors\";\nimport Popover from \"./Popover\";\nimport countries from \"../../../constants/countries\";\n\ninterface GeographyType {\n  type: \"Feature\";\n  rsmKey: string;\n  svgPath: string;\n  geometry: {\n    type: \"Polygon\" | \"MultiPolygon\";\n    coordinates: [number, number][];\n  };\n  properties: {\n    NAME: string;\n    NAME_LONG: string;\n    ABBREV: string;\n    FORMAL_EN: string;\n    POP_EST: number;\n    POP_RANK: number;\n    GDP_MD_EST: number;\n    POP_YEAR: number;\n    GDP_YEAR: number;\n    ISO_A2: string;\n    ISO_A3: string;\n    CONTINENT: string;\n    REGION_UN: string;\n    SUBREGION: string;\n  };\n}\n\ntype HandleEnter = (\n  geography: GeographyType\n) => (evt: React.MouseEvent<SVGPathElement, MouseEvent>) => void;\n\ninterface WorldMapHook {\n  x: number;\n  y: number;\n  content: string;\n  hide: boolean;\n  handleEnter: HandleEnter;\n  handleLeave: () => void;\n}\n\nconst STROKE = blueGrey[900];\nconst HOVER = blueGrey[500];\nconst VISITED_HOVER = red[800];\nconst FILL = blueGrey[100];\nconst PRESSED = blueGrey[800];\nconst RATIO = 100 / 465.33;\n\nconst defaultStyle: React.CSSProperties = {\n  stroke: STROKE,\n  strokeWidth: 0.75,\n  outline: \"none\",\n};\n\nfunction useWorldMap(): WorldMapHook {\n  const [x, setX] = React.useState(0);\n  const [y, setY] = React.useState(0);\n  const [content, setContent] = React.useState(\"\");\n  const [hide, setHide] = React.useState(true);\n\n  const handleEnter: HandleEnter =\n    (geography) =>\n    (evt): void => {\n      const name = geography.properties.NAME || \"\";\n      setX(evt.clientX);\n      setY(evt.clientY + window.pageYOffset);\n      setContent(`${name} ${countries[name] ? countries[name].flag : \"\"}`);\n      setHide(false);\n    };\n\n  const handleLeave = (): void => {\n    setHide(true);\n  };\n\n  return {\n    x,\n    y,\n    content,\n    hide,\n    handleEnter,\n    handleLeave,\n  };\n}\n\nconst WorldMap = React.memo(() => {\n  const { x, y, content, hide, handleEnter, handleLeave } = useWorldMap();\n\n  const screenWidth = document.body.clientWidth - 32;\n\n  return (\n    <>\n      <ComposableMap\n        width={screenWidth}\n        height={(screenWidth * 546) / 744}\n        projectionConfig={{ scale: screenWidth * RATIO }}\n      >\n        <ZoomableGroup>\n          <Sphere\n            id=\"rsm-sphere\"\n            stroke={FILL}\n            strokeWidth={2}\n            fill=\"transparent\"\n          />\n          <Geographies geography=\"/world-110m.json\">\n            {({ geographies }): React.ReactNodeArray =>\n              geographies.map((geo: GeographyType) => (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  onMouseEnter={handleEnter(geo)}\n                  onMouseLeave={handleLeave}\n                  style={{\n                    default: {\n                      fill: countries[geo.properties.NAME]\n                        ? countries[geo.properties.NAME].color\n                        : FILL,\n                      ...defaultStyle,\n                    },\n                    hover: {\n                      fill: countries[geo.properties.NAME]\n                        ? VISITED_HOVER\n                        : HOVER,\n                      ...defaultStyle,\n                    },\n                    pressed: {\n                      fill: PRESSED,\n                      ...defaultStyle,\n                    },\n                  }}\n                />\n              ))\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n      <Popover x={x} y={y} hide={hide} content={content} />\n    </>\n  );\n});\n\nexport default WorldMap;\n","import React from \"react\";\nimport { Typography } from \"@mui/material\";\nimport TravelTable from \"./TravelTable\";\nimport WorldMap from \"./WorldMap\";\n\n/* TravelMap  ->  WorldMap  ->  Popover\n *           |->  TravelTable */\nconst TravelMap: React.FC = React.memo(() => (\n  <>\n    <Typography variant=\"h2\">My Travel Map</Typography>\n    <WorldMap />\n    <TravelTable />\n  </>\n));\n\nexport default TravelMap;\n"],"names":["countries","Austria","color","deepOrange","continent","flag","Bahamas","amber","Canada","blue","Denmark","deepPurple","Estonia","green","Finland","indigo","France","lightBlue","Germany","lightGreen","Greece","lime","Iceland","orange","Ireland","pink","Italy","purple","Jamaica","Mexico","brown","Netherlands","red","Norway","teal","Poland","yellow","Portugal","Russia","Spain","cyan","Sweden","Switzerland","Turkey","Gibraltar","Malta","Monaco","Vatican","NA","EU","Object","entries","forEach","name","country","push","marginStyles","marginTop","marginBottom","separatorStyles","borderRight","grey","cellStyles","padding","textAlign","whiteSpace","overflow","len","Math","max","length","ceil","i","row","TableCell","style","j","countryRow","TableRow","React","Typography","variant","Table","TableHead","colSpan","TableBody","props","x","y","hide","content","popoverStyle","position","left","top","display","backgroundColor","borderRadius","STROKE","blueGrey","HOVER","VISITED_HOVER","FILL","PRESSED","defaultStyle","stroke","strokeWidth","outline","setX","setY","setContent","setHide","handleEnter","geography","evt","properties","NAME","clientX","clientY","window","pageYOffset","handleLeave","useWorldMap","screenWidth","document","body","clientWidth","ComposableMap","width","height","projectionConfig","scale","ZoomableGroup","Sphere","id","fill","Geographies","geographies","map","geo","Geography","onMouseEnter","onMouseLeave","default","hover","pressed","rsmKey","TravelTable"],"sourceRoot":""}