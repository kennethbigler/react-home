{"version":3,"sources":["hooks/useToggle.ts","helpers/lazyWithPreload.ts","hooks/useAnchorEl.ts","components/common/ButtonPopover.tsx","components/common/header/PlayerMenu.tsx","components/common/header/TopBar.tsx","components/common/header/Header.tsx","components/games/Menu.tsx","components/games/Routes.tsx"],"names":["useToggleState","defaultVal","React","useState","isToggled","setIsToggled","handleToggle","lazyWithPreload","ComponentPromise","lazy","useAnchorEl","anchorEl","setAnchorEl","setAnchor","e","currentTarget","clearAnchor","contentStyle","padding","ButtonPopover","props","children","buttonText","open","Boolean","Button","aria-haspopup","variant","component","onClick","Popover","id","onClose","anchorOrigin","vertical","horizontal","transformOrigin","style","cloneElement","namePadStyles","maxWidth","width","display","margin","PlayerMenu","isChecked","playerActions","updateBot","handleKeyPress","key","updateName","get","state","isBot","players","this","Grid","container","spacing","item","xs","Typography","map","p","i","name","TextField","defaultValue","onKeyPress","placeholder","Switch","checked","color","onChange","_e","isC","disabled","Component","getDerivedStateFromProps","connect","dispatch","bindActionCreators","flexLeftStyles","alignItems","flexRightStyles","marginRight","TopBar","toDarkTheme","themeActions","displayDarkTheme","setState","toggleSwitch","toLightTheme","displayLightTheme","theme","type","toggleOpen","showPlayers","fontColor","iconColor","AppBar","left","right","top","Toolbar","disableGutters","className","IconButton","aria-label","cursor","PureComponent","defaultProps","Header","isOpen","setIsOpen","handleNav","palette","Drawer","position","onItemClick","loc","withTheme","Menu","memo","menu","route","divider","index","Divider","MenuItem","GameHome","BlackJack","Connect4","DealOrNoDeal","Dota2Picker","Poker","Slots","TicTacToe","Yahtzee","Routes","match","url","paths","reduce","acc","obj","path","push","exact","from","to","fallback"],"mappings":"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","file":"static/js/games.4d7a8781.chunk.js","sourcesContent":["import React from 'react';\n\ntype ToggleStateHook = [ boolean, React.MouseEventHandler, Function ];\n\nconst useToggleState = (defaultVal = false): ToggleStateHook => {\n  const [isToggled, setIsToggled] = React.useState(defaultVal);\n\n  const handleToggle = (): void => { setIsToggled(!isToggled); };\n\n  return [isToggled, handleToggle, setIsToggled];\n};\n\nexport default useToggleState;\n","import React from 'react';\n\ntype Props = {};\ntype ReactComponent = React.ComponentType<Props>;\ntype ImportPromise = Promise<{ default: ReactComponent }>;\ntype LazyComponent = React.LazyExoticComponent<ReactComponent>;\n\nexport default function lazyWithPreload(ComponentPromise: ImportPromise): LazyComponent {\n  return React.lazy(() => ComponentPromise);\n}\n","import React from 'react';\n\ninterface AnchorElHook {\n  anchorEl: null | HTMLElement;\n  setAnchor: React.MouseEventHandler;\n  clearAnchor: React.MouseEventHandler;\n}\n\nconst useAnchorEl = (): AnchorElHook => {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const setAnchor = (e: React.MouseEvent<HTMLButtonElement>): void => {\n    setAnchorEl(e.currentTarget);\n  };\n  const clearAnchor = (): void => {\n    setAnchorEl(null);\n  };\n  return { anchorEl, setAnchor, clearAnchor };\n};\n\nexport default useAnchorEl;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Popover from '@material-ui/core/Popover';\nimport useAnchorEl from '../../hooks/useAnchorEl';\n\ninterface ButtonPopoverProps {\n  children: React.ReactElement;\n  buttonText: string;\n}\n\nconst contentStyle: React.CSSProperties = { padding: 15 };\n\nconst ButtonPopover: React.FC<ButtonPopoverProps> = (props: ButtonPopoverProps) => {\n  const { anchorEl, setAnchor, clearAnchor } = useAnchorEl();\n  const { children, buttonText } = props;\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <Button\n        aria-haspopup=\"true\"\n        variant=\"contained\"\n        component=\"button\"\n        onClick={setAnchor}\n      >\n        {buttonText}\n      </Button>\n      <Popover\n        id=\"simple-popper\"\n        open={open}\n        anchorEl={anchorEl}\n        onClose={clearAnchor}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'center' }}\n      >\n        <div style={contentStyle}>\n          {React.cloneElement(children)}\n        </div>\n      </Popover>\n    </>\n  );\n};\n\nexport default ButtonPopover;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport Switch from '@material-ui/core/Switch';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport map from 'lodash/map';\nimport get from 'lodash/get';\nimport { updateName, updateBot } from '../../../store/modules/players';\nimport { DBRootState, DBPlayer } from '../../../store/types';\n\ninterface PlayerActions {\n  updateName: Function;\n  updateBot: Function;\n}\ninterface PlayerMenuProps {\n  playerActions: PlayerActions;\n  players: DBPlayer[];\n}\ninterface PlayerMenuState {\n  isBot: boolean[];\n}\n\nconst namePadStyles: React.CSSProperties = {\n  maxWidth: '420px',\n  width: '100%',\n  display: 'block',\n  margin: 'auto',\n};\n\nclass PlayerMenu extends Component<PlayerMenuProps, PlayerMenuState> {\n  constructor(props: PlayerMenuProps) {\n    super(props);\n\n    this.state = { isBot: []};\n  }\n\n  static getDerivedStateFromProps: React.GetDerivedStateFromProps<PlayerMenuProps, PlayerMenuState> = (props) => ({ isBot: map(props.players, ['isBot', true]) })\n\n  handleToggle = (id: number, isChecked: boolean): void => {\n    const { playerActions } = this.props;\n    playerActions.updateBot(id, isChecked);\n  };\n\n  handleKeyPress = (e: React.KeyboardEvent<HTMLDivElement>, id: number): void => {\n    const { playerActions } = this.props;\n    if (e.key === 'Enter') {\n      playerActions.updateName(id, get(e, 'target.value', ''));\n    }\n  };\n\n  render(): React.ReactNode {\n    const { players } = this.props;\n    const { isBot } = this.state;\n\n    return (\n      <div style={namePadStyles}>\n        <Grid container spacing={1}>\n          <Grid item xs={9}>\n            <Typography variant=\"h5\">\n              Edit Player Names\n            </Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <Typography variant=\"h5\">\n              Is Bot?\n            </Typography>\n          </Grid>\n        </Grid>\n        {map(players, (p, i) => (p.id !== 0\n          ? (\n            <Grid key={`${p.name},${i}`} container spacing={1}>\n              <Grid item xs={9}>\n                <TextField\n                  defaultValue={p.name}\n                  onKeyPress={(e: React.KeyboardEvent<HTMLDivElement>): void => this.handleKeyPress(e, p.id)}\n                  placeholder=\"Enter Player Name\"\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <Switch\n                  checked={isBot[i]}\n                  color=\"primary\"\n                  onChange={(_e, isC): void => this.handleToggle(p.id, isC)}\n                />\n              </Grid>\n            </Grid>\n          ) : (\n            <Grid key={`${p.name},${i}`} container spacing={1}>\n              <Grid item xs={9}>\n                <Typography variant=\"h5\">\n                  {p.name}\n                </Typography>\n              </Grid>\n              <Grid item xs={3}>\n                <Switch checked disabled />\n              </Grid>\n            </Grid>\n          )\n        ))}\n      </div>\n    );\n  }\n}\n\n// react-redux export\nconst mapStateToProps = (state: DBRootState): { players: DBPlayer[] } => ({\n  players: state.players,\n});\nconst mapDispatchToProps = (dispatch: Dispatch): { playerActions: PlayerActions } => ({\n  playerActions: bindActionCreators({ updateName, updateBot }, dispatch),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PlayerMenu);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Switch from '@material-ui/core/Switch';\nimport SimplePopover from '../ButtonPopover';\nimport PlayerMenu from './PlayerMenu';\nimport {\n  displayDarkTheme,\n  displayLightTheme,\n} from '../../../store/modules/theme';\nimport { DBUITheme, DBRootState } from '../../../store/types';\n\ninterface ThemeActions {\n  displayDarkTheme: Function;\n  displayLightTheme: Function;\n}\ninterface TopBarProps {\n  fontColor: 'inherit' | 'initial' | 'error' | 'primary' | 'secondary' | 'textPrimary' | 'textSecondary' | undefined;\n  iconColor: 'inherit' | 'primary' | 'secondary' | 'default' | undefined;\n  showPlayers?: boolean;\n  theme: DBUITheme;\n  themeActions: ThemeActions;\n  toggleOpen: React.MouseEventHandler;\n}\ninterface TopBarState {\n  checked: boolean;\n  toggleSwitch: (event: React.ChangeEvent<HTMLInputElement>, checked: boolean) => void;\n}\n\nconst flexLeftStyles: React.CSSProperties = {\n  display: 'flex',\n  alignItems: 'center',\n};\nconst flexRightStyles: React.CSSProperties = {\n  display: 'flex',\n  marginRight: 15,\n};\n\nclass TopBar extends PureComponent<TopBarProps, TopBarState> {\n  static defaultProps: {\n    showPlayers: boolean;\n  };\n\n  constructor(props: TopBarProps) {\n    super(props);\n    const { theme } = props;\n\n    if (theme.type === 'dark') {\n      this.state = { checked: false, toggleSwitch: this.toLightTheme };\n    } else {\n      this.state = { checked: true, toggleSwitch: this.toDarkTheme };\n    }\n  }\n\n  toDarkTheme = (): void => {\n    const { themeActions } = this.props;\n    themeActions.displayDarkTheme();\n    this.setState({ checked: false, toggleSwitch: this.toLightTheme });\n  };\n\n  toLightTheme = (): void => {\n    const { themeActions } = this.props;\n    themeActions.displayLightTheme();\n    this.setState({ checked: true, toggleSwitch: this.toDarkTheme });\n  };\n\n  render(): React.ReactNode {\n    const {\n      toggleOpen, showPlayers, fontColor, iconColor,\n    } = this.props;\n    const { checked, toggleSwitch } = this.state;\n    return (\n      <AppBar style={{ left: 0, right: 0, top: 0 }}>\n        <Toolbar disableGutters>\n          <div className=\"flex-container\">\n            <div style={flexLeftStyles}>\n              <IconButton\n                aria-label=\"Menu\"\n                onClick={toggleOpen}\n                color={iconColor}\n              >\n                <MenuIcon />\n              </IconButton>\n              <Typography\n                onClick={toggleOpen}\n                style={{ cursor: 'pointer' }}\n                variant=\"h6\"\n                color={fontColor}\n              >\n                Menu\n              </Typography>\n            </div>\n            {showPlayers && (\n              <div style={flexRightStyles}>\n                <SimplePopover buttonText=\"Players\">\n                  <PlayerMenu />\n                </SimplePopover>\n              </div>\n            )}\n            <div style={flexRightStyles}>\n              <Switch checked={checked} onChange={toggleSwitch} />\n            </div>\n          </div>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n\n// react-redux export\nconst mapStateToProps = (state: DBRootState): { theme: DBUITheme } => ({\n  theme: state.theme,\n});\nconst mapDispatchToProps = (dispatch: Dispatch): { themeActions: ThemeActions } => ({\n  themeActions: bindActionCreators(\n    { displayDarkTheme, displayLightTheme },\n    dispatch,\n  ),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TopBar);\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Drawer from '@material-ui/core/Drawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport NavigationClose from '@material-ui/icons/Close';\nimport { withTheme, Theme } from '@material-ui/core/styles';\nimport TopBar from './TopBar';\nimport useToggleState from '../../../hooks/useToggle';\n\ninterface NavProps {\n  onItemClick: (loc: string) => void;\n}\ninterface HeaderProps {\n  children: React.ReactElement<NavProps>;\n  handleNav: Function;\n  showPlayers?: boolean;\n  theme: Theme;\n}\n\nconst Header: React.FC<HeaderProps> = (props: HeaderProps) => {\n  const [isOpen, toggleOpen, setIsOpen] = useToggleState(false);\n  const {\n    children, handleNav, showPlayers,\n    theme: { palette: { type }},\n  } = props;\n\n  const handleNavigation = (loc: string): void => {\n    setIsOpen(false);\n    handleNav(loc);\n  };\n\n  const iconColor = type === 'light' ? 'inherit' : 'default';\n  const fontColor = type === 'light' ? 'inherit' : 'initial';\n\n  return (\n    <>\n      <TopBar toggleOpen={toggleOpen} showPlayers={showPlayers} fontColor={fontColor} iconColor={iconColor} />\n      <Drawer onClose={toggleOpen} open={isOpen}>\n        <AppBar position=\"sticky\">\n          <Toolbar disableGutters>\n            <IconButton\n              aria-label=\"Menu Close\"\n              onClick={toggleOpen}\n              color={iconColor}\n            >\n              <NavigationClose />\n            </IconButton>\n            <Typography variant=\"h6\" color={fontColor}>\n              Menu\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        {React.cloneElement(children, { onItemClick: handleNavigation })}\n      </Drawer>\n    </>\n  );\n};\n\nHeader.defaultProps = {\n  showPlayers: false,\n};\n\nexport default withTheme(Header);\n","import React, { memo } from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Divider from '@material-ui/core/Divider';\nimport map from 'lodash/map';\n\ninterface MenuProps {\n  onItemClick?: Function;\n}\n\nconst Menu: React.FC<MenuProps> = memo((props: MenuProps) => {\n  const { onItemClick } = props;\n  const baseUrl = '/games';\n\n  // internal routes\n  const menu = map(\n    [\n      { name: 'Home - Games', route: '' },\n      { divider: true },\n      { name: 'BlackJack', route: 'blackjack' },\n      { name: 'Connect4', route: 'connect4' },\n      { name: 'Deal or No Deal', route: 'deal' },\n      { name: 'Dota 2 Picker', route: 'dota2' },\n      { name: 'Poker', route: 'poker' },\n      { name: 'Slot Machine', route: 'slots' },\n      { name: 'Tic-Tac-Toe', route: 'tictactoe' },\n      { name: 'Yahtzee', route: 'yahtzee' },\n    ],\n    (item, index) => (item.divider\n      ? (\n        <Divider key={index} />\n      ) : (\n        <MenuItem\n          key={item.name}\n          onClick={(): void => onItemClick && onItemClick(`${baseUrl}/${item.route}`)}\n        >\n          {item.name}\n        </MenuItem>\n      )\n    ),\n  );\n\n  // navigation\n  const home = (): void => onItemClick && onItemClick('/');\n\n  // render menu\n  return (\n    <>\n      <MenuItem onClick={home}>\n        Back to Resume\n      </MenuItem>\n      {menu}\n    </>\n  );\n});\n\nexport default Menu;\n","import React, { Suspense } from 'react';\nimport {\n  Switch, Route, Redirect, match as Match,\n} from 'react-router-dom';\nimport reduce from 'lodash/reduce';\nimport lazyWithPreload from '../../helpers/lazyWithPreload';\nimport Header from '../common/header/Header';\nimport Menu from './Menu';\nimport LoadingSpinner from '../common/loading-spinner';\n\ninterface RoutesProps {\n  handleNav: Function;\n  match: Match;\n}\n\n// lazy load page components\nconst GameHome = lazyWithPreload(import(/* webpackChunkName: \"g_home\" */ './Home'));\nconst BlackJack = lazyWithPreload(import(/* webpackChunkName: \"g_bj\" */ './blackjack'));\nconst Connect4 = lazyWithPreload(import(/* webpackChunkName: \"g_connect4\" */ './connect4'));\nconst DealOrNoDeal = lazyWithPreload(import(/* webpackChunkName: \"g_dond\" */ './deal-or-no-deal'));\nconst Dota2Picker = lazyWithPreload(import(/* webpackChunkName: \"g_d2p\" */ './dota-2-picker'));\nconst Poker = lazyWithPreload(import(/* webpackChunkName: \"g_poker\" */ './poker'));\nconst Slots = lazyWithPreload(import(/* webpackChunkName: \"g_slots\" */ './slots'));\nconst TicTacToe = lazyWithPreload(import(/* webpackChunkName: \"g_tictactoe\" */ './tictactoe'));\nconst Yahtzee = lazyWithPreload(import(/* webpackChunkName: \"g_yahtzee\" */ './yahtzee'));\n\nconst Routes: React.FC<RoutesProps> = (props: RoutesProps) => {\n  const { match, handleNav } = props;\n  const { url } = match;\n\n  const paths = reduce(\n    [\n      { name: 'blackjack', component: BlackJack },\n      { name: 'connect4', component: Connect4 },\n      { name: 'deal', component: DealOrNoDeal },\n      { name: 'dota2', component: Dota2Picker },\n      { name: 'poker', component: Poker },\n      { name: 'slots', component: Slots },\n      { name: 'tictactoe', component: TicTacToe },\n      { name: 'yahtzee', component: Yahtzee },\n    ],\n    (acc: React.ReactNode[], obj) => {\n      const { name, component } = obj;\n      const path = `${url}/${name}`;\n      acc.push(<Route key={`${path}r`} exact {...{ path, component }} />);\n      acc.push(<Redirect key={`${path}d`} from={`${path}*`} to={path} />);\n      return acc;\n    },\n    [],\n  );\n\n  return (\n    <>\n      <Header handleNav={handleNav} showPlayers>\n        <Menu />\n      </Header>\n      <Suspense fallback={<LoadingSpinner />}>\n        <Switch>\n          <Route component={GameHome} exact path={`${url}`} />\n          {paths}\n          <Redirect from={`${url}/*`} to={`${url}`} />\n          <Route component={GameHome} />\n        </Switch>\n      </Suspense>\n    </>\n  );\n};\n\nexport default Routes;\n"],"sourceRoot":""}