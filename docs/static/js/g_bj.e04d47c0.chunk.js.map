{"version":3,"sources":["hooks/useOpenState.ts","components/common/InfoPopup.tsx","components/games/game-table/board/card/Card.styles.ts","components/games/game-table/board/card/Card.tsx","components/games/game-table/board/Hand.tsx","components/games/game-table/board/player/Player.styles.ts","components/games/game-table/board/player/Player.tsx","components/games/game-table/board/Board.tsx","components/games/game-table/button-group/Button.tsx","components/games/game-table/button-group/ButtonGroup.tsx","components/games/game-table/GameTable.tsx","components/games/game-table/index.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/@material-ui/core/colors/teal.js","../node_modules/@material-ui/core/colors/orange.js","../node_modules/@material-ui/core/colors/deepPurple.js","components/games/blackjack/blackjackHelpers.ts","components/games/blackjack/Rules.tsx","components/games/blackjack/help/Cell.tsx","components/games/blackjack/help/Row.tsx","components/games/blackjack/help/BlackjackTable.tsx","components/games/blackjack/help/index.ts","components/games/blackjack/help/Help.tsx","components/games/blackjack/Header.tsx","components/games/blackjack/Blackjack.tsx","components/games/blackjack/index.ts"],"names":["useOpenState","defaultVal","React","useState","isOpen","setIsOpen","handleOpen","handleClose","InfoPopup","props","buttonText","title","children","color","onClick","variant","onClose","open","maxWidth","fullWidth","cardFace","backgroundColor","borderRadius","cursor","display","fontWeight","height","margin","padding","width","cardTitle","textAlign","suit","Card","memo","dropped","name","cardColor","red","style","styles","cardHandler","playerNo","handNo","cardNo","role","Typography","Hand","cardsToDiscard","hand","isBlackJack","isHandTurn","isMultiHand","isPlayerTurn","bold","purple","handWeight","weight","marginTop","map","cards","card","i","includes","key","player","minWidth","Player","betHandler","hideHands","turn","hands","length","showSlider","id","isBot","minBet","Math","max","min","money","maxBet","background","cyan","status","green","blueGrey","Slider","onChange","event","value","step","bet","Board","players","Button","func","ButtonGroup","gameFunctions","obj","GameTable","cardClickHandler","gameOver","played","slice","future","playersToDisplay","defaultProps","_objectWithoutProperties","source","excluded","target","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","defineProperty","exports","default","_default","50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700","weighHand","soft","forEach","cardWeight","get","Rules","Cell","text","otherProps","stl","TableCell","size","tableCellStyle","Row","data","TableRow","cellStyle","BlackjackTable","Table","TableHead","colSpan","TableBody","rowSpan","c","Help","h","d","teal","s","p","orange","ds","deepPurple","hardTtl","softTtl","pairs","Header","className","gutterBottom","DEALER","BlackJack","getNewGameState","finishBetting","setNewGameRedux","turnActions","playerActions","resetTurn","resetStatus","getGameFunctions","stay","hit","double","split","push","setState","splitHand","updateBet","lastHand","incrHandTurn","incrPlayerTurn","drawCard","dealHands","Deck","shuffle","then","asyncForEach","a","num","newHand","newGame","finishGame","dealer","dealerLen","playerStats","house","payout","win","ps","mul","floor","loss","playDealer","playBot","n","x","y","console","log","state","prevProps","lp","lt","this","np","nt","Component","connect","dispatch","bindActionCreators"],"mappings":"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","file":"static/js/g_bj.e04d47c0.chunk.js","sourcesContent":["import React from 'react';\n\ntype OpenStateHook = [\n  boolean,\n  Function,\n  Function,\n]\n\nconst useOpenState = (defaultVal = false): OpenStateHook => {\n  const [isOpen, setIsOpen] = React.useState(defaultVal);\n\n  const handleOpen = (): void => { setIsOpen(true); };\n  const handleClose = (): void => { setIsOpen(false); };\n\n  return [isOpen, handleOpen, handleClose];\n};\n\nexport default useOpenState;\n","import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport useOpenState from '../../hooks/useOpenState';\n\ninterface InfoPopupProps {\n  children: React.ReactNodeArray;\n  title: string | React.ReactElement;\n  buttonText?: string | React.ReactElement;\n}\n\nconst InfoPopup: React.FC<InfoPopupProps> = (props: InfoPopupProps) => {\n  const [isOpen, handleOpen, handleClose] = useOpenState();\n\n  const { buttonText, title, children } = props;\n  return (\n    <>\n      <Button color=\"primary\" onClick={handleOpen as React.MouseEventHandler} variant=\"contained\">\n        {buttonText || title}\n      </Button>\n      <Dialog onClose={handleClose as React.MouseEventHandler} open={isOpen} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          {title}\n        </DialogTitle>\n        <DialogContent>\n          {children}\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={handleClose as React.MouseEventHandler}>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default InfoPopup;\n","const cardFace: React.CSSProperties = {\n  backgroundColor: 'white',\n  borderRadius: 5,\n  cursor: 'pointer',\n  display: 'inline-block',\n  fontWeight: 'bold',\n  height: 78,\n  margin: 5,\n  padding: 3,\n  width: 50,\n};\n\nconst cardTitle: React.CSSProperties = {\n  textAlign: 'left',\n};\n\nconst suit: React.CSSProperties = {\n  margin: 'auto',\n  maxWidth: 30,\n  textAlign: 'center',\n  width: '100%',\n};\n\nexport default {\n  cardFace,\n  cardTitle,\n  suit,\n};\n","import React, { memo } from 'react';\nimport red from '@material-ui/core/colors/red';\nimport { Typography } from '@material-ui/core';\nimport styles from './Card.styles';\n// Parents: Hand\n\ninterface CardProps {\n  cardHandler?: Function;\n  cardNo: number;\n  dropped: boolean;\n  handNo: number;\n  name: string;\n  playerNo: number;\n  suit: string;\n}\n\nconst Card = memo((props: CardProps) => {\n  const { dropped, suit, name } = props;\n  // handle click to for card\n  const handleClick = (): void => {\n    const {\n      cardHandler, playerNo, handNo, cardNo,\n    } = props;\n    cardHandler && cardHandler(playerNo, handNo, cardNo);\n  };\n  // checking color based off suits: ♣♦♥♠\n  const cardColor: React.CSSProperties = {\n    color: suit === '♣' || suit === '♠' ? 'black' : red[500],\n    backgroundColor: dropped ? red[100] : 'white',\n  };\n\n  // display in view\n  return (\n    <div style={{ ...styles.cardFace, ...cardColor }} onClick={handleClick} role=\"main\">\n      <div style={styles.cardTitle}>\n        {name + suit}\n      </div>\n      <Typography variant=\"h3\" style={{ ...styles.suit, ...cardColor }}>\n        {suit}\n      </Typography>\n    </div>\n  );\n});\n\nexport default Card;\n","import React from 'react';\nimport purple from '@material-ui/core/colors/purple';\nimport map from 'lodash/map';\nimport includes from 'lodash/includes';\nimport { Typography } from '@material-ui/core';\nimport Card from './card/Card';\nimport { DBHand } from '../../../../store/types';\n// Parents: Player\n\ninterface HandProps {\n  cardHandler?: Function;\n  cardsToDiscard: number[];\n  hand: DBHand;\n  handNo: number;\n  isBlackJack: boolean;\n  isHandTurn: boolean;\n  isMultiHand: boolean;\n  isPlayerTurn: boolean;\n  playerNo: number;\n}\n\nconst Hand: React.FC<HandProps> = (props: HandProps) => {\n  const {\n    cardHandler, cardsToDiscard, hand, handNo,\n    isBlackJack, isHandTurn, isMultiHand, isPlayerTurn,\n    playerNo,\n  } = props;\n\n  const bold: React.CSSProperties = (isHandTurn && isMultiHand && isPlayerTurn)\n    || (!isMultiHand && isPlayerTurn)\n    ? { fontWeight: 'bold', color: purple[700] }\n    : { fontWeight: 'normal' };\n\n  const handWeight = hand.weight || false;\n\n  return (\n    <>\n      <Typography variant=\"h4\" style={{ ...bold, marginTop: '0.5em' }}>\n        {isBlackJack\n          && (handWeight > 21 ? 'Bust: ' : 'Hand Weight: ') + hand.weight}\n      </Typography>\n      {map(hand.cards, (card, i) => {\n        const dropped: boolean = includes(cardsToDiscard, i);\n        return (\n          <Card\n            key={card.name + card.suit}\n            cardHandler={cardHandler}\n            cardNo={i}\n            dropped={dropped}\n            handNo={handNo}\n            name={card.name}\n            playerNo={playerNo}\n            suit={card.suit}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nexport default Hand;\n","const player: React.CSSProperties = {\n  borderRadius: 5,\n  display: 'inline-block',\n  margin: 10,\n  padding: 20,\n};\n\nconst width: React.CSSProperties = { minWidth: '100px' };\n\nexport default {\n  player,\n  width,\n};\n","import React from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport cyan from '@material-ui/core/colors/cyan';\nimport green from '@material-ui/core/colors/green';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport red from '@material-ui/core/colors/red';\nimport map from 'lodash/map';\nimport { Typography } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport Hand from '../Hand';\nimport { DBTurn, DBPlayer } from '../../../../../store/types';\nimport styles from './Player.styles';\n// Parents: Board\n\ninterface PlayerProps {\n  betHandler?: Function;\n  cardHandler?: Function;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  player: DBPlayer;\n  playerNo: number;\n  turn: DBTurn;\n}\n\nconst Player: React.FC<PlayerProps> = (props: PlayerProps) => {\n  // get vars from props\n  const {\n    betHandler, cardHandler, cardsToDiscard, hideHands,\n    isBlackJack, player, playerNo, turn,\n  } = props;\n  // set booleans\n  const isPlayerTurn: boolean = !!turn && playerNo === turn.player;\n  const isMultiHand: boolean = player.hands.length > 1;\n  const showSlider: boolean = !!hideHands && isBlackJack && player.id !== 0 && !player.isBot;\n  // set slider variables\n  const minBet: number = Math.max(Math.min(player.money, 5), 0);\n  const maxBet: number = Math.max(Math.min(player.money, 100), 10);\n  const step = 5;\n  const onSliderChange = (event: React.ChangeEvent<{}>, value: number | number[]): void => {\n    betHandler && betHandler(player.id, event, value);\n  };\n  // set colors\n  let color: React.CSSProperties = isPlayerTurn ? { background: cyan[200] } : {};\n  const weight: React.CSSProperties = isPlayerTurn ? { fontWeight: 'bold' } : { fontWeight: 'normal' };\n  if (player.status === 'win') {\n    color = { background: green[300] };\n  }\n  if (player.status === 'draw') {\n    color = { background: blueGrey[300] };\n  }\n  if (player.status === 'lose') {\n    color = { background: red[300] };\n  }\n\n  return (\n    <Card style={{ ...styles.player, ...color }}>\n      <Typography variant=\"h4\" style={{ ...weight }}>\n        {`${player.name}: $${player.money}`}\n      </Typography>\n      {showSlider && (\n        <Slider\n          max={maxBet}\n          min={minBet}\n          onChange={onSliderChange}\n          step={step}\n          style={styles.width}\n          value={player.bet}\n        />\n      )}\n      {isBlackJack\n        && player.id !== 0 && (\n          <Typography variant=\"h5\">\n            Bet: $\n            {player.bet}\n          </Typography>\n      )}\n      {map(player.hands, (hand, i) => {\n        const isHandTurn: boolean = !!turn && turn.hand === i;\n        return (\n          <div key={`hand${i}`}>\n            {!hideHands && (\n              <Hand\n                cardHandler={cardHandler}\n                cardsToDiscard={cardsToDiscard}\n                hand={hand}\n                handNo={i}\n                isBlackJack={isBlackJack}\n                isHandTurn={isHandTurn}\n                isMultiHand={isMultiHand}\n                isPlayerTurn={isPlayerTurn}\n                playerNo={playerNo}\n              />\n            )}\n          </div>\n        );\n      })}\n    </Card>\n  );\n};\n\nexport default Player;\n","import React from 'react';\nimport map from 'lodash/map';\nimport Player from './player/Player';\nimport { DBPlayer, DBTurn } from '../../../../store/types';\n// Parents: GameTable\n\ninterface BoardProps {\n  betHandler?: Function;\n  cardHandler?: Function;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  players: DBPlayer[];\n  turn: DBTurn;\n}\n\nconst Board: React.FC<BoardProps> = (props: BoardProps) => {\n  const {\n    betHandler, cardHandler, cardsToDiscard, hideHands,\n    isBlackJack, players, turn,\n  } = props;\n\n  return (\n    <>\n      {map(players, (player, i) => (\n        <Player\n          key={`player${i}`}\n          betHandler={betHandler}\n          cardHandler={cardHandler}\n          cardsToDiscard={cardsToDiscard}\n          hideHands={hideHands}\n          isBlackJack={isBlackJack}\n          player={player}\n          playerNo={i}\n          turn={turn}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default Board;\n","import React, { memo } from 'react';\nimport MuiButton from '@material-ui/core/Button';\nimport { PropTypes } from '@material-ui/core/';\n// Parents: ButtonGroup\n\nexport interface ButtonProps {\n  func: React.MouseEventHandler;\n  name: string;\n}\n\nconst Button = memo((props: ButtonProps) => {\n  const { func, name } = props;\n\n  const buttonStyle: React.CSSProperties = { margin: 12 };\n  const color: PropTypes.Color = 'primary';\n\n  return (\n    <MuiButton\n      color={color}\n      onClick={func}\n      style={buttonStyle}\n      variant=\"contained\"\n    >\n      {name}\n    </MuiButton>\n  );\n});\n\nexport default Button;\n","import React from 'react';\nimport map from 'lodash/map';\nimport Button, { ButtonProps } from './Button';\n\nexport interface ButtonGroupProps {\n  gameFunctions: ButtonProps[];\n}\n\nconst ButtonGroup: React.FC<ButtonGroupProps> = (props: ButtonGroupProps) => {\n  const { gameFunctions } = props;\n  return (\n    <div>\n      {map(gameFunctions, (obj) => (\n        <Button key={obj.name} func={obj.func} name={obj.name} />\n      ))}\n    </div>\n  );\n};\n\nexport default ButtonGroup;\n","import React from 'react';\nimport Board from './board/Board';\nimport ButtonGroup from './button-group/ButtonGroup';\nimport { ButtonProps } from './button-group/Button';\nimport { DBPlayer, DBTurn } from '../../../store/types';\n// Parents: BlackJack\n\ninterface GameTableProps {\n  betHandler?: Function;\n  cardClickHandler?: Function;\n  cardsToDiscard: number[];\n  gameFunctions: ButtonProps[];\n  gameOver: boolean;\n  hideHands: boolean;\n  isBlackJack: boolean;\n  players: DBPlayer[];\n  turn: DBTurn;\n}\n\n/* GameTable ->  Board -> Player -> Hand -> Card\n *          |->  Button Group  ->  Button\n */\nconst GameTable: React.FC<GameTableProps> & { defaultProps: Partial<GameTableProps> } = (props: GameTableProps) => {\n  const {\n    betHandler, cardClickHandler, cardsToDiscard, gameFunctions,\n    gameOver, hideHands, isBlackJack, players,\n    turn,\n  } = props;\n\n  // move game buttons to make turn more obvious and support mobile\n  const played: DBPlayer[] = players.slice(0, turn.player + 1);\n  const future: DBPlayer[] = players.slice(turn.player + 1);\n  const playersToDisplay: DBPlayer[] = (!hideHands && gameOver === false)\n    ? players.slice(turn.player, turn.player + 1)\n    : players;\n\n  return (\n    <>\n      {isBlackJack && !hideHands\n        ? (\n          <>\n            <Board\n              players={played}\n              betHandler={betHandler}\n              cardHandler={cardClickHandler}\n              cardsToDiscard={cardsToDiscard}\n              hideHands={hideHands}\n              isBlackJack={isBlackJack}\n              turn={turn}\n            />\n            <ButtonGroup gameFunctions={gameFunctions} />\n            <Board\n              players={future}\n              betHandler={betHandler}\n              cardHandler={cardClickHandler}\n              cardsToDiscard={cardsToDiscard}\n              hideHands={hideHands}\n              isBlackJack={isBlackJack}\n              turn={turn}\n            />\n          </>\n        ) : (\n          <>\n            <Board\n              players={playersToDisplay}\n              betHandler={betHandler}\n              cardHandler={cardClickHandler}\n              cardsToDiscard={cardsToDiscard}\n              hideHands={hideHands}\n              isBlackJack={isBlackJack}\n              turn={turn}\n            />\n            <ButtonGroup gameFunctions={gameFunctions} />\n          </>\n        )}\n    </>\n  );\n};\n\nGameTable.defaultProps = {\n  isBlackJack: true,\n  hideHands: false,\n  gameOver: false,\n  cardsToDiscard: [],\n};\n\nexport default GameTable;\n","import GameTable from './GameTable';\n\nexport default GameTable;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar teal = {\n  50: '#e0f2f1',\n  100: '#b2dfdb',\n  200: '#80cbc4',\n  300: '#4db6ac',\n  400: '#26a69a',\n  500: '#009688',\n  600: '#00897b',\n  700: '#00796b',\n  800: '#00695c',\n  900: '#004d40',\n  A100: '#a7ffeb',\n  A200: '#64ffda',\n  A400: '#1de9b6',\n  A700: '#00bfa5'\n};\nvar _default = teal;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar orange = {\n  50: '#fff3e0',\n  100: '#ffe0b2',\n  200: '#ffcc80',\n  300: '#ffb74d',\n  400: '#ffa726',\n  500: '#ff9800',\n  600: '#fb8c00',\n  700: '#f57c00',\n  800: '#ef6c00',\n  900: '#e65100',\n  A100: '#ffd180',\n  A200: '#ffab40',\n  A400: '#ff9100',\n  A700: '#ff6d00'\n};\nvar _default = orange;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar deepPurple = {\n  50: '#ede7f6',\n  100: '#d1c4e9',\n  200: '#b39ddb',\n  300: '#9575cd',\n  400: '#7e57c2',\n  500: '#673ab7',\n  600: '#5e35b1',\n  700: '#512da8',\n  800: '#4527a0',\n  900: '#311b92',\n  A100: '#b388ff',\n  A200: '#7c4dff',\n  A400: '#651fff',\n  A700: '#6200ea'\n};\nvar _default = deepPurple;\nexports.default = _default;","import forEach from 'lodash/forEach';\nimport get from 'lodash/get';\nimport { DBCard } from '../../../store/types';\n\n/** calculate the weight of a hand */\nexport default function weighHand(hand: DBCard[] = []): { weight: number; soft: boolean } {\n  // set return values\n  let weight = 0;\n  let soft = false;\n\n  // find the weight of the hand\n  forEach(hand, (card) => {\n    const cardWeight = get(card, 'weight', 0);\n    if (cardWeight === 14) {\n      // A\n      if (weight <= 10) {\n        weight += 11;\n        soft = true;\n      } else {\n        weight += 1;\n      }\n    } else if (cardWeight > 10) {\n      // J - K\n      weight += 10;\n    } else {\n      // 2 - 10\n      weight += cardWeight;\n    }\n    // reduce by 10 if bust and soft\n    if (weight > 21 && soft) {\n      weight -= 10;\n      soft = false;\n    }\n  });\n\n  // return object w/ useful information\n  return { weight, soft };\n}\n","import React, { memo } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nconst Rules: React.FC = memo(() => (\n  <>\n    <Typography variant=\"h5\">\n      Objective:\n    </Typography>\n    <Typography>\n      Get as close to 21 as you can, without going over. Each card is worth\n      it&apos;s number, J/Q/K are worth 10, and an Ace is worth 11 unless you go\n      over 21, then it is worth 1.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Blackjack:\n    </Typography>\n    <Typography>\n      Delt an Ace and a 10/J/Q/K, this casino pays 3:2, but Vegas casinos do\n      6:5.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Hit:\n    </Typography>\n    <Typography>\n      Get an extra card which adds to your total.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Stay:\n    </Typography>\n    <Typography>\n      Move to the next player.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Double Down:\n    </Typography>\n    <Typography>\n      This option is available with a two card hand; before another card has\n      been drawn double your bet and receive one (and only one) additional card\n      to your hand. Play then moves to the next player.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Splitting Pairs:\n    </Typography>\n    <Typography>\n      When you are dealt a pair of cards of the same rank, you are allowed to\n      split into two separate hands and play them independently. You will match\n      your bet for the second hand. A double after a split is ok\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Resplitting:\n    </Typography>\n    <Typography>\n      When you get additional pairs in the first two cards of a hand you can\n      resplit. Typically a player is allowed to split up to 3 times (delt 4 of a\n      kind).\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Splitting Aces:\n    </Typography>\n    <Typography>\n      Player is limited to drawing only one additional card on each Ace. If you\n      draw a ten-valued card on one of your split Aces, the hand is not\n      considered a Blackjack (it is treated as a normal 21). You can re-split\n      Aces.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">\n      Other Rules:\n    </Typography>\n    <ul>\n      <Typography><li>Dealer hits on 16 or less and soft 17</li></Typography>\n      <Typography><li>Minimum bet is $5</li></Typography>\n    </ul>\n    <Typography variant=\"h5\">\n      AI Algorithm:\n    </Typography>\n    <ul>\n      <Typography><li>House Rules: 6 decks, H17, DAS, No Surrender, Peek</li></Typography>\n      <Typography><li>Estimated casino edge for these rules: 0.66%</li></Typography>\n    </ul>\n  </>\n));\n\nexport default Rules;\n","import React, { memo } from 'react';\nimport TableCell from '@material-ui/core/TableCell';\n\nexport interface CellProps {\n  color?: string;\n  style?: React.CSSProperties;\n  text: string;\n  rowSpan?: number;\n  colSpan?: number;\n}\n\nconst Cell: React.FC<CellProps> = memo((props: CellProps) => {\n  const {\n    color, text, style, ...otherProps\n  } = props;\n\n  const stl: React.CSSProperties = {\n    ...style,\n    textAlign: 'center',\n    backgroundColor: color,\n  };\n\n  return (\n    <TableCell size=\"small\" style={stl} {...otherProps}>\n      {text}\n    </TableCell>\n  );\n});\n\nexport default Cell;\n","import React from 'react';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport map from 'lodash/map';\nimport Cell, { CellProps } from './Cell';\n\nexport interface RowProps {\n  data: CellProps[];\n  name: string;\n}\n\nconst tableCellStyle: React.CSSProperties = { textAlign: 'center', padding: 0 };\n\nconst Row: React.FC<RowProps> = (props: RowProps) => {\n  const { name, data } = props;\n\n  return (\n    <TableRow>\n      <TableCell style={tableCellStyle}>\n        {name}\n      </TableCell>\n      {map(data, (text, i) => <Cell key={i} {...text} />)}\n    </TableRow>\n  );\n};\n\nexport default Row;\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport map from 'lodash/map';\nimport Cell from './Cell';\nimport Row, { RowProps } from './Row';\n\ninterface BlackjackTable {\n  data: RowProps[];\n  title: string;\n}\n\nconst cards: string[] = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'A'];\nconst cellStyle: React.CSSProperties = { width: 60 };\n\nconst BlackjackTable: React.FC<BlackjackTable> = (props: BlackjackTable) => {\n  const { title, data } = props;\n\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell colSpan={11}>\n            {title}\n          </TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        <TableRow>\n          <Cell rowSpan={2} style={cellStyle} text=\"Hand\" />\n          <Cell colSpan={10} text=\"Dealer\" />\n        </TableRow>\n        <TableRow>\n          {map(cards, (c) => <Cell key={c} text={c} />)}\n        </TableRow>\n        {map(data, (obj) => <Row key={obj.name} name={obj.name} data={obj.data} />)}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default BlackjackTable;\n","import Help from './Help';\n\nexport default Help;\n","// react\nimport React, { memo } from 'react';\n// material-ui\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n// colors\nimport green from '@material-ui/core/colors/green';\nimport teal from '@material-ui/core/colors/teal';\nimport red from '@material-ui/core/colors/red';\nimport orange from '@material-ui/core/colors/orange';\nimport deepPurple from '@material-ui/core/colors/deepPurple';\n// components\nimport Cell, { CellProps } from './Cell';\nimport { RowProps } from './Row';\nimport BlackjackTable from './BlackjackTable';\n// Parents: blackjack/Header\n\n/* Help  ->  BlackJackTable  ->  Row  -->  Cell */\nconst Help: React.FC = memo(() => {\n  // options\n  const h: CellProps = { color: green[200], text: 'H' };\n  const d: CellProps = { color: teal[200], text: 'D' };\n  const s: CellProps = { color: red[200], text: 'S' };\n  const p: CellProps = { color: orange[200], text: 'P' };\n  const ds: CellProps = { color: deepPurple[200], text: 'DS' };\n\n  // algorithms for options\n  const hardTtl: RowProps[] = [\n    { name: 'Hard 5', data: [h, h, h, h, h, h, h, h, h, h]},\n    { name: 'Hard 6', data: [h, h, h, h, h, h, h, h, h, h]},\n    { name: 'Hard 7', data: [h, h, h, h, h, h, h, h, h, h]},\n    { name: 'Hard 8', data: [h, h, h, h, h, h, h, h, h, h]},\n    { name: 'Hard 9', data: [h, d, d, d, d, h, h, h, h, h]},\n    { name: 'Hard 10', data: [d, d, d, d, d, d, d, d, h, h]},\n    { name: 'Hard 11', data: [d, d, d, d, d, d, d, d, d, d]},\n    { name: 'Hard 12', data: [h, h, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 13', data: [s, s, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 14', data: [s, s, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 15', data: [s, s, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 16', data: [s, s, s, s, s, h, h, h, h, h]},\n    { name: 'Hard 17', data: [s, s, s, s, s, s, s, s, s, s]},\n    { name: 'Hard 18+', data: [s, s, s, s, s, s, s, s, s, s]},\n  ];\n  const softTtl: RowProps[] = [\n    { name: 'Ace + 2', data: [h, h, h, d, d, h, h, h, h, h]},\n    { name: 'Ace + 3', data: [h, h, h, d, d, h, h, h, h, h]},\n    { name: 'Ace + 4', data: [h, h, d, d, d, h, h, h, h, h]},\n    { name: 'Ace + 5', data: [h, h, d, d, d, h, h, h, h, h]},\n    { name: 'Ace + 6', data: [h, d, d, d, d, h, h, h, h, h]},\n    { name: 'Ace + 7', data: [ds, ds, ds, ds, ds, s, s, h, h, h]},\n    { name: 'Ace + 8', data: [s, s, s, s, ds, s, s, s, s, s]},\n    { name: 'Ace + 9', data: [s, s, s, s, s, s, s, s, s, s]},\n  ];\n  const pairs: RowProps[] = [\n    { name: '(2,2)', data: [p, p, p, p, p, p, h, h, h, h]},\n    { name: '(3,3)', data: [p, p, p, p, p, p, h, h, h, h]},\n    { name: '(4,4)', data: [h, h, h, p, p, h, h, h, h, h]},\n    { name: '(5,5)', data: [d, d, d, d, d, d, d, d, h, h]},\n    { name: '(6,6)', data: [p, p, p, p, p, h, h, h, h, h]},\n    { name: '(7,7)', data: [p, p, p, p, p, p, h, h, h, h]},\n    { name: '(8,8)', data: [p, p, p, p, p, p, p, p, p, p]},\n    { name: '(9,9)', data: [p, p, p, p, p, s, p, p, s, s]},\n    { name: '(T,T)', data: [s, s, s, s, s, s, s, s, s, s]},\n    { name: '(A,A)', data: [p, p, p, p, p, p, p, p, p, p]},\n  ];\n\n  return (\n    <>\n      <BlackjackTable data={hardTtl} title=\"Hard Totals\" />\n      <BlackjackTable data={softTtl} title=\"Soft Totals\" />\n      <BlackjackTable data={pairs} title=\"Pairs\" />\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell colSpan={11}>\n              Key\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow>\n            <Cell {...h} />\n            <Cell colSpan={2} text=\"= Hit\" />\n            <Cell {...s} />\n            <Cell colSpan={3} text=\"= Stand\" />\n            <Cell {...p} />\n            <Cell colSpan={3} text=\"= Split\" />\n          </TableRow>\n          <TableRow>\n            <Cell {...d} />\n            <Cell colSpan={10} text=\"= Double (Hit if not allowed)\" />\n          </TableRow>\n          <TableRow>\n            <Cell {...ds} />\n            <Cell colSpan={10} text=\"= Double (Stand if not allowed)\" />\n          </TableRow>\n        </TableBody>\n      </Table>\n    </>\n  );\n});\n\nexport default Help;\n","import React, { memo } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport InfoPopup from '../../common/InfoPopup';\nimport Rules from './Rules';\nimport Help from './help';\n\nconst Header: React.FC = memo(() => (\n  <div className=\"flex-container\">\n    <Typography variant=\"h2\" gutterBottom>Blackjack (21)</Typography>\n    <InfoPopup title=\"Blackjack Rules\">\n      <Rules />\n      <Help />\n    </InfoPopup>\n  </div>\n));\n\nexport default Header;\n","/* Theoretical Max Score:   386 everyone splits 3 times and busts with 30, dealer bust with 26\n * Card Point Value:        340-380\n * split aces is not blackjack\n * get second card for dealer and hide it\n * buy insurance on dealer's Ace\n */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport get from 'lodash/get';\nimport forEach from 'lodash/forEach';\nimport asyncForEach from '../../../helpers/asyncForEach';\nimport weighHand from './blackjackHelpers';\nimport Header from './Header';\nimport GameTable from '../game-table';\nimport Deck from '../../../apis/Deck';\nimport {\n  DBTurn, DBHand, DBPlayer, DBRootState,\n} from '../../../store/types';\nimport { incrHandTurn, incrPlayerTurn, resetTurn } from '../../../store/modules/turn';\nimport {\n  drawCard, newHand, payout, resetStatus,\n  splitHand, updateBet,\n} from '../../../store/modules/players';\nimport { ButtonProps } from '../game-table/button-group/Button';\n\ninterface PlayerActions {\n  drawCard: Function;\n  newHand: Function;\n  payout: Function;\n  resetStatus: Function;\n  splitHand: Function;\n  updateBet: Function;\n}\ninterface TurnActions {\n  incrHandTurn: Function;\n  incrPlayerTurn: Function;\n  resetTurn: Function;\n}\ninterface BlackJackProps {\n  playerActions: PlayerActions;\n  players: DBPlayer[];\n  turn: DBTurn;\n  turnActions: TurnActions;\n}\ninterface BlackJackState {\n  gameFunctions: ButtonProps[];\n  hideHands: boolean;\n}\ninterface PlayerStats {\n  house: number;\n  payout: number;\n  status: string;\n}\n\n// Dealer constant\nconst DEALER = 0;\n\nclass BlackJack extends Component<BlackJackProps, BlackJackState> {\n  constructor(props: BlackJackProps) {\n    super(props);\n    this.setNewGameRedux();\n    this.state = this.getNewGameState();\n  }\n\n  componentDidUpdate(prevProps: BlackJackProps): void {\n    const { players: lp, turn: lt } = prevProps;\n    const { players: np, turn: nt } = this.props;\n    const { hideHands } = this.state;\n    // verify player exists and is dealer\n    const player = np[nt.player];\n    if (hideHands || !player) {\n      return;\n    }\n    if (!player.isBot && player.id !== DEALER) {\n      // get the next Hand\n      const hand = get(player, `hands.${nt.hand}`);\n      // if the Hand updated, get the game functions\n      if (hand !== get(lp, `${lt.player}.hands.${lt.hand}`)) {\n        this.getGameFunctions(hand);\n      }\n    } else if (player.isBot && player.id !== DEALER) {\n      this.playBot();\n    } else {\n      // get the next Hand\n      const hand = player.hands[nt.hand];\n      // if the Hand updated, check for dealer\n      if (hand !== get(lp, `${lt.player}.hands.${lt.hand}`)) {\n        this.playDealer();\n      }\n    }\n  }\n\n  /** function to generate the state of a new game\n   * @return {Object}\n   */\n  getNewGameState = (): BlackJackState => ({\n    gameFunctions: [{ name: 'Finish Betting', func: this.finishBetting }],\n    hideHands: true,\n  });\n\n  /** function to reset turn and player status */\n  setNewGameRedux = (): void => {\n    const { turnActions, playerActions, players } = this.props;\n    // reset redux actions\n    turnActions.resetTurn();\n    // reset player statuses\n    forEach(players, (player) => playerActions.resetStatus(player.id));\n  };\n\n  /** get the game functions for the present hand */\n  getGameFunctions = (hand: DBHand): void => {\n    // check state\n    if (!hand) {\n      return;\n    }\n\n    // define game function options\n    const stay = { name: 'Stay', func: this.stay };\n    const hit = { name: 'Hit', func: this.hit };\n    const double = { name: 'Double', func: this.double };\n    const split = { name: 'Split', func: this.split };\n\n    // reset game functions\n    const gameFunctions = [stay];\n    const handWeight = hand.weight || 0;\n\n    // check if not a bust\n    if (handWeight < 21) {\n      gameFunctions.push(hit);\n      // check if you only have 2 cards\n      if (hand.cards.length === 2) {\n        gameFunctions.push(double);\n        // check if card1 and card2 have equal weight\n        const { weight: weight1 } = weighHand([hand.cards[0]]);\n        const { weight: weight2 } = weighHand([hand.cards[1]]);\n        if (weight1 === weight2) {\n          gameFunctions.push(split);\n        }\n      }\n    }\n\n    // update game state\n    this.setState({ gameFunctions });\n  };\n\n  /** function that takes a hand of duplicates and makes 2 hands\n   * stateChanges: players\n   */\n  split = (): void => {\n    // get state values\n    const { turn, players, playerActions } = this.props;\n    const { id, hands } = players[turn.player];\n\n    playerActions.splitHand(hands, id, turn.hand, weighHand);\n  };\n\n  /** function that doubles your bet, but you only get 1 card */\n  double = (): void => {\n    const { turn, playerActions, players } = this.props;\n    // double bet\n    const { id, bet } = players[turn.player];\n    playerActions.updateBet(id, bet * 2);\n    // hit then stay\n    this.hit();\n    this.stay();\n  };\n\n  /** function to pass to the next player\n   * stateChanges: turn\n   */\n  stay = (): void => {\n    // get state values\n    const { turn, turnActions, players } = this.props;\n    const lastHand = players[turn.player].hands.length - 1;\n\n    // check if the player has more than 1 hand\n    turn.hand < lastHand\n      ? turnActions.incrHandTurn()\n      : turnActions.incrPlayerTurn();\n  };\n\n  /** function to get a new card\n   * stateChanges: players\n   */\n  hit = (): void => {\n    // get state values\n    const { turn, playerActions, players } = this.props;\n    const { id, hands } = players[turn.player];\n    // logic to hit\n    playerActions.drawCard(hands, id, turn.hand, 1, weighHand);\n  };\n\n  /** Start a new round of hands\n   * stateChanges: turn, players\n   */\n  dealHands = (): void => {\n    const { playerActions, players } = this.props;\n    // shuffle the deck\n    Deck.shuffle().then(() => {\n      // deal the hands\n      asyncForEach(players, async (player: DBPlayer) => {\n        const num = player.id !== DEALER ? 2 : 1;\n        await playerActions.newHand(player.id, num, weighHand);\n      });\n    });\n  };\n\n  /** Start a new game\n   * stateChanges: hideHands\n   */\n  newGame = (): void => {\n    this.setNewGameRedux();\n    this.setState(this.getNewGameState());\n  };\n\n  /** function to finish betting and start the game\n   * stateChanges: hideHands\n   */\n  finishBetting = (): void => {\n    this.setState({ hideHands: false });\n    this.dealHands();\n  };\n\n  /** finish the game and check for a winner\n   * stateChanges: turn, player, gameFunctions\n   */\n  finishGame = (): void => {\n    // state variables\n    const { turn, players, playerActions } = this.props;\n    const dealer = players[turn.player].hands[DEALER].weight || 0;\n    const dealerLen = players[turn.player].hands[DEALER].cards.length;\n    // track and find the winners\n    const playerStats: PlayerStats = { house: 0, payout: 0, status: '' };\n    // helper functions\n    const win = (ps: PlayerStats, bet: number, mul = 1): void => {\n      ps.house -= Math.floor(mul * bet);\n      ps.payout = Math.floor(mul * bet);\n      ps.status = 'win';\n    };\n    const loss = (ps: PlayerStats, bet: number): void => {\n      ps.house += bet;\n      ps.payout = -bet;\n      ps.status = 'lose';\n    };\n    // iterate\n    forEach(players, (player) => {\n      const { id, bet } = player;\n      if (id === DEALER) {\n        if (playerStats.house > 0) {\n          playerStats.status = 'win';\n        } else if (playerStats.house < 0) {\n          playerStats.status = 'lose';\n        } else {\n          playerStats.status = 'push';\n        }\n        playerActions.payout(id, playerStats.status, playerStats.house);\n      } else {\n        forEach(player.hands, (hand) => {\n          const { weight = 0, cards } = hand;\n          if (dealer === 21 && dealerLen === 2) {\n            // dealer BlackJack\n            loss(playerStats, bet);\n          } else if (weight === 21 && cards.length === 2) {\n            // player BlackJack\n            win(playerStats, bet, 6 / 5);\n          } else if (weight <= 21 && (weight > dealer || dealer > 21)) {\n            win(playerStats, bet);\n          } else if (weight <= 21 && weight === dealer) {\n            playerStats.payout = 0;\n            playerStats.status = 'push';\n          } else {\n            loss(playerStats, bet);\n          }\n        });\n        playerActions.payout(id, playerStats.status, playerStats.payout);\n      }\n    });\n\n    // update state variables\n    const gameFunctions = [{ name: 'New Game', func: this.newGame }];\n    // update state\n    this.setState({ gameFunctions });\n  };\n\n  /** function to execute dealer logic */\n  playDealer = (): void => {\n    const { players, turn } = this.props;\n    const hand = players[turn.player].hands[turn.hand].cards;\n    const { weight, soft } = weighHand(hand);\n    // Dealer hits on 16 or less and soft 17\n    if (weight <= 16 || (weight === 17 && soft)) {\n      this.hit();\n    } else {\n      this.finishGame();\n    }\n  };\n\n  // AI: https://www.blackjackinfo.com/blackjack-basic-strategy-engine/\n  playBot = (): void => {\n    // functions\n    const {\n      hit, split, double, stay,\n    } = this;\n    // player hand\n    const { players, turn } = this.props;\n    const hand = players[turn.player].hands[turn.hand];\n    // validate hand exists\n    if (!hand) {\n      return;\n    }\n    // get remaining vars\n    const dealer = players[players.length - 1].hands[DEALER];\n    const n = get(hand, 'weight', 0);\n    const { soft } = hand;\n    // card / dealer weight\n    const { weight: d } = weighHand([dealer.cards[0]]);\n    const { weight: x } = weighHand([hand.cards[0]]);\n    const { weight: y } = weighHand([hand.cards[1]]);\n\n    // play AI logic\n    if (n < 22) {\n      // split algorithm\n      if (x === y) {\n        if (x === 2 || x === 3 || x === 7) {\n          // 2,3,7, split d2-7, hit d8+\n          d <= 7 ? split() : hit();\n        } else if (x === 4) {\n          // 4, split d5-6, else hit\n          d === 5 || d === 6 ? split() : hit();\n        } else if (x === 5) {\n          // 5, double d2-9, hit d10+\n          d <= 9 ? double() : hit();\n        } else if (x === 6) {\n          // 6, split d2-6, else hit\n          d <= 6 ? split() : hit();\n        } else if (x === 9) {\n          // 9, d7,10+ stay, else split\n          d === 7 || d >= 10 ? stay() : split();\n        } else if (x === 8 || x === 14) {\n          // 8,A split\n          split();\n        } else {\n          // 10 Stay\n          stay();\n        }\n      } else if (n < 20 && soft) {\n        // soft hands, A9+ stays\n        if (n === 13 || n === 14) {\n          // A2-A3 double d5-6, hit d2-4, d7-A\n          d === 5 || d === 6 ? double() : hit();\n        } else if (n === 15 || n === 16) {\n          // A4-A5 double d4-6, hit d2-3, d7-A\n          d >= 4 && d <= 6 ? double() : hit();\n        } else if (n === 17) {\n          // A6 double d3-6, hit d2, d7-A\n          d >= 3 && d <= 6 ? double() : hit();\n        } else if (n === 18) {\n          // A7 double d2-6, stay d7-8, hit d9-A\n          if (d >= 2 && d <= 6) {\n            double();\n          } else if (d === 7 || d === 8) {\n            stay();\n          } else {\n            hit();\n          }\n        } else if (n === 19) {\n          // A8 double d6, else stay\n          d === 6 ? double() : stay();\n        }\n      } else if (n < 17 && !soft) {\n        // hard hands, 17+ stays\n        if (n >= 5 && n <= 8) {\n          // 5-8 hit\n          hit();\n        } else if (n === 9) {\n          // 9 double d3-6, hit d2, d7-A\n          d >= 3 && d <= 6 ? double() : hit();\n        } else if (n === 10) {\n          // 10 double d2-9, hit d10-A\n          d >= 2 && d <= 9 ? double() : hit();\n        } else if (n === 11) {\n          // 11 double\n          double();\n        } else if (n === 12) {\n          // 12 hit d2-3, stay d4-6, hit 7-A\n          d >= 4 && d <= 6 ? stay() : hit();\n        } else if (n >= 13 && n <= 16) {\n          // 13-16 stay d2-6, hit 7-A\n          d >= 2 && d <= 6 ? stay() : hit();\n        }\n      } else {\n        stay();\n      }\n    } else {\n      // bust\n      stay();\n    }\n  };\n\n  /** function to be called on card clicks */\n  cardClickHandler = (playerNo: number, handNo: number, cardNo: number): void => {\n    const { players } = this.props;\n    // eslint-disable-next-line no-console\n    console.log(players[playerNo].hands[handNo].cards[cardNo]);\n  };\n\n  /** function to be called on card clicks\n   * @param {number} id\n   * @param {Object} event\n   * @param {number} bet\n   * stateChanges: player\n   */\n  betHandler = (id: number, event: React.MouseEvent, bet: number): void => {\n    const { playerActions } = this.props;\n    playerActions.updateBet(id, bet);\n  };\n\n  /* render the UI */\n  render(): React.ReactNode {\n    const { turn, players } = this.props;\n    const { gameFunctions, hideHands } = this.state;\n\n    return (\n      <>\n        <Header />\n        <GameTable\n          betHandler={this.betHandler}\n          cardClickHandler={this.cardClickHandler}\n          gameFunctions={gameFunctions}\n          hideHands={hideHands}\n          players={players}\n          turn={turn}\n        />\n      </>\n    );\n  }\n}\n\n// react-redux export\nconst mapStateToProps = (state: DBRootState): { turn: DBTurn; players: DBPlayer[] } => ({\n  turn: state.turn,\n  players: state.players,\n});\nconst mapDispatchToProps = (dispatch: Dispatch): { turnActions: TurnActions; playerActions: PlayerActions} => ({\n  turnActions: bindActionCreators(\n    { incrPlayerTurn, resetTurn, incrHandTurn },\n    dispatch,\n  ),\n  playerActions: bindActionCreators(\n    {\n      drawCard,\n      newHand,\n      splitHand,\n      payout,\n      updateBet,\n      resetStatus,\n    },\n    dispatch,\n  ),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BlackJack);\n","import BlackJack from './Blackjack';\n\nexport default BlackJack;\n"],"sourceRoot":""}