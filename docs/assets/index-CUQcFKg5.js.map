{"version":3,"file":"index-CUQcFKg5.js","sources":["../../src/jotai/spades-atom.ts","../../src/components/games/spades/control-bar/BidPlayerRow.tsx","../../src/components/games/spades/control-bar/AddBid.tsx","../../src/components/games/spades/control-bar/ScorePlayerBox.tsx","../../src/components/games/spades/control-bar/AddScore.tsx","../../src/components/games/spades/control-bar/ControlBar.tsx","../../src/components/games/spades/ScoreTable.tsx","../../src/components/games/spades/helpers.ts","../../src/components/games/spades/useSpades.ts","../../src/components/games/spades/Spades.tsx"],"sourcesContent":["import { atomWithStorage } from \"jotai/utils\";\n\nexport const MIN_BID = 0;\nexport const MAX_BID = 13;\n\nexport interface Bid {\n  bid: number;\n  blind: boolean;\n  train: boolean;\n}\nexport type Bids = [Bid, Bid, Bid, Bid];\n\nexport interface ScoreRow {\n  start: string;\n  bid: string;\n  score1?: number;\n  bags1?: number;\n  score2?: number;\n  bags2?: number;\n}\n\ninterface SpadesState {\n  /** 0, 1, 2, 3, updates on +Score, persists over games */\n  first: number;\n  /** recent bids */\n  lastBid: Bids;\n  /** score table, updates on +Score & +Bid, resets over games */\n  data: ScoreRow[];\n}\n\nexport const defaultBid: Bid = { bid: 0, blind: false, train: false };\nconst initialState: SpadesState = {\n  first: 0,\n  lastBid: [defaultBid, defaultBid, defaultBid, defaultBid],\n  data: [],\n};\n\nconst spadesAtom = atomWithStorage(\"spadesAtom\", initialState);\n\nexport default spadesAtom;\n","import * as React from \"react\";\nimport Slider from \"@mui/material/Slider\";\nimport Switch from \"@mui/material/Switch\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { MAX_BID, MIN_BID } from \"../../../../jotai/spades-atom\";\n\ninterface BidPlayerRowProps {\n  id: string;\n  canTrain?: boolean;\n  bid: number;\n  blind: boolean;\n  train: boolean;\n  onBid: (bid: number, blind: boolean, train: boolean) => void;\n}\n\nconst BidPlayerRow = ({\n  id,\n  canTrain,\n  bid,\n  blind,\n  train,\n  onBid,\n}: BidPlayerRowProps) => {\n  const handleBid = (_e: Event, value: number | number[]) => {\n    const newNum = Array.isArray(value) ? value[0] : value;\n    onBid(newNum, false, false);\n  };\n\n  const handleBlind = (\n    _e: React.ChangeEvent<HTMLInputElement>,\n    checked: boolean,\n  ) => onBid(bid, checked, false);\n\n  const handleTrain = (\n    _e: React.ChangeEvent<HTMLInputElement>,\n    checked: boolean,\n  ) => onBid(bid, false, checked);\n\n  return (\n    <TableRow>\n      <TableCell>\n        {id} ({bid})\n      </TableCell>\n      <TableCell>\n        <Slider\n          aria-label={`player ${id} bid`}\n          min={MIN_BID}\n          max={MAX_BID}\n          value={bid}\n          valueLabelDisplay=\"auto\"\n          onChange={handleBid}\n        />\n      </TableCell>\n      <TableCell align=\"right\">\n        <Switch\n          checked={blind}\n          inputProps={{ \"aria-label\": `P${id} Blind Nil` }}\n          onChange={handleBlind}\n          size=\"small\"\n        />\n      </TableCell>\n      <TableCell align=\"right\">\n        {canTrain ? (\n          <Switch\n            checked={train}\n            inputProps={{ \"aria-label\": `P${id} Trains` }}\n            onChange={handleTrain}\n            size=\"small\"\n          />\n        ) : null}\n      </TableCell>\n    </TableRow>\n  );\n};\n\nexport default BidPlayerRow;\n","import * as React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport InfoPopup from \"../../../common/info-popover/InfoPopup\";\nimport BidPlayerRow from \"./BidPlayerRow\";\nimport { Bids, defaultBid } from \"../../../../jotai/spades-atom\";\n\ninterface AddBidProps {\n  first: number;\n  initials: [string, string, string, string];\n  onBidSave: (bids: Bids) => void;\n}\n\nconst AddBid = ({ first, initials, onBidSave }: AddBidProps) => {\n  const [bids, setBids] = React.useState<Bids>([\n    defaultBid,\n    defaultBid,\n    defaultBid,\n    defaultBid,\n  ]);\n\n  const a = (first + 0) % 4;\n  const b = (first + 1) % 4;\n  const c = (first + 2) % 4;\n  const d = (first + 3) % 4;\n\n  const handleBid =\n    (n: number) => (bid: number, blind: boolean, train: boolean) => {\n      let newBid = { bid, blind, train };\n      if (blind) {\n        newBid = { bid: 0, blind, train: false };\n      } else if (train) {\n        let trainBid = 10;\n        switch (n) {\n          case a:\n            trainBid -= bids[c].bid;\n            break;\n          case b:\n            trainBid -= bids[d].bid;\n            break;\n          case c:\n            trainBid -= bids[a].bid;\n            break;\n          case d:\n          default:\n            trainBid -= bids[b].bid;\n        }\n        newBid = {\n          bid: trainBid,\n          blind: false,\n          train,\n        };\n      } else {\n        newBid = { bid, blind: false, train: false };\n      }\n      const newBids: Bids = [...bids];\n      newBids[n] = newBid;\n      setBids(newBids);\n    };\n\n  const handleSave = () => {\n    onBidSave(bids);\n    setBids([defaultBid, defaultBid, defaultBid, defaultBid]);\n  };\n\n  const bags = bids.reduce((acc, bid) => acc - bid.bid, 13);\n\n  return (\n    <InfoPopup title=\"+ Bid\" onSave={handleSave}>\n      <Table aria-label=\"Bid Table\" padding=\"none\">\n        <TableHead>\n          <TableRow>\n            <TableCell width={\"20%\"}>P</TableCell>\n            <TableCell width={\"50%\"}>\n              Bid ({bags} Bag{bags !== 1 ? \"s\" : \"\"})\n            </TableCell>\n            <TableCell width={\"15%\"} align=\"center\">\n              ü¶Æ\n            </TableCell>\n            <TableCell width={\"15%\"} align=\"center\">\n              üöÇ\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <BidPlayerRow id={initials[a]} {...bids[a]} onBid={handleBid(a)} />\n          <BidPlayerRow id={initials[b]} {...bids[b]} onBid={handleBid(b)} />\n          <BidPlayerRow\n            canTrain={0 < bids[a].bid && bids[a].bid < 10}\n            id={initials[c]}\n            {...bids[c]}\n            onBid={handleBid(c)}\n          />\n          <BidPlayerRow\n            canTrain={0 < bids[b].bid && bids[b].bid < 10}\n            id={initials[d]}\n            {...bids[d]}\n            onBid={handleBid(d)}\n          />\n        </TableBody>\n      </Table>\n    </InfoPopup>\n  );\n};\n\nexport default AddBid;\n","import * as React from \"react\";\nimport { MAX_BID, MIN_BID } from \"../../../../jotai/spades-atom\";\nimport Grid from \"@mui/material/Grid2\";\nimport Slider from \"@mui/material/Slider\";\n\ninterface ScorePlayerBoxProps {\n  initial: string;\n  lastBid: number;\n  made: number;\n  setMade: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst ScorePlayerBox = ({\n  initial,\n  lastBid,\n  made,\n  setMade,\n}: ScorePlayerBoxProps) => {\n  const handleScore = (_e: Event, value: number | number[]) => {\n    const newNum = Array.isArray(value) ? value[0] : value;\n    setMade(newNum);\n  };\n\n  return (\n    <Grid size={6}>\n      <div>\n        {initial} Bid: {lastBid}\n      </div>\n      <div>Made: {made}</div>\n      <Slider\n        aria-label={`player ${0} made`}\n        min={MIN_BID}\n        max={MAX_BID}\n        value={made}\n        valueLabelDisplay=\"auto\"\n        onChange={handleScore}\n      />\n    </Grid>\n  );\n};\n\nexport default ScorePlayerBox;\n","import * as React from \"react\";\nimport Grid from \"@mui/material/Grid2\";\nimport Typography from \"@mui/material/Typography\";\nimport InfoPopup from \"../../../common/info-popover/InfoPopup\";\nimport { Bids } from \"../../../../jotai/spades-atom\";\nimport ScorePlayerBox from \"./ScorePlayerBox\";\n\ninterface AddScoreProps {\n  initials: [string, string, string, string];\n  lastBid: Bids;\n  onScoreSave: (mades: [number, number, number, number]) => void;\n}\n\nconst AddScore = ({ initials, lastBid, onScoreSave }: AddScoreProps) => {\n  const [made0, setMade0] = React.useState(3);\n  const [made1, setMade1] = React.useState(3);\n  const [made2, setMade2] = React.useState(3);\n  const [made3, setMade3] = React.useState(3);\n\n  const total = made0 + made1 + made2 + made3;\n\n  const handleAddScore = () => {\n    onScoreSave([made0, made1, made2, made3]);\n    setMade0(3);\n    setMade1(3);\n    setMade2(3);\n    setMade3(3);\n  };\n\n  const handleSave = total === 13 ? handleAddScore : undefined;\n\n  return (\n    <InfoPopup title=\"+ Score\" onSave={handleSave}>\n      <Typography\n        color={total === 13 ? \"success\" : \"warning\"}\n        align=\"center\"\n        marginBottom={1}\n      >\n        {total !== 13 && \"‚ö†Ô∏è\"} Tricks: {total}\n      </Typography>\n      <Grid container spacing={2}>\n        <ScorePlayerBox\n          initial={initials[0]}\n          lastBid={lastBid[0].bid}\n          made={made0}\n          setMade={setMade0}\n        />\n        <ScorePlayerBox\n          initial={initials[1]}\n          lastBid={lastBid[1].bid}\n          made={made1}\n          setMade={setMade1}\n        />\n        <ScorePlayerBox\n          initial={initials[2]}\n          lastBid={lastBid[2].bid}\n          made={made2}\n          setMade={setMade2}\n        />\n        <ScorePlayerBox\n          initial={initials[3]}\n          lastBid={lastBid[3].bid}\n          made={made3}\n          setMade={setMade3}\n        />\n      </Grid>\n    </InfoPopup>\n  );\n};\n\nexport default AddScore;\n","import { Bids } from \"../../../../jotai/spades-atom\";\nimport AddBid from \"./AddBid\";\nimport AddScore from \"./AddScore\";\n\ninterface ControlBarProps {\n  first: number;\n  initials: [string, string, string, string];\n  lastBid: Bids;\n  onBidSave: (bids: Bids) => void;\n  onScoreSave: (mades: [number, number, number, number]) => void;\n}\n\nconst ControlBar = ({\n  first,\n  initials,\n  lastBid,\n  onBidSave,\n  onScoreSave,\n}: ControlBarProps) => (\n  <div className=\"flex-container\" style={{ margin: \"20px 0\" }}>\n    <AddBid first={first} initials={initials} onBidSave={onBidSave} />\n    <AddScore initials={initials} lastBid={lastBid} onScoreSave={onScoreSave} />\n  </div>\n);\n\nexport default ControlBar;\n","import Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { ScoreRow } from \"../../../jotai/spades-atom\";\n\ninterface ScoreTableProps {\n  initials: [string, string, string, string];\n  data: ScoreRow[];\n}\n\nconst getScoreText = (score?: number) => {\n  if (score === undefined || score === 0) {\n    return \"\";\n  } else if (score > 0) {\n    return `${score > 100 ? \"üéâ \" : \"\"}${score}`;\n  } else {\n    return `${score}0 + `;\n  }\n};\n\nconst ScoreTable = ({ initials, data }: ScoreTableProps) => (\n  <Table aria-label=\"Bid Table\">\n    <TableHead>\n      <TableRow>\n        <TableCell width={\"10%\"}>ü•á</TableCell>\n        <TableCell>\n          Bid\n          <br />({initials[0] + initials[1] + initials[2] + initials[3]})\n        </TableCell>\n        <TableCell>{initials[0] + initials[2]}</TableCell>\n        <TableCell>{initials[1] + initials[3]}</TableCell>\n      </TableRow>\n    </TableHead>\n    <TableBody>\n      {data.map((s, i) => (\n        <TableRow key={i}>\n          <TableCell>{s.start}</TableCell>\n          <TableCell>{s.bid}</TableCell>\n          <TableCell>\n            {getScoreText(s.score1)}\n            {s.bags1}\n          </TableCell>\n          <TableCell>\n            {getScoreText(s.score2)}\n            {s.bags2}\n          </TableCell>\n        </TableRow>\n      ))}\n    </TableBody>\n  </Table>\n);\n\nexport default ScoreTable;\n","interface ScoreData {\n  bid: number;\n  blind: boolean;\n  train: boolean;\n  made: number;\n}\n\nconst getScore = (\n  p1: ScoreData,\n  p2: ScoreData,\n  score: number,\n  bags: number,\n) => {\n  // double blind nil\n  if (p1.blind && p2.blind) {\n    if (p1.made === 0 && p2.made === 0) {\n      return { score: score + 80, bags };\n    } else {\n      return { score, bags: bags + p1.made + p2.made };\n    }\n  }\n  // double nil\n  if (p1.bid === 0 && p2.bid === 0) {\n    if (p1.made === 0 && p2.made === 0) {\n      return { score: score + 40, bags };\n    } else if (p1.made === 0 || p2.made === 0) {\n      return { score, bags: bags + p1.made + p2.made };\n    } else {\n      return { score: score - 20, bags: bags + p1.made + p2.made };\n    }\n  }\n  let newScore = 0;\n  let newBags = 0;\n  // trains\n  if ((p1.train || p2.train) && p1.made + p2.made >= 10) {\n    newScore = 20;\n    newBags = p1.made + p2.made - 10;\n  } else {\n    // eval nils\n    if (p1.bid === 0) {\n      if (p1.made === 0) {\n        newScore += p1.blind ? 20 : 10;\n      } else {\n        newScore -= 10;\n        newBags += p1.made;\n      }\n    } else if (p2.bid === 0) {\n      if (p2.made === 0) {\n        newScore += p2.blind ? 20 : 10;\n      } else {\n        newScore -= 10;\n        newBags += p2.made;\n      }\n    }\n    // eval group score\n    const teamBid = p1.bid + p2.bid;\n    const teamMade = (p1.bid > 0 ? p1.made : 0) + (p2.bid > 0 ? p2.made : 0);\n    if (teamMade >= teamBid) {\n      newScore += teamBid;\n      newBags += teamMade - teamBid;\n    } else {\n      newScore -= teamBid;\n    }\n  }\n  // check for bag out\n  if (bags + newBags >= 10) {\n    newScore -= 9;\n    newBags -= 10;\n  }\n  // return\n  return { score: score + newScore, bags: bags + newBags };\n};\nexport default getScore;\n","import { useAtom, useAtomValue } from \"jotai\";\nimport playerAtom from \"../../../jotai/player-atom\";\nimport scoreboardAtom, { Bid, defaultBid } from \"../../../jotai/spades-atom\";\nimport getScore from \"./helpers\";\n\nconst useSpades = () => {\n  const players = useAtomValue(playerAtom);\n  const [{ first, lastBid, data }, setScoreboard] = useAtom(scoreboardAtom);\n\n  const initials: [string, string, string, string] = [\n    players[0].name[0],\n    players[1].name[0],\n    players[2].name[0],\n    players[3].name[0],\n  ];\n\n  /** sets a new data entry with first and bid info of data, updates first */\n  const addBid = (bids: [Bid, Bid, Bid, Bid]) => {\n    // can't add bid if bid already exists, or if someone won\n    if (data[data.length - 1] && data[data.length - 1]?.score1 === undefined) {\n      return;\n    }\n    // convert bid to storage data format\n    const newData = [...data];\n    const newEntry = {\n      start: initials[first],\n      bid: bids.reduce((acc, b) => {\n        if (b.train) {\n          return acc + \"üöÇ\";\n        } else if (b.blind) {\n          return acc + \"ü¶Æ\";\n        } else if (b.bid === 0) {\n          return acc + \"üö´\";\n        } else if (b.bid >= 10) {\n          return acc + `,${b.bid},`;\n        } else {\n          return acc + b.bid.toString();\n        }\n      }, \"\"),\n    };\n    newData.push(newEntry);\n    // update first player and add data entry\n    setScoreboard({ first, lastBid: bids, data: newData });\n  };\n\n  /** calculates and adds score1 and score2 finishing data entry */\n  const addScore = (mades: [number, number, number, number]) => {\n    // can't add scores if no bid exists\n    if (data[data.length - 1]?.score1 !== undefined) {\n      return;\n    }\n    // convert made tricks to scores\n    const newData = [...data];\n    const { score1, bags1, score2, bags2 } = data[data.length - 2] || {};\n    // calculate scores\n    const { score: newScore1, bags: newBags1 } = getScore(\n      { ...lastBid[0], made: mades[0] },\n      { ...lastBid[2], made: mades[2] },\n      score1 || 0,\n      bags1 || 0,\n    );\n    const { score: newScore2, bags: newBags2 } = getScore(\n      { ...lastBid[1], made: mades[1] },\n      { ...lastBid[3], made: mades[3] },\n      score2 || 0,\n      bags2 || 0,\n    );\n    // update scores in data entry\n    newData[data.length - 1] = {\n      ...data[data.length - 1],\n      score1: newScore1,\n      bags1: newBags1,\n      score2: newScore2,\n      bags2: newBags2,\n    };\n    setScoreboard({\n      first: (first + 1) % 4,\n      lastBid: [defaultBid, defaultBid, defaultBid, defaultBid],\n      data: newData,\n    });\n  };\n\n  const newGame = () =>\n    setScoreboard({\n      first,\n      lastBid: [defaultBid, defaultBid, defaultBid, defaultBid],\n      data: [],\n    });\n\n  return {\n    first,\n    lastBid,\n    data,\n    initials,\n    addBid,\n    addScore,\n    newGame,\n  };\n};\n\nexport default useSpades;\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport PlayerMenu from \"../../common/header/PlayerMenu\";\nimport ControlBar from \"./control-bar/ControlBar\";\nimport ScoreTable from \"./ScoreTable\";\nimport useSpades from \"./useSpades\";\n\nconst Spades = React.memo(() => {\n  const { first, lastBid, data, initials, addBid, addScore, newGame } =\n    useSpades();\n\n  return (\n    <>\n      <div className=\"flex-container\">\n        <Typography variant=\"h2\" component=\"h1\">\n          ‚ô†Ô∏è Scores\n        </Typography>\n        <PlayerMenu />\n      </div>\n      {(data[data.length - 1]?.score1 || 0) >= 100 ||\n      (data[data.length - 1]?.score2 || 0) >= 100 ? (\n        <Button\n          fullWidth\n          color=\"error\"\n          onClick={newGame}\n          variant=\"contained\"\n          sx={{ marginTop: 2 }}\n        >\n          Reset\n        </Button>\n      ) : (\n        <ControlBar\n          first={first}\n          initials={initials}\n          lastBid={lastBid}\n          onBidSave={addBid}\n          onScoreSave={addScore}\n        />\n      )}\n\n      <ScoreTable initials={initials} data={data} />\n    </>\n  );\n});\n\nSpades.displayName = \"Spades\";\n\nexport default Spades;\n"],"names":["MIN_BID","MAX_BID","defaultBid","initialState","spadesAtom","atomWithStorage","BidPlayerRow","id","canTrain","bid","blind","train","onBid","handleBid","_e","value","newNum","handleBlind","checked","handleTrain","TableRow","jsxs","TableCell","jsx","Slider","Switch","AddBid","first","initials","onBidSave","bids","setBids","React.useState","a","b","c","d","n","newBid","trainBid","newBids","handleSave","bags","acc","InfoPopup","Table","TableHead","TableBody","ScorePlayerBox","initial","lastBid","made","setMade","handleScore","Grid","AddScore","onScoreSave","made0","setMade0","made1","setMade1","made2","setMade2","made3","setMade3","total","Typography","ControlBar","getScoreText","score","ScoreTable","data","s","i","getScore","p1","p2","newScore","newBags","teamBid","teamMade","useSpades","players","useAtomValue","playerAtom","setScoreboard","useAtom","scoreboardAtom","_a","newData","newEntry","mades","score1","bags1","score2","bags2","newScore1","newBags1","newScore2","newBags2","Spades","React.memo","addBid","addScore","newGame","Fragment","PlayerMenu","_b","Button"],"mappings":"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"}