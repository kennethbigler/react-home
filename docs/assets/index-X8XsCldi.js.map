{"version":3,"file":"index-X8XsCldi.js","sources":["../../src/components/games/deal-or-no-deal/helpers.ts","../../src/components/games/deal-or-no-deal/Money.tsx","../../src/components/games/deal-or-no-deal/Modal.tsx","../../src/components/games/deal-or-no-deal/Case.tsx","../../src/components/games/deal-or-no-deal/Board.tsx","../../src/components/games/deal-or-no-deal/Header.tsx","../../src/recoil/deal-or-no-deal-state.ts","../../src/components/games/deal-or-no-deal/DealOrNoDeal.tsx"],"sourcesContent":["/** function that takes a number and returns string displayed like money */\nexport const getMoneyText = (n = 0): string => {\n  const txt = n.toString().split(\"\");\n  const e = txt[0] === \"-\" ? 1 : 0;\n  for (let i = txt.length - 3; i > e; i -= 3) {\n    txt.splice(i, 0, \",\");\n  }\n  txt.splice(e, 0, \"$\");\n  return txt.join(\"\");\n};\n\nexport default getMoneyText;\n","import * as React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport { amber, grey } from \"@mui/material/colors\";\nimport { getMoneyText } from \"./helpers\";\nimport { Briefcase } from \"../../../recoil/deal-or-no-deal-state\";\n\ninterface MoneyProps {\n  briefcase: Briefcase;\n}\n\nconst paperStyles: React.CSSProperties = {\n  width: \"90%\",\n  marginLeft: \"5%\",\n  marginRight: \"5%\",\n  marginBottom: 5,\n  padding: 5,\n  textAlign: \"center\",\n  color: \"white\",\n};\n\nconst Money: React.FC<MoneyProps> = (props: MoneyProps) => {\n  const { briefcase: bc } = props;\n\n  const color: React.CSSProperties = {\n    backgroundColor: bc.on ? amber[500] : grey[700],\n  };\n\n  const style: React.CSSProperties = {\n    ...paperStyles,\n    ...color,\n  };\n\n  return (\n    <Paper style={style}>\n      {bc.on ? getMoneyText(bc.val) : <del>{getMoneyText(bc.val)}</del>}\n    </Paper>\n  );\n};\n\nexport default Money;\n","import * as React from \"react\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport Button from \"@mui/material/Button\";\nimport Money from \"./Money\";\nimport { getMoneyText } from \"./helpers\";\nimport { Briefcase } from \"../../../recoil/deal-or-no-deal-state\";\n\ninterface ModalProps {\n  board: Briefcase[];\n  deal: React.MouseEventHandler;\n  noDeal: React.MouseEventHandler;\n  numCases: number;\n  offer: number;\n  open: boolean;\n  swap: React.MouseEventHandler;\n}\n\nconst colStyles: React.CSSProperties = {\n  width: \"50%\",\n  display: \"inline-block\",\n};\n\nconst genMoneyCols = (\n  arr: Briefcase[],\n  start: number,\n  stop = arr.length,\n): React.ReactNode[] =>\n  arr.slice(start, stop).map((bc) => <Money key={bc.loc} briefcase={bc} />);\n\nconst Modal: React.FC<ModalProps> = (props: ModalProps) => {\n  const { deal, noDeal, offer, open, swap, numCases, board: imBoard } = props;\n\n  const board = [...imBoard].sort((a, b) => a.val - b.val);\n\n  // columns displaying money values left\n  const lhs = genMoneyCols(board, 0, board.length / 2);\n  const rhs = genMoneyCols(board, board.length / 2);\n\n  return (\n    <Dialog fullWidth open={open}>\n      <DialogTitle>{`${getMoneyText(offer)} - Deal or No Deal?`}</DialogTitle>\n      <DialogContent>\n        <div style={colStyles}>{lhs}</div>\n        <div style={colStyles}>{rhs}</div>\n      </DialogContent>\n      {numCases > 2 ? (\n        <DialogActions>\n          <Button color=\"success\" onClick={deal}>\n            Deal\n          </Button>\n          <Button color=\"error\" onClick={noDeal}>\n            No Deal\n          </Button>\n        </DialogActions>\n      ) : (\n        <DialogActions>\n          <Button color=\"success\" onClick={deal}>\n            Deal\n          </Button>\n          <Button color=\"secondary\" onClick={noDeal}>\n            My Case\n          </Button>\n          <Button color=\"error\" onClick={swap}>\n            Other Case\n          </Button>\n        </DialogActions>\n      )}\n    </Dialog>\n  );\n};\n\nexport default Modal;\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport { getMoneyText } from \"./helpers\";\nimport { Briefcase } from \"../../../recoil/deal-or-no-deal-state\";\n\ninterface CaseProps {\n  briefcase: Briefcase;\n  isOver: boolean;\n  onClick: React.MouseEventHandler;\n  secondary?: boolean;\n}\n\nconst Case: React.FC<CaseProps> = (props: CaseProps) => {\n  const { briefcase: bc, isOver, onClick, secondary } = props;\n  const color = secondary ? \"secondary\" : \"primary\";\n  const label = bc.on && !isOver ? bc.loc : getMoneyText(bc.val);\n\n  return (\n    <Button\n      color={color}\n      disabled={!bc.on}\n      onClick={onClick}\n      style={{ margin: 10 }}\n      variant=\"contained\"\n    >\n      {label}\n    </Button>\n  );\n};\n\nexport default Case;\n","import * as React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Case from \"./Case\";\nimport { Briefcase } from \"../../../recoil/deal-or-no-deal-state\";\n\ninterface BoardProps {\n  board: Briefcase[];\n  isOver: boolean;\n  onClick: (x: number) => void;\n  playerChoice?: Briefcase;\n}\n\nconst style: React.CSSProperties = {\n  maxWidth: 796,\n  padding: 9,\n  textAlign: \"center\",\n  display: \"block\",\n  margin: \"auto\",\n  marginTop: 20,\n};\n\nconst Board: React.FC<BoardProps> = ({\n  board,\n  isOver,\n  onClick,\n  playerChoice: pc,\n}: BoardProps) => (\n  <Paper elevation={2} style={style}>\n    {board.map((bc, i) => (\n      <Case\n        key={i}\n        briefcase={bc}\n        isOver={isOver}\n        onClick={(): void => onClick(i)}\n        secondary={pc && pc.loc === bc.loc}\n      />\n    ))}\n  </Paper>\n);\n\nexport default Board;\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Grid from \"@mui/material/Grid2\";\nimport Typography from \"@mui/material/Typography\";\nimport { getMoneyText } from \"./helpers\";\nimport { Briefcase } from \"../../../recoil/deal-or-no-deal-state\";\n\ninterface HeaderProps {\n  casesToOpen: number;\n  isOver: number;\n  newGame: React.MouseEventHandler;\n  name: string;\n  money: number;\n  playerChoice?: Briefcase;\n  dndOpen?: boolean;\n}\n\nconst Header: React.FC<HeaderProps> = (props: HeaderProps) => {\n  const {\n    playerChoice: pc,\n    casesToOpen,\n    isOver,\n    newGame,\n    name,\n    money,\n    dndOpen,\n  } = props;\n\n  return (\n    <Grid container spacing={1}>\n      <Grid size={{ xs: 12, sm: 6 }}>\n        <Typography variant=\"h3\" component=\"h2\" gutterBottom>\n          {`Your Case: ${pc ? pc.loc : \"?\"}${\n            isOver ? ` - ${getMoneyText(pc && pc.val)}` : \"\"\n          }`}\n        </Typography>\n        <Typography variant=\"h4\" component=\"h3\" gutterBottom>\n          {!dndOpen &&\n            (isOver\n              ? `You Won ${getMoneyText(isOver)}`\n              : `Number of Cases to Open: ${casesToOpen}`)}\n        </Typography>\n        {isOver ? (\n          <Button onClick={newGame} variant=\"contained\">\n            New Game\n          </Button>\n        ) : null}\n      </Grid>\n      <Grid size={{ xs: 12, sm: 6 }}>\n        <Typography variant=\"h3\" align=\"right\" gutterBottom>\n          {`${name}: ${getMoneyText(money)}`}\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Header;\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport playerAtom from \"./player-atom\";\n\nexport interface Briefcase {\n  on: boolean;\n  loc: number;\n  val: number;\n}\nexport interface DNDState {\n  board: Briefcase[];\n  turn: number;\n  playerChoice?: Briefcase;\n  casesToOpen: number;\n  dndOpen: boolean;\n  isOver: number;\n}\nexport const briefcasesToOpen = 6;\n\nconst getNewState = (): DNDState => ({\n  board: [\n    { val: 1, loc: 1, on: true },\n    { val: 2, loc: 2, on: true },\n    { val: 5, loc: 3, on: true },\n    { val: 10, loc: 4, on: true },\n    { val: 25, loc: 5, on: true },\n    { val: 50, loc: 6, on: true },\n    { val: 75, loc: 7, on: true },\n    { val: 100, loc: 8, on: true },\n    { val: 200, loc: 9, on: true },\n    { val: 300, loc: 10, on: true },\n    { val: 400, loc: 11, on: true },\n    { val: 500, loc: 12, on: true },\n    { val: 750, loc: 13, on: true },\n    { val: 1000, loc: 14, on: true },\n    { val: 5000, loc: 15, on: true },\n    { val: 10000, loc: 16, on: true },\n    { val: 25000, loc: 17, on: true },\n    { val: 50000, loc: 18, on: true },\n    { val: 75000, loc: 19, on: true },\n    { val: 100000, loc: 20, on: true },\n    { val: 200000, loc: 21, on: true },\n    { val: 300000, loc: 22, on: true },\n    { val: 400000, loc: 23, on: true },\n    { val: 500000, loc: 24, on: true },\n    { val: 750000, loc: 25, on: true },\n    { val: 1000000, loc: 26, on: true },\n  ],\n  turn: 1,\n  playerChoice: undefined,\n  casesToOpen: briefcasesToOpen,\n  dndOpen: false,\n  isOver: 0,\n});\n/** function that takes an array and shuffles it's elements */\nconst shuffle = (arr: Briefcase[]): void => {\n  // shuffle values of briefcases\n  for (let i = 0; i < 100; i += 1) {\n    // get to random briefcases\n    const j = Math.floor(Math.random() * arr.length);\n    const k = Math.floor(Math.random() * arr.length);\n    // swap the briefcases\n    const temp = arr[j].loc;\n    arr[j].loc = arr[k].loc;\n    arr[k].loc = temp;\n  }\n};\n/** function to get a new game state */\nexport const newDNDGame = (): DNDState => {\n  const state = getNewState();\n  // mix up board\n  shuffle(state.board);\n  // set all flags to un-touched\n  state.board.forEach((bc) => {\n    // reset opened flag\n    bc.on = true;\n  });\n  // sort function for the briefcases\n  state.board.sort((a, b) => a.loc - b.loc);\n  return state;\n};\n\nexport const dealOrNoDealAtom = atom({\n  key: \"dealOrNoDealAtom\",\n  default:\n    (JSON.parse(\n      localStorage.getItem(\"deal-or-no-deal-atom\") || \"null\",\n    ) as DNDState) || newDNDGame(),\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"deal-or-no-deal-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\nexport const dndReadOnlyState = selector({\n  key: \"dndReadOnlyState\",\n  get: ({ get }) => {\n    // access state\n    const { board, turn } = get(dealOrNoDealAtom);\n    const { name } = get(playerAtom)[0];\n    // compute iterated variables\n    let numCases = 0;\n    let sum = 0;\n    board.forEach((bc) => {\n      if (bc.on) {\n        numCases += 1;\n        sum += bc.val;\n      }\n    });\n    // get the new offer\n    const offer = Math.round((sum / numCases) * (turn / 10));\n    // return state\n    return { numCases, offer, name };\n  },\n});\n\nconst dealOrNoDealState = selector({\n  key: \"dealOrNoDealState\",\n  get: ({ get }) => {\n    const dnd = get(dealOrNoDealAtom);\n    const { money, status } = get(playerAtom)[0];\n\n    return { dnd, money, status };\n  },\n  set: ({ get, set }, state) => {\n    if (!(state instanceof DefaultValue)) {\n      const { dnd, money, status } = state;\n      set(dealOrNoDealAtom, dnd);\n\n      const players = get(playerAtom);\n      const newPlayers = [...players];\n      newPlayers[0] = { ...players[0], money, status };\n      set(playerAtom, newPlayers);\n    }\n  },\n});\n\nexport default dealOrNoDealState;\n","import * as React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport Typography from \"@mui/material/Typography\";\nimport Modal from \"./Modal\";\nimport Board from \"./Board\";\nimport Header from \"./Header\";\nimport dndState, {\n  dndReadOnlyState,\n  briefcasesToOpen,\n  newDNDGame,\n} from \"../../../recoil/deal-or-no-deal-state\";\nimport PlayerMenu from \"../../common/header/PlayerMenu\";\n\n/* DealOrNoDeal  ->  Header\n *              |->  Board  ->  Case\n *              |->  Modal  ->  Money */\nconst DealOrNoDeal: React.FC = () => {\n  const [{ dnd, money, status }, setState] = useRecoilState(dndState);\n  const { numCases, offer, name } = useRecoilValue(dndReadOnlyState);\n  const { board, dndOpen, isOver, turn, playerChoice, casesToOpen } = dnd;\n\n  // --------------------     Header     -------------------- //\n\n  /** called in Header, resets game */\n  const newGame = (): void => setState({ dnd: newDNDGame(), money, status });\n\n  // --------------------     Board     -------------------- //\n\n  /**\n   * called in Board to open a briefcase\n   * gets: board, playerChoice, isOver, casesToOpen\n   * sets: dnd { board, casesTopOpen, playerChoice, dndOpen }, player { money }\n   */\n  const openBriefcase = (x: number) => {\n    const bc = board[x];\n    // check if player has already made case selection\n    if (playerChoice) {\n      // verify cases left and briefcase not already opened\n      if (!isOver && casesToOpen > 0 && bc.loc !== playerChoice.loc && bc.on) {\n        // flag the value and update global trackers\n        const newBoard = [...board];\n        const newCase = { ...newBoard[x], on: false };\n        newBoard[x] = newCase;\n\n        // update board\n        setState({\n          dnd: {\n            ...dnd,\n            board: newBoard,\n            dndOpen: casesToOpen === 1,\n            casesToOpen: casesToOpen - 1,\n          },\n          money,\n          status,\n        });\n      }\n    } else {\n      setState({\n        dnd: { ...dnd, playerChoice: bc },\n        money: money - 100,\n        status,\n      });\n    }\n  };\n\n  // --------------------     Modal     -------------------- //\n\n  /**\n   * called in Modal on selection of Deal\n   * gets: offer\n   * sets: dnd { dndOpen, isOver }, player: { status, money }\n   */\n  const deal = (): void => {\n    const total = Math.ceil(offer / 1000);\n    setState({\n      dnd: {\n        ...dnd,\n        dndOpen: false,\n        isOver: total,\n      },\n      money: money + total,\n      status: total > 100 ? \"win\" : \"lose\",\n    });\n  };\n\n  /**\n   * called in Modal on selection of No Deal\n   * gets: numCases, playerChoice\n   * sets: dnd { dndOpen, isOver, turn, casesToOpen }, player: { status, money }\n   */\n  const noDeal = (): void => {\n    // no deal on last case\n    if (numCases <= 2) {\n      const newOffer = playerChoice?.val || 0;\n      const total = Math.ceil(newOffer / 1000);\n      setState({\n        dnd: {\n          ...dnd,\n          dndOpen: false,\n          isOver: total,\n        },\n        money: money + total,\n        status: total > 100 ? \"win\" : \"lose\",\n      });\n    } else {\n      // advance the turn\n      setState({\n        dnd: {\n          ...dnd,\n          dndOpen: false,\n          turn: turn + 1,\n          casesToOpen:\n            turn < briefcasesToOpen - 1 ? briefcasesToOpen - turn : 1,\n        },\n        money,\n        status,\n      });\n    }\n  };\n\n  /**\n   * called in Modal\n   * gets: board, playerChoice, money\n   * sets: dnd { dndOpen, isOver }, player: { status, money }\n   */\n  const swap = (): void => {\n    for (let i = 0; i < board.length; i += 1) {\n      const bc = board[i];\n      if (bc.on && playerChoice && bc.loc !== playerChoice.loc) {\n        const total = Math.ceil(bc.val / 1000);\n        setState({\n          dnd: {\n            ...dnd,\n            dndOpen: false,\n            isOver: total,\n          },\n          money: money + total,\n          status: total > 100 ? \"win\" : \"lose\",\n        });\n        return;\n      }\n    }\n  };\n\n  return (\n    <>\n      <div className=\"flex-container\">\n        <Typography variant=\"h2\" component=\"h1\" gutterBottom>\n          Deal or No Deal\n        </Typography>\n        <PlayerMenu />\n      </div>\n      <Header\n        casesToOpen={casesToOpen}\n        isOver={isOver}\n        newGame={newGame}\n        name={name}\n        money={money}\n        playerChoice={playerChoice}\n        dndOpen={dndOpen}\n      />\n      <Board\n        board={board}\n        isOver={!!isOver}\n        onClick={openBriefcase}\n        playerChoice={playerChoice}\n      />\n      <Modal\n        board={board}\n        deal={deal}\n        noDeal={noDeal}\n        numCases={numCases}\n        offer={offer}\n        open={dndOpen}\n        swap={swap}\n      />\n    </>\n  );\n};\n\nexport default DealOrNoDeal;\n"],"names":["getMoneyText","n","txt","e","i","paperStyles","Money","props","bc","color","amber","grey","style","jsx","Paper","colStyles","genMoneyCols","arr","start","stop","Modal","deal","noDeal","offer","open","swap","numCases","imBoard","board","a","b","lhs","rhs","jsxs","Dialog","DialogTitle","DialogContent","DialogActions","Button","Case","isOver","onClick","secondary","label","Board","pc","Header","casesToOpen","newGame","name","money","dndOpen","Grid","Typography","briefcasesToOpen","getNewState","shuffle","j","k","temp","newDNDGame","state","dealOrNoDealAtom","atom","onSet","dndReadOnlyState","selector","get","turn","playerAtom","sum","dealOrNoDealState","dnd","status","set","DefaultValue","players","newPlayers","DealOrNoDeal","setState","useRecoilState","dndState","useRecoilValue","playerChoice","openBriefcase","x","newBoard","newCase","total","newOffer","Fragment","PlayerMenu"],"mappings":"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"}