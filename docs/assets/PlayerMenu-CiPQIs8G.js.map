{"version":3,"file":"PlayerMenu-CiPQIs8G.js","sources":["../../src/recoil/player-atom.ts","../../src/components/common/header/ButtonPopover.tsx","../../src/components/common/header/PlayerMenu.tsx"],"sourcesContent":["import { atom } from \"recoil\";\nimport { DBCard } from \"../apis/Deck\";\n\nexport interface DBHand {\n  weight?: number;\n  soft?: boolean;\n  cards: DBCard[];\n}\nexport interface DBPlayer {\n  hands: DBHand[];\n  id: number;\n  isBot: boolean;\n  money: number;\n  status: string;\n  name: string;\n  bet: number;\n}\nexport type WeighFunc = (cards: DBCard[]) => { weight: number; soft: boolean };\n\n/** card helper */\nexport const defaultWeigh: WeighFunc = () => ({ weight: 0, soft: false });\n\nexport const newPlayer = (\n  id: number,\n  name = `Bot-${id}`,\n  isBot = true,\n): DBPlayer => ({\n  id,\n  name,\n  isBot,\n  status: \"\",\n  money: 100,\n  bet: 5,\n  hands: [],\n});\n\nconst initialState: DBPlayer[] = [\n  newPlayer(1, \"Ken\", false),\n  newPlayer(2),\n  newPlayer(3),\n  newPlayer(4),\n  newPlayer(5),\n  newPlayer(6),\n  newPlayer(0, \"Dealer\", true),\n];\n\nconst playerAtom = atom({\n  key: \"playerAtom\",\n  default:\n    (JSON.parse(localStorage.getItem(\"player-atom\") || \"null\") as DBPlayer[]) ||\n    initialState,\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"player-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\nexport default playerAtom;\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Popover from \"@mui/material/Popover\";\n\ninterface AnchorElHook {\n  anchorEl: null | HTMLElement;\n  setAnchor: React.MouseEventHandler;\n  clearAnchor: React.MouseEventHandler;\n}\n\nconst useAnchorEl = (): AnchorElHook => {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const setAnchor = (e: React.MouseEvent<HTMLButtonElement>): void => {\n    setAnchorEl(e.currentTarget);\n  };\n  const clearAnchor = (): void => {\n    setAnchorEl(null);\n  };\n  return { anchorEl, setAnchor, clearAnchor };\n};\n\ninterface ButtonPopoverProps {\n  children: React.ReactElement;\n  buttonText: string;\n}\n\nconst contentStyle: React.CSSProperties = { padding: 15 };\n\nconst ButtonPopover = (props: ButtonPopoverProps): React.ReactElement => {\n  const { anchorEl, setAnchor, clearAnchor } = useAnchorEl();\n  const { children, buttonText } = props;\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <Button\n        aria-haspopup=\"true\"\n        variant=\"contained\"\n        component=\"button\"\n        onClick={setAnchor}\n      >\n        {buttonText}\n      </Button>\n      <Popover\n        id=\"player-popover\"\n        open={open}\n        anchorEl={anchorEl}\n        onClose={clearAnchor}\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n        transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n        title=\"player-popover\"\n      >\n        <div style={contentStyle}>{children}</div>\n      </Popover>\n    </>\n  );\n};\n\nexport default ButtonPopover;\n","import * as React from \"react\";\nimport Switch from \"@mui/material/Switch\";\nimport TextField from \"@mui/material/TextField\";\nimport Grid from \"@mui/material/Grid2\";\nimport Typography from \"@mui/material/Typography\";\nimport { useRecoilState } from \"recoil\";\nimport SimplePopover from \"./ButtonPopover\";\nimport playerAtom from \"../../../recoil/player-atom\";\n\nconst PlayerMenu: React.FC = () => {\n  const [players, setPlayers] = useRecoilState(playerAtom);\n\n  /** toggle between bot and human player */\n  const handleToggle = (id: number, isChecked: boolean): void => {\n    const pi = players.findIndex((p) => p.id === id);\n    if (pi !== -1) {\n      if (isChecked) {\n        const newPlayers = [...players];\n        for (let i = pi; i < players.length - 1; i += 1) {\n          const newPlayer = { ...newPlayers[i], isBot: isChecked };\n          newPlayers[i] = newPlayer;\n        }\n        setPlayers(newPlayers);\n      } else {\n        const newPlayers = [...players];\n        const newPlayer = { ...newPlayers[pi], isBot: isChecked };\n        newPlayers[pi] = newPlayer;\n        setPlayers(newPlayers);\n      }\n    }\n  };\n\n  /** update player name onBlur */\n  const handleBlur =\n    (id: number) =>\n    (e: React.FocusEvent<HTMLInputElement>): void => {\n      const pi = players.findIndex((p) => p.id === id);\n      if (pi !== -1) {\n        const newPlayers = [...players];\n        const newPlayer = { ...newPlayers[pi], name: e.target.value || \"\" };\n        newPlayers[pi] = newPlayer;\n        setPlayers(newPlayers);\n      }\n    };\n\n  return (\n    <SimplePopover buttonText=\"Players\">\n      <Grid container spacing={1} sx={{ maxWidth: 310 }}>\n        <Grid size={8}>\n          <Typography variant=\"h5\">Edit Player Names</Typography>\n        </Grid>\n        <Grid size={4}>\n          <Typography variant=\"h5\">Is Bot?</Typography>\n        </Grid>\n        {players.map((p, i) =>\n          p.id !== 0 ? (\n            <React.Fragment key={`${p.name},${i}`}>\n              <Grid size={9}>\n                <TextField\n                  defaultValue={p.name}\n                  onBlur={handleBlur(p.id)}\n                  placeholder=\"Enter Player Name\"\n                  title={`player ${i} name`}\n                />\n              </Grid>\n              <Grid size={3}>\n                {(i === 0 || !players[i].isBot || !players[i - 1].isBot) && (\n                  <Switch\n                    checked={players[i].isBot}\n                    value={players[i].isBot}\n                    onChange={(_e, isC): void => handleToggle(p.id, isC)}\n                    title={`isBot-switch-${i}`}\n                  />\n                )}\n              </Grid>\n            </React.Fragment>\n          ) : (\n            <React.Fragment key={`${p.name},${i}`}>\n              <Grid size={9}>\n                <Typography variant=\"h5\">{p.name}</Typography>\n              </Grid>\n              <Grid size={3}>\n                <Switch checked disabled />\n              </Grid>\n            </React.Fragment>\n          ),\n        )}\n      </Grid>\n    </SimplePopover>\n  );\n};\n\nexport default PlayerMenu;\n"],"names":["defaultWeigh","newPlayer","id","name","isBot","initialState","playerAtom","atom","onSet","state","useAnchorEl","anchorEl","setAnchorEl","React.useState","e","contentStyle","ButtonPopover","props","setAnchor","clearAnchor","children","buttonText","open","jsxs","Fragment","jsx","Button","Popover","PlayerMenu","players","setPlayers","useRecoilState","handleToggle","isChecked","pi","p","newPlayers","i","handleBlur","SimplePopover","Grid","Typography","React.Fragment","TextField","Switch","_e","isC"],"mappings":"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"}