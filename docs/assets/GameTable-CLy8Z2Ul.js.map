{"version":3,"file":"GameTable-CLy8Z2Ul.js","sources":["../../src/jotai/turn-atom.ts","../../src/jotai/deck-state.ts","../../src/components/games/game-table/board/card/Card.styles.ts","../../src/components/games/game-table/board/card/Card.tsx","../../src/components/games/game-table/board/Hand.tsx","../../src/components/games/game-table/board/player/Player.styles.ts","../../src/components/games/game-table/board/player/Player.tsx","../../src/components/games/game-table/board/Board.tsx","../../src/components/games/game-table/button-group/Button.tsx","../../src/components/games/game-table/button-group/ButtonGroup.tsx","../../src/components/games/game-table/GameTable.tsx"],"sourcesContent":["import { atomWithStorage } from \"jotai/utils\";\n\nexport interface TurnState {\n  player: number;\n  hand: number;\n}\n\nconst initialState: TurnState = { player: 0, hand: 0 };\n\nconst turnAtom = atomWithStorage(\"turnAtom\", initialState);\n\nexport default turnAtom;\n","import { atom } from \"jotai\";\nimport { atomWithStorage } from \"jotai/utils\";\nimport playerAtom from \"./player-atom\";\n\nexport interface DBCard {\n  name: string;\n  suit: string;\n  weight: number;\n}\n\n// TODO: remove export after removing useDeck\n/** sort by card weight */\nexport const rankSort = (a: DBCard, b: DBCard): number => a.weight - b.weight;\n\n// TODO: remove export after removing useDeck\nexport const newDeck: DBCard[] = [\n  { name: \"2\", weight: 2, suit: \"♣\" },\n  { name: \"3\", weight: 3, suit: \"♣\" },\n  { name: \"4\", weight: 4, suit: \"♣\" },\n  { name: \"5\", weight: 5, suit: \"♣\" },\n  { name: \"6\", weight: 6, suit: \"♣\" },\n  { name: \"7\", weight: 7, suit: \"♣\" },\n  { name: \"8\", weight: 8, suit: \"♣\" },\n  { name: \"9\", weight: 9, suit: \"♣\" },\n  { name: \"10\", weight: 10, suit: \"♣\" },\n  { name: \"J\", weight: 11, suit: \"♣\" },\n  { name: \"Q\", weight: 12, suit: \"♣\" },\n  { name: \"K\", weight: 13, suit: \"♣\" },\n  { name: \"A\", weight: 14, suit: \"♣\" },\n  { name: \"2\", weight: 2, suit: \"♦\" },\n  { name: \"3\", weight: 3, suit: \"♦\" },\n  { name: \"4\", weight: 4, suit: \"♦\" },\n  { name: \"5\", weight: 5, suit: \"♦\" },\n  { name: \"6\", weight: 6, suit: \"♦\" },\n  { name: \"7\", weight: 7, suit: \"♦\" },\n  { name: \"8\", weight: 8, suit: \"♦\" },\n  { name: \"9\", weight: 9, suit: \"♦\" },\n  { name: \"10\", weight: 10, suit: \"♦\" },\n  { name: \"J\", weight: 11, suit: \"♦\" },\n  { name: \"Q\", weight: 12, suit: \"♦\" },\n  { name: \"K\", weight: 13, suit: \"♦\" },\n  { name: \"A\", weight: 14, suit: \"♦\" },\n  { name: \"2\", weight: 2, suit: \"♥\" },\n  { name: \"3\", weight: 3, suit: \"♥\" },\n  { name: \"4\", weight: 4, suit: \"♥\" },\n  { name: \"5\", weight: 5, suit: \"♥\" },\n  { name: \"6\", weight: 6, suit: \"♥\" },\n  { name: \"7\", weight: 7, suit: \"♥\" },\n  { name: \"8\", weight: 8, suit: \"♥\" },\n  { name: \"9\", weight: 9, suit: \"♥\" },\n  { name: \"10\", weight: 10, suit: \"♥\" },\n  { name: \"J\", weight: 11, suit: \"♥\" },\n  { name: \"Q\", weight: 12, suit: \"♥\" },\n  { name: \"K\", weight: 13, suit: \"♥\" },\n  { name: \"A\", weight: 14, suit: \"♥\" },\n  { name: \"2\", weight: 2, suit: \"♠\" },\n  { name: \"3\", weight: 3, suit: \"♠\" },\n  { name: \"4\", weight: 4, suit: \"♠\" },\n  { name: \"5\", weight: 5, suit: \"♠\" },\n  { name: \"6\", weight: 6, suit: \"♠\" },\n  { name: \"7\", weight: 7, suit: \"♠\" },\n  { name: \"8\", weight: 8, suit: \"♠\" },\n  { name: \"9\", weight: 9, suit: \"♠\" },\n  { name: \"10\", weight: 10, suit: \"♠\" },\n  { name: \"J\", weight: 11, suit: \"♠\" },\n  { name: \"Q\", weight: 12, suit: \"♠\" },\n  { name: \"K\", weight: 13, suit: \"♠\" },\n  { name: \"A\", weight: 14, suit: \"♠\" },\n];\n\nexport const deckAtom = atomWithStorage(\"deckAtom\", newDeck);\n\nexport const shuffleAtom = atom(null, (_get, set) => {\n  const shuffledDeck: DBCard[] = [];\n  // create immutable copy of deck\n  newDeck.forEach((card) => shuffledDeck.push(card));\n  // shuffle the cards\n  for (let i = 0; i < 100; i += 1) {\n    const j = Math.floor(Math.random() * shuffledDeck.length);\n    const k = Math.floor(Math.random() * shuffledDeck.length);\n    const temp = shuffledDeck[j];\n    shuffledDeck[j] = shuffledDeck[k];\n    shuffledDeck[k] = temp;\n  }\n  // update deck state\n  set(deckAtom, shuffledDeck);\n});\n\n/** return an array of a specified length O(2N) */\nexport const dealPokerAtom = atom(\n  null,\n  (\n    get,\n    set,\n    num: number, // number of cards to draw\n    playerId: number, // for which player\n    prevCards: DBCard[] = [], // any existing cards in their hand (optional)\n  ) => {\n    // get deck\n    const deck = get(deckAtom);\n    const nextDeck: DBCard[] = [];\n    deck.forEach((card) => nextDeck.push(card));\n\n    // draw cards\n    const cards: DBCard[] = [];\n    // verify we have enough cards\n    if (num <= nextDeck.length) {\n      // get the cards\n      for (let i = 0; i < num; i += 1) {\n        const card: DBCard | undefined = nextDeck.pop();\n        if (card) {\n          cards.push(card);\n        }\n      }\n    }\n\n    // get players\n    const players = get(playerAtom);\n    const nextPlayers = [...players];\n\n    // have player draw cards\n    const pIdx = nextPlayers.findIndex((player) => player.id === playerId);\n    const nextPlayer = nextPlayers[pIdx];\n    nextPlayer.hands[0] = {\n      cards: [...prevCards, ...cards],\n      weight: 0,\n      soft: false,\n    };\n    // sort\n    nextPlayer.hands[0].cards.sort(rankSort);\n\n    // update state\n    set(deckAtom, nextDeck);\n    set(playerAtom, nextPlayers);\n  },\n);\n","const cardFace: React.CSSProperties = {\n  border: 0,\n  backgroundColor: \"white\",\n  borderRadius: 5,\n  cursor: \"pointer\",\n  display: \"inline-block\",\n  fontWeight: \"bold\",\n  height: 78,\n  margin: 5,\n  padding: \"0 3px 12px 3px\",\n  width: 50,\n};\n\nconst cardTitle: React.CSSProperties = {\n  textAlign: \"left\",\n};\n\nconst suit: React.CSSProperties = {\n  margin: \"auto\",\n  marginTop: 5,\n  textAlign: \"center\",\n  width: \"100%\",\n};\n\nexport default {\n  cardFace,\n  cardTitle,\n  suit,\n};\n","import * as React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { red } from \"@mui/material/colors\";\nimport styles from \"./Card.styles\";\n\ninterface CardProps {\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardNo: number;\n  dropped: boolean;\n  handNo: number;\n  name: string;\n  playerNo: number;\n  suit: string;\n}\n\nconst Card = React.memo(\n  ({\n    dropped,\n    suit,\n    name,\n    cardHandler,\n    playerNo,\n    handNo,\n    cardNo,\n  }: CardProps) => {\n    // handle click to for card\n    const handleClick = React.useCallback((): void => {\n      if (cardHandler) {\n        cardHandler(playerNo, handNo, cardNo);\n      }\n    }, [cardHandler, cardNo, handNo, playerNo]);\n    // checking color based off suits: ♣♦♥♠\n    const cardColor: React.CSSProperties = {\n      color: suit === \"♣\" || suit === \"♠\" ? \"black\" : red[500],\n      backgroundColor: dropped ? red[100] : \"white\",\n    };\n\n    return (\n      <button\n        style={{ ...styles.cardFace, ...cardColor }}\n        onClick={handleClick}\n      >\n        <div style={styles.cardTitle}>{name + suit}</div>\n        <Typography variant=\"h4\" style={{ ...styles.suit, ...cardColor }}>\n          {suit}\n        </Typography>\n      </button>\n    );\n  },\n);\n\nCard.displayName = \"Card\";\n\nexport default Card;\n","import * as React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { purple } from \"@mui/material/colors\";\nimport Card from \"./card/Card\";\nimport { DBHand } from \"../../../../jotai/player-atom\";\n\nconst boldStyle: React.CSSProperties = {\n  fontWeight: \"bold\",\n  marginTop: \"0.5em\",\n};\nconst normalStyle: React.CSSProperties = {\n  fontWeight: \"normal\",\n  marginTop: \"0.5em\",\n};\n\ninterface HandProps {\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hand: DBHand;\n  handNo: number;\n  isBlackJack: boolean;\n  isHandTurn: boolean;\n  isMultiHand: boolean;\n  isPlayerTurn: boolean;\n  playerNo: number;\n}\n\nconst Hand = ({\n  cardHandler,\n  cardsToDiscard,\n  hand,\n  handNo,\n  isBlackJack,\n  isHandTurn,\n  isMultiHand,\n  isPlayerTurn,\n  playerNo,\n}: HandProps) => {\n  const styles = React.useMemo(\n    () =>\n      isPlayerTurn && (!isMultiHand || (isMultiHand && isHandTurn))\n        ? { ...boldStyle, color: purple[700] }\n        : normalStyle,\n    [isPlayerTurn, isMultiHand, isHandTurn],\n  );\n  const handWeight = hand.weight || 0;\n\n  return (\n    <>\n      <Typography variant=\"h4\" style={styles}>\n        {isBlackJack && `${handWeight > 21 ? \"Bust\" : \"Hand\"}: ${handWeight}`}\n      </Typography>\n      {hand.cards.map((card, i) => {\n        const dropped: boolean = cardsToDiscard.includes(i);\n        return card ? (\n          <Card\n            key={card.name + card.suit}\n            cardHandler={cardHandler}\n            cardNo={i}\n            dropped={dropped}\n            handNo={handNo}\n            name={card.name}\n            playerNo={playerNo}\n            suit={card.suit}\n          />\n        ) : null;\n      })}\n    </>\n  );\n};\n\nexport default Hand;\n","const player: React.CSSProperties = {\n  borderRadius: 5,\n  display: \"inline-block\",\n  margin: 10,\n  padding: 20,\n};\n\nconst width: React.CSSProperties = { minWidth: \"100px\" };\n\nexport default {\n  player,\n  width,\n};\n","import * as React from \"react\";\nimport Slider from \"@mui/material/Slider\";\nimport Typography from \"@mui/material/Typography\";\nimport Card from \"@mui/material/Card\";\nimport { green, blueGrey, red, grey } from \"@mui/material/colors\";\nimport Hand from \"../Hand\";\nimport { DBPlayer } from \"../../../../../jotai/player-atom\";\nimport { TurnState } from \"../../../../../jotai/turn-atom\";\nimport styles from \"./Player.styles\";\n\ninterface PlayerProps {\n  betHandler?: (id: number, event: Event, value: number) => void;\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  player: DBPlayer;\n  playerNo: number;\n  turn: TurnState;\n}\n\nconst Player = ({\n  betHandler,\n  cardHandler,\n  cardsToDiscard,\n  hideHands,\n  isBlackJack,\n  player,\n  playerNo,\n  turn,\n}: PlayerProps) => {\n  // set booleans\n  const isPlayerTurn: boolean = !!turn && playerNo === turn.player;\n  const isMultiHand: boolean = player.hands.length > 1;\n  const showSlider: boolean =\n    !!hideHands && isBlackJack && player.id !== 0 && !player.isBot;\n  // set slider variables\n  const minBet: number = Math.max(Math.min(player.money, 5), 0);\n  const maxBet: number = Math.max(Math.min(player.money, 100), 10);\n  const step = 5;\n  const onSliderChange = React.useCallback(\n    (event: Event, value: number | number[]): void => {\n      if (betHandler) {\n        betHandler(\n          player.id,\n          event,\n          Array.isArray(value) ? value[value.length - 1] : value,\n        );\n      }\n    },\n    [betHandler, player.id],\n  );\n  const weight: React.CSSProperties = {\n    fontWeight: isPlayerTurn ? \"bold\" : \"normal\",\n  };\n  // set colors\n  let color: React.CSSProperties = { background: grey[900], color: \"white\" };\n  if (player.status === \"win\") {\n    color = { background: green[300], color: \"white\" };\n  } else if (player.status === \"draw\") {\n    color = { background: blueGrey[300], color: \"white\" };\n  } else if (player.status === \"lose\") {\n    color = { background: red[300], color: \"white\" };\n  } else if (isPlayerTurn) {\n    color = { background: grey[300], color: \"black\" };\n  }\n\n  return (\n    <Card style={{ ...styles.player, ...color }}>\n      <Typography variant=\"h4\" component=\"h2\" style={{ ...weight }}>\n        {`${player.name}: $${player.money}`}\n      </Typography>\n      {showSlider && (\n        <Slider\n          max={maxBet}\n          min={minBet}\n          onChange={onSliderChange}\n          step={step}\n          style={styles.width}\n          value={player.bet}\n          aria-label={`adjust bet for ${player.name}`}\n        />\n      )}\n      {isBlackJack && player.id !== 0 && (\n        <Typography\n          variant=\"h5\"\n          component=\"h3\"\n        >{`Bet: $${player.bet}`}</Typography>\n      )}\n      {player.hands.map((hand, i) => {\n        const isHandTurn: boolean = !!turn && turn.hand === i;\n        return (\n          <div key={`hand${i}`}>\n            {!hideHands && (\n              <Hand\n                cardHandler={cardHandler}\n                cardsToDiscard={cardsToDiscard}\n                hand={hand}\n                handNo={i}\n                isBlackJack={isBlackJack}\n                isHandTurn={isHandTurn}\n                isMultiHand={isMultiHand}\n                isPlayerTurn={isPlayerTurn}\n                playerNo={playerNo}\n              />\n            )}\n          </div>\n        );\n      })}\n    </Card>\n  );\n};\n\nexport default Player;\n","import Player from \"./player/Player\";\nimport { DBPlayer } from \"../../../../jotai/player-atom\";\nimport { TurnState } from \"../../../../jotai/turn-atom\";\n// Parents: GameTable\n\ninterface BoardProps {\n  betHandler?: (id: number, event: Event, value: number) => void;\n  cardHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  isBlackJack: boolean;\n  players: DBPlayer[];\n  turn: TurnState;\n}\n\nconst Board = ({\n  betHandler,\n  cardHandler,\n  cardsToDiscard,\n  hideHands,\n  isBlackJack,\n  players,\n  turn,\n}: BoardProps) => (\n  <>\n    {players.map((player, i) => (\n      <Player\n        key={`player${i}`}\n        betHandler={betHandler}\n        cardHandler={cardHandler}\n        cardsToDiscard={cardsToDiscard}\n        hideHands={hideHands}\n        isBlackJack={isBlackJack}\n        player={player}\n        playerNo={i}\n        turn={turn}\n      />\n    ))}\n  </>\n);\n\nexport default Board;\n","import * as React from \"react\";\nimport MuiButton from \"@mui/material/Button\";\n\nexport interface ButtonProps {\n  onClick: (name: string) => void;\n  name: string;\n}\n\nconst Button = React.memo(({ onClick, name }: ButtonProps) => (\n  <MuiButton\n    onClick={(): void => onClick(name)}\n    style={{ margin: 12 }}\n    variant=\"contained\"\n  >\n    {name}\n  </MuiButton>\n));\n\nButton.displayName = \"Button\";\n\nexport default Button;\n","import Button from \"./Button\";\n\nexport interface ButtonGroupProps {\n  gameFunctions: string[];\n  onClick: (name: string) => void;\n}\n\nconst ButtonGroup = ({ gameFunctions, onClick }: ButtonGroupProps) => (\n  <div>\n    {gameFunctions.map((key) => (\n      <Button key={key} onClick={onClick} name={key} />\n    ))}\n  </div>\n);\n\nexport default ButtonGroup;\n","import * as React from \"react\";\nimport Board from \"./board/Board\";\nimport ButtonGroup from \"./button-group/ButtonGroup\";\nimport { DBPlayer } from \"../../../jotai/player-atom\";\nimport { TurnState } from \"../../../jotai/turn-atom\";\n\ninterface GameTableProps {\n  betHandler?: (id: number, event: Event, value: number) => void;\n  cardClickHandler?: (playerNo: number, handNo: number, cardNo: number) => void;\n  cardsToDiscard?: number[];\n  gameFunctions?: string[];\n  gameOver?: boolean;\n  hideHands?: boolean;\n  isBlackJack?: boolean;\n  onClick: (name: string) => void;\n  players: DBPlayer[];\n  turn: TurnState;\n}\n\n/* GameTable ->  Board -> Player -> Hand -> Card\n *          |->  Button Group  ->  Button        */\nconst GameTable = ({\n  betHandler,\n  cardClickHandler,\n  cardsToDiscard = [],\n  gameFunctions = [],\n  gameOver = false,\n  hideHands = false,\n  isBlackJack = true,\n  players,\n  turn,\n  onClick,\n}: GameTableProps) => {\n  // move game buttons to make turn more obvious and support mobile\n  const played: DBPlayer[] = React.useMemo(\n    () => players.slice(0, turn.player + 1),\n    [players, turn.player],\n  );\n  const future: DBPlayer[] = React.useMemo(\n    () => players.slice(turn.player + 1),\n    [players, turn.player],\n  );\n  const playersToDisplay: DBPlayer[] = React.useMemo(\n    () =>\n      !hideHands && gameOver === false\n        ? players.slice(turn.player, turn.player + 1)\n        : players,\n    [hideHands, gameOver, players, turn.player],\n  );\n\n  return isBlackJack && !hideHands ? (\n    <>\n      <Board\n        players={played}\n        betHandler={betHandler}\n        cardHandler={cardClickHandler}\n        cardsToDiscard={cardsToDiscard}\n        hideHands={hideHands}\n        isBlackJack={isBlackJack}\n        turn={turn}\n      />\n      <ButtonGroup gameFunctions={gameFunctions} onClick={onClick} />\n      <Board\n        players={future}\n        betHandler={betHandler}\n        cardHandler={cardClickHandler}\n        cardsToDiscard={cardsToDiscard}\n        hideHands={hideHands}\n        isBlackJack={isBlackJack}\n        turn={{ player: -1, hand: -1 }}\n      />\n    </>\n  ) : (\n    <>\n      <Board\n        players={playersToDisplay}\n        betHandler={betHandler}\n        cardHandler={cardClickHandler}\n        cardsToDiscard={cardsToDiscard}\n        hideHands={hideHands}\n        isBlackJack={isBlackJack}\n        turn={turn}\n      />\n      <ButtonGroup gameFunctions={gameFunctions} onClick={onClick} />\n    </>\n  );\n};\n\nexport default GameTable;\n"],"names":["initialState","turnAtom","atomWithStorage","rankSort","a","b","newDeck","deckAtom","shuffleAtom","atom","_get","set","shuffledDeck","card","i","j","k","temp","dealPokerAtom","get","num","playerId","prevCards","deck","nextDeck","cards","nextPlayers","playerAtom","pIdx","player","nextPlayer","cardFace","cardTitle","suit","styles$1","Card","React.memo","dropped","name","cardHandler","playerNo","handNo","cardNo","handleClick","React.useCallback","cardColor","red","jsxs","styles","jsx","Typography","boldStyle","normalStyle","Hand","cardsToDiscard","hand","isBlackJack","isHandTurn","isMultiHand","isPlayerTurn","React.useMemo","purple","handWeight","Fragment","width","Player","betHandler","hideHands","turn","showSlider","minBet","maxBet","step","onSliderChange","event","value","weight","color","grey","green","blueGrey","Slider","Board","players","Button","onClick","MuiButton","ButtonGroup","gameFunctions","key","GameTable","cardClickHandler","gameOver","played","future","playersToDisplay"],"mappings":"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"}