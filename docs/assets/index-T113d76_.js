import{M as X,O as q,W as Z,r as v,j as e,K as aa,H as na,G as ta,J as sa,A as ea}from"./index-DMtdgkeS.js";import{t as G,a as C,D as T,G as oa}from"./GameTable-Dr_VJwtT.js";import{p as N,P as ra}from"./PlayerMenu-BJiGMkb9.js";import{I as ca}from"./InfoPopup-BI2MKsyf.js";import{T as u}from"./Header-CUtYRLvS.js";import{c as B,b as S,T as W,a as L}from"./TableRow-ChLKlD5P.js";import{T as M}from"./TableHead-2ALBzEPz.js";import{d as ia}from"./deepPurple-CjYrkWXi.js";import"./Card-DlluXMeU.js";import"./Slider-DlMwLIBR.js";import"./visuallyHidden-Dan1xhjv.js";import"./Select-DJp9dDiY.js";import"./isMuiElement-gTNAeGb-.js";import"./useSlotProps-B1o2xeA9.js";import"./useId-CBw7J9nN.js";import"./blueGrey-BeTiP1I_.js";import"./Button-sUGzSBx_.js";import"./Grid2-CGMJmGR8.js";import"./useThemeProps-Os47kRxh.js";import"./TextField-BO5o1Fn_.js";import"./DialogTitle-DcSFJOGK.js";var H=(a=>(a.NEW_GAME="New Game",a.FINISH_BETTING="Finish Betting",a.STAY="Stay",a.HIT="Hit",a.DOUBLE="Double",a.SPLIT="Split",a))(H||{});const O=()=>({gameFunctions:["Finish Betting"],hideHands:!0}),_=X({key:"blackjackAtom",default:JSON.parse(localStorage.getItem("blackjack-atom")||"null")||O(),effects:[({onSet:a})=>{a(t=>{localStorage.setItem("blackjack-atom",JSON.stringify(t))})}]}),da=q({key:"blackjackState",get:({get:a})=>{const t=a(_),n=a(N),s=a(G);return{bj:t,players:n,turn:s}},set:({set:a},t)=>{if(!(t instanceof Z)){const{bj:n,turn:s,players:o}=t;a(_,n),a(G,s),a(N,o)}}}),P=0,E=0;function b(a=[]){let t=0,n=!1;return a.forEach(s=>{const o=s.weight||0;o===14?t<=10?(t+=11,n=!0):t+=1:o>10?t+=10:t+=o,t>21&&n&&(t-=10,n=!1)}),{weight:t,soft:n}}const la=a=>{const t=a.filter(r=>r.id===P)[0],n=t.hands[0].weight||0,s=t.hands[0].cards.length,o={house:0,payout:0,status:""},i=(r,d,p=1)=>{r.house-=Math.floor(p*d),r.payout=Math.floor(p*d),r.status="win"},m=(r,d)=>{r.house+=d,r.payout=-d,r.status="lose"};return a.map(r=>{const{id:d,bet:p}=r;return d===P?(o.house>0?o.status="win":o.house<0?o.status="lose":o.status="push",{...r,status:o.status,money:r.money+o.house}):(r.hands.forEach(y=>{const{weight:x=0,cards:F}=y;n===21&&s===2?m(o,p):x===21&&F.length===2?i(o,p,6/5):x<=21&&(x>n||n>21)?i(o,p):x<=21&&x===n?(o.payout=0,o.status="push"):m(o,p)}),{...r,status:o.status,money:r.money+o.payout})})},w=async a=>{const t=await T.deal(1),n=[...a.cards,...t],{weight:s,soft:o}=b(n);return{cards:n,weight:s,soft:o}},A=async a=>{const t=await T.deal(2),n={cards:[a.cards[0]]},s={cards:[a.cards[1]]};return n.cards.push(t[0]),s.cards.push(t[1]),Object.assign(n,b(n.cards)),Object.assign(s,b(s.cards)),[n,s]},J=async a=>{const{weight:t,soft:n}=b(a.hands[E].cards);if(t<=16||t===17&&n){const{hands:s}=a,o=await T.deal(1),i=[...s[E].cards,...o],{weight:m,soft:r}=b(i);return J({...a,hands:[{cards:i,weight:m,soft:r}]})}return a},l=async(a,t)=>{const n=a.weight||0,{soft:s}=a,{weight:o}=b([t.cards[0]]),{weight:i}=b([a.cards[0]]),{weight:m}=b([a.cards[1]]);if(n<22){if(i===m){if(i===2||i===3||i===7){if(o<=7){const[d,p]=await A(a),{hands:y}=await l(d,t),{hands:x}=await l(p,t);return{hands:[...y,...x]}}const r=await w(a);return l(r,t)}if(i===4){if(o===5||o===6){const[d,p]=await A(a),{hands:y}=await l(d,t),{hands:x}=await l(p,t);return{hands:[...y,...x]}}const r=await w(a);return l(r,t)}if(i===5){if(o<=9)return{hands:[await w(a)],doubled:!0};const r=await w(a);return l(r,t)}if(i===6){if(o<=6){const[d,p]=await A(a),{hands:y}=await l(d,t),{hands:x}=await l(p,t);return{hands:[...y,...x]}}const r=await w(a);return l(r,t)}if(i===9){if(o===7||o>=10)return{hands:[a]};const[r,d]=await A(a),{hands:p}=await l(r,t),{hands:y}=await l(d,t);return{hands:[...p,...y]}}if(i===8||i===11){const[r,d]=await A(a),{hands:p}=await l(r,t),{hands:y}=await l(d,t);return{hands:[...p,...y]}}return{hands:[a]}}if(n<20&&s){if(n===13||n===14){if(o===5||o===6)return{hands:[await w(a)],doubled:!0};const r=await w(a);return l(r,t)}if(n===15||n===16){if(o>=4&&o<=6)return{hands:[await w(a)],doubled:!0};const r=await w(a);return l(r,t)}if(n===17){if(o>=3&&o<=6)return{hands:[await w(a)],doubled:!0};const r=await w(a);return l(r,t)}if(n===18){if(o>=2&&o<=6)return{hands:[await w(a)],doubled:!0};if(o===7||o===8)return{hands:[a]};const r=await w(a);return l(r,t)}if(n===19)return o===6?{hands:[await w(a)],doubled:!0}:{hands:[a]}}else if(n<17&&!s){if(n>=5&&n<=8){const r=await w(a);return l(r,t)}if(n===9){if(o>=3&&o<=6)return{hands:[await w(a)],doubled:!0};const r=await w(a);return l(r,t)}if(n===10){if(o>=2&&o<=9)return{hands:[await w(a)],doubled:!0};const r=await w(a);return l(r,t)}if(n===11)return{hands:[await w(a)],doubled:!0};if(n===12){if(o>=4&&o<=6)return{hands:[a]};const r=await w(a);return l(r,t)}if(n>=13&&n<=16){if(o>=2&&o<=6)return{hands:[a]};const r=await w(a);return l(r,t)}}else return{hands:[a]}}else return{hands:[a]};return{hands:[a]}},ha=async(a,t)=>{const n=[...a];let s={...t};const o=n.length-1,i=n[o].hands[E],m=n.slice(s.player,o);await C(m,async p=>{const{hands:y,doubled:x}=await l(p.hands[E],i);n[s.player]={...n[s.player],hands:y,bet:n[s.player].bet*(x?2:1)},s={player:s.player+1,hand:E}});const r=n[o],d=await J({...r});return n[o]=d,{turn:s,players:la(n),bj:{gameFunctions:[H.NEW_GAME],hideHands:!1}}},ua=async(a,t)=>{const{hands:n}=a,[s,o]=await A(n[t]),i=n.map((m,r)=>r!==t?m:o);return i.splice(t,0,s),i},R=async(a,t)=>{const{hands:n}=a,s=await w(n[t]);return n.map((i,m)=>m!==t?i:s)},D=a=>{if(!a)return[];const t=[H.STAY];if((a.weight||0)<21&&(t.push(H.HIT),a.cards.length===2)){t.push(H.DOUBLE);const{weight:s}=b([a.cards[0]]),{weight:o}=b([a.cards[1]]);s===o&&t.push(H.SPLIT)}return t},U=v.memo(()=>e.jsxs(e.Fragment,{children:[e.jsx(u,{variant:"h5",children:"Objective:"}),e.jsx(u,{children:"Get as close to 21 as you can, without going over. Each card is worth it's number, J/Q/K are worth 10, and an Ace is worth 11 unless you go over 21, then it is worth 1."}),e.jsx("br",{}),e.jsx(u,{variant:"h5",children:"Blackjack:"}),e.jsx(u,{children:"Delt an Ace and a 10/J/Q/K, this casino pays 3:2, but Vegas casinos do 6:5."}),e.jsx("br",{}),e.jsx(u,{variant:"h5",children:"Hit:"}),e.jsx(u,{children:"Get an extra card which adds to your total."}),e.jsx("br",{}),e.jsx(u,{variant:"h5",children:"Stay:"}),e.jsx(u,{children:"Move to the next player."}),e.jsx("br",{}),e.jsx(u,{variant:"h5",children:"Double Down:"}),e.jsx(u,{children:"This option is available with a two card hand; before another card has been drawn double your bet and receive one (and only one) additional card to your hand. Play then moves to the next player."}),e.jsx("br",{}),e.jsx(u,{variant:"h5",children:"Splitting Pairs:"}),e.jsx(u,{children:"When you are dealt a pair of cards of the same rank, you are allowed to split into two separate hands and play them independently. You will match your bet for the second hand. A double after a split is ok"}),e.jsx("br",{}),e.jsx(u,{variant:"h5",children:"Resplitting:"}),e.jsx(u,{children:"When you get additional pairs in the first two cards of a hand you can resplit. Typically a player is allowed to split up to 3 times (delt 4 of a kind)."}),e.jsx("br",{}),e.jsx(u,{variant:"h5",children:"Splitting Aces:"}),e.jsx(u,{children:"Player is limited to drawing only one additional card on each Ace. If you draw a ten-valued card on one of your split Aces, the hand is not considered a Blackjack (it is treated as a normal 21). You can re-split Aces."}),e.jsx("br",{}),e.jsx(u,{variant:"h5",children:"Other Rules:"}),e.jsxs("ul",{children:[e.jsx("li",{children:e.jsx(u,{children:"Dealer hits on 16 or less and soft 17"})}),e.jsx("li",{children:e.jsx(u,{children:"Minimum bet is $5"})})]}),e.jsx(u,{variant:"h5",children:"AI Algorithm:"}),e.jsxs("ul",{children:[e.jsx("li",{children:e.jsx(u,{children:"House Rules: 6 decks, H17, DAS, No Surrender, Peek"})}),e.jsx("li",{children:e.jsx(u,{children:"Estimated casino edge for these rules: 0.66%"})})]})]}));U.displayName="Rules";const f=v.memo(a=>{const{color:t,text:n,style:s,...o}=a,i={...s,textAlign:"center",paddingLeft:0,paddingRight:0,backgroundColor:t};return e.jsx(B,{size:"small",style:i,...o,children:n})});f.displayName="Cell";const wa={textAlign:"center",padding:0},pa=({name:a,data:t})=>e.jsxs(S,{children:[e.jsx(B,{style:wa,component:"th",scope:"row",children:a}),t.map((n,s)=>e.jsx(f,{...n},s))]}),ma=["2","3","4","5","6","7","8","9","T","A"],ya={width:60},I=({title:a,data:t})=>e.jsxs(W,{"aria-label":`ideal play strategy for ${a}`,children:[e.jsxs(M,{children:[e.jsx(S,{children:e.jsx(B,{colSpan:11,children:a})}),e.jsxs(S,{children:[e.jsx(f,{rowSpan:2,style:ya,text:"Hand"}),e.jsx(f,{colSpan:10,text:"Dealer"})]}),e.jsx(S,{children:ma.map(n=>e.jsx(f,{text:n},n))})]}),e.jsx(L,{children:t.map(n=>e.jsx(pa,{name:n.name,data:n.data},n.name))})]}),K=v.memo(()=>{const a={color:aa[200],text:"H"},t={color:na[200],text:"D"},n={color:ta[200],text:"S"},s={color:sa[200],text:"P"},o={color:ia[200],text:"DS"},i=[{name:"Hard 5",data:[a,a,a,a,a,a,a,a,a,a]},{name:"Hard 6",data:[a,a,a,a,a,a,a,a,a,a]},{name:"Hard 7",data:[a,a,a,a,a,a,a,a,a,a]},{name:"Hard 8",data:[a,a,a,a,a,a,a,a,a,a]},{name:"Hard 9",data:[a,t,t,t,t,a,a,a,a,a]},{name:"Hard 10",data:[t,t,t,t,t,t,t,t,a,a]},{name:"Hard 11",data:[t,t,t,t,t,t,t,t,t,t]},{name:"Hard 12",data:[a,a,n,n,n,a,a,a,a,a]},{name:"Hard 13",data:[n,n,n,n,n,a,a,a,a,a]},{name:"Hard 14",data:[n,n,n,n,n,a,a,a,a,a]},{name:"Hard 15",data:[n,n,n,n,n,a,a,a,a,a]},{name:"Hard 16",data:[n,n,n,n,n,a,a,a,a,a]},{name:"Hard 17",data:[n,n,n,n,n,n,n,n,n,n]},{name:"Hard 18+",data:[n,n,n,n,n,n,n,n,n,n]}],m=[{name:"Ace + 2",data:[a,a,a,t,t,a,a,a,a,a]},{name:"Ace + 3",data:[a,a,a,t,t,a,a,a,a,a]},{name:"Ace + 4",data:[a,a,t,t,t,a,a,a,a,a]},{name:"Ace + 5",data:[a,a,t,t,t,a,a,a,a,a]},{name:"Ace + 6",data:[a,t,t,t,t,a,a,a,a,a]},{name:"Ace + 7",data:[o,o,o,o,o,n,n,a,a,a]},{name:"Ace + 8",data:[n,n,n,n,o,n,n,n,n,n]},{name:"Ace + 9",data:[n,n,n,n,n,n,n,n,n,n]}],r=[{name:"(2,2)",data:[s,s,s,s,s,s,a,a,a,a]},{name:"(3,3)",data:[s,s,s,s,s,s,a,a,a,a]},{name:"(4,4)",data:[a,a,a,s,s,a,a,a,a,a]},{name:"(5,5)",data:[t,t,t,t,t,t,t,t,a,a]},{name:"(6,6)",data:[s,s,s,s,s,a,a,a,a,a]},{name:"(7,7)",data:[s,s,s,s,s,s,a,a,a,a]},{name:"(8,8)",data:[s,s,s,s,s,s,s,s,s,s]},{name:"(9,9)",data:[s,s,s,s,s,n,s,s,n,n]},{name:"(T,T)",data:[n,n,n,n,n,n,n,n,n,n]},{name:"(A,A)",data:[s,s,s,s,s,s,s,s,s,s]}];return e.jsxs(e.Fragment,{children:[e.jsx(I,{data:i,title:"Hard Totals"}),e.jsx(I,{data:m,title:"Soft Totals"}),e.jsx(I,{data:r,title:"Pairs"}),e.jsxs(W,{"aria-label":"Key for above: H means Hit, S means Stand, P means Split, D means Double or Hit, DS means Double or Split",children:[e.jsx(M,{children:e.jsx(S,{children:e.jsx(B,{colSpan:11,children:"Key"})})}),e.jsxs(L,{children:[e.jsxs(S,{children:[e.jsx(f,{...a}),e.jsx(f,{colSpan:2,text:"= Hit"}),e.jsx(f,{...n}),e.jsx(f,{colSpan:3,text:"= Stand"}),e.jsx(f,{...s}),e.jsx(f,{colSpan:3,text:"= Split"})]}),e.jsxs(S,{children:[e.jsx(f,{...t}),e.jsx(f,{colSpan:10,text:"= Double (Hit if not allowed)"})]}),e.jsxs(S,{children:[e.jsx(f,{...o}),e.jsx(f,{colSpan:10,text:"= Double (Stand if not allowed)"})]})]})]})]})});K.displayName="Help";const Y=v.memo(()=>e.jsxs("div",{className:"flex-container",children:[e.jsx(u,{variant:"h2",component:"h1",gutterBottom:!0,children:"Blackjack (21)"}),e.jsx(ra,{}),e.jsxs(ca,{title:"Rules",children:[e.jsx(U,{}),e.jsx(K,{})]})]}));Y.displayName="Header";const Ca=()=>{const[{turn:a,players:t,bj:{gameFunctions:n,hideHands:s}},o]=ea(da),i=async()=>{const h=await ua(t[a.player],a.hand),c=[...t];c[a.player]={...t[a.player],hands:h};const j=D(c[a.player].hands[a.hand]);o({turn:a,players:c,bj:{gameFunctions:j,hideHands:s}})},m=()=>{const h=t[a.player].hands.length-1,c=a.hand<h?{...a,hand:a.hand+1}:{player:a.player+1,hand:0},j=D(t[c.player].hands[c.hand]);o({turn:c,players:t,bj:{gameFunctions:j,hideHands:s}})},r=async()=>{const h=await R(t[a.player],a.hand),c=[...t];c[a.player]={...t[a.player],hands:h,bet:t[a.player].bet*2};const j=t[a.player].hands.length-1,g=a.hand<j?{...a,hand:a.hand+1}:{player:a.player+1,hand:0};let k=[];c[g.player].isBot||(k=D(c[g.player].hands[g.hand])),o({turn:g,players:c,bj:{gameFunctions:k,hideHands:s}})},d=async()=>{const h=await R(t[a.player],a.hand),c=[...t];c[a.player]={...t[a.player],hands:h};const j=D(c[a.player].hands[a.hand]);o({turn:a,players:c,bj:{gameFunctions:j,hideHands:s}})},p=()=>{o({bj:O(),players:t.map(h=>({...h,status:"",hands:[],bet:5})),turn:{player:0,hand:0}})},y=async()=>{const h=[];await T.shuffle().then(async()=>{await C(t,async j=>{const k=[...await T.deal(j.id!==P?2:1)];k.sort(T.rankSort);const{weight:z,soft:V}=b(k);h.push({...j,hands:[{cards:k,weight:z,soft:V}]})})});const c=D(h[a.player].hands[a.hand]);o({turn:a,players:h,bj:{gameFunctions:c,hideHands:!1}})},x=async()=>{if(!s&&n[0]!==H.NEW_GAME){if(!t[a.player].isBot)return;const c=await ha(t,a);o(c)}},F=(h,c,j)=>{console.log(t[h].hands[c].cards[j])},Q=(h,c,j)=>{o({bj:{gameFunctions:n,hideHands:s},turn:a,players:t.map(g=>g.id===h?{...g,bet:j}:g)})},$=h=>{switch(h){case H.NEW_GAME:p();break;case H.FINISH_BETTING:y().catch(c=>console.log(c));break;case H.STAY:m();break;case H.HIT:d().catch(c=>console.log(c));break;case H.DOUBLE:r().catch(c=>console.log(c));break;case H.SPLIT:i().catch(c=>console.log(c));break;default:console.error("Unknown Game Function: ",h)}};return x().catch(h=>console.log(h)),e.jsxs(e.Fragment,{children:[e.jsx(Y,{}),e.jsx(oa,{betHandler:Q,cardClickHandler:F,gameFunctions:n,onClick:$,hideHands:s,players:t,turn:a})]})};export{Ca as default};
//# sourceMappingURL=index-T113d76_.js.map
