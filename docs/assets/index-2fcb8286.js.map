{"version":3,"mappings":"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","names":["imgStyle","getCSV","arr","style","item","jsx","Chip","showRange","s","e","notes","start","FORMAT","end","dateObj","mon","yr","yRange","mRange","range","Job","props","job","parent","title","jsxs","ExpandableCard","Grid","Typography","desc","Fragment","WorkCards","workExp","workTypes","type","TechBarChart","React.lazy","__vitePreload","Work","React.memo","TimelineCard","React.Suspense","LoadingSpinner","WORK","VOLUNTEER","Work$1"],"sources":["../../src/components/resume/work/Job.tsx","../../src/components/resume/work/WorkCards.tsx","../../src/components/resume/work/Work.tsx"],"sourcesContent":["import * as React from \"react\";\nimport Chip from \"@mui/material/Chip\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport dateObj, { DateObj } from \"../../../apis/DateHelper\";\nimport { FORMAT } from \"../../common/timeline-card/Timeline\";\nimport ExpandableCard from \"../../common/expandable-card\";\nimport { Job as JobType } from \"../../../constants/work\";\n\ninterface JobProps {\n  job: JobType;\n}\n\nconst imgStyle: React.CSSProperties = {\n  width: \"100%\",\n  maxWidth: \"12em\",\n  height: \"auto\",\n  float: \"right\",\n};\n\nexport const getCSV = (arr: string[] = []): React.ReactNodeArray => {\n  const style = { marginRight: 5, marginBottom: 5 };\n  return arr.map((item) => <Chip key={item} label={item} style={style} />);\n};\n\nexport const showRange = (s: DateObj, e: DateObj, notes = \"\"): string => {\n  // start date\n  const start = s.format(FORMAT);\n  // end date, check if it is the present\n  const end = dateObj().diff(e, \"days\") < 1 ? \"Present\" : e.format(FORMAT);\n\n  // get the time range in years, months\n  const mon = (e.diff(s, \"months\") + 1) % 12;\n  const yr = e.diff(s, \"years\") + (mon === 0 ? 1 : 0);\n  const yRange = yr ? `${yr} year${yr > 1 ? \"s\" : \"\"}` : null;\n  const mRange = mon ? `${mon} month${mon > 1 ? \"s\" : \"\"}` : 0;\n  const range = yRange ? yRange + (mRange ? `, ${mRange}` : \"\") : mRange;\n\n  // return string for output\n  return `${start} - ${end} (${range}) ${notes}`;\n};\n\nconst Job: React.FC<JobProps> = (props: JobProps) => {\n  const { job } = props;\n\n  const parent = job.parent ? ` (${job.parent})` : \"\";\n  const title = `${job.company}${parent}, ${job.location}`;\n\n  return (\n    <ExpandableCard\n      backgroundColor={job.color}\n      subtitle={job.title}\n      inverted={job.inverted}\n      title={title}\n    >\n      <Grid item sm={9} xs={12}>\n        <Typography>{showRange(job.start, job.end, job.notes)}</Typography>\n        {job.expr && (\n          <ul>\n            {job.expr.map((desc, i) => (\n              <li key={`desc${i}`}>\n                <Typography>{desc}</Typography>\n              </li>\n            ))}\n          </ul>\n        )}\n        {job.tech && job.tech.length !== 0 && (\n          <>\n            <hr />\n            <Typography display=\"inline\">Technologies:&nbsp;</Typography>\n            {getCSV(job.tech)}\n          </>\n        )}\n        {job.skills && job.skills.length !== 0 && (\n          <>\n            <hr />\n            <Typography display=\"inline\">Skills:&nbsp;</Typography>\n            {getCSV(job.skills)}\n          </>\n        )}\n      </Grid>\n      {job.src && (\n        <Grid item sm={3} xs={12}>\n          <img alt={job.alt} src={job.src} style={imgStyle} />\n        </Grid>\n      )}\n    </ExpandableCard>\n  );\n};\n\nexport default Job;\n","import * as React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport Job from \"./Job\";\nimport { Job as JobType } from \"../../../constants/work\";\n\ninterface WorkCardsProps {\n  workExp: JobType[];\n  workTypes: string[];\n}\n\nconst WorkCards: React.FC<WorkCardsProps> = ({\n  workExp,\n  workTypes,\n}: WorkCardsProps) => (\n  <>\n    {workTypes.map((type) => (\n      <div key={type} style={{ marginTop: 25 }}>\n        <Typography\n          variant=\"h3\"\n          component=\"h2\"\n          style={{ textTransform: \"capitalize\" }}\n        >\n          {`${type} Experience`}\n        </Typography>\n        <hr />\n        {workExp.map(\n          (job) => job.type === type && <Job key={job.company} job={job} />\n        )}\n      </div>\n    ))}\n  </>\n);\n\nexport default WorkCards;\n","import * as React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport TimelineCard from \"../../common/timeline-card\";\nimport ExpandableCard from \"../../common/expandable-card\";\nimport workExp, { VOLUNTEER, WORK } from \"../../../constants/work\";\nimport LoadingSpinner from \"../../common/loading-spinner\";\nimport WorkCards from \"./WorkCards\";\n\nconst TechBarChart = React.lazy(\n  () => import(/* webpackChunkName: \"r_work_bar_chart\" */ \"./TechBarChart\")\n);\n\n/* Work  ->  TechBarChart\n *      |->  WorkCards  ->  Job */\nconst Work: React.FC = React.memo(() => (\n  <>\n    <Typography variant=\"h2\" component=\"h1\">\n      Experience\n    </Typography>\n    <TimelineCard data={workExp} title=\"Work Timeline\" />\n    <ExpandableCard title=\"Programming Language Timeline (Professional Use)\">\n      <React.Suspense fallback={<LoadingSpinner />}>\n        <TechBarChart />\n      </React.Suspense>\n    </ExpandableCard>\n    <WorkCards workExp={workExp} workTypes={[WORK, VOLUNTEER]} />\n  </>\n));\n\nexport default Work;\n"],"file":"assets/index-2fcb8286.js"}