{"version":3,"file":"index-CepSywAr.js","sources":["../../src/components/games/deal-or-no-deal/helpers.ts","../../src/components/games/deal-or-no-deal/Money.tsx","../../src/components/games/deal-or-no-deal/Modal.tsx","../../src/components/games/deal-or-no-deal/Case.tsx","../../src/components/games/deal-or-no-deal/Board.tsx","../../src/components/games/deal-or-no-deal/Header.tsx","../../src/jotai/deal-or-no-deal-state.ts","../../src/components/games/deal-or-no-deal/DealOrNoDeal.tsx"],"sourcesContent":["/** function that takes a number and returns string displayed like money */\nexport const getMoneyText = (n = 0): string => {\n  const txt = n.toString().split(\"\");\n  const e = txt[0] === \"-\" ? 1 : 0;\n  for (let i = txt.length - 3; i > e; i -= 3) {\n    txt.splice(i, 0, \",\");\n  }\n  txt.splice(e, 0, \"$\");\n  return txt.join(\"\");\n};\n\nexport default getMoneyText;\n","import * as React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport { amber, grey } from \"@mui/material/colors\";\nimport { getMoneyText } from \"./helpers\";\n\ninterface MoneyProps {\n  on: boolean;\n  val: number;\n}\n\nconst paperStyles: React.CSSProperties = {\n  width: \"90%\",\n  marginLeft: \"5%\",\n  marginRight: \"5%\",\n  marginBottom: 5,\n  padding: 5,\n  textAlign: \"center\",\n  color: \"white\",\n};\n\nconst Money = React.memo(({ on, val }: MoneyProps) => {\n  const color: React.CSSProperties = {\n    backgroundColor: on ? amber[500] : grey[700],\n  };\n\n  const style: React.CSSProperties = {\n    ...paperStyles,\n    ...color,\n  };\n\n  return (\n    <Paper style={style}>\n      {on ? getMoneyText(val) : <del>{getMoneyText(val)}</del>}\n    </Paper>\n  );\n});\n\nMoney.displayName = \"Money\";\n\nexport default Money;\n","import * as React from \"react\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport Button from \"@mui/material/Button\";\nimport Money from \"./Money\";\nimport { getMoneyText } from \"./helpers\";\nimport { Briefcase } from \"../../../jotai/deal-or-no-deal-state\";\n\ninterface ModalProps {\n  board: Briefcase[];\n  deal: React.MouseEventHandler;\n  noDeal: React.MouseEventHandler;\n  numCases: number;\n  offer: number;\n  open: boolean;\n  swap: React.MouseEventHandler;\n}\n\nconst colStyles: React.CSSProperties = {\n  width: \"50%\",\n  display: \"inline-block\",\n};\n\nconst genMoneyCols = (\n  arr: Briefcase[],\n  start: number,\n  stop = arr.length,\n): React.ReactElement[] =>\n  arr\n    .slice(start, stop)\n    .map((bc) => <Money key={bc.loc} on={bc.on} val={bc.val} />);\n\nconst Modal = ({\n  deal,\n  noDeal,\n  offer,\n  open,\n  swap,\n  numCases,\n  board: imBoard,\n}: ModalProps) => {\n  const board = [...imBoard].sort((a, b) => a.val - b.val);\n\n  // columns displaying money values left\n  const lhs = genMoneyCols(board, 0, board.length / 2);\n  const rhs = genMoneyCols(board, board.length / 2);\n\n  return (\n    <Dialog fullWidth open={open}>\n      <DialogTitle>{`${getMoneyText(offer)} - Deal or No Deal?`}</DialogTitle>\n      <DialogContent>\n        <div style={colStyles}>{lhs}</div>\n        <div style={colStyles}>{rhs}</div>\n      </DialogContent>\n      {numCases > 2 ? (\n        <DialogActions>\n          <Button color=\"success\" onClick={deal}>\n            Deal\n          </Button>\n          <Button color=\"error\" onClick={noDeal}>\n            No Deal\n          </Button>\n        </DialogActions>\n      ) : (\n        <DialogActions>\n          <Button color=\"success\" onClick={deal}>\n            Deal\n          </Button>\n          <Button color=\"secondary\" onClick={noDeal}>\n            My Case\n          </Button>\n          <Button color=\"error\" onClick={swap}>\n            Other Case\n          </Button>\n        </DialogActions>\n      )}\n    </Dialog>\n  );\n};\n\nexport default Modal;\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport { getMoneyText } from \"./helpers\";\nimport { Briefcase } from \"../../../jotai/deal-or-no-deal-state\";\n\ninterface CaseProps {\n  briefcase: Briefcase;\n  isOver: boolean;\n  onClick: React.MouseEventHandler;\n  secondary?: boolean;\n}\n\nconst Case = ({ briefcase: bc, isOver, onClick, secondary }: CaseProps) => {\n  const color = secondary ? \"secondary\" : \"primary\";\n  const label = bc.on && !isOver ? bc.loc : getMoneyText(bc.val);\n\n  return (\n    <Button\n      color={color}\n      disabled={!bc.on}\n      onClick={onClick}\n      style={{ margin: 10 }}\n      variant=\"contained\"\n    >\n      {label}\n    </Button>\n  );\n};\n\nexport default Case;\n","import * as React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Case from \"./Case\";\nimport { Briefcase } from \"../../../jotai/deal-or-no-deal-state\";\n\ninterface BoardProps {\n  board: Briefcase[];\n  isOver: boolean;\n  onClick: (x: number) => void;\n  playerChoice?: Briefcase;\n}\n\nconst style: React.CSSProperties = {\n  maxWidth: 796,\n  padding: 9,\n  textAlign: \"center\",\n  display: \"block\",\n  margin: \"auto\",\n  marginTop: 20,\n};\n\nconst Board = ({ board, isOver, onClick, playerChoice: pc }: BoardProps) => (\n  <Paper elevation={2} style={style}>\n    {board.map((bc, i) => (\n      <Case\n        key={i}\n        briefcase={bc}\n        isOver={isOver}\n        onClick={(): void => onClick(i)}\n        secondary={pc && pc.loc === bc.loc}\n      />\n    ))}\n  </Paper>\n);\n\nexport default Board;\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport { getMoneyText } from \"./helpers\";\nimport { Briefcase } from \"../../../jotai/deal-or-no-deal-state\";\n\ninterface HeaderProps {\n  casesToOpen: number;\n  isOver: number;\n  newGame: React.MouseEventHandler;\n  name: string;\n  money: number;\n  playerChoice?: Briefcase;\n  dndOpen?: boolean;\n}\n\nconst Header = ({\n  playerChoice: pc,\n  casesToOpen,\n  isOver,\n  newGame,\n  name,\n  money,\n  dndOpen,\n}: HeaderProps) => (\n  <Grid container spacing={1}>\n    <Grid size={{ xs: 12, sm: 6 }}>\n      <Typography variant=\"h3\" component=\"h2\" gutterBottom>\n        {`Your Case: ${pc ? pc.loc : \"?\"}${\n          isOver ? ` - ${getMoneyText(pc && pc.val)}` : \"\"\n        }`}\n      </Typography>\n      <Typography variant=\"h4\" component=\"h3\" gutterBottom>\n        {!dndOpen &&\n          (isOver\n            ? `You Won ${getMoneyText(isOver)}`\n            : `Number of Cases to Open: ${casesToOpen}`)}\n      </Typography>\n      {isOver && (\n        <Button onClick={newGame} variant=\"contained\">\n          New Game\n        </Button>\n      )}\n    </Grid>\n    <Grid size={{ xs: 12, sm: 6 }}>\n      <Typography variant=\"h3\" align=\"right\" gutterBottom>\n        {`${name}: ${getMoneyText(money)}`}\n      </Typography>\n    </Grid>\n  </Grid>\n);\n\nexport default Header;\n","import { atom } from \"jotai\";\nimport { atomWithStorage } from \"jotai/utils\";\nimport playerAtom from \"./player-atom\";\n\nexport interface Briefcase {\n  on: boolean;\n  loc: number;\n  val: number;\n}\nexport interface DNDState {\n  board: Briefcase[];\n  turn: number;\n  playerChoice?: Briefcase;\n  casesToOpen: number;\n  dndOpen: boolean;\n  isOver: number;\n}\nexport const briefcasesToOpen = 6;\n\nconst getNewState = (): DNDState => ({\n  board: [\n    { val: 1, loc: 1, on: true },\n    { val: 2, loc: 2, on: true },\n    { val: 5, loc: 3, on: true },\n    { val: 10, loc: 4, on: true },\n    { val: 25, loc: 5, on: true },\n    { val: 50, loc: 6, on: true },\n    { val: 75, loc: 7, on: true },\n    { val: 100, loc: 8, on: true },\n    { val: 200, loc: 9, on: true },\n    { val: 300, loc: 10, on: true },\n    { val: 400, loc: 11, on: true },\n    { val: 500, loc: 12, on: true },\n    { val: 750, loc: 13, on: true },\n    { val: 1000, loc: 14, on: true },\n    { val: 5000, loc: 15, on: true },\n    { val: 10000, loc: 16, on: true },\n    { val: 25000, loc: 17, on: true },\n    { val: 50000, loc: 18, on: true },\n    { val: 75000, loc: 19, on: true },\n    { val: 100000, loc: 20, on: true },\n    { val: 200000, loc: 21, on: true },\n    { val: 300000, loc: 22, on: true },\n    { val: 400000, loc: 23, on: true },\n    { val: 500000, loc: 24, on: true },\n    { val: 750000, loc: 25, on: true },\n    { val: 1000000, loc: 26, on: true },\n  ],\n  turn: 1,\n  playerChoice: undefined,\n  casesToOpen: briefcasesToOpen,\n  dndOpen: false,\n  isOver: 0,\n});\n/** function that takes an array and shuffles it's elements */\nconst shuffle = (arr: Briefcase[]): void => {\n  // shuffle values of briefcases\n  for (let i = 0; i < 100; i += 1) {\n    // get to random briefcases\n    const j = Math.floor(Math.random() * arr.length);\n    const k = Math.floor(Math.random() * arr.length);\n    // swap the briefcases\n    const temp = arr[j].loc;\n    arr[j].loc = arr[k].loc;\n    arr[k].loc = temp;\n  }\n};\n/** function to get a new game state */\nexport const newDNDGame = (): DNDState => {\n  const state = getNewState();\n  // mix up board\n  shuffle(state.board);\n  // set all flags to un-touched\n  state.board.forEach((bc) => {\n    // reset opened flag\n    bc.on = true;\n  });\n  // sort function for the briefcases\n  state.board.sort((a, b) => a.loc - b.loc);\n  return state;\n};\n\nexport const dealOrNoDealAtom = atomWithStorage(\n  \"dealOrNoDealAtom\",\n  newDNDGame(),\n);\n\nexport const dealOrNoDealRead = atom((get) => {\n  // access state\n  const { board, turn } = get(dealOrNoDealAtom);\n  const { name } = get(playerAtom)[0];\n  // compute iterated variables\n  let numCases = 0;\n  let sum = 0;\n  board.forEach((bc) => {\n    if (bc.on) {\n      numCases += 1;\n      sum += bc.val;\n    }\n  });\n  // get the new offer\n  const offer = Math.round((sum / numCases) * (turn / 10));\n  // return state\n  return { numCases, offer, name };\n});\n\ninterface DNDGameState {\n  dnd: DNDState;\n  money?: number;\n  status?: string;\n}\n\nconst dealOrNoDealState = atom(\n  (get) => {\n    const dnd = get(dealOrNoDealAtom);\n    const { money, status } = get(playerAtom)[0];\n\n    return { dnd, money, status };\n  },\n  (get, set, { dnd, money, status }: DNDGameState) => {\n    set(dealOrNoDealAtom, dnd);\n\n    if (money !== undefined && status !== undefined) {\n      const players = get(playerAtom);\n      const newPlayers = [...players];\n      newPlayers[0] = { ...players[0], money, status };\n      set(playerAtom, newPlayers);\n    }\n  },\n);\n\nexport default dealOrNoDealState;\n","import * as React from \"react\";\nimport { useAtom, useAtomValue } from \"jotai\";\nimport Typography from \"@mui/material/Typography\";\nimport Modal from \"./Modal\";\nimport Board from \"./Board\";\nimport Header from \"./Header\";\nimport dndState, {\n  dealOrNoDealRead,\n  briefcasesToOpen,\n  newDNDGame,\n} from \"../../../jotai/deal-or-no-deal-state\";\nimport PlayerMenu from \"../../common/header/PlayerMenu\";\n\n/* DealOrNoDeal  ->  Header\n *              |->  Board  ->  Case\n *              |->  Modal  ->  Money */\nconst DealOrNoDeal = React.memo(() => {\n  const [{ dnd, money, status }, setState] = useAtom(dndState);\n  const { numCases, offer, name } = useAtomValue(dealOrNoDealRead);\n  const { board, dndOpen, isOver, turn, playerChoice, casesToOpen } = dnd;\n\n  // --------------------     Header     -------------------- //\n\n  /** called in Header, resets game */\n  const newGame = (): void => setState({ dnd: newDNDGame() });\n\n  // --------------------     Board     -------------------- //\n\n  /**\n   * called in Board to open a briefcase\n   * gets: board, playerChoice, isOver, casesToOpen\n   * sets: dnd { board, casesTopOpen, playerChoice, dndOpen }, player { money }\n   */\n  const openBriefcase = (x: number) => {\n    const bc = board[x];\n    // check if player has already made case selection\n    if (playerChoice) {\n      // verify cases left and briefcase not already opened\n      if (!isOver && casesToOpen > 0 && bc.loc !== playerChoice.loc && bc.on) {\n        // flag the value and update global trackers\n        const newBoard = [...board];\n        const newCase = { ...newBoard[x], on: false };\n        newBoard[x] = newCase;\n\n        // update board\n        setState({\n          dnd: {\n            ...dnd,\n            board: newBoard,\n            dndOpen: casesToOpen === 1,\n            casesToOpen: casesToOpen - 1,\n          },\n        });\n      }\n    } else {\n      setState({\n        dnd: { ...dnd, playerChoice: bc },\n        money: money - 100,\n        status,\n      });\n    }\n  };\n\n  // --------------------     Modal     -------------------- //\n\n  /**\n   * called in Modal on selection of Deal\n   * gets: offer\n   * sets: dnd { dndOpen, isOver }, player: { status, money }\n   */\n  const deal = (): void => {\n    const total = Math.ceil(offer / 1000);\n    setState({\n      dnd: {\n        ...dnd,\n        dndOpen: false,\n        isOver: total,\n      },\n      money: money + total,\n      status: total > 100 ? \"win\" : \"lose\",\n    });\n  };\n\n  /**\n   * called in Modal on selection of No Deal\n   * gets: numCases, playerChoice\n   * sets: dnd { dndOpen, isOver, turn, casesToOpen }, player: { status, money }\n   */\n  const noDeal = (): void => {\n    // no deal on last case\n    if (numCases <= 2) {\n      const newOffer = playerChoice?.val || 0;\n      const total = Math.ceil(newOffer / 1000);\n      setState({\n        dnd: {\n          ...dnd,\n          dndOpen: false,\n          isOver: total,\n        },\n        money: money + total,\n        status: total > 100 ? \"win\" : \"lose\",\n      });\n    } else {\n      // advance the turn\n      setState({\n        dnd: {\n          ...dnd,\n          dndOpen: false,\n          turn: turn + 1,\n          casesToOpen:\n            turn < briefcasesToOpen - 1 ? briefcasesToOpen - turn : 1,\n        },\n      });\n    }\n  };\n\n  /**\n   * called in Modal\n   * gets: board, playerChoice, money\n   * sets: dnd { dndOpen, isOver }, player: { status, money }\n   */\n  const swap = (): void => {\n    for (let i = 0; i < board.length; i += 1) {\n      const bc = board[i];\n      if (bc.on && playerChoice && bc.loc !== playerChoice.loc) {\n        const total = Math.ceil(bc.val / 1000);\n        setState({\n          dnd: {\n            ...dnd,\n            dndOpen: false,\n            isOver: total,\n          },\n          money: money + total,\n          status: total > 100 ? \"win\" : \"lose\",\n        });\n        return;\n      }\n    }\n  };\n\n  return (\n    <>\n      <div className=\"flex-container\">\n        <Typography variant=\"h2\" component=\"h1\" gutterBottom>\n          Deal or No Deal\n        </Typography>\n        <PlayerMenu />\n      </div>\n      <Header\n        casesToOpen={casesToOpen}\n        isOver={isOver}\n        newGame={newGame}\n        name={name}\n        money={money}\n        playerChoice={playerChoice}\n        dndOpen={dndOpen}\n      />\n      <Board\n        board={board}\n        isOver={!!isOver}\n        onClick={openBriefcase}\n        playerChoice={playerChoice}\n      />\n      <Modal\n        board={board}\n        deal={deal}\n        noDeal={noDeal}\n        numCases={numCases}\n        offer={offer}\n        open={dndOpen}\n        swap={swap}\n      />\n    </>\n  );\n});\n\nDealOrNoDeal.displayName = \"DealOrNoDeal\";\n\nexport default DealOrNoDeal;\n"],"names":["getMoneyText","n","txt","e","i","paperStyles","Money","React.memo","on","val","color","amber","grey","style","jsx","Paper","colStyles","genMoneyCols","arr","start","stop","bc","Modal","deal","noDeal","offer","open","swap","numCases","imBoard","board","a","b","lhs","rhs","jsxs","Dialog","DialogTitle","DialogContent","DialogActions","Button","Case","isOver","onClick","secondary","label","Board","pc","Header","casesToOpen","newGame","name","money","dndOpen","Grid","Typography","briefcasesToOpen","getNewState","shuffle","j","k","temp","newDNDGame","state","dealOrNoDealAtom","atomWithStorage","dealOrNoDealRead","atom","get","turn","playerAtom","sum","dealOrNoDealState","dnd","status","set","players","newPlayers","DealOrNoDeal","setState","useAtom","dndState","useAtomValue","playerChoice","openBriefcase","x","newBoard","newCase","total","newOffer","Fragment","PlayerMenu"],"mappings":"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"}