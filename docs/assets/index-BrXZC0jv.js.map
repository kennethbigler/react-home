{"version":3,"file":"index-BrXZC0jv.js","sources":["../../src/constants/ayto.ts","../../src/jotai/are-you-the-one-state.ts","../../src/components/games/are-you-the-one/Controls.tsx","../../src/components/games/are-you-the-one/table/TBDialog.tsx","../../src/components/games/are-you-the-one/table/getButtonValues.ts","../../src/components/games/are-you-the-one/table/TableRow.tsx","../../src/components/games/are-you-the-one/table/TableBody.tsx","../../src/components/games/are-you-the-one/table/Table.tsx","../../src/components/games/are-you-the-one/analysis/MatchedStack.tsx","../../src/components/games/are-you-the-one/analysis/CalculatedStack.tsx","../../src/components/games/are-you-the-one/analysis/Analysis.tsx","../../src/components/games/are-you-the-one/histogram/useHist.ts","../../src/components/games/are-you-the-one/AreYouTheOne.tsx"],"sourcesContent":["// are-you-the-one\nexport const aytoSeasons = [\n  {\n    ladies: [\n      \"Amber\",\n      \"Ashleigh\",\n      \"Brittany\",\n      \"Coleysia\",\n      \"Jacy\",\n      \"Jessica\",\n      \"Kayla\",\n      \"Paige\",\n      \"Shanley\",\n      \"Simone\",\n    ],\n    gents: [\n      \"Adam\",\n      \"Dre\",\n      \"Chris S\",\n      \"Chris T\",\n      \"Dillan\",\n      \"Ethan\",\n      \"Joey\",\n      \"JJ\",\n      \"Ryan\",\n      \"Wes\",\n    ],\n  },\n  {\n    ladies: [\n      \"Alexandria\",\n      \"Ashley\",\n      \"Briana\",\n      \"Christina\",\n      \"Ellie\",\n      \"Jasmine\",\n      \"Jenni\",\n      \"Jessica\",\n      \"Paris\",\n      \"Shelby\",\n      \"Tyler\",\n    ],\n    gents: [\n      \"Alex\",\n      \"Anthony\",\n      \"Brandon\",\n      \"Curtis\",\n      \"Dario\",\n      \"Garland\",\n      \"John\",\n      \"Layton\",\n      \"Nathan\",\n      \"Tyler\",\n    ],\n  },\n  {\n    ladies: [\n      \"Amanda\",\n      \"Britni\",\n      \"Chelsey\",\n      \"Hannah\",\n      \"Kayla\",\n      \"Kiki\",\n      \"Cheyenne\",\n      \"Melanie\",\n      \"Rashida\",\n      \"Stacey\",\n    ],\n    gents: [\n      \"Alec\",\n      \"Austin\",\n      \"Chuck\",\n      \"Connor\",\n      \"Devin\",\n      \"Hunter\",\n      \"Mike\",\n      \"Nelson\",\n      \"Tyler\",\n      \"Zak\",\n    ],\n  },\n  {\n    ladies: [\n      \"Alyssa\",\n      \"Camille\",\n      \"Emma\",\n      \"Francesca\",\n      \"Julia\",\n      \"Kaylen\",\n      \"Mikala\",\n      \"Nicole\",\n      \"Tori\",\n      \"Victoria\",\n    ],\n    gents: [\n      \"Asaf\",\n      \"Cam\",\n      \"Cameron\",\n      \"Giovanni\",\n      \"John\",\n      \"Morgan\",\n      \"Prosper\",\n      \"Sam\",\n      \"Stephen\",\n      \"Tyler\",\n    ],\n  },\n  {\n    ladies: [\n      \"Alicia\",\n      \"Carolina\",\n      \"Cas\",\n      \"Gianna\",\n      \"Hannah\",\n      \"Kam\",\n      \"Kari\",\n      \"Kathryn\",\n      \"Shannon\",\n      \"Taylor\",\n      \"Tyranny\",\n    ],\n    gents: [\n      \"Andre\",\n      \"Derrick\",\n      \"Edward\",\n      \"Hayden\",\n      \"Jaylan\",\n      \"Joey\",\n      \"Michael\",\n      \"Mike\",\n      \"Osvaldo\",\n      \"Ozzy\",\n      \"Tyler\",\n    ],\n  },\n  {\n    ladies: [\n      \"Alexis\",\n      \"Alivia\",\n      \"Audrey\",\n      \"Diandra\",\n      \"Geles\",\n      \"Jada\",\n      \"Keyana\",\n      \"Nicole\",\n      \"Nurys\",\n      \"Uche\",\n      \"Zoe\",\n    ],\n    gents: [\n      \"Anthony\",\n      \"Clinton\",\n      \"David\",\n      \"Dimitri\",\n      \"Ethan\",\n      \"Joe\",\n      \"Kareem\",\n      \"Keith\",\n      \"Malcolm\",\n      \"Michael\",\n      \"Tyler\",\n    ],\n  },\n  {\n    ladies: [\n      \"Asia\",\n      \"Bria\",\n      \"Cali\",\n      \"Jasmine\",\n      \"Kayla\",\n      \"Kenya\",\n      \"Lauren\",\n      \"Maria\",\n      \"Morgan\",\n      \"Nutsa\",\n      \"Samantha\",\n    ],\n    gents: [\n      \"Andrew\",\n      \"Brett\",\n      \"Cam\",\n      \"Daniel\",\n      \"Kwasi\",\n      \"Lewis\",\n      \"Moe\",\n      \"Shamoy\",\n      \"Tevin\",\n      \"Tomas\",\n      \"Zak\",\n    ],\n  },\n  {\n    ladies: [\n      \"Anissa\",\n      \"Brooke\",\n      \"CC\",\n      \"Courtney\",\n      \"Danielle\",\n      \"Dew\",\n      \"Jordanne\",\n      \"Julia-Ruth\",\n      \"Mijntje\",\n      \"Roz\",\n      \"Taylor\",\n    ],\n    gents: [\n      \"Aqel\",\n      \"Brendan\",\n      \"Clay\",\n      \"Eduardo\",\n      \"Hamudi\",\n      \"Leo\",\n      \"Michael\",\n      \"Nathan\",\n      \"Ollie\",\n      \"Samuel\",\n      \"Will\",\n    ],\n  },\n  {\n    ladies: [\n      \"Libby\",\n      \"Olivia\",\n      \"Robyn\",\n      \"Sapphia\",\n      \"Shae\",\n      \"Taofiqah\",\n      \"Tasha\",\n      \"Thea\",\n      \"Therese\",\n      \"Vic\",\n    ],\n    gents: [\n      \"Cacherel\",\n      \"Charlie\",\n      \"Ismail\",\n      \"Jack\",\n      \"Jacob\",\n      \"Jordan\",\n      \"Josh\",\n      \"Joshy\",\n      \"Juan\",\n      \"Theo\",\n    ],\n  },\n];\n\nexport const seasons = [\n  \"Season 1\",\n  \"Season 2\",\n  \"Season 3\",\n  \"Season 4\",\n  \"Season 5\",\n  \"Season 6\",\n  \"Season 7\",\n  \"Season 9\",\n  \"UK 1\",\n];\n\nexport const options = [\n  \"Matchup 1\",\n  \"Matchup 2\",\n  \"Matchup 3\",\n  \"Matchup 4\",\n  \"Matchup 5\",\n  \"Matchup 6\",\n  \"Matchup 7\",\n  \"Matchup 8\",\n  \"Matchup 9\",\n  \"Matchup 10\",\n  \"Truth Booth\",\n];\n","import { atom } from \"jotai\";\nimport { atomWithStorage } from \"jotai/utils\";\nimport { aytoSeasons, options } from \"../constants/ayto\";\n\nexport interface RoundPairing {\n  /** [lady-i: gent-i] */\n  pairs: number[];\n  /** score of the round */\n  score: number;\n}\n\nexport interface AYTOState {\n  /** [lady-i: (gent-i | -1), -1, -1, ...] */\n  matches: number[];\n  /** [lady-i: [gent-i: bool]] */\n  noMatch: boolean[][];\n  /** [round-i: RoundPairing] */\n  roundPairings: RoundPairing[];\n}\n\nconst DEFAULT_SEASON = 7;\n\nconst newAYTOState = (season = DEFAULT_SEASON): AYTOState => ({\n  matches: aytoSeasons[season].ladies.map(() => -1),\n  noMatch: aytoSeasons[season].ladies.map(() =>\n    aytoSeasons[season].gents.map(() => false),\n  ),\n  roundPairings: [],\n});\n\n/** used internally to store season */\nconst aytoSeasonAtom = atomWithStorage(\"aytoSeasonAtom\", DEFAULT_SEASON);\n\n/** used for main game state */\nexport const areYouTheOneAtom = atomWithStorage(\n  \"areYouTheOneAtom\",\n  newAYTOState(),\n);\n\n/** used externally to set season and side effects in main state */\nexport const aytoSeasonState = atom(\n  (get) => get(aytoSeasonAtom),\n  (_get, set, newSeason: number) => {\n    set(aytoSeasonAtom, newSeason);\n    set(areYouTheOneAtom, newAYTOState(newSeason));\n  },\n);\n\n/** used externally to get player info */\nexport const aytoPlayerRead = atom((get) => {\n  const season = get(aytoSeasonAtom);\n  const newOptions = [...options];\n  // if season 1, there are only 9 TBs\n  if (season === 1) {\n    newOptions.splice(9, 1);\n  }\n\n  return { ...aytoSeasons[season], options };\n});\n\nexport default areYouTheOneAtom;\n","import * as React from \"react\";\nimport { useAtom } from \"jotai\";\nimport Button from \"@mui/material/Button\";\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport Select from \"@mui/material/Select\";\nimport { SelectChangeEvent } from \"@mui/material\";\nimport {\n  aytoSeasonState,\n  RoundPairing,\n} from \"../../../jotai/are-you-the-one-state\";\nimport { seasons } from \"../../../constants/ayto\";\n\ninterface ControlsProps {\n  /** round options, last is Truth Booth (TB) */\n  options: string[];\n  ri: number;\n  /** [round-i: RoundPairing] */\n  roundPairings: RoundPairing[];\n  // functions\n  onBlackout: (pairs: number[]) => void;\n  onSelect: (index: number) => void;\n  updateScore: (score: number) => void;\n}\n\nconst getScore = (value: number) => (isNaN(value) ? -1 : value);\n\nconst ctrlStyles: React.CSSProperties = {\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  flexWrap: \"wrap\",\n  gap: \"1em\",\n  alignItems: \"center\",\n};\n\n/** Controls component for Are You The One */\nconst Controls = ({\n  options,\n  onSelect,\n  ri,\n  roundPairings,\n  onBlackout,\n  updateScore,\n}: ControlsProps) => {\n  // hooks/state\n  const [season, setSeason] = useAtom(aytoSeasonState);\n  const score = getScore(roundPairings[ri]?.score);\n\n  // handlers\n  const selectSeason = (e: SelectChangeEvent<number>) =>\n    setSeason(Number(e.target.value));\n  const selectMatchup = (e: SelectChangeEvent<number>) =>\n    onSelect(Number(e.target.value));\n  const handleBlackout = () => onBlackout(roundPairings[ri].pairs);\n  const incrScore = () => updateScore(score + 1);\n  const decrScore = () => updateScore(score - 1);\n\n  return (\n    <div style={ctrlStyles}>\n      <FormControl>\n        <InputLabel id=\"season-select\">Season</InputLabel>\n        <Select\n          labelId=\"season-select\"\n          label=\"Season\"\n          value={season}\n          onChange={selectSeason}\n        >\n          {seasons.map((option, i) => (\n            <MenuItem key={option} value={i}>\n              {option}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <FormControl>\n        <InputLabel id=\"matchup-select\">Matchup</InputLabel>\n        <Select\n          labelId=\"matchup-select\"\n          label=\"Matchup\"\n          value={ri}\n          onChange={selectMatchup}\n        >\n          {options.map((option, i) => (\n            <MenuItem key={option} value={i}>\n              {option}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      {ri < options.length - 1 && (\n        <>\n          <Button variant=\"outlined\" color=\"secondary\" onClick={handleBlackout}>\n            Blackout\n          </Button>\n          <div>\n            <p style={{ display: \"inline\", marginRight: 15 }}>Score: {score}</p>\n            <ButtonGroup variant=\"contained\" aria-label=\"modify matchup score\">\n              <Button aria-label=\"decrement score\" onClick={decrScore}>\n                -\n              </Button>\n              <Button aria-label=\"increment score\" onClick={incrScore}>\n                +\n              </Button>\n            </ButtonGroup>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Controls;\n","import Button from \"@mui/material/Button\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\n\nexport interface TBDialogProps {\n  open: boolean;\n  content: string;\n  onMatch: () => void;\n  onNoMatch: () => void;\n  onCancel: () => void;\n}\n\nconst TBDialog = ({\n  open,\n  content,\n  onMatch,\n  onNoMatch,\n  onCancel,\n}: TBDialogProps) => (\n  <Dialog onClose={onCancel} open={open}>\n    <DialogTitle>TB Result</DialogTitle>\n    <DialogContent>Are {content} a perfect match?</DialogContent>\n    <DialogActions>\n      <Button onClick={onMatch}>Match</Button>\n      <Button onClick={onNoMatch} color=\"error\">\n        No Match\n      </Button>\n      <Button onClick={onCancel} color=\"warning\">\n        Cancel\n      </Button>\n    </DialogActions>\n  </Dialog>\n);\n\nexport default TBDialog;\n","import { MuiColors } from \"../../../common/types\";\n\nconst getButtonValues = (\n  isTB: boolean,\n  noMatch: boolean,\n  match: boolean,\n  isPaired: boolean,\n  histValue: number,\n) => {\n  // variables\n  let variant: \"outlined\" | \"contained\" = \"outlined\";\n  let color: MuiColors = \"primary\";\n\n  if (isTB && (noMatch || match)) {\n    // if has data about match or no match\n    variant = \"contained\";\n  } else if (isPaired) {\n    // if paired this round\n    variant = \"contained\";\n  } else if (isTB && histValue > 0) {\n    // if consolidated\n    variant = \"contained\";\n  }\n\n  if (noMatch) {\n    color = \"error\";\n  } else if (match) {\n    color = \"success\";\n  }\n\n  return { variant, color, histValue };\n};\n\nexport default getButtonValues;\n","import TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Button from \"@mui/material/Button\";\nimport { AYTOHist } from \"../histogram/useHist\";\nimport getButtonValues from \"./getButtonValues\";\n\nexport interface AYTOTableRowProps {\n  /** gents names */\n  gents: string[];\n  /** tracks odds */\n  histLi: AYTOHist[];\n  /** [lady-i: [gent-i: bool]] */\n  noMatchLi: boolean[];\n  // simple variables\n  isTB: boolean;\n  ladyName: string;\n  lMatch: number;\n  lPair: number;\n  // functions\n  onClick: (genti: number) => () => void;\n}\n\nconst AYTOTableRow = ({\n  gents,\n  histLi,\n  lMatch,\n  noMatchLi,\n  isTB,\n  lPair,\n  ladyName: lName,\n  onClick,\n}: AYTOTableRowProps) => (\n  <TableRow sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}>\n    <TableCell component=\"th\" scope=\"row\">\n      {lName}\n    </TableCell>\n    {gents.map((gName, gi) => {\n      let histValue = 0;\n      let histOdds = 0;\n      if (histLi && histLi[gi]) {\n        histValue = histLi[gi].rounds.length;\n        histOdds = histLi[gi].odds;\n      } else if (!noMatchLi[gi]) {\n        const num = noMatchLi.reduce((s, nm) => (nm ? s : s + 1), 0);\n        histOdds = Math.floor((1 / num) * 100);\n      }\n      const { variant, color } = getButtonValues(\n        isTB,\n        noMatchLi && noMatchLi[gi],\n        lMatch === gi,\n        lPair === gi,\n        histValue,\n      );\n\n      // render\n      return (\n        <TableCell key={gName} sx={{ padding: 0, textAlign: \"center\" }}>\n          <Button variant={variant} color={color} onClick={onClick(gi)}>\n            {histOdds}%\n          </Button>\n        </TableCell>\n      );\n    })}\n  </TableRow>\n);\n\nexport default AYTOTableRow;\n","import * as React from \"react\";\nimport TableBody from \"@mui/material/TableBody\";\nimport { RoundPairing } from \"../../../../jotai/are-you-the-one-state\";\nimport TBDialog from \"./TBDialog\";\nimport { AYTOHist } from \"../histogram/useHist\";\nimport AYTOTableRow from \"./TableRow\";\n\nexport interface AYTOTableProps {\n  /** gents names */\n  gents: string[];\n  /** [lady-i: [gent-i: { odds, rounds together }]] */\n  hist: AYTOHist[][];\n  /** ladies names */\n  ladies: string[];\n  /** [lady-i: (gent-i | -1), -1, -1, ...] */\n  matches: number[];\n  /** [lady-i: [gent-i: bool]] */\n  noMatch: boolean[][];\n  /** round options, last is Truth Booth (TB) */\n  options: string[];\n  ri: number;\n  /** [round-i: RoundPairing] */\n  roundPairings: RoundPairing[];\n  updateMatch: (li: number, gi: number) => void;\n  updateNoMatch: (li: number, gi: number) => void;\n  updatePairs: (ri: number, li: number, gi: number) => void;\n}\n\nconst AYTOTableBody = ({\n  gents,\n  hist,\n  ladies,\n  matches,\n  noMatch,\n  options,\n  ri,\n  roundPairings,\n  updateMatch,\n  updateNoMatch,\n  updatePairs,\n}: AYTOTableProps) => {\n  const isTB = options.length === ri + 1;\n\n  // state\n  const [open, setOpen] = React.useState(false);\n  const [tbi, setTBI] = React.useState([-1, -1]);\n\n  // Handlers\n  const handleClick =\n    (roundi: number, ladyi: number) => (genti: number) => () => {\n      if (isTB) {\n        setTBI([ladyi, genti]);\n        setOpen(true);\n        return;\n      }\n      // Regular Round, verify gent isn't already taken\n      const tempLi = roundPairings[roundi]?.pairs.indexOf(genti);\n      if (tempLi !== -1) {\n        // deselect gent from old lady\n        updatePairs(roundi, tempLi, -1);\n      }\n      // assign to new lady\n      updatePairs(roundi, ladyi, genti);\n    };\n\n  const handleCancel = () => {\n    setOpen(false);\n  };\n\n  const handleMatch = () => {\n    const [li, gi] = tbi;\n    updateMatch(li, gi);\n    handleCancel();\n  };\n\n  const handleNoMatch = () => {\n    const [li, gi] = tbi;\n    updateNoMatch(li, gi);\n    handleCancel();\n  };\n\n  return (\n    <TableBody>\n      {ladies.map((lName, li) => (\n        <AYTOTableRow\n          key={`ayto-table-row-${lName}`}\n          gents={gents}\n          histLi={hist[li]}\n          noMatchLi={noMatch[li]}\n          isTB={isTB}\n          ladyName={lName}\n          lMatch={matches[li]}\n          lPair={roundPairings[ri]?.pairs[li]}\n          onClick={handleClick(ri, li)}\n        />\n      ))}\n      <TBDialog\n        open={open}\n        content={`${ladies[tbi[0]]} & ${gents[tbi[1]]}`}\n        onCancel={handleCancel}\n        onMatch={handleMatch}\n        onNoMatch={handleNoMatch}\n      />\n    </TableBody>\n  );\n};\n\nexport default AYTOTableBody;\n","import Table from \"@mui/material/Table\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport AYTOTableBody, { AYTOTableProps } from \"./TableBody\";\n\nconst AYTOTable = ({ gents, ...other }: AYTOTableProps) => (\n  <TableContainer component={Paper}>\n    <Table aria-label=\"are you the one data entry table\">\n      <TableHead>\n        <TableRow>\n          <TableCell>-</TableCell>\n          {gents.map((name) => (\n            <TableCell\n              key={name}\n              sx={{ paddingLeft: 0, paddingRight: 0, textAlign: \"center\" }}\n            >\n              {name}\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n      <AYTOTableBody gents={gents} {...other} />\n    </Table>\n  </TableContainer>\n);\n\nexport default AYTOTable;\n","import * as React from \"react\";\nimport Stack from \"@mui/material/Stack\";\nimport Chip from \"@mui/material/Chip\";\nimport { ChipColorOptions } from \"../types\";\nimport { AYTOHist } from \"../histogram/useHist\";\n\nexport interface MatchedStackProps {\n  /** gents names */\n  gents: string[];\n  /** [lady-i: [gent-i: { odds, rounds together }]] */\n  hist: AYTOHist[][];\n  /** ladies names */\n  ladies: string[];\n  /** [lady-i: (gent-i | -1), -1, -1, ...] */\n  matches: number[];\n  /** [lady-i: [gent-i: bool]] */\n  noMatch: boolean[][];\n  /** couples paired together, [lady-i: gent-i] */\n  pairs: number[];\n  /** [ri: number of confirmed matches] */\n  tempScore: number[];\n  // simple variables\n  ri: number;\n  score: number;\n  showAll: boolean;\n}\n\nconst MatchedStack = ({\n  gents,\n  ladies,\n  matches,\n  noMatch,\n  pairs,\n  score,\n  ri,\n  hist,\n  tempScore,\n  showAll,\n}: MatchedStackProps) => {\n  const equation: React.ReactElement[] = [];\n  let numNoMatches = 0;\n  let numMatchAndRepeat = 0;\n  pairs.forEach((gi, li) => {\n    // if cleared pairing\n    if (li < 0 || gi < 0 || li === undefined || gi === undefined) {\n      return;\n    }\n    // if not show all, hide matches and noMatches\n    if (!showAll && (noMatch[li][gi] || matches[li] === gi)) {\n      return;\n    }\n\n    const isRepeat = hist[li][gi].rounds.length > 1;\n    // get color\n    let color: ChipColorOptions = isRepeat ? \"primary\" : \"default\";\n    if (noMatch[li][gi]) {\n      color = \"error\"; // no match chip\n    } else if (matches[li] === gi) {\n      color = \"success\"; // match chip\n    }\n    // get labels\n    const label = `${ladies[li]}-${gents[gi]}${\n      isRepeat ? ` ${hist[li][gi].rounds.length}` : \"\"\n    } - ${hist[li][gi].odds}%`;\n    // get chip\n    const chip = (\n      <Chip key={`match-r${ri}-l${li}-g${gi}`} label={label} color={color} />\n    );\n\n    // create equation chips: matches > repeats > first time > no match\n    switch (color) {\n      case \"success\":\n        numMatchAndRepeat += 1;\n        equation.unshift(chip);\n        return;\n      case \"error\":\n        numNoMatches += 1;\n        equation.push(chip);\n        return;\n      case \"primary\":\n        equation.splice(numMatchAndRepeat, 0, chip);\n        numMatchAndRepeat += 1;\n        return;\n      default:\n        equation.splice(equation.length - numNoMatches, 0, chip);\n    }\n  });\n\n  // return each equation stack\n  return !equation.every((e) => e === null) ? (\n    <Stack spacing={1}>\n      <h2 style={{ textAlign: \"center\" }}>Matchup {ri + 1}</h2>\n      {equation}\n      <Chip label={showAll ? score : score - tempScore[ri]} color=\"warning\" />\n    </Stack>\n  ) : null;\n};\n\nexport default MatchedStack;\n","import Stack from \"@mui/material/Stack\";\nimport Chip from \"@mui/material/Chip\";\nimport { AYTOHist } from \"../histogram/useHist\";\n\nexport interface CalculatedStackProps {\n  /** gents names */\n  gents: string[];\n  /** [lady-i: [gent-i: { odds, rounds together }]] */\n  hist: AYTOHist[][];\n  /** ladies names */\n  ladies: string[];\n  /** couples paired together, [lady-i: gent-i] */\n  pairs: number[];\n  // simple variables\n  cei: number;\n  score: number;\n}\n\nconst CalculatedStack = ({\n  cei,\n  pairs,\n  score,\n  gents,\n  ladies,\n  hist,\n}: CalculatedStackProps) => (\n  <Stack spacing={1}>\n    <h2 style={{ textAlign: \"center\" }}>Calculated {cei + 1}</h2>\n    {pairs.map((gi, li) => (\n      <Chip\n        key={`calc-l${li}-g${gi}`}\n        label={`${ladies[li]}-${gents[gi]} ${hist[li][gi].rounds.length} - ${hist[li][gi].odds}%`}\n        color=\"primary\"\n      />\n    ))}\n    <Chip label={`max ${score}`} color=\"warning\" />\n  </Stack>\n);\n\nexport default CalculatedStack;\n","import * as React from \"react\";\nimport Stack from \"@mui/material/Stack\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Switch from \"@mui/material/Switch\";\nimport { RoundPairing } from \"../../../../jotai/are-you-the-one-state\";\nimport { AYTOHist } from \"../histogram/useHist\";\nimport MatchedStack from \"./MatchedStack\";\nimport CalculatedStack from \"./CalculatedStack\";\n\nexport interface AnalysisProps {\n  /** [i: { pairs, score }] */\n  calculatedEquations: RoundPairing[];\n  /** gents names */\n  gents: string[];\n  /** [lady-i: [gent-i: { odds, rounds together }]] */\n  hist: AYTOHist[][];\n  /** ladies names */\n  ladies: string[];\n  /** [lady-i: (gent-i | -1), -1, -1, ...] */\n  matches: number[];\n  /** [lady-i: [gent-i: bool]] */\n  noMatch: boolean[][];\n  /** [round-i: RoundPairing] */\n  roundPairings: RoundPairing[];\n  /** [round-i: number of confirmed matches] */\n  tempScore: number[];\n}\n\nconst Analysis = ({\n  gents,\n  ladies,\n  matches,\n  noMatch,\n  roundPairings,\n  hist,\n  tempScore,\n  calculatedEquations,\n}: AnalysisProps) => {\n  // state\n  const [showAll, setShowAll] = React.useState(false);\n\n  // handlers\n  const handleSwitch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setShowAll(event.target.checked);\n  };\n\n  return (\n    <div>\n      <Stack direction=\"row\" justifyContent=\"space-between\">\n        <h1>Analysis</h1>\n        <FormControlLabel\n          control={<Switch checked={showAll} onChange={handleSwitch} />}\n          label=\"Show All Couples\"\n        />\n      </Stack>\n      <Stack\n        spacing={1}\n        direction=\"row-reverse\"\n        flexWrap=\"wrap-reverse\"\n        justifyContent=\"flex-end\"\n      >\n        {roundPairings.map(({ pairs, score }, ri) => (\n          <MatchedStack\n            key={`matched-stack-${ri}`}\n            gents={gents}\n            ladies={ladies}\n            matches={matches}\n            noMatch={noMatch}\n            pairs={pairs}\n            score={score}\n            ri={ri}\n            hist={hist}\n            tempScore={tempScore}\n            showAll={showAll}\n          />\n        ))}\n      </Stack>\n      {calculatedEquations.length > 0 && <hr aria-hidden />}\n      <Stack spacing={1} direction=\"row\" flexWrap=\"wrap\">\n        {calculatedEquations.map(({ pairs, score }, cei) => (\n          <CalculatedStack\n            key={`calculated-stack-${cei}`}\n            cei={cei}\n            pairs={pairs}\n            score={score}\n            gents={gents}\n            ladies={ladies}\n            hist={hist}\n          />\n        ))}\n      </Stack>\n    </div>\n  );\n};\n\nexport default Analysis;\n","import { RoundPairing } from \"../../../../jotai/are-you-the-one-state\";\n\nexport interface AYTOHist {\n  odds: number;\n  oddsWeight: number;\n  rounds: number[];\n}\n\nexport interface AYTODictObj {\n  couples: [number, number][];\n  score: number;\n}\n\nexport interface AYTODict {\n  [key: string]: AYTODictObj;\n}\n\n/** function to get game logic\n * @param {number} len\n * @param {number[]} matches [lady-i: (gent-i | -1), -1, -1, ...]\n * @param {boolean[][]} noMatch [lady-i: [gent-i: bool]]\n * @param {Object[]} roundPairings [round-i: RoundPairing]\n * @returns {Object} {\n *   hist: [lady-i: [gent-i: { odds, rounds together }]]\n *   tempScore: [round-i: number of confirmed matches]\n *   calculatedEquations: [i: { pairs, score }]\n * } */\nconst useHist = (\n  len: number,\n  matches: number[],\n  noMatch: boolean[][],\n  roundPairings: RoundPairing[],\n) => {\n  // state\n  const hist: AYTOHist[][] = [];\n  const tempScore: number[] = [];\n  const totals: number[] = [];\n\n  // create histogram\n  roundPairings.forEach(({ pairs }, ri) => {\n    tempScore[ri] = 0;\n    totals[ri] = len;\n\n    pairs.forEach((gi, li) => {\n      // noMatch increases odds of the rest\n      if (li < 0 || gi < 0 || noMatch[li][gi]) {\n        totals[ri] -= 1;\n      }\n      // remove matches\n      if (matches[li] === gi) {\n        tempScore[ri] += 1;\n        totals[ri] -= 1;\n      }\n      // verify data obj\n      if (!hist[li]) {\n        hist[li] = [];\n      }\n      if (!hist[li][gi]) {\n        hist[li][gi] = { odds: 0, oddsWeight: 0, rounds: [] };\n      }\n      // histogram\n      hist[li][gi].rounds.push(ri);\n    });\n  });\n\n  // temp state\n  const dict: AYTODict = {};\n\n  // with histogram made, time to get some stats\n  roundPairings.forEach(({ pairs, score }, ri) => {\n    pairs.forEach((gi, li) => {\n      // ----------     odds     ---------- //\n      const histObj = hist[li][gi];\n      // 0% odds for no match\n      if (noMatch[li][gi]) {\n        return;\n      }\n      // 100% odds for match or max score\n      if (matches[li] === gi || score === len) {\n        histObj.odds = 100;\n        return;\n      }\n      // calculate odds for the round\n      const odds = totals[ri]\n        ? ((score - tempScore[ri]) * 100) / totals[ri]\n        : 0;\n      // assign first odds\n      if (histObj.oddsWeight === 0) {\n        histObj.odds = Math.floor(odds);\n      } else if (!odds || !histObj.odds) {\n        // if odds for either are 0\n        histObj.odds = 0;\n      } else {\n        // rolling average\n        histObj.odds = Math.floor(\n          (histObj.odds * histObj.oddsWeight + odds) / (histObj.oddsWeight + 1),\n        );\n      }\n      // update odds weight\n      histObj.oddsWeight += 1;\n\n      // ----------     equations     ---------- //\n      // only care about repeats\n      if (histObj.rounds.length < 2) {\n        return;\n      }\n      // create key from round combination (length)\n      const keys = [\n        histObj.rounds.reduce((acc, val) => acc + val.toString(), \"\"),\n      ];\n      // add every pair of 2 rounds as keys\n      for (let i = ri + 1; i < histObj.rounds.length; i += 1) {\n        keys.push(`${histObj.rounds[ri]}${histObj.rounds[i]}`);\n      }\n      // NOTE: length (l) and 2 are covered, anything in-between is not directly considered (still covered in 2s)\n      keys.forEach((key) => {\n        // put that in the dictionary\n        if (!dict[key]) {\n          dict[key] = { couples: [], score };\n        }\n        // calculate equations\n        let canAdd = true;\n        dict[key].couples.forEach(([tli, tgi]) => {\n          canAdd = canAdd && tli !== li && tgi !== gi;\n        });\n        if (canAdd) {\n          dict[key].couples.push([li, gi]);\n        }\n        dict[key].score = Math.min(score - tempScore[ri], dict[key].score);\n      });\n    });\n  });\n\n  // more state\n  const calculatedEquations: RoundPairing[] = [];\n\n  // convert qualifying couples to more equations\n  Object.keys(dict).forEach((key) => {\n    if (\n      // only care about repeat couples\n      dict[key].couples.length > 1 &&\n      // where there are more couples than score available\n      dict[key].couples.length > dict[key].score\n    ) {\n      const tempPairs: number[] = [];\n      // convert to RP\n      dict[key].couples.forEach(([li, gi]) => {\n        tempPairs[li] = gi;\n      });\n      // validate new equation doesn't already exist\n      let isRepeat = false;\n      calculatedEquations.forEach(({ pairs, score }, ci) => {\n        let hasExactRepeat = true;\n        let hasRoughRepeat = true;\n        for (let i = 0; i < pairs.length; i += 1) {\n          if (tempPairs[i] !== pairs[i]) {\n            if (tempPairs[i]) {\n              hasExactRepeat = false;\n              hasRoughRepeat = false;\n            } else {\n              // new equation has fewer couples, may still be a match but is missing some keys\n              hasExactRepeat = false;\n            }\n          }\n        }\n        isRepeat =\n          // compare against itself\n          isRepeat ||\n          // exclude if exact repeat\n          hasExactRepeat ||\n          // exclude if rough repeat with higher or equal score\n          (hasRoughRepeat && dict[key].score >= score);\n        // if exact repeat, pick the lower of the 2 scores\n        if (hasExactRepeat) {\n          calculatedEquations[ci].score = Math.min(score, dict[key].score);\n        }\n      });\n      // Add RP to equations\n      if (!isRepeat) {\n        calculatedEquations.push({\n          pairs: tempPairs,\n          score: dict[key].score,\n        });\n      }\n    }\n  });\n\n  return {\n    hist,\n    tempScore,\n    calculatedEquations,\n  };\n};\n\nexport default useHist;\n","import * as React from \"react\";\nimport { useAtom, useAtomValue } from \"jotai\";\nimport Controls from \"./Controls\";\nimport Table from \"./table/Table\";\nimport Analysis from \"./analysis/Analysis\";\nimport aYTOAtom, { aytoPlayerRead } from \"../../../jotai/are-you-the-one-state\";\nimport useHist from \"./histogram/useHist\";\n\nconst AreYouTheOne = () => {\n  const [{ matches, noMatch, roundPairings }, setState] = useAtom(aYTOAtom);\n  const { ladies, gents, options } = useAtomValue(aytoPlayerRead);\n\n  // state\n  const [ri, setRi] = React.useState(0);\n  const { hist, tempScore, calculatedEquations } = useHist(\n    ladies.length,\n    matches,\n    noMatch,\n    roundPairings,\n  );\n\n  // handlers\n  const handleSelect = (selected: number) => {\n    setRi(selected);\n  };\n\n  const handleUpdateScore = (score: number) => {\n    const newRoundPairing = !roundPairings[ri]\n      ? { pairs: [], score: 0 }\n      : { ...roundPairings[ri] };\n    newRoundPairing.score = score;\n    const newRoundPairings = [...roundPairings];\n    newRoundPairings[ri] = newRoundPairing;\n    setState({ matches, noMatch, roundPairings: newRoundPairings });\n  };\n\n  const handleUpdateNoMatch = (li: number, gi: number) => {\n    const newMatches = noMatch.map((gentArray: boolean[]) => [...gentArray]);\n    // if array for lady doesn't exist yet, create skeleton one\n    if (!newMatches[li]) {\n      newMatches[li] = [];\n    }\n    // assign no match\n    newMatches[li][gi] = !newMatches[li][gi];\n    // update state\n    setState({ matches, noMatch: newMatches, roundPairings });\n  };\n\n  const handleBlackout = (pairs: number[]) => {\n    // create immutable copy for storage\n    const newNoMatches = noMatch.map((gentArray: boolean[]) => [...gentArray]);\n    let newScore = 0;\n    // no match for all pairs\n    pairs.forEach((gi, li) => {\n      if (matches[li] === gi) {\n        newScore += 1;\n      } else if (!noMatch[li][gi]) {\n        // if array for lady doesn't exist yet, create skeleton one\n        if (!newNoMatches[li]) {\n          newNoMatches[li] = [];\n        }\n        // assign no match\n        newNoMatches[li][gi] = true;\n      }\n    });\n    const newRoundPairing = { ...roundPairings[ri], score: newScore };\n    const newRoundPairings = [...roundPairings];\n    newRoundPairings[ri] = newRoundPairing;\n    // update state\n    setState({\n      matches,\n      noMatch: newNoMatches,\n      roundPairings: newRoundPairings,\n    });\n  };\n\n  const handleUpdatePairs = (rn: number, li: number, gi: number) => {\n    const newRoundPairing = !roundPairings[rn]\n      ? { pairs: [], score: 0 }\n      : { ...roundPairings[rn], pairs: [...roundPairings[rn].pairs] };\n    newRoundPairing.pairs[li] = gi;\n    const newRoundPairings = [...roundPairings];\n    newRoundPairings[ri] = newRoundPairing;\n    setState({ matches, noMatch, roundPairings: newRoundPairings });\n  };\n\n  const handleUpdateMatch = (li: number, gi: number) => {\n    const newMatches = [...matches];\n    const newNoMatches = noMatch.map((gentArray: boolean[]) => [...gentArray]);\n    // if array for lady doesn't exist yet, create skeleton one\n    if (!newNoMatches[li]) {\n      newNoMatches[li] = [];\n    }\n    // assign new match\n    newMatches[li] = gi;\n    // make all gent options no matches\n    for (let i = 0; i < gents.length; i += 1) {\n      newNoMatches[li][i] = i !== gi;\n    }\n    // make all ladies options no matches\n    for (let i = 0; i < ladies.length; i += 1) {\n      if (!newNoMatches[i]) {\n        newNoMatches[i] = [];\n      }\n      newNoMatches[i][gi] = i !== li;\n    }\n\n    const numMatches = newMatches.reduce(\n      (acc, matchStatus) => (matchStatus >= 0 ? acc + 1 : acc),\n      0,\n    );\n\n    // update round pairings\n    const newRoundPairings = [...roundPairings];\n    for (let rn = 0; rn < options.length - 1; rn += 1) {\n      const { pairs, score } = roundPairings[rn] || {\n        pairs: [],\n        score: numMatches,\n      };\n      if (!roundPairings[rn] || pairs[li] < 0 || pairs[li] === undefined) {\n        const newRoundPairing = {\n          pairs: [...pairs],\n          score: Math.max(score, numMatches),\n        };\n        newRoundPairing.pairs[li] = gi;\n        newRoundPairings[rn] = newRoundPairing;\n      }\n    }\n\n    // update state\n    setState({\n      matches: newMatches,\n      noMatch: newNoMatches,\n      roundPairings: newRoundPairings,\n    });\n  };\n\n  return (\n    <>\n      <h1>Are You The One?</h1>\n      <Controls\n        onSelect={handleSelect}\n        options={options}\n        ri={ri}\n        roundPairings={roundPairings}\n        onBlackout={handleBlackout}\n        updateScore={handleUpdateScore}\n      />\n      <br />\n      <Table\n        gents={gents}\n        hist={hist}\n        ladies={ladies}\n        matches={matches}\n        noMatch={noMatch}\n        options={options}\n        ri={ri}\n        roundPairings={roundPairings}\n        updateMatch={handleUpdateMatch}\n        updateNoMatch={handleUpdateNoMatch}\n        updatePairs={handleUpdatePairs}\n      />\n      <Analysis\n        calculatedEquations={calculatedEquations}\n        gents={gents}\n        hist={hist}\n        ladies={ladies}\n        matches={matches}\n        noMatch={noMatch}\n        roundPairings={roundPairings}\n        tempScore={tempScore}\n      />\n    </>\n  );\n};\n\nexport default AreYouTheOne;\n"],"names":["aytoSeasons","seasons","options","DEFAULT_SEASON","newAYTOState","season","aytoSeasonAtom","atomWithStorage","areYouTheOneAtom","aytoSeasonState","atom","get","_get","set","newSeason","aytoPlayerRead","getScore","value","ctrlStyles","Controls","onSelect","ri","roundPairings","onBlackout","updateScore","setSeason","useAtom","score","_a","selectSeason","e","selectMatchup","handleBlackout","incrScore","decrScore","jsxs","FormControl","jsx","InputLabel","Select","option","i","MenuItem","Fragment","Button","ButtonGroup","TBDialog","open","content","onMatch","onNoMatch","onCancel","Dialog","DialogTitle","DialogContent","DialogActions","getButtonValues","isTB","noMatch","match","isPaired","histValue","variant","color","AYTOTableRow","gents","histLi","lMatch","noMatchLi","lPair","lName","onClick","TableRow","TableCell","gName","gi","histOdds","num","s","nm","AYTOTableBody","hist","ladies","matches","updateMatch","updateNoMatch","updatePairs","setOpen","React.useState","tbi","setTBI","handleClick","roundi","ladyi","genti","tempLi","handleCancel","handleMatch","li","handleNoMatch","TableBody","AYTOTable","other","TableContainer","Paper","Table","TableHead","name","MatchedStack","pairs","tempScore","showAll","equation","numNoMatches","numMatchAndRepeat","isRepeat","label","chip","Chip","Stack","CalculatedStack","cei","Analysis","calculatedEquations","setShowAll","handleSwitch","event","FormControlLabel","Switch","useHist","len","totals","dict","histObj","odds","keys","acc","val","key","canAdd","tli","tgi","tempPairs","ci","hasExactRepeat","hasRoughRepeat","AreYouTheOne","setState","aYTOAtom","useAtomValue","setRi","handleSelect","selected","handleUpdateScore","newRoundPairing","newRoundPairings","handleUpdateNoMatch","newMatches","gentArray","newNoMatches","newScore","handleUpdatePairs","rn","handleUpdateMatch","numMatches","matchStatus"],"mappings":"muBACO,MAAMA,EAAc,CACzB,CACE,OAAQ,CACN,QACA,WACA,WACA,WACA,OACA,UACA,QACA,QACA,UACA,QACF,EACA,MAAO,CACL,OACA,MACA,UACA,UACA,SACA,QACA,OACA,KACA,OACA,KAAA,CAEJ,EACA,CACE,OAAQ,CACN,aACA,SACA,SACA,YACA,QACA,UACA,QACA,UACA,QACA,SACA,OACF,EACA,MAAO,CACL,OACA,UACA,UACA,SACA,QACA,UACA,OACA,SACA,SACA,OAAA,CAEJ,EACA,CACE,OAAQ,CACN,SACA,SACA,UACA,SACA,QACA,OACA,WACA,UACA,UACA,QACF,EACA,MAAO,CACL,OACA,SACA,QACA,SACA,QACA,SACA,OACA,SACA,QACA,KAAA,CAEJ,EACA,CACE,OAAQ,CACN,SACA,UACA,OACA,YACA,QACA,SACA,SACA,SACA,OACA,UACF,EACA,MAAO,CACL,OACA,MACA,UACA,WACA,OACA,SACA,UACA,MACA,UACA,OAAA,CAEJ,EACA,CACE,OAAQ,CACN,SACA,WACA,MACA,SACA,SACA,MACA,OACA,UACA,UACA,SACA,SACF,EACA,MAAO,CACL,QACA,UACA,SACA,SACA,SACA,OACA,UACA,OACA,UACA,OACA,OAAA,CAEJ,EACA,CACE,OAAQ,CACN,SACA,SACA,SACA,UACA,QACA,OACA,SACA,SACA,QACA,OACA,KACF,EACA,MAAO,CACL,UACA,UACA,QACA,UACA,QACA,MACA,SACA,QACA,UACA,UACA,OAAA,CAEJ,EACA,CACE,OAAQ,CACN,OACA,OACA,OACA,UACA,QACA,QACA,SACA,QACA,SACA,QACA,UACF,EACA,MAAO,CACL,SACA,QACA,MACA,SACA,QACA,QACA,MACA,SACA,QACA,QACA,KAAA,CAEJ,EACA,CACE,OAAQ,CACN,SACA,SACA,KACA,WACA,WACA,MACA,WACA,aACA,UACA,MACA,QACF,EACA,MAAO,CACL,OACA,UACA,OACA,UACA,SACA,MACA,UACA,SACA,QACA,SACA,MAAA,CAEJ,EACA,CACE,OAAQ,C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"}