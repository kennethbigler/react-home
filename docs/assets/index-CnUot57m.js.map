{"version":3,"file":"index-CnUot57m.js","sources":["../../src/jotai/poker-state.ts","../../src/components/games/poker/usePoker.ts","../../src/components/games/poker/Header.tsx","../../src/components/games/poker/Poker.tsx"],"sourcesContent":["import { atom } from \"jotai\";\nimport { atomWithStorage } from \"jotai/utils\";\nimport turnAtom, { TurnState } from \"./turn-atom\";\nimport playerAtom, { DBPlayer } from \"./player-atom\";\n\nexport enum PokerGameFunctions {\n  DISCARD_CARDS = \"Discard Cards\",\n  END_TURN = \"End Turn\",\n  NEW_GAME = \"New Game\",\n  START_GAME = \"Start Game\",\n}\nexport interface PokerState {\n  gameFunctions: PokerGameFunctions[];\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  gameOver: boolean;\n}\n\n/** function to generate the state of a new game */\nexport const newPokerGameState = (): PokerState => ({\n  gameFunctions: [PokerGameFunctions.START_GAME],\n  cardsToDiscard: [],\n  hideHands: true,\n  gameOver: false,\n});\n\nexport const pokerAtom = atomWithStorage(\"pokerAtom\", newPokerGameState());\n\ninterface PokerGameState {\n  poker: PokerState;\n  turn?: TurnState;\n  players?: DBPlayer[];\n}\n\nconst pokerState = atom(\n  (get) => {\n    const poker = get(pokerAtom);\n    const turn = get(turnAtom);\n    const players = get(playerAtom).slice(0, 5);\n\n    return { poker, turn, players };\n  },\n  (get, set, { poker, turn, players }: PokerGameState) => {\n    set(pokerAtom, poker);\n\n    if (turn) {\n      set(turnAtom, turn);\n    }\n    if (players) {\n      const dataPlayers = get(playerAtom);\n      set(playerAtom, [...players, dataPlayers[5], dataPlayers[6]]);\n    }\n  },\n);\n\nexport default pokerState;\n","import { useAtom, useSetAtom } from \"jotai\";\nimport { shuffleAtom, dealPokerAtom, DBCard } from \"../../../jotai/deck-state\";\nimport pokerState, {\n  PokerGameFunctions as PGF,\n  newPokerGameState,\n} from \"../../../jotai/poker-state\";\nimport { DBPlayer } from \"../../../jotai/player-atom\";\n\n/** Rankings:\n *   Straight Flush  8\n *   4 of a Kind     7\n *   Full House      6\n *   Flush           5\n *   Straight        4\n *   3 of a Kind     3\n *   2 Pair          2\n *   1 Pair          1\n *   High Card       0\n * @return {number} value is a base 14 string, to be converted into base 10 for comparison */\nexport const rankHand = (hand: DBCard[], hist: number[]): number => {\n  // iterate through and look for hands with multiple cards\n  if (hist.includes(4)) {\n    return 7; // 4 of a kind\n  }\n  // Check for hands with sets of 3 or 2 cards\n  const has3 = hist.includes(3);\n  const i = hist.indexOf(2);\n  const has2 = i !== -1;\n  if (has3 && has2) {\n    return 6; // full house\n  }\n  if (has3) {\n    return 3; // 3 of a kind\n  }\n  if (has2 && hist.includes(2, i + 1)) {\n    return 2; // 2 pair\n  }\n  if (has2) {\n    return 1; // 1 pair\n  }\n  // all single cards\n  // check for straight\n  const isStraight =\n    hist.lastIndexOf(1) - hist.indexOf(1) === 4 || // (end - start = 4)\n    (hist[12] && hist[0] && hist[1] && hist[2] && hist[3]); // (A,2,3,4,5)\n  // check for flush\n  let isFlush = true;\n  for (let j = 0; j < hand.length; j += 1) {\n    if (hand[j].suit !== hand[0].suit) {\n      isFlush = false;\n      break;\n    }\n  }\n  if (isStraight && isFlush) {\n    return 8; // straight flush\n  }\n  if (isFlush) {\n    return 5; // flush\n  }\n  if (isStraight) {\n    return 4; // straight\n  }\n  return 0; // high card\n};\n\nexport const getHistogram = (hand: DBCard[]): number[] => {\n  // Histogram for the cards\n  const hist = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  // put hand into the histogram\n  hand.forEach((card) => {\n    if (card) {\n      hist[card.weight - 2] += 1; // 2-14 - 2 = 0-12\n    }\n  });\n  return hist;\n};\n\n/**\n * Compare hands to see who wins\n * @param {array} hand - array of card objects\n * Hands is assigned a weight based on hand, then card values\n * Compare values to see who wins\n * @return {number} value is a base 14 string, to be converted into base 10 for comparison\n */\nexport const evaluate = (hand: DBCard[]): string => {\n  const hist = getHistogram(hand);\n  const rank = rankHand(hand, hist);\n\n  const cards = [\"0\", \"0\", \"0\", \"0\", \"0\"];\n  let total = 0; // track number of cards counted\n  let numCards = 4; // number of same cards in a set\n  let i = 0; // iterator\n  let last = -1; // track location of last in numCards set\n\n  // get card values and display them in order of importance\n  while (total < 5) {\n    const num = hist.indexOf(numCards, last + 1);\n    if (num === -1) {\n      numCards -= 1;\n      last = -1;\n    } else {\n      cards[i] = num.toString(14);\n      i += 1;\n      total += numCards;\n      last = num;\n    }\n  }\n  return `${rank}${cards.reduce((a, c) => `${a}${c}`)}`;\n};\n\n/** function to remove n number of cards */\nexport const getCardsToDiscard = (\n  n: number,\n  hist: number[],\n  hand: DBCard[],\n): number[] => {\n  const nextCardsToDiscard: number[] = [];\n  const cardValues = [hist.indexOf(1)];\n  // find cards without pairs, starting with the smallest\n  for (let i = 1; i < n; i += 1) {\n    cardValues[i] = hist.indexOf(1, cardValues[i - 1] + 1);\n  }\n  // find hand index of individual cards\n  for (let i = 0; i < hand.length; i += 1) {\n    for (let j = 0; j < cardValues.length; j += 1) {\n      if (hand[i].weight - 2 === cardValues[j]) {\n        nextCardsToDiscard.push(i);\n        break;\n      }\n    }\n  }\n  return nextCardsToDiscard;\n};\n\n/** computer play algorithm:\n * PAIRS\n * draw 0 on 4 of a kind\n * draw 0 on full house\n * draw 1 on 3 of a kind, keep higher of 2\n * draw 1 on 2 pair\n * draw 3 on 2 of a kind\n *\n * This is a nice to have, for now we only follow the first half\n * STRAIGHT/FLUSH\n * draw 0 on straight\n * draw 0 on flush\n * draw 0 on straight flush\n * if 1 away from sf -> draw 1\n * if 1 away from S -> draw 1 if 5+ players, else regular hand\n * if 1 away from F -> draw 1 if 5+ players, else regular hand\n *\n * REGULAR HAND\n * if K / A -> draw 4\n * else draw 5\n */\nexport const computer = (\n  player: DBPlayer,\n  discard: (cardsToDiscardInDB: number[], player: DBPlayer) => void,\n) => {\n  if (player.hands.length < 1) {\n    return player;\n  }\n  const hand = player.hands[0].cards;\n  const hist = getHistogram(hand);\n  const rank = rankHand(hand, hist);\n\n  switch (rank) {\n    case 0: /* draw 4-5 on high card */ {\n      const nextCardsToDiscard =\n        hist.lastIndexOf(1) >= 11\n          ? getCardsToDiscard(4, hist, hand) // if ace || king draw 4\n          : [0, 1, 2, 3, 4]; // otherwise, draw all 5\n      discard(nextCardsToDiscard, player);\n      break;\n    }\n    case 1: /* draw 3 on 2 of a kind */ {\n      const nextCardsToDiscard = getCardsToDiscard(3, hist, hand);\n      discard(nextCardsToDiscard, player);\n      break;\n    }\n    case 2: /* draw 1 on 3 of a kind */\n    case 3: /* draw 1 on 2 Pair */ {\n      const nextCardsToDiscard = getCardsToDiscard(1, hist, hand);\n      discard(nextCardsToDiscard, player);\n      break;\n    }\n    case 4: // draw 0 on straight\n    case 5: // draw 0 on flush\n    case 6: // draw 0 on full house\n    case 7: // draw 0 on 4 of a kind\n    case 8: // draw 0 on straight flush\n    default:\n      break;\n  }\n};\n\nconst findAndPayWinner = (players: DBPlayer[]): void => {\n  let winner = { val: 0, id: 0 };\n\n  players.forEach((player) => {\n    if (player.hands[0]?.cards.length < 1) {\n      return;\n    }\n\n    const playerScore = parseInt(evaluate(player.hands[0].cards), 14);\n    if (playerScore > winner.val) {\n      winner = { val: playerScore, id: player.id };\n    }\n  });\n\n  players.forEach((player, i) => {\n    if (player.id === winner.id) {\n      const newPlayer = { ...player, status: \"win\", money: player.money + 20 };\n      players[i] = newPlayer;\n    } else {\n      const newPlayer = { ...player, status: \"lose\", money: player.money - 5 };\n      players[i] = newPlayer;\n    }\n  });\n};\n\nconst usePoker = () => {\n  const [\n    {\n      poker: { cardsToDiscard, gameFunctions, gameOver, hideHands },\n      turn,\n      players,\n    },\n    setState,\n  ] = useAtom(pokerState);\n  const shuffle = useSetAtom(shuffleAtom);\n  const deal = useSetAtom(dealPokerAtom);\n\n  // ----------     bot automation handlers     ---------- //\n  /** iterate through array, removing each index number from hand\n   * then add new cards to the hand */\n  const discard = (cardsToDiscardInDB: number[], player: DBPlayer) => {\n    const { hands, id } = player;\n    const cards = [...hands[0].cards];\n\n    cardsToDiscardInDB.sort().forEach((dIdx, i) => {\n      cards.splice(dIdx - i, 1);\n    });\n\n    deal(cardsToDiscardInDB.length, id, cards);\n  };\n\n  const checkUpdate = () => {\n    if (!hideHands && !gameOver && players[turn.player]?.isBot) {\n      const newPlayers = [...players];\n\n      // returns immutable new players\n      newPlayers.forEach((player: DBPlayer, i: number) => {\n        if (turn.player <= i) {\n          computer(player, discard);\n        }\n      });\n\n      // modifies money in newPlayers obj\n      findAndPayWinner(newPlayers);\n\n      // update state once\n      setState({\n        poker: {\n          cardsToDiscard,\n          gameFunctions: [PGF.NEW_GAME],\n          gameOver: true,\n          hideHands,\n        },\n        players: newPlayers,\n        turn: { player: 0, hand: 0 },\n      });\n    }\n  };\n\n  // ----------     player handlers     ---------- //\n  /** function to finish betting and start the game */\n  const startGame = () => {\n    // shuffle the deck\n    shuffle();\n    // deal the hands\n    players.forEach((player: DBPlayer) => {\n      // New Hand\n      deal(5, player.id);\n    });\n    setState({\n      poker: {\n        cardsToDiscard,\n        gameFunctions: [PGF.DISCARD_CARDS],\n        gameOver,\n        hideHands: false,\n      },\n    });\n  };\n\n  /** helper function wrapping discard, meant for UI */\n  const handleDiscard = (\n    tempPlayers: DBPlayer[],\n    tempTurn: number,\n    tempCardsToDiscard: number[],\n  ) => {\n    discard(tempCardsToDiscard, tempPlayers[tempTurn]);\n    setState({\n      poker: {\n        cardsToDiscard: [],\n        gameFunctions: [PGF.END_TURN],\n        gameOver,\n        hideHands,\n      },\n    });\n  };\n\n  /** function to route click actions */\n  const handleGameFunctionClick = (type: PGF) => {\n    const newPlayers: DBPlayer[] = [];\n\n    switch (type) {\n      case PGF.DISCARD_CARDS:\n        handleDiscard(players, turn.player, cardsToDiscard);\n        break;\n      case PGF.END_TURN:\n        setState({\n          poker: {\n            cardsToDiscard: [],\n            gameFunctions: [PGF.DISCARD_CARDS],\n            gameOver,\n            hideHands,\n          },\n          turn: { player: turn.player + 1, hand: 0 },\n        });\n        break;\n      case PGF.NEW_GAME:\n        players.forEach((player) =>\n          newPlayers.push({\n            ...player,\n            status: \"\",\n            hands: [],\n            bet: 5,\n          }),\n        );\n        setState({\n          poker: newPokerGameState(),\n          turn: { player: 0, hand: 0 },\n          players: newPlayers,\n        });\n        break;\n      case PGF.START_GAME:\n        startGame();\n        break;\n      default:\n        // eslint-disable-next-line no-console\n        console.error(\"Unknown Game Function: \", type);\n    }\n  };\n\n  /** function to be called on card clicks */\n  const cardClickHandler = (\n    _playerNo: number,\n    _handNo: number,\n    cardNo: number,\n  ): void => {\n    const newCardsToDiscard = [...cardsToDiscard];\n    // find card\n    const i = newCardsToDiscard.indexOf(cardNo);\n    // toggle in array\n    if (i === -1) {\n      newCardsToDiscard.push(cardNo);\n    } else {\n      newCardsToDiscard.splice(i, 1);\n    }\n    // update state\n    setState({\n      poker: {\n        cardsToDiscard: newCardsToDiscard,\n        gameFunctions,\n        gameOver,\n        hideHands,\n      },\n    });\n  };\n\n  return {\n    checkUpdate,\n    cardClickHandler,\n    cardsToDiscard,\n    gameFunctions,\n    handleGameFunctionClick,\n    gameOver,\n    hideHands,\n    players,\n    turn,\n  };\n};\n\nexport default usePoker;\n","import * as React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport PlayerMenu from \"../../common/header/PlayerMenu\";\n\nconst Header = React.memo(() => (\n  <div className=\"flex-container\">\n    <Typography variant=\"h2\" component=\"h1\" gutterBottom>\n      5 Card Draw Poker\n    </Typography>\n    <PlayerMenu />\n  </div>\n));\n\nHeader.displayName = \"Header\";\n\nexport default Header;\n","import * as React from \"react\";\nimport GameTable from \"../game-table\";\nimport usePoker from \"./usePoker\";\nimport Header from \"./Header\";\n\nconst Poker = React.memo(() => {\n  const {\n    checkUpdate,\n    cardClickHandler,\n    cardsToDiscard,\n    gameFunctions,\n    handleGameFunctionClick,\n    gameOver,\n    hideHands,\n    players,\n    turn,\n  } = usePoker();\n\n  checkUpdate();\n\n  return (\n    <>\n      <Header />\n      <GameTable\n        cardClickHandler={cardClickHandler}\n        cardsToDiscard={cardsToDiscard}\n        gameFunctions={gameFunctions}\n        onClick={handleGameFunctionClick as (name: string) => void}\n        gameOver={gameOver}\n        hideHands={hideHands}\n        isBlackJack={false}\n        players={players}\n        turn={turn}\n      />\n    </>\n  );\n});\n\nPoker.displayName = \"Poker\";\n\nexport default Poker;\n"],"names":["PokerGameFunctions","newPokerGameState","pokerAtom","atomWithStorage","pokerState","atom","get","poker","turn","turnAtom","players","playerAtom","set","dataPlayers","rankHand","hand","hist","has3","i","has2","isStraight","isFlush","j","getHistogram","card","evaluate","rank","cards","total","numCards","last","num","a","c","getCardsToDiscard","n","nextCardsToDiscard","cardValues","computer","player","discard","findAndPayWinner","winner","_a","playerScore","newPlayer","usePoker","cardsToDiscard","gameFunctions","gameOver","hideHands","setState","useAtom","shuffle","useSetAtom","shuffleAtom","deal","dealPokerAtom","cardsToDiscardInDB","hands","id","dIdx","checkUpdate","newPlayers","PGF","startGame","handleDiscard","tempPlayers","tempTurn","tempCardsToDiscard","_playerNo","_handNo","cardNo","newCardsToDiscard","type","Header","React.memo","jsxs","jsx","Typography","PlayerMenu","Poker","cardClickHandler","handleGameFunctionClick","Fragment","GameTable"],"mappings":"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"}