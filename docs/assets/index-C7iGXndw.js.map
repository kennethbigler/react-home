{"version":3,"file":"index-C7iGXndw.js","sources":["../../src/jotai/spades-atom.ts","../../src/components/games/spades/control-bar/BidPlayerRow.tsx","../../src/components/games/spades/control-bar/AddBid.tsx","../../src/components/games/spades/control-bar/ScorePlayerBox.tsx","../../src/components/games/spades/control-bar/AddScore.tsx","../../src/components/games/spades/control-bar/ControlBar.tsx","../../src/components/games/spades/ScoreTable.tsx","../../src/components/games/spades/helpers.ts","../../src/components/games/spades/useSpades.ts","../../src/components/games/spades/Spades.tsx"],"sourcesContent":["import { atomWithStorage } from \"jotai/utils\";\n\nexport const MIN_BID = 0;\nexport const MAX_BID = 13;\n\nexport interface Bid {\n  bid: number;\n  blind: boolean;\n  train: boolean;\n}\nexport type Bids = [Bid, Bid, Bid, Bid];\n\nexport interface ScoreRow {\n  start: string;\n  bid: string;\n  score1?: number;\n  bags1?: number;\n  score2?: number;\n  bags2?: number;\n}\n\ninterface SpadesState {\n  /** 0, 1, 2, 3, updates on +Score, persists over games */\n  first: number;\n  /** recent bids */\n  lastBid: Bids;\n  /** score table, updates on +Score & +Bid, resets over games */\n  data: ScoreRow[];\n}\n\nexport const defaultBid: Bid = { bid: 3, blind: false, train: false };\nconst initialState: SpadesState = {\n  first: 0,\n  lastBid: [defaultBid, defaultBid, defaultBid, defaultBid],\n  data: [],\n};\n\nconst spadesAtom = atomWithStorage(\"spadesAtom\", initialState);\n\nexport default spadesAtom;\n","import * as React from \"react\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Switch from \"@mui/material/Switch\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Add from \"@mui/icons-material/Add\";\nimport Remove from \"@mui/icons-material/Remove\";\nimport { MAX_BID, MIN_BID } from \"../../../../jotai/spades-atom\";\n\ninterface BidPlayerRowProps {\n  id: string;\n  blindTrade: number;\n  canTrain?: boolean;\n  bid: number;\n  blind: boolean;\n  train: boolean;\n  onBid: (bid: number, blind: boolean, train: boolean) => void;\n}\n\nconst BidPlayerRow = ({\n  id,\n  blindTrade,\n  canTrain,\n  bid,\n  blind,\n  train,\n  onBid,\n}: BidPlayerRowProps) => {\n  const decrBid = () => onBid(Math.max(bid - 1, MIN_BID), false, false);\n  const incrBid = () => onBid(Math.min(bid + 1, MAX_BID), false, false);\n\n  const handleBlind = (\n    _e: React.ChangeEvent<HTMLInputElement>,\n    checked: boolean,\n  ) => onBid(bid, checked, false);\n\n  const handleTrain = (\n    _e: React.ChangeEvent<HTMLInputElement>,\n    checked: boolean,\n  ) => onBid(bid, false, checked);\n\n  return (\n    <TableRow>\n      <TableCell>{id}</TableCell>\n      <TableCell align=\"center\">\n        <IconButton onClick={decrBid} disabled={bid <= MIN_BID}>\n          <Remove />\n        </IconButton>\n        {bid}\n        <IconButton onClick={incrBid} disabled={bid >= MAX_BID}>\n          <Add />\n        </IconButton>\n      </TableCell>\n      <TableCell align=\"right\">\n        <Switch\n          checked={blind}\n          inputProps={{ \"aria-label\": `P${id} Blind Nil` }}\n          onChange={handleBlind}\n          size=\"small\"\n        />\n        {blindTrade || blind ? blindTrade : \"\"}\n      </TableCell>\n      <TableCell align=\"right\">\n        {canTrain ? (\n          <Switch\n            checked={train}\n            inputProps={{ \"aria-label\": `P${id} Trains` }}\n            onChange={handleTrain}\n            size=\"small\"\n          />\n        ) : null}\n      </TableCell>\n    </TableRow>\n  );\n};\n\nexport default BidPlayerRow;\n","import * as React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport InfoPopup from \"../../../common/info-popover/InfoPopup\";\nimport BidPlayerRow from \"./BidPlayerRow\";\nimport { Bids, defaultBid } from \"../../../../jotai/spades-atom\";\n\ninterface AddBidProps {\n  blindTrade: number;\n  first: number;\n  initials: [string, string, string, string];\n  onBidSave: (bids: Bids) => void;\n}\n\nconst getBlindTrade = (blindTrade: number, n: number) =>\n  (blindTrade < 0 && (n === 0 || n === 2)) ||\n  (blindTrade > 0 && (n === 1 || n === 3))\n    ? Math.min(Math.abs(blindTrade), 3)\n    : 0;\n\nconst AddBid = ({ blindTrade, first, initials, onBidSave }: AddBidProps) => {\n  const [bids, setBids] = React.useState<Bids>([\n    defaultBid,\n    defaultBid,\n    defaultBid,\n    defaultBid,\n  ]);\n\n  const a = (first + 0) % 4;\n  const b = (first + 1) % 4;\n  const c = (first + 2) % 4;\n  const d = (first + 3) % 4;\n\n  const handleBid =\n    (n: number) => (bid: number, blind: boolean, train: boolean) => {\n      let newBid = { bid, blind, train };\n      if (blind) {\n        newBid = { bid: 0, blind, train: false };\n      } else if (train) {\n        let trainBid = 10;\n        switch (n) {\n          case a:\n            trainBid -= bids[c].bid;\n            break;\n          case b:\n            trainBid -= bids[d].bid;\n            break;\n          case c:\n            trainBid -= bids[a].bid;\n            break;\n          case d:\n          default:\n            trainBid -= bids[b].bid;\n        }\n        newBid = {\n          bid: trainBid,\n          blind: false,\n          train,\n        };\n      } else {\n        newBid = { bid, blind: false, train: false };\n      }\n      const newBids: Bids = [...bids];\n      newBids[n] = newBid;\n      setBids(newBids);\n    };\n\n  const handleSave = () => {\n    onBidSave(bids);\n    setBids([defaultBid, defaultBid, defaultBid, defaultBid]);\n  };\n\n  const bags = bids.reduce((acc, bid) => acc - bid.bid, 13);\n\n  return (\n    <InfoPopup title=\"+ Bid\" onSave={handleSave}>\n      <Table aria-label=\"Bid Table\" padding=\"none\">\n        <TableHead>\n          <TableRow>\n            <TableCell width={\"20%\"}>P</TableCell>\n            <TableCell width={\"40%\"} align=\"center\">\n              Bid ({bags} üí∞)\n            </TableCell>\n            <TableCell width={\"20%\"} align=\"center\">\n              ü¶Æ\n            </TableCell>\n            <TableCell width={\"20%\"} align=\"center\">\n              üöÇ\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <BidPlayerRow\n            id={initials[a]}\n            {...bids[a]}\n            onBid={handleBid(a)}\n            blindTrade={getBlindTrade(blindTrade, a)}\n          />\n          <BidPlayerRow\n            id={initials[b]}\n            {...bids[b]}\n            onBid={handleBid(b)}\n            blindTrade={getBlindTrade(blindTrade, b)}\n          />\n          <BidPlayerRow\n            canTrain={0 < bids[a].bid && bids[a].bid < 10}\n            id={initials[c]}\n            {...bids[c]}\n            blindTrade={getBlindTrade(blindTrade, c)}\n            onBid={handleBid(c)}\n          />\n          <BidPlayerRow\n            canTrain={0 < bids[b].bid && bids[b].bid < 10}\n            id={initials[d]}\n            {...bids[d]}\n            blindTrade={getBlindTrade(blindTrade, d)}\n            onBid={handleBid(d)}\n          />\n        </TableBody>\n      </Table>\n    </InfoPopup>\n  );\n};\n\nexport default AddBid;\n","import * as React from \"react\";\nimport { MAX_BID, MIN_BID } from \"../../../../jotai/spades-atom\";\nimport Grid from \"@mui/material/Grid2\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Add from \"@mui/icons-material/Add\";\nimport Remove from \"@mui/icons-material/Remove\";\nimport { Typography } from \"@mui/material\";\n\ninterface ScorePlayerBoxProps {\n  initial: string;\n  lastBid: number;\n  made: number;\n  setMade: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst ScorePlayerBox = ({\n  initial,\n  lastBid,\n  made,\n  setMade,\n}: ScorePlayerBoxProps) => {\n  const decrMade = () => setMade(Math.max(made - 1, MIN_BID));\n  const incrMade = () => setMade(Math.min(made + 1, MAX_BID));\n\n  return (\n    <Grid size={6}>\n      <Typography>\n        {initial} Bid: {lastBid}\n      </Typography>\n      <div>\n        Made:\n        <IconButton onClick={decrMade} disabled={made <= MIN_BID}>\n          <Remove />\n        </IconButton>\n        {made}\n        <IconButton onClick={incrMade} disabled={made >= MAX_BID}>\n          <Add />\n        </IconButton>\n      </div>\n    </Grid>\n  );\n};\n\nexport default ScorePlayerBox;\n","import * as React from \"react\";\nimport Grid from \"@mui/material/Grid2\";\nimport Typography from \"@mui/material/Typography\";\nimport InfoPopup from \"../../../common/info-popover/InfoPopup\";\nimport { Bids } from \"../../../../jotai/spades-atom\";\nimport ScorePlayerBox from \"./ScorePlayerBox\";\n\ninterface AddScoreProps {\n  initials: [string, string, string, string];\n  lastBid: Bids;\n  onScoreSave: (mades: [number, number, number, number]) => void;\n}\n\nconst AddScore = ({ initials, lastBid, onScoreSave }: AddScoreProps) => {\n  const [made0, setMade0] = React.useState(3);\n  const [made1, setMade1] = React.useState(3);\n  const [made2, setMade2] = React.useState(3);\n  const [made3, setMade3] = React.useState(3);\n\n  const total = made0 + made1 + made2 + made3;\n\n  const handleAddScore = () => {\n    onScoreSave([made0, made1, made2, made3]);\n    setMade0(3);\n    setMade1(3);\n    setMade2(3);\n    setMade3(3);\n  };\n\n  const handleSave = total === 13 ? handleAddScore : undefined;\n\n  return (\n    <InfoPopup title=\"+ Score\" onSave={handleSave}>\n      <Typography\n        color={total === 13 ? \"success\" : \"warning\"}\n        align=\"center\"\n        marginBottom={1}\n      >\n        {total !== 13 && \"‚ö†Ô∏è\"} Tricks: {total}\n      </Typography>\n      <Grid container spacing={2}>\n        <ScorePlayerBox\n          initial={initials[0]}\n          lastBid={lastBid[0].bid}\n          made={made0}\n          setMade={setMade0}\n        />\n        <ScorePlayerBox\n          initial={initials[1]}\n          lastBid={lastBid[1].bid}\n          made={made1}\n          setMade={setMade1}\n        />\n        <ScorePlayerBox\n          initial={initials[2]}\n          lastBid={lastBid[2].bid}\n          made={made2}\n          setMade={setMade2}\n        />\n        <ScorePlayerBox\n          initial={initials[3]}\n          lastBid={lastBid[3].bid}\n          made={made3}\n          setMade={setMade3}\n        />\n      </Grid>\n    </InfoPopup>\n  );\n};\n\nexport default AddScore;\n","import { Bids } from \"../../../../jotai/spades-atom\";\nimport AddBid from \"./AddBid\";\nimport AddScore from \"./AddScore\";\n\ninterface ControlBarProps {\n  blindTrade: number;\n  first: number;\n  initials: [string, string, string, string];\n  lastBid: Bids;\n  onBidSave: (bids: Bids) => void;\n  onScoreSave: (mades: [number, number, number, number]) => void;\n}\n\nconst ControlBar = ({\n  blindTrade,\n  first,\n  initials,\n  lastBid,\n  onBidSave,\n  onScoreSave,\n}: ControlBarProps) => (\n  <div className=\"flex-container\" style={{ margin: \"20px 0\" }}>\n    <AddBid\n      blindTrade={blindTrade}\n      first={first}\n      initials={initials}\n      onBidSave={onBidSave}\n    />\n    <AddScore initials={initials} lastBid={lastBid} onScoreSave={onScoreSave} />\n  </div>\n);\n\nexport default ControlBar;\n","import Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { ScoreRow } from \"../../../jotai/spades-atom\";\n\ninterface ScoreTableProps {\n  initials: [string, string, string, string];\n  data: ScoreRow[];\n}\n\nconst getScoreText = (score?: number) => {\n  if (score === undefined || score === 0) {\n    return \"\";\n  } else if (score > 0) {\n    return `${score > 100 ? \"üéâ \" : \"\"}${score}`;\n  } else {\n    return `${score}0 + `;\n  }\n};\n\nconst ScoreTable = ({ initials, data }: ScoreTableProps) => (\n  <Table aria-label=\"Bid Table\">\n    <TableHead>\n      <TableRow>\n        <TableCell width={\"10%\"}>ü•á</TableCell>\n        <TableCell>\n          Bid\n          <br />({initials[0] + initials[1] + initials[2] + initials[3]})\n        </TableCell>\n        <TableCell>{initials[0] + initials[2]}</TableCell>\n        <TableCell>{initials[1] + initials[3]}</TableCell>\n      </TableRow>\n    </TableHead>\n    <TableBody>\n      {data.map((s, i) => (\n        <TableRow key={i}>\n          <TableCell\n            padding={i === data.length - 1 ? \"none\" : undefined}\n            align=\"center\"\n          >\n            {s.start}\n            {i === data.length - 1 && (s.score1 ? \"üÉè\" : \"ü•á\")}\n          </TableCell>\n          <TableCell>{s.bid}</TableCell>\n          <TableCell>\n            {getScoreText(s.score1)}\n            {s.bags1}\n          </TableCell>\n          <TableCell>\n            {getScoreText(s.score2)}\n            {s.bags2}\n          </TableCell>\n        </TableRow>\n      ))}\n    </TableBody>\n  </Table>\n);\n\nexport default ScoreTable;\n","interface ScoreData {\n  bid: number;\n  blind: boolean;\n  train: boolean;\n  made: number;\n}\n\nconst getScore = (\n  p1: ScoreData,\n  p2: ScoreData,\n  score: number,\n  bags: number,\n) => {\n  // double blind nil\n  if (p1.blind && p2.blind) {\n    if (p1.made === 0 && p2.made === 0) {\n      return { score: score + 80, bags };\n    } else {\n      return { score, bags: bags + p1.made + p2.made };\n    }\n  }\n  // double nil\n  if (p1.bid === 0 && p2.bid === 0) {\n    // 1 blind 1 normal\n    if (p1.blind || p2.blind) {\n      if (p1.made === 0 && p2.made === 0) {\n        return { score: score + 60, bags };\n      } else if ((p1.blind && p1.made === 0) || (p2.blind && p2.made === 0)) {\n        return { score: score + 30, bags: bags + p1.made + p2.made };\n      } else if (p1.made === 0 || p2.made === 0) {\n        return { score, bags: bags + p1.made + p2.made };\n      } else {\n        return { score: score - 30, bags: bags + p1.made + p2.made };\n      }\n    }\n    // 2 normal\n    if (p1.made === 0 && p2.made === 0) {\n      return { score: score + 40, bags };\n    } else if (p1.made === 0 || p2.made === 0) {\n      return { score, bags: bags + p1.made + p2.made };\n    } else {\n      return { score: score - 20, bags: bags + p1.made + p2.made };\n    }\n  }\n  let newScore = 0;\n  let newBags = 0;\n  // trains\n  if ((p1.train || p2.train) && p1.made + p2.made >= 10) {\n    newScore = 20;\n    newBags = p1.made + p2.made - 10;\n  } else {\n    // eval nils\n    if (p1.bid === 0) {\n      if (p1.made === 0) {\n        newScore += p1.blind ? 20 : 10;\n      } else {\n        newScore -= 10;\n        newBags += p1.made;\n      }\n    } else if (p2.bid === 0) {\n      if (p2.made === 0) {\n        newScore += p2.blind ? 20 : 10;\n      } else {\n        newScore -= 10;\n        newBags += p2.made;\n      }\n    }\n    // eval group score\n    const teamBid = p1.bid + p2.bid;\n    const teamMade = (p1.bid > 0 ? p1.made : 0) + (p2.bid > 0 ? p2.made : 0);\n    if (teamMade >= teamBid) {\n      newScore += teamBid;\n      newBags += teamMade - teamBid;\n    } else {\n      newScore -= teamBid;\n    }\n  }\n  // check for bag out\n  if (bags + newBags >= 10) {\n    newScore -= 9;\n    newBags -= 10;\n  }\n  // return\n  return { score: score + newScore, bags: bags + newBags };\n};\nexport default getScore;\n","import { useAtom, useAtomValue } from \"jotai\";\nimport playerAtom from \"../../../jotai/player-atom\";\nimport scoreboardAtom, { Bid, defaultBid } from \"../../../jotai/spades-atom\";\nimport getScore from \"./helpers\";\n\nconst useSpades = () => {\n  const players = useAtomValue(playerAtom);\n  const [{ first, lastBid, data }, setScoreboard] = useAtom(scoreboardAtom);\n\n  const initials: [string, string, string, string] = [\n    players[0].name[0],\n    players[1].name[0],\n    players[2].name[0],\n    players[3].name[0],\n  ];\n\n  /** sets a new data entry with first and bid info of data, updates first */\n  const addBid = (bids: [Bid, Bid, Bid, Bid]) => {\n    // can't add bid if bid already exists, or if someone won\n    if (data[data.length - 1] && data[data.length - 1]?.score1 === undefined) {\n      return;\n    }\n    // convert bid to storage data format\n    const newData = [...data];\n    const newEntry = {\n      start: initials[first],\n      bid: bids.reduce((acc, b) => {\n        if (b.train) {\n          return acc + \"üöÇ\";\n        } else if (b.blind) {\n          return acc + \"ü¶Æ\";\n        } else if (b.bid === 0) {\n          return acc + \"üö´\";\n        } else if (b.bid >= 10) {\n          return acc + `,${b.bid},`;\n        } else {\n          return acc + b.bid.toString();\n        }\n      }, \"\"),\n    };\n    newData.push(newEntry);\n    // update first player and add data entry\n    setScoreboard({ first, lastBid: bids, data: newData });\n  };\n\n  /** calculates and adds score1 and score2 finishing data entry */\n  const addScore = (mades: [number, number, number, number]) => {\n    // can't add scores if no bid exists\n    if (data[data.length - 1]?.score1 !== undefined) {\n      return;\n    }\n    // convert made tricks to scores\n    const newData = [...data];\n    const { score1, bags1, score2, bags2 } = data[data.length - 2] || {};\n    // calculate scores\n    const { score: newScore1, bags: newBags1 } = getScore(\n      { ...lastBid[0], made: mades[0] },\n      { ...lastBid[2], made: mades[2] },\n      score1 || 0,\n      bags1 || 0,\n    );\n    const { score: newScore2, bags: newBags2 } = getScore(\n      { ...lastBid[1], made: mades[1] },\n      { ...lastBid[3], made: mades[3] },\n      score2 || 0,\n      bags2 || 0,\n    );\n    // update scores in data entry\n    newData[data.length - 1] = {\n      ...data[data.length - 1],\n      score1: newScore1,\n      bags1: newBags1,\n      score2: newScore2,\n      bags2: newBags2,\n    };\n    setScoreboard({\n      first: (first + 1) % 4,\n      lastBid: [defaultBid, defaultBid, defaultBid, defaultBid],\n      data: newData,\n    });\n  };\n\n  const newGame = () =>\n    setScoreboard({\n      first,\n      lastBid: [defaultBid, defaultBid, defaultBid, defaultBid],\n      data: [],\n    });\n\n  return {\n    first,\n    lastBid,\n    data,\n    initials,\n    addBid,\n    addScore,\n    newGame,\n  };\n};\n\nexport default useSpades;\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport PlayerMenu from \"../../common/header/PlayerMenu\";\nimport ControlBar from \"./control-bar/ControlBar\";\nimport ScoreTable from \"./ScoreTable\";\nimport useSpades from \"./useSpades\";\n\nconst Spades = React.memo(() => {\n  const { first, lastBid, data, initials, addBid, addScore, newGame } =\n    useSpades();\n\n  let i = data.length - 1;\n  if (data[i]?.score1 === undefined) {\n    i -= 1;\n  }\n  const diff = (data[i]?.score1 || 0) - (data[i]?.score2 || 0);\n  const blindTrade = diff > 0 ? Math.floor(diff / 10) : Math.ceil(diff / 10);\n\n  return (\n    <>\n      <div className=\"flex-container\">\n        <Typography variant=\"h2\" component=\"h1\">\n          ‚ô†Ô∏è Scores\n        </Typography>\n        <PlayerMenu />\n      </div>\n      {(data[data.length - 1]?.score1 || 0) >= 100 ||\n      (data[data.length - 1]?.score2 || 0) >= 100 ? (\n        <Button\n          fullWidth\n          color=\"error\"\n          onClick={newGame}\n          variant=\"contained\"\n          sx={{ marginTop: 2 }}\n        >\n          Reset\n        </Button>\n      ) : (\n        <ControlBar\n          blindTrade={blindTrade}\n          first={first}\n          initials={initials}\n          lastBid={lastBid}\n          onBidSave={addBid}\n          onScoreSave={addScore}\n        />\n      )}\n\n      <ScoreTable initials={initials} data={data} />\n    </>\n  );\n});\n\nSpades.displayName = \"Spades\";\n\nexport default Spades;\n"],"names":["MIN_BID","MAX_BID","defaultBid","initialState","spadesAtom","atomWithStorage","BidPlayerRow","id","blindTrade","canTrain","bid","blind","train","onBid","decrBid","incrBid","handleBlind","_e","checked","handleTrain","TableRow","jsx","TableCell","jsxs","IconButton","Remove","Add","Switch","getBlindTrade","n","AddBid","first","initials","onBidSave","bids","setBids","React.useState","a","b","c","d","handleBid","newBid","trainBid","newBids","handleSave","bags","acc","InfoPopup","Table","TableHead","TableBody","ScorePlayerBox","initial","lastBid","made","setMade","decrMade","incrMade","Grid","Typography","AddScore","onScoreSave","made0","setMade0","made1","setMade1","made2","setMade2","made3","setMade3","total","ControlBar","getScoreText","score","ScoreTable","data","s","i","getScore","p1","p2","newScore","newBags","teamBid","teamMade","useSpades","players","useAtomValue","playerAtom","setScoreboard","useAtom","scoreboardAtom","_a","newData","newEntry","mades","score1","bags1","score2","bags2","newScore1","newBags1","newScore2","newBags2","Spades","React.memo","addBid","addScore","newGame","diff","_b","_c","Fragment","PlayerMenu","_d","Button"],"mappings":"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"}