{"version":3,"file":"index-Cb_K6fDr.js","sources":["../../src/components/games/poker/helpers.ts","../../src/recoil/poker-state.ts","../../src/components/games/poker/Poker.tsx"],"sourcesContent":["import { DBCard } from \"../../../apis/Deck\";\nimport { DBPlayer } from \"../../../recoil/player-atom\";\n\n/** Rankings:\n *   Straight Flush  8\n *   4 of a Kind     7\n *   Full House      6\n *   Flush           5\n *   Straight        4\n *   3 of a Kind     3\n *   2 Pair          2\n *   1 Pair          1\n *   High Card       0\n * @return {number} value is a base 14 string, to be converted into base 10 for comparison */\nexport const rankHand = (hand: DBCard[], hist: number[]): number => {\n  // iterate through and look for hands with multiple cards\n  if (hist.includes(4)) {\n    return 7; // 4 of a kind\n  }\n  // Check for hands with sets of 3 or 2 cards\n  const has3 = hist.includes(3);\n  const i = hist.indexOf(2);\n  const has2 = i !== -1;\n  if (has3 && has2) {\n    return 6; // full house\n  }\n  if (has3) {\n    return 3; // 3 of a kind\n  }\n  if (has2 && hist.includes(2, i + 1)) {\n    return 2; // 2 pair\n  }\n  if (has2) {\n    return 1; // 1 pair\n  }\n  // all single cards\n  // check for straight\n  const isStraight =\n    hist.lastIndexOf(1) - hist.indexOf(1) === 4 || // (end - start = 4)\n    (hist[12] && hist[0] && hist[1] && hist[2] && hist[3]); // (A,2,3,4,5)\n  // check for flush\n  let isFlush = true;\n  for (let j = 0; j < hand.length; j += 1) {\n    if (hand[j].suit !== hand[0].suit) {\n      isFlush = false;\n      break;\n    }\n  }\n  if (isStraight && isFlush) {\n    return 8; // straight flush\n  }\n  if (isFlush) {\n    return 5; // flush\n  }\n  if (isStraight) {\n    return 4; // straight\n  }\n  return 0; // high card\n};\n\nexport const getHistogram = (hand: DBCard[]): number[] => {\n  // Histogram for the cards\n  const hist = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  // put hand into the histogram\n  hand.forEach((card) => {\n    if (card) {\n      hist[card.weight - 2] += 1; // 2-14 - 2 = 0-12\n    }\n  });\n  return hist;\n};\n\n/**\n * Compare hands to see who wins\n * @param {array} hand - array of card objects\n * Hands is assigned a weight based on hand, then card values\n * Compare values to see who wins\n * @return {number} value is a base 14 string, to be converted into base 10 for comparison\n */\nexport const evaluate = (hand: DBCard[]): string => {\n  const hist = getHistogram(hand);\n  const rank = rankHand(hand, hist);\n\n  const cards = [\"0\", \"0\", \"0\", \"0\", \"0\"];\n  let total = 0; // track number of cards counted\n  let numCards = 4; // number of same cards in a set\n  let i = 0; // iterator\n  let last = -1; // track location of last in numCards set\n\n  // get card values and display them in order of importance\n  while (total < 5) {\n    const num = hist.indexOf(numCards, last + 1);\n    if (num === -1) {\n      numCards -= 1;\n      last = -1;\n    } else {\n      cards[i] = num.toString(14);\n      i += 1;\n      total += numCards;\n      last = num;\n    }\n  }\n  return `${rank}${cards.reduce((a, c) => `${a}${c}`)}`;\n};\n\n/** function to remove n number of cards */\nexport const getCardsToDiscard = (\n  n: number,\n  hist: number[],\n  hand: DBCard[],\n): number[] => {\n  const nextCardsToDiscard: number[] = [];\n  const cardValues = [hist.indexOf(1)];\n  // find cards without pairs, starting with the smallest\n  for (let i = 1; i < n; i += 1) {\n    cardValues[i] = hist.indexOf(1, cardValues[i - 1] + 1);\n  }\n  // find hand index of individual cards\n  for (let i = 0; i < hand.length; i += 1) {\n    for (let j = 0; j < cardValues.length; j += 1) {\n      if (hand[i].weight - 2 === cardValues[j]) {\n        nextCardsToDiscard.push(i);\n        break;\n      }\n    }\n  }\n  return nextCardsToDiscard;\n};\n\n/** computer play algorithm:\n * PAIRS\n * draw 0 on 4 of a kind\n * draw 0 on full house\n * draw 1 on 3 of a kind, keep higher of 2\n * draw 1 on 2 pair\n * draw 3 on 2 of a kind\n *\n * This is a nice to have, for now we only follow the first half\n * STRAIGHT/FLUSH\n * draw 0 on straight\n * draw 0 on flush\n * draw 0 on straight flush\n * if 1 away from sf -> draw 1\n * if 1 away from S -> draw 1 if 5+ players, else regular hand\n * if 1 away from F -> draw 1 if 5+ players, else regular hand\n *\n * REGULAR HAND\n * if K / A -> draw 4\n * else draw 5\n */\nexport const computer = async (\n  player: DBPlayer,\n  discard: (\n    cardsToDiscardInDB: number[],\n    player: DBPlayer,\n  ) => Promise<DBPlayer>,\n): Promise<DBPlayer> => {\n  if (player.hands.length < 1) {\n    return player;\n  }\n  try {\n    const hand = player.hands[0].cards;\n    const hist = getHistogram(hand);\n    const rank = rankHand(hand, hist);\n\n    switch (rank) {\n      case 0: /* draw 4-5 on high card */ {\n        const nextCardsToDiscard =\n          hist.lastIndexOf(1) >= 11\n            ? getCardsToDiscard(4, hist, hand) // if ace || king draw 4\n            : [0, 1, 2, 3, 4]; // otherwise, draw all 5\n        const newPlayer = await discard(nextCardsToDiscard, player);\n        return newPlayer;\n      }\n      case 1: /* draw 3 on 2 of a kind */ {\n        const nextCardsToDiscard = getCardsToDiscard(3, hist, hand);\n        const newPlayer = await discard(nextCardsToDiscard, player);\n        return newPlayer;\n      }\n      case 2: /* draw 1 on 3 of a kind */\n      case 3: /* draw 1 on 2 Pair */ {\n        const nextCardsToDiscard = getCardsToDiscard(1, hist, hand);\n        const newPlayer = await discard(nextCardsToDiscard, player);\n        return newPlayer;\n      }\n      case 4: // draw 0 on straight\n      case 5: // draw 0 on flush\n      case 6: // draw 0 on full house\n      case 7: // draw 0 on 4 of a kind\n      case 8: // draw 0 on straight flush\n      default:\n        break;\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error(e);\n  }\n  return player;\n};\n\nexport const findAndPayWinner = (players: DBPlayer[]): void => {\n  let winner = { val: 0, id: 0 };\n\n  players.forEach((player) => {\n    if (player.hands[0]?.cards.length < 1) {\n      return;\n    }\n\n    const playerScore = parseInt(evaluate(player.hands[0].cards), 14);\n    if (playerScore > winner.val) {\n      winner = { val: playerScore, id: player.id };\n    }\n  });\n\n  players.forEach((player, i) => {\n    if (player.id === winner.id) {\n      const newPlayer = { ...player, status: \"win\", money: player.money + 20 };\n      players[i] = newPlayer;\n    } else {\n      const newPlayer = { ...player, status: \"lose\", money: player.money - 5 };\n      players[i] = newPlayer;\n    }\n  });\n};\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport turnAtom from \"./turn-atom\";\nimport playerAtom from \"./player-atom\";\n\nexport enum PokerGameFunctions {\n  DISCARD_CARDS = \"Discard Cards\",\n  END_TURN = \"End Turn\",\n  NEW_GAME = \"New Game\",\n  START_GAME = \"Start Game\",\n}\nexport interface PokerState {\n  gameFunctions: PokerGameFunctions[];\n  cardsToDiscard: number[];\n  hideHands: boolean;\n  gameOver: boolean;\n}\n\n/** function to generate the state of a new game */\nexport const newPokerGameState = (): PokerState => ({\n  gameFunctions: [PokerGameFunctions.START_GAME],\n  cardsToDiscard: [],\n  hideHands: true,\n  gameOver: false,\n});\n\nexport const pokerAtom = atom({\n  key: \"pokerAtom\",\n  default:\n    (JSON.parse(localStorage.getItem(\"poker-atom\") || \"null\") as PokerState) ||\n    newPokerGameState(),\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"poker-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\nconst pokerState = selector({\n  key: \"pokerState\",\n  get: ({ get }) => {\n    const poker = get(pokerAtom);\n    const turn = get(turnAtom);\n    const players = get(playerAtom).slice(0, 5);\n\n    return { poker, turn, players };\n  },\n  set: ({ get, set }, state) => {\n    if (!(state instanceof DefaultValue)) {\n      const { poker, turn, players } = state;\n      const dataPlayers = get(playerAtom);\n      set(pokerAtom, poker);\n      set(turnAtom, turn);\n      set(playerAtom, [...players, dataPlayers[5], dataPlayers[6]]);\n    }\n  },\n});\n\nexport default pokerState;\n","import * as React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { useRecoilState } from \"recoil\";\nimport GameTable from \"../game-table\";\nimport asyncForEach from \"../../../apis/asyncForEach\";\nimport Deck from \"../../../apis/Deck\";\nimport { computer, findAndPayWinner } from \"./helpers\";\nimport pokerState, {\n  PokerGameFunctions as PGF,\n  newPokerGameState,\n} from \"../../../recoil/poker-state\";\nimport { DBPlayer, defaultWeigh } from \"../../../recoil/player-atom\";\nimport PlayerMenu from \"../../common/header/PlayerMenu\";\n\nconst Poker: React.FC = () => {\n  const [{ poker, turn, players }, setState] = useRecoilState(pokerState);\n  const { cardsToDiscard, gameFunctions, gameOver, hideHands } = poker;\n\n  // ----------     bot automation handlers     ---------- //\n  /** iterate through array, removing each index number from hand\n   * then add new cards to the hand */\n  const discard = async (\n    cardsToDiscardInDB: number[],\n    player: DBPlayer,\n  ): Promise<DBPlayer> => {\n    const { hands } = player;\n    const newPlayer = { ...player };\n    const cards = [...hands[0].cards];\n\n    try {\n      // Swap Cards\n      const newCards = await Deck.deal(cardsToDiscardInDB.length);\n      cardsToDiscardInDB.forEach((discardIdx, i) => {\n        cards[discardIdx] = newCards[i];\n      });\n      cards.sort(Deck.rankSort);\n      const { weight, soft } = defaultWeigh(cards);\n      // Update Hand\n      newPlayer.hands = [{ cards, weight, soft }];\n    } catch (e) {\n      console.error(e); // eslint-disable-line no-console\n    }\n\n    return newPlayer;\n  };\n\n  const checkUpdate = async (): Promise<void> => {\n    try {\n      if (!hideHands && !gameOver && players[turn.player]?.isBot) {\n        const newPlayers = [...players];\n\n        // returns immutable new players\n        await asyncForEach(players, async (player: DBPlayer, i: number) => {\n          if (turn.player <= i) {\n            const newPlayer = await computer(player, discard);\n            newPlayers[i] = newPlayer;\n          }\n        });\n\n        // modifies money in newPlayers obj\n        findAndPayWinner(newPlayers);\n\n        // update state once\n        setState({\n          poker: {\n            cardsToDiscard,\n            gameFunctions: [PGF.NEW_GAME],\n            gameOver: true,\n            hideHands,\n          },\n          players: newPlayers,\n          turn: { player: 0, hand: 0 },\n        });\n      }\n    } catch (e) {\n      console.error(e); // eslint-disable-line no-console\n    }\n  };\n\n  // ----------     player handlers     ---------- //\n  /** function to finish betting and start the game */\n  const startGame = async (): Promise<void> => {\n    // shuffle the deck\n    await Deck.shuffle()\n      .then(async () => {\n        const newPlayers = [...players];\n        // deal the hands\n        await asyncForEach(players, async (player: DBPlayer) => {\n          // New Hand\n          const cards = await Deck.deal(5);\n          cards.sort(Deck.rankSort);\n          const { weight, soft } = defaultWeigh(cards);\n\n          // Create New Hand\n          const pi = players.findIndex((p) => p.id === player.id);\n          if (pi !== -1) {\n            const newPlayer = {\n              ...newPlayers[pi],\n              hands: [{ cards, weight, soft }],\n            };\n            newPlayers[pi] = newPlayer;\n          }\n        });\n        setState({\n          players: newPlayers,\n          turn,\n          poker: {\n            cardsToDiscard,\n            gameFunctions: [PGF.DISCARD_CARDS],\n            gameOver,\n            hideHands: false,\n          },\n        });\n      })\n      .catch((e) => {\n        console.error(e); // eslint-disable-line no-console\n      });\n  };\n\n  /** helper function wrapping discard, meant for UI */\n  const handleDiscard = async (\n    tempPlayers: DBPlayer[],\n    tempTurn: number,\n    tempCardsToDiscard: number[],\n  ): Promise<void> => {\n    try {\n      const newPlayers = [...players];\n      const newPlayer = await discard(\n        tempCardsToDiscard,\n        tempPlayers[tempTurn],\n      );\n      newPlayers[tempTurn] = newPlayer;\n      setState({\n        poker: {\n          cardsToDiscard: [],\n          gameFunctions: [PGF.END_TURN],\n          gameOver,\n          hideHands,\n        },\n        turn,\n        players: newPlayers,\n      });\n    } catch (e) {\n      console.error(e); // eslint-disable-line no-console\n    }\n  };\n\n  /** function to route click actions */\n  const handleGameFunctionClick = async (type: PGF) => {\n    try {\n      const newPlayers: DBPlayer[] = [];\n\n      switch (type) {\n        case PGF.DISCARD_CARDS:\n          await handleDiscard(players, turn.player, cardsToDiscard);\n          break;\n        case PGF.END_TURN:\n          setState({\n            poker: {\n              cardsToDiscard: [],\n              gameFunctions: [PGF.DISCARD_CARDS],\n              gameOver,\n              hideHands,\n            },\n            turn: { player: turn.player + 1, hand: 0 },\n            players,\n          });\n          break;\n        case PGF.NEW_GAME:\n          players.forEach((player) =>\n            newPlayers.push({\n              ...player,\n              status: \"\",\n              hands: [],\n              bet: 5,\n            }),\n          );\n          setState({\n            poker: newPokerGameState(),\n            turn: { player: 0, hand: 0 },\n            players: newPlayers,\n          });\n          break;\n        case PGF.START_GAME:\n          await startGame();\n          break;\n        default:\n          // eslint-disable-next-line no-console\n          console.error(\"Unknown Game Function: \", type);\n      }\n    } catch (e) {\n      console.error(e); // eslint-disable-line no-console\n    }\n  };\n\n  /** function to be called on card clicks */\n  const cardClickHandler = (\n    _playerNo: number,\n    _handNo: number,\n    cardNo: number,\n  ): void => {\n    const newCardsToDiscard = [...cardsToDiscard];\n    // find card\n    const i = newCardsToDiscard.indexOf(cardNo);\n    // toggle in array\n    if (i === -1) {\n      newCardsToDiscard.push(cardNo);\n    } else {\n      newCardsToDiscard.splice(i, 1);\n    }\n    // update state\n    setState({\n      poker: {\n        cardsToDiscard: newCardsToDiscard,\n        gameFunctions,\n        gameOver,\n        hideHands,\n      },\n      turn,\n      players,\n    });\n  };\n\n  checkUpdate().catch(() => {\n    // eslint-disable-next-line no-console\n    console.error(\"check update failed\");\n  });\n\n  return (\n    <>\n      <div className=\"flex-container\">\n        <Typography variant=\"h2\" component=\"h1\" gutterBottom>\n          5 Card Draw Poker\n        </Typography>\n        <PlayerMenu />\n      </div>\n      <GameTable\n        cardClickHandler={cardClickHandler}\n        cardsToDiscard={cardsToDiscard}\n        gameFunctions={gameFunctions}\n        onClick={handleGameFunctionClick as (name: string) => void}\n        gameOver={gameOver}\n        hideHands={hideHands}\n        isBlackJack={false}\n        players={players}\n        turn={turn}\n      />\n    </>\n  );\n};\n\nexport default Poker;\n"],"names":["rankHand","hand","hist","has3","i","has2","isStraight","isFlush","j","getHistogram","card","evaluate","rank","cards","total","numCards","last","num","a","c","getCardsToDiscard","n","nextCardsToDiscard","cardValues","computer","player","discard","findAndPayWinner","players","winner","_a","playerScore","newPlayer","PokerGameFunctions","newPokerGameState","pokerAtom","atom","onSet","state","pokerState","selector","get","poker","turn","turnAtom","playerAtom","set","DefaultValue","dataPlayers","Poker","setState","useRecoilState","cardsToDiscard","gameFunctions","gameOver","hideHands","cardsToDiscardInDB","hands","newCards","Deck","discardIdx","weight","soft","defaultWeigh","e","checkUpdate","newPlayers","asyncForEach","PGF","startGame","pi","p","handleDiscard","tempPlayers","tempTurn","tempCardsToDiscard","handleGameFunctionClick","type","cardClickHandler","_playerNo","_handNo","cardNo","newCardsToDiscard","jsxs","Fragment","jsx","Typography","PlayerMenu","GameTable"],"mappings":"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"}