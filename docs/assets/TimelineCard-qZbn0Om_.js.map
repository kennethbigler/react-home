{"version":3,"file":"TimelineCard-qZbn0Om_.js","sources":["../../src/components/common/timeline-card/Segment.tsx","../../src/components/common/timeline-card/YearMarkers.tsx","../../src/components/common/timeline-card/Row.tsx","../../src/components/common/timeline-card/Timeline.tsx","../../src/components/common/timeline-card/TimelineCard.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { grey } from \"@mui/material/colors\";\nimport { SegmentType } from \"./types\";\n\nconst bodyStyles: React.CSSProperties = {\n  cursor: \"default\",\n  paddingTop: \"5px\",\n  paddingBottom: \"5px\",\n  textAlign: \"center\",\n  borderRadius: 2,\n};\n\nconst Segment = React.memo(\n  ({ body, width, color, title, inverted }: SegmentType) => {\n    const {\n      palette: { mode },\n    } = useTheme();\n\n    // variables for empty segment\n    let style: React.CSSProperties = {\n      display: \"inline-block\",\n      width: `${width}%`,\n      color: inverted ? \"black\" : grey[50],\n    };\n    if (body) {\n      style = {\n        ...style,\n        ...bodyStyles,\n        backgroundColor: color,\n        boxShadow: `2px 3px 4px 1px ${mode !== \"dark\" ? grey[400] : grey[700]}`,\n      };\n    }\n\n    return (\n      <div style={style} title={title}>\n        {body || <br />}\n      </div>\n    );\n  },\n);\n\nSegment.displayName = \"Segment\";\n\nexport default Segment;\n","import * as React from \"react\";\nimport { grey } from \"@mui/material/colors\";\n\ninterface YearMarkersProps {\n  body?: string;\n  width: number;\n}\n\nconst boxStyles: React.CSSProperties = {\n  cursor: \"default\",\n  height: 500,\n  marginBottom: -500,\n  minWidth: 1,\n};\nconst markerStyles: React.CSSProperties = {\n  ...boxStyles,\n  backgroundColor: grey[200],\n  width: \"100%\",\n  maxWidth: 2.5,\n};\nconst labelStyles: React.CSSProperties = {\n  position: \"relative\",\n  right: 22,\n};\n\nconst YearMarkers = React.memo(({ body, width }: YearMarkersProps) => {\n  // variables for empty segment\n  const style: React.CSSProperties = {\n    display: \"inline-block\",\n    width: `${width}%`,\n  };\n\n  return !body ? (\n    <div title=\"year\" style={style}>\n      <br />\n    </div>\n  ) : (\n    <div style={{ ...style, ...boxStyles }} title={body}>\n      <div style={markerStyles} title=\"year-marker\">\n        <div style={labelStyles}>{body}</div>\n      </div>\n    </div>\n  );\n});\n\nYearMarkers.displayName = \"YearMarkers\";\n\nexport default YearMarkers;\n","import * as React from \"react\";\nimport Segment from \"./Segment\";\nimport YearMarkers from \"./YearMarkers\";\nimport { SegmentType } from \"./types\";\n\ninterface RowProps {\n  segments: SegmentType[];\n  yearMarkers?: boolean;\n  first?: boolean;\n}\n\nconst smMarginTop: React.CSSProperties = { marginTop: 10 };\nconst lgMarginTop: React.CSSProperties = { marginTop: 20 };\nconst noStyle: React.CSSProperties = { height: 0 };\n\nconst Row = ({ segments, yearMarkers = false, first = false }: RowProps) => {\n  let style = smMarginTop;\n  if (yearMarkers) {\n    style = noStyle;\n  } else if (first) {\n    style = lgMarginTop;\n  }\n\n  return (\n    <div style={style} title=\"timeline-row\">\n      {segments.map((data, j) =>\n        yearMarkers ? (\n          <YearMarkers key={j} body={data.body} width={data.width} />\n        ) : (\n          <Segment key={j} {...data} />\n        ),\n      )}\n    </div>\n  );\n};\n\nexport default Row;\n","import * as React from \"react\";\nimport dateObj, { DateObj } from \"../../../apis/DateHelper\";\nimport Row from \"./Row\";\nimport { SegmentType } from \"./types\";\nimport { DataEntry, MONTH_SORT } from \"./timeline-consts\";\n\ninterface TimelineProps {\n  /** reads [selector] from each array entry and creates segments */\n  data: DataEntry[];\n  /** key to be used to read data */\n  selector: string;\n  /** start of the timeline */\n  start: DateObj;\n  /** end of the timeline */\n  end: DateObj;\n  /** reduce year markers */\n  yearMarkerFrequency: number;\n  /** enables title field to be long version */\n  enableLongTitles?: boolean;\n}\n\nconst WIDTH = 99;\nconst MIN_LONG_WIDTH = 269;\nconst MIN_TEXT_WIDTH = 85;\nconst MIN_SHORT_WIDTH = 54;\nconst YEAR_WIDTH = 0.3;\n\n/** function to add empty space between start and elm segment */\nconst addEmptySegment = (segments: SegmentType[], width: number): void => {\n  if (width > 0) {\n    segments.push({ width });\n  }\n};\n\nconst Timeline = ({\n  start,\n  end,\n  selector,\n  data: propsData,\n  yearMarkerFrequency,\n  enableLongTitles,\n}: TimelineProps) => {\n  // get immutable data from props and sort by start date\n  const data: DataEntry[] = React.useMemo(\n    () => [...propsData].sort(MONTH_SORT),\n    [propsData],\n  );\n  // track elements added already\n  const added: boolean[] = [];\n\n  /** Get the width from the beginning of the graph to this bar */\n  const getTimeFromStart = React.useCallback(\n    (val: DateObj): number => {\n      // get max length\n      const totalDuration = end.diff(start, \"months\");\n      const timeFromStart = val.diff(start, \"months\");\n      const width = Math.floor((timeFromStart / totalDuration) * WIDTH);\n      return width > 0 ? width : 0;\n    },\n    [end, start],\n  );\n\n  /** function to add elm segment */\n  const addSegment = React.useCallback(\n    (\n      segments: SegmentType[],\n      elm: DataEntry,\n      beginning: number,\n      ending: number,\n    ): void => {\n      const { color, inverted, title, short, char } = elm;\n      const width = ending - beginning;\n      const textWidth = (width * (window.innerWidth - 64)) / WIDTH;\n      const payload = {\n        color,\n        inverted,\n        width,\n        title,\n      };\n      // check if name has room\n      if (textWidth < MIN_SHORT_WIDTH) {\n        segments.push({\n          body: char || (elm[selector] as string).substr(0, 1),\n          ...payload,\n        });\n      } else if (textWidth < MIN_TEXT_WIDTH) {\n        segments.push({\n          body: short,\n          ...payload,\n        });\n      } else if (!enableLongTitles || textWidth < MIN_LONG_WIDTH) {\n        segments.push({\n          body: elm[selector] as string,\n          ...payload,\n        });\n      } else {\n        segments.push({\n          body: title,\n          ...payload,\n        });\n      }\n    },\n    [selector, enableLongTitles],\n  );\n\n  /** break data up into segments */\n  const getSegments = (elm: DataEntry, i: number): SegmentType[] => {\n    // skip if added already\n    if (added[i]) {\n      return [];\n    }\n\n    // local variables\n    const segments: SegmentType[] = [];\n    const { start: segStart, end: segEnd } = elm;\n    let beginning = getTimeFromStart(segStart);\n    let ending = getTimeFromStart(segEnd);\n\n    // add main segments\n    addEmptySegment(segments, beginning);\n    addSegment(segments, elm, beginning, ending);\n\n    // track that segments have been added\n    added[i] = true;\n\n    // find any other segments that will fit\n    for (let j = i + 1; j < data.length; j += 1) {\n      // skip if added already\n      if (!added[j]) {\n        // test segment\n        const { start: jStart, end: jEnd } = data[j];\n        beginning = getTimeFromStart(jStart);\n\n        // if start is after end of main segment\n        if (beginning >= ending) {\n          // add filler in between end/start\n          addEmptySegment(segments, beginning - ending);\n          // add next segment\n          ending = getTimeFromStart(jEnd);\n          addSegment(segments, data[j], beginning, ending);\n          // mark as already added\n          added[j] = true;\n        }\n      }\n    }\n\n    // get last segment\n    addEmptySegment(segments, WIDTH - ending);\n\n    return [...segments];\n  };\n\n  /** adds gray lines to indicate years */\n  const getYearMarkers = React.useCallback((): SegmentType[] => {\n    const startYear = Number(start.format(\"YYYY\"));\n    const endYear = Number(end.format(\"YYYY\"));\n\n    const years = [];\n    for (\n      let year = startYear + 1;\n      year <= endYear;\n      year += yearMarkerFrequency\n    ) {\n      years.push(dateObj(`${year}`));\n    }\n\n    const marker = { width: YEAR_WIDTH, body: years[0].format(\"'YY\") };\n    const yearMarkers = [\n      { width: getTimeFromStart(years[0]) - YEAR_WIDTH },\n      marker,\n    ];\n\n    for (let i = 1; i < years.length; i += 1) {\n      const previousYear = getTimeFromStart(years[i - 1]);\n      const thisYear = getTimeFromStart(years[i]);\n      yearMarkers.push({ width: thisYear - previousYear - YEAR_WIDTH });\n      yearMarkers.push({ width: YEAR_WIDTH, body: years[i].format(\"'YY\") });\n    }\n\n    return yearMarkers;\n  }, [end, getTimeFromStart, start, yearMarkerFrequency]);\n\n  return (\n    <div style={{ width: \"100%\", paddingBottom: 7 }}>\n      <Row key={data.length} segments={getYearMarkers()} yearMarkers />\n      {data.map((elm, i) => {\n        const segments = getSegments(elm, i);\n        return segments.length ? (\n          <Row key={i} segments={segments} first={i === 0} />\n        ) : null;\n      })}\n    </div>\n  );\n};\n\nexport default Timeline;\n","import { grey } from \"@mui/material/colors\";\nimport dateObj, { DateObj, FormatOutput } from \"../../../apis/DateHelper\";\nimport ExpandableCard from \"../expandable-card\";\nimport Timeline from \"./Timeline\";\nimport { TIMELINE_TITLE, DataEntry } from \"./timeline-consts\";\nimport workExperience from \"../../../constants/work\";\n\ninterface TimelineCardProps {\n  /** background color of the expandable card top bar */\n  backgroundColor?: string;\n  /** reads [selector] from each array entry and creates segments */\n  data?: DataEntry[];\n  /** title content */\n  title?: string;\n  /** key to be used to read data */\n  selector?: string;\n  /** start of the timeline */\n  start?: DateObj;\n  /** end of the timeline */\n  end?: DateObj;\n  /** reduce year markers */\n  yearMarkerFrequency?: number;\n  /** enables title field to be long version */\n  enableLongTitles?: boolean;\n}\n\nconst DATE_FORMAT: FormatOutput = \"MMMM Y\";\n\n/* TimelineCard  ->  Timeline  ->  Row  ->  Segment\n *                                     |->  YearMarkers */\n/** function to generate timeline card */\nconst TimelineCard = ({\n  data = workExperience,\n  backgroundColor = grey[800],\n  title = TIMELINE_TITLE,\n  selector = \"company\",\n  start = dateObj(\"2011-09\"),\n  end = dateObj(),\n  yearMarkerFrequency = 1,\n  enableLongTitles,\n}: TimelineCardProps) => (\n  <ExpandableCard\n    backgroundColor={backgroundColor}\n    subtitle={`${start.format(DATE_FORMAT)} - ${end.format(DATE_FORMAT)}`}\n    title={title}\n  >\n    <Timeline\n      data={data}\n      selector={selector}\n      start={start}\n      end={end}\n      yearMarkerFrequency={yearMarkerFrequency}\n      enableLongTitles={enableLongTitles}\n    />\n  </ExpandableCard>\n);\n\nexport default TimelineCard;\n"],"names":["bodyStyles","Segment","React.memo","body","width","color","title","inverted","mode","useTheme","style","grey","jsx","boxStyles","markerStyles","labelStyles","YearMarkers","smMarginTop","lgMarginTop","noStyle","Row","segments","yearMarkers","first","data","j","WIDTH","MIN_LONG_WIDTH","MIN_TEXT_WIDTH","MIN_SHORT_WIDTH","YEAR_WIDTH","addEmptySegment","Timeline","start","end","selector","propsData","yearMarkerFrequency","enableLongTitles","React.useMemo","MONTH_SORT","added","getTimeFromStart","React.useCallback","val","totalDuration","timeFromStart","addSegment","elm","beginning","ending","short","char","textWidth","payload","getSegments","i","segStart","segEnd","jStart","jEnd","getYearMarkers","startYear","endYear","years","year","dateObj","marker","previousYear","thisYear","jsxs","DATE_FORMAT","TimelineCard","workExperience","backgroundColor","TIMELINE_TITLE","ExpandableCard"],"mappings":"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"}