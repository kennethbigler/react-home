{"version":3,"file":"index-R7G8ORvX.js","sources":["../../src/components/games/yahtzee/score-table/Header.tsx","../../src/components/games/yahtzee/score-table/TopScores.tsx","../../src/components/games/yahtzee/score-table/scoreTableHelper.ts","../../src/components/games/yahtzee/score-table/TopTable.tsx","../../src/components/games/yahtzee/types.ts","../../src/components/games/yahtzee/score-table/BottomScores.tsx","../../src/components/games/yahtzee/score-table/BottomTable.tsx","../../src/components/games/yahtzee/score-table/ScoreTable.tsx","../../src/components/games/yahtzee/Header.tsx","../../src/components/games/yahtzee/TableHeader.tsx","../../src/jotai/yahtzee-state.ts","../../src/components/games/yahtzee/use-yahtzee-state.ts","../../src/components/games/yahtzee/Yahtzee.tsx"],"sourcesContent":["import * as React from \"react\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\n\ninterface HeaderProps {\n  sx: React.CSSProperties;\n}\n\nconst Header = React.memo(({ sx }: HeaderProps) => (\n  <TableHead>\n    <TableRow sx={{ borderBottom: 2 }}>\n      <TableCell>Minimum Required for Bonus</TableCell>\n      <TableCell>How to Score</TableCell>\n      <TableCell sx={sx}>Game Score</TableCell>\n    </TableRow>\n  </TableHead>\n));\n\nHeader.displayName = \"Header\";\n\nexport default Header;\n","import * as React from \"react\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\n\ninterface TopScoresProps {\n  finalTopSum: number;\n  topSum: number;\n  sx: React.CSSProperties;\n}\n\nconst TopScores = React.memo(({ topSum, finalTopSum, sx }: TopScoresProps) => (\n  <>\n    <TableRow sx={{ borderTop: 2 }}>\n      <TableCell colSpan={2} component=\"th\" scope=\"row\">\n        Total == 63\n      </TableCell>\n      <TableCell sx={sx}>{topSum}</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell component=\"th\" scope=\"row\">\n        Bonus if &gt;= 63\n      </TableCell>\n      <TableCell>Score 35</TableCell>\n      <TableCell sx={sx}>{topSum % 100 >= 63 ? 35 : 0}</TableCell>\n    </TableRow>\n    <TableRow sx={{ borderBottom: 2 }}>\n      <TableCell colSpan={2} component=\"th\" scope=\"row\">\n        Upper Half Total\n      </TableCell>\n      <TableCell sx={sx}>{finalTopSum}</TableCell>\n    </TableRow>\n  </>\n));\n\nTopScores.displayName = \"TopScores\";\n\nexport default TopScores;\n","import { TopGameScore } from \"../types\";\nimport { Dice } from \"../../../../jotai/yahtzee-state\";\n\ninterface DiceHistogram {\n  0?: number;\n  1: number;\n  2: number;\n  3: number;\n  4: number;\n  5: number;\n  6: number;\n}\n\nexport const getHistogram =\n  () =>\n  (hist: DiceHistogram, val: Dice): DiceHistogram => {\n    if (!hist[val]) {\n      hist[val] = 1;\n    } else {\n      hist[val] += 1;\n    }\n    return hist;\n  };\n\nexport const hasXDice = (values: Dice[], n: number): boolean => {\n  const hist = values.reduce(getHistogram(), {} as DiceHistogram);\n  let hasDice = false;\n  Object.values(hist).forEach((value) => {\n    if (value >= n) {\n      hasDice = true;\n    }\n  });\n  return hasDice;\n};\n\nexport const isFullHouse = (values: Dice[]): boolean => {\n  const hist = values.reduce(getHistogram(), {} as DiceHistogram);\n\n  let has3 = false;\n  let has2 = false;\n\n  Object.values(hist).forEach((value) => {\n    if (value >= 3) {\n      has3 = true;\n    } else if (value >= 2) {\n      has2 = true;\n    }\n  });\n\n  return has3 && has2;\n};\n\nexport const isStraight = (values: Dice[], length: number): boolean => {\n  const hist = values.reduce(getHistogram(), {} as DiceHistogram);\n\n  let count = 0;\n  const dice: Dice[] = [1, 2, 3, 4, 5, 6];\n  dice.forEach((i: Dice) => {\n    if (count < length) {\n      const value = hist[i];\n      if (!value) {\n        count = 0;\n      } else {\n        count += 1;\n      }\n    }\n  });\n  return count >= length;\n};\n\nexport const canYahtzeeBonus = (values: Dice[], top: TopGameScore[]): boolean =>\n  Object.entries(values.reduce(getHistogram(), {} as DiceHistogram)).reduce(\n    (acc: boolean, [key, value]) => {\n      if (value === 5 && top[Number(key) - 1].score >= 0) {\n        return true;\n      }\n      return acc;\n    },\n    false,\n  );\n","import * as React from \"react\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { BottomGameScore, TopGameScore } from \"../types\";\nimport { Dice } from \"../../../../jotai/yahtzee-state\";\nimport TopScores from \"./TopScores\";\nimport { hasXDice } from \"./scoreTableHelper\";\n\ninterface TopTableProps {\n  finalTopSum: number;\n  getScoreButton: (\n    showButton: boolean,\n    points: number,\n    wasTop: boolean,\n    i: number,\n  ) => React.ReactElement;\n  showScoreButtons: boolean;\n  sx: React.CSSProperties;\n  top: TopGameScore[];\n  bottom: BottomGameScore[];\n  topSum: number;\n  values: Dice[];\n}\n\nconst TopTable = ({\n  bottom,\n  values,\n  showScoreButtons,\n  getScoreButton,\n  top,\n  sx,\n  topSum,\n  finalTopSum,\n}: TopTableProps) => {\n  const getButtonInfo = (d: number): [number, number] =>\n    values.reduce(\n      (count, val) => {\n        if (val === d) {\n          count[0] += 1;\n          count[1] += d;\n        }\n        return count;\n      },\n      [0, 0],\n    );\n\n  const hasYahtzee = bottom[5].score > 0;\n  const yahtzeeBonus = hasYahtzee && hasXDice(values, 5);\n\n  const getTopTableButtons = (\n    score: number,\n    showButton: boolean,\n    sum: number,\n    i: number,\n  ): React.ReactNode | null => {\n    if (score >= 0) {\n      return score;\n    }\n    return showScoreButtons\n      ? getScoreButton(showButton, yahtzeeBonus ? sum + 100 : sum, true, i)\n      : null;\n  };\n\n  return (\n    <>\n      {top.map(({ name, score }, i) => {\n        const d = i + 1;\n        const [count, sum] = getButtonInfo(d);\n        const showButton = count >= 1;\n\n        return (\n          <TableRow key={name}>\n            <TableCell\n              component=\"th\"\n              scope=\"row\"\n            >{`${name}: ${d},${d},${d} = ${d * 3}`}</TableCell>\n            <TableCell>{`Add Only ${name}`}</TableCell>\n            <TableCell sx={sx}>\n              {getTopTableButtons(score, showButton, sum, i)}\n            </TableCell>\n          </TableRow>\n        );\n      })}\n      <TopScores topSum={topSum} finalTopSum={finalTopSum} sx={sx} />\n    </>\n  );\n};\n\nexport default TopTable;\n","export const ADD_DICE = \"Sum of Dice\";\ntype AddDice = \"Sum of Dice\";\n\nexport interface TopGameScore {\n  name: string;\n  score: number;\n}\nexport interface BottomGameScore {\n  name: string;\n  score: number;\n  hint: string;\n  points: number | AddDice;\n}\n\nexport default ADD_DICE;\n","import * as React from \"react\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\n\ninterface BottomScoresProps {\n  bottomSum: number;\n  finalTopSum: number;\n  sx: React.CSSProperties;\n}\n\nconst BottomScores = React.memo(\n  ({ finalTopSum, bottomSum, sx }: BottomScoresProps) => (\n    <>\n      <TableRow sx={{ borderTop: 2 }}>\n        <TableCell colSpan={2} component=\"th\" scope=\"row\">\n          Lower Half Total\n        </TableCell>\n        <TableCell sx={sx}>{bottomSum}</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell colSpan={2} component=\"th\" scope=\"row\">\n          Upper Half Total\n        </TableCell>\n        <TableCell sx={sx}>{finalTopSum}</TableCell>\n      </TableRow>\n      <TableRow sx={{ borderBottom: 2 }}>\n        <TableCell colSpan={2} component=\"th\" scope=\"row\">\n          Grand Total\n        </TableCell>\n        <TableCell sx={sx}>{finalTopSum + bottomSum}</TableCell>\n      </TableRow>\n    </>\n  ),\n);\n\nBottomScores.displayName = \"BottomScores\";\n\nexport default BottomScores;\n","import * as React from \"react\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { TopGameScore, BottomGameScore, ADD_DICE } from \"../types\";\nimport { Dice } from \"../../../../jotai/yahtzee-state\";\nimport {\n  hasXDice,\n  isFullHouse,\n  isStraight,\n  canYahtzeeBonus,\n} from \"./scoreTableHelper\";\nimport BottomScores from \"./BottomScores\";\n\ninterface BottomTableProps {\n  bottom: BottomGameScore[];\n  bottomSum: number;\n  finalTopSum: number;\n  getScoreButton: (\n    showButton: boolean,\n    points: number,\n    wasTop: boolean,\n    i: number,\n  ) => React.ReactElement;\n  showScoreButtons: boolean;\n  sx: React.CSSProperties;\n  top: TopGameScore[];\n  values: Dice[];\n}\n\nconst getDiceValue = (values: Dice[]): number =>\n  values.reduce((sum: number, d) => sum + d, 0);\n\nconst showButton = (i: number, values: Dice[]): boolean => {\n  switch (i) {\n    case 0: // 3 of a kind\n      return hasXDice(values, 3);\n    case 1: // 4 of a kind\n      return hasXDice(values, 4);\n    case 2: // Full House\n      return isFullHouse(values);\n    case 3: // Sm. Straight\n      return isStraight(values, 4);\n    case 4: // Lg. Straight\n      return isStraight(values, 5);\n    case 5: // Yahtzee\n      return hasXDice(values, 5);\n    case 6: // Chance\n      return true;\n    default:\n      // eslint-disable-next-line no-console\n      console.error(\"Unexpected Value\");\n      return false;\n  }\n};\n\nconst BottomTable = ({\n  values,\n  showScoreButtons,\n  getScoreButton,\n  top,\n  bottom,\n  sx,\n  finalTopSum,\n  bottomSum,\n}: BottomTableProps) => {\n  const getBottomTableButtons = React.useCallback(\n    (\n      score: number,\n      points: number,\n      hasYahtzee: boolean,\n      i: number,\n    ): React.ReactNode | null => {\n      if (score >= 0) {\n        return score;\n      }\n      if (showScoreButtons) {\n        // Yahtzee Bonus\n        if (hasYahtzee) {\n          if (canYahtzeeBonus(values, top)) {\n            return getScoreButton(true, points + 100, false, i);\n          }\n        }\n        return getScoreButton(showButton(i, values), points, false, i);\n      }\n      return null;\n    },\n    [getScoreButton, showScoreButtons, top, values],\n  );\n\n  const generateBottomTable = React.useCallback((): React.ReactNode => {\n    const hasYahtzee = bottom[5].score > 0;\n    return bottom.map((gameScore, i) => {\n      const { name, hint, points, score } = gameScore;\n\n      const parsedPoints = points === ADD_DICE ? getDiceValue(values) : points;\n\n      return (\n        <TableRow key={name}>\n          <TableCell component=\"th\" scope=\"row\">\n            {name}\n          </TableCell>\n          <TableCell>{hint}</TableCell>\n          <TableCell sx={sx}>\n            {getBottomTableButtons(score, parsedPoints, hasYahtzee, i)}\n          </TableCell>\n        </TableRow>\n      );\n    });\n  }, [bottom, getBottomTableButtons, sx, values]);\n\n  return (\n    <>\n      {generateBottomTable()}\n      <BottomScores bottomSum={bottomSum} finalTopSum={finalTopSum} sx={sx} />\n    </>\n  );\n};\n\nexport default BottomTable;\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport { TopGameScore, BottomGameScore } from \"../types\";\nimport { Dice } from \"../../../../jotai/yahtzee-state\";\nimport Header from \"./Header\";\nimport TopTable from \"./TopTable\";\nimport BottomTable from \"./BottomTable\";\n\ninterface ScoreTableProps {\n  bottom: BottomGameScore[];\n  bottomSum: number;\n  finalTopSum: number;\n  onTopScore: (points: number, i: number) => void;\n  onBottomScore: (points: number, i: number) => void;\n  showScoreButtons: boolean;\n  top: TopGameScore[];\n  topSum: number;\n  values: Dice[];\n}\n\nconst centerStyle: React.CSSProperties = { textAlign: \"center\" };\n\nconst ScoreTable = ({\n  bottom,\n  bottomSum,\n  finalTopSum,\n  showScoreButtons,\n  top,\n  topSum,\n  values,\n  onTopScore,\n  onBottomScore,\n}: ScoreTableProps) => {\n  const getScoreButton = React.useCallback(\n    (\n      showButton: boolean,\n      points: number,\n      wasTop: boolean,\n      i: number,\n    ): React.ReactElement =>\n      showButton ? (\n        <Button\n          color=\"secondary\"\n          variant=\"outlined\"\n          onClick={\n            wasTop\n              ? (): void => onTopScore(points, i)\n              : (): void => onBottomScore(points, i)\n          }\n        >\n          {`Add ${points} Points`}\n        </Button>\n      ) : (\n        <Button\n          color=\"secondary\"\n          variant=\"outlined\"\n          onClick={\n            wasTop\n              ? (): void => onTopScore(0, i)\n              : (): void => onBottomScore(0, i)\n          }\n        >\n          0\n        </Button>\n      ),\n    [onBottomScore, onTopScore],\n  );\n\n  return (\n    <Table size=\"small\" aria-label=\"yahtzee game table\">\n      <Header sx={centerStyle} />\n      <TableBody>\n        <TopTable\n          finalTopSum={finalTopSum}\n          getScoreButton={getScoreButton}\n          showScoreButtons={showScoreButtons}\n          sx={centerStyle}\n          top={top}\n          values={values}\n          bottom={bottom}\n          topSum={topSum}\n        />\n        <BottomTable\n          finalTopSum={finalTopSum}\n          getScoreButton={getScoreButton}\n          showScoreButtons={showScoreButtons}\n          sx={centerStyle}\n          top={top}\n          values={values}\n          bottom={bottom}\n          bottomSum={bottomSum}\n        />\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default ScoreTable;\n","import * as React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport PlayerMenu from \"../../common/header/PlayerMenu\";\n\ninterface HeaderProps {\n  bestScore: number;\n  lastScore: number;\n  money: number;\n  name: string;\n}\n\nconst Header = React.memo(\n  ({ bestScore, lastScore, money, name }: HeaderProps) => (\n    <>\n      <div className=\"flex-container\">\n        <Typography variant=\"h2\" component=\"h1\">\n          Yahtzee\n        </Typography>\n        <PlayerMenu />\n      </div>\n      <div className=\"flex-container\">\n        <Typography variant=\"h4\" component=\"h2\">\n          {name}: ${money}\n        </Typography>\n        <Typography variant=\"h4\">{`Best: ${bestScore}`}</Typography>\n        <Typography variant=\"h4\">{`Last: ${lastScore}`}</Typography>\n      </div>\n    </>\n  ),\n);\n\nHeader.displayName = \"Header\";\n\nexport default Header;\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport { Dice } from \"../../../jotai/yahtzee-state\";\n\ninterface TableHeaderProps {\n  roll: Dice;\n  values: Dice[];\n  saved: Dice[];\n  handleUnsave: (i: number) => void;\n  handleSave: (i: number) => void;\n  handleDiceRoll: React.MouseEventHandler;\n  getButtonText: (roll: Dice) => string;\n}\n\nconst wrapperStyles: React.CSSProperties = {\n  display: \"block\",\n  margin: \"auto\",\n  width: 320,\n};\n\nconst TableHeader = ({\n  values,\n  saved,\n  roll,\n  handleUnsave,\n  handleSave,\n  handleDiceRoll,\n  getButtonText,\n}: TableHeaderProps) => (\n  <div className=\"flex-container\">\n    <Typography variant=\"h4\" component=\"h3\">{`Roll #${roll}/3`}</Typography>\n    <div style={wrapperStyles}>\n      {saved.map((val, i) => (\n        <Button\n          key={i}\n          variant=\"contained\"\n          onClick={(): void => handleUnsave(i)}\n        >\n          {val}\n        </Button>\n      ))}\n      {values.map((val, i) => (\n        <Button\n          key={i}\n          color=\"secondary\"\n          variant=\"outlined\"\n          onClick={(): void => handleSave(i)}\n        >\n          {val}\n        </Button>\n      ))}\n    </div>\n    <Button onClick={handleDiceRoll} variant=\"contained\" disabled={roll === 3}>\n      {getButtonText(roll)}\n    </Button>\n  </div>\n);\n\nexport default TableHeader;\n","import { atom } from \"jotai\";\nimport { atomWithStorage } from \"jotai/utils\";\nimport playerAtom from \"./player-atom\";\n\nexport const dice = [0, 1, 2, 3, 4, 5, 6] as const;\nexport type Dice = (typeof dice)[number];\nexport interface YahtzeeState {\n  roll: Dice;\n  values: Dice[];\n  saved: Dice[];\n  turn: number;\n  showScoreButtons: boolean;\n  topScores: number[];\n  bottomScores: number[];\n  bestScore: number;\n  lastScore: number;\n}\n\nexport const newYahtzee = (): Omit<\n  YahtzeeState,\n  \"bestScore\" | \"lastScore\"\n> => ({\n  roll: 0,\n  values: [0, 0, 0, 0, 0],\n  saved: [],\n  turn: 0,\n  showScoreButtons: false,\n  topScores: [-1, -1, -1, -1, -1, -1],\n  bottomScores: [-1, -1, -1, -1, -1, -1, -1],\n});\n\nexport const yahtzeeAtom = atomWithStorage<YahtzeeState>(\"yahtzeeAtom\", {\n  ...newYahtzee(),\n  bestScore: 0,\n  lastScore: 0,\n});\n\nexport const yahtzeeRead = atom((get) => {\n  const { topScores, bottomScores } = get(yahtzeeAtom);\n  const { name } = get(playerAtom)[0];\n\n  let count = 0;\n\n  const topSum = topScores.reduce((sum, score) => {\n    if (score >= 0) {\n      count += 1;\n      sum += score;\n    }\n    return sum;\n  }, 0);\n\n  const bottomSum = bottomScores.reduce((sum, score) => {\n    if (score >= 0) {\n      count += 1;\n      sum += score;\n    }\n    return sum;\n  }, 0);\n\n  let finalTopSum = topSum;\n  if (topSum >= 63) {\n    finalTopSum += 35;\n  }\n\n  const finish = count >= 13;\n\n  return {\n    topSum,\n    bottomSum,\n    finalTopSum,\n    finish,\n    name,\n  };\n});\n\ninterface YahtzeeGameState extends YahtzeeState {\n  money: number;\n}\n\nconst yahtzeeState = atom(\n  (get) => {\n    const yahtzee = get(yahtzeeAtom);\n    const { money } = get(playerAtom)[0];\n\n    return { ...yahtzee, money };\n  },\n  (get, set, { money, ...yahtzee }: YahtzeeGameState) => {\n    set(yahtzeeAtom, yahtzee);\n\n    const players = get(playerAtom);\n    const newPlayers = [...players];\n    newPlayers[0] = { ...players[0], money };\n    set(playerAtom, newPlayers);\n  },\n);\n\nexport default yahtzeeState;\n","import { useAtom } from \"jotai\";\nimport yahtzeeState, { newYahtzee, Dice } from \"../../../jotai/yahtzee-state\";\n\nconst useYahtzeeState = () => {\n  const [state, setState] = useAtom(yahtzeeState);\n\n  const newGame = (score: number) =>\n    setState({\n      ...newYahtzee(),\n      lastScore: score,\n      bestScore: score > state.bestScore ? score : state.bestScore,\n      money: state.money + Math.ceil(score / 10),\n    });\n  const diceClick = (values: Dice[], saved: Dice[]) =>\n    setState({\n      ...state,\n      values,\n      saved,\n    });\n  const updateTop = (topScores: number[]) =>\n    setState({\n      ...state,\n      topScores,\n      showScoreButtons: false,\n      roll: 0,\n      values: [0, 0, 0, 0, 0],\n      saved: [],\n    });\n  const updateBottom = (bottomScores: number[]) =>\n    setState({\n      ...state,\n      bottomScores,\n      showScoreButtons: false,\n      roll: 0,\n      values: [0, 0, 0, 0, 0],\n      saved: [],\n    });\n  const updateRoll = (\n    values: Dice[],\n    saved: Dice[],\n    roll: Dice,\n    payToPlay: boolean,\n  ) =>\n    setState({\n      ...state,\n      values,\n      saved,\n      roll,\n      showScoreButtons: true,\n      money: payToPlay ? state.money - 25 : state.money,\n    });\n\n  return {\n    state,\n    newGame,\n    diceClick,\n    updateTop,\n    updateBottom,\n    updateRoll,\n  };\n};\n\nexport default useYahtzeeState;\n","import * as React from \"react\";\nimport { useAtomValue } from \"jotai\";\nimport Typography from \"@mui/material/Typography\";\nimport ScoreTable from \"./score-table/ScoreTable\";\nimport { ADD_DICE, BottomGameScore } from \"./types\";\nimport Header from \"./Header\";\nimport TableHeader from \"./TableHeader\";\nimport { Dice, yahtzeeRead } from \"../../../jotai/yahtzee-state\";\nimport useYahtzeeState from \"./use-yahtzee-state\";\n\nconst topConstants = [\n  { name: \"Aces\" },\n  { name: \"Twos\" },\n  { name: \"Threes\" },\n  { name: \"Fours\" },\n  { name: \"Fives\" },\n  { name: \"Sixes\" },\n];\nconst bottomConstants = [\n  { name: \"3 of a kind\", hint: ADD_DICE, points: ADD_DICE },\n  { name: \"4 of a kind\", hint: ADD_DICE, points: ADD_DICE },\n  { name: \"Full House\", hint: \"Score 25\", points: 25 },\n  { name: \"Sm. Straight (4)\", hint: \"Score 30\", points: 30 },\n  { name: \"Lg. Straight (5)\", hint: \"Score 40\", points: 40 },\n  { name: \"Yahtzee\", hint: \"Score 50\", points: 50 },\n  { name: \"Chance\", hint: ADD_DICE, points: ADD_DICE },\n];\n\nconst Yahtzee = React.memo(() => {\n  const { state, diceClick, newGame, updateTop, updateBottom, updateRoll } =\n    useYahtzeeState();\n\n  const {\n    topScores,\n    bottomScores,\n    values,\n    saved,\n    roll,\n    showScoreButtons,\n    bestScore,\n    lastScore,\n    money,\n  } = state;\n\n  const { topSum, bottomSum, finalTopSum, finish, name } =\n    useAtomValue(yahtzeeRead);\n\n  const handleDiceRoll = (): void => {\n    if (finish) {\n      newGame(finalTopSum + bottomSum);\n      return;\n    }\n    if (roll >= 3) {\n      return;\n    }\n\n    const newValues = [...values];\n    const newSaved = [...saved];\n\n    for (let i = 0; i < newValues.length; i += 1) {\n      newValues[i] = (Math.floor(Math.random() * 6) + 1) as Dice;\n    }\n    newValues.sort();\n    newSaved.sort();\n    updateRoll(\n      newValues,\n      newSaved,\n      (roll + 1) as Dice,\n      bottomSum + topSum === 0 && roll === 0,\n    );\n  };\n\n  const handleSave = (i: number): void => {\n    if (values[i] === 0) {\n      return;\n    }\n    const newValues = [...values];\n    const newSaved = [...saved];\n    newSaved.push(newValues.splice(i, 1)[0]);\n    newSaved.sort();\n    diceClick(newValues, newSaved);\n  };\n\n  const handleUnsave = (i: number): void => {\n    const newValues = [...values];\n    const newSaved = [...saved];\n    newValues.push(newSaved.splice(i, 1)[0]);\n    newValues.sort();\n    diceClick(newValues, newSaved);\n  };\n\n  const getButtonText = React.useCallback(\n    (rollNum: Dice): string => {\n      if (finish) {\n        return \"New Game\";\n      }\n\n      switch (rollNum) {\n        case 0:\n          return \"First Roll\";\n        case 1:\n          return \"Second Roll\";\n        case 2:\n          return \"Last Roll\";\n        case 3:\n          return \"Score\";\n        default:\n          return \"Error\";\n      }\n    },\n    [finish],\n  );\n\n  const handleTopScore = (points: number, i: number): void => {\n    const newTopScores = [...topScores];\n    newTopScores[i] = points;\n    updateTop(newTopScores);\n  };\n\n  const handleBottomScore = (points: number, i: number): void => {\n    const newBottomScores = [...bottomScores];\n    newBottomScores[i] = points;\n    updateBottom(newBottomScores);\n  };\n\n  const top = topScores.map((score, i) => ({ ...topConstants[i], score }));\n  const bottom = bottomScores.map((score, i) => ({\n    ...bottomConstants[i],\n    score,\n  })) as BottomGameScore[];\n\n  return (\n    <>\n      <Header\n        bestScore={bestScore}\n        lastScore={lastScore}\n        money={money}\n        name={name}\n      />\n      <hr aria-hidden />\n      <TableHeader\n        values={values}\n        saved={saved}\n        roll={roll}\n        handleUnsave={handleUnsave}\n        handleSave={handleSave}\n        handleDiceRoll={handleDiceRoll}\n        getButtonText={getButtonText}\n      />\n      <hr aria-hidden />\n      <Typography variant=\"h4\">{`Total: ${\n        finalTopSum + bottomSum\n      }`}</Typography>\n      <ScoreTable\n        values={[...saved, ...values]}\n        bottom={bottom}\n        top={top}\n        onTopScore={handleTopScore}\n        onBottomScore={handleBottomScore}\n        showScoreButtons={showScoreButtons}\n        topSum={topSum}\n        finalTopSum={finalTopSum}\n        bottomSum={bottomSum}\n      />\n    </>\n  );\n});\n\nYahtzee.displayName = \"Yahtzee\";\n\nexport default Yahtzee;\n"],"names":["Header","React.memo","sx","jsx","TableHead","TableRow","TableCell","TopScores","topSum","finalTopSum","jsxs","Fragment","getHistogram","hist","val","hasXDice","values","hasDice","value","isFullHouse","has3","has2","isStraight","length","count","i","canYahtzeeBonus","top","acc","key","TopTable","bottom","showScoreButtons","getScoreButton","getButtonInfo","d","yahtzeeBonus","getTopTableButtons","score","showButton","sum","name","ADD_DICE","BottomScores","bottomSum","getDiceValue","BottomTable","getBottomTableButtons","React.useCallback","points","hasYahtzee","generateBottomTable","gameScore","hint","parsedPoints","centerStyle","ScoreTable","onTopScore","onBottomScore","wasTop","Button","Table","TableBody","bestScore","lastScore","money","Typography","PlayerMenu","wrapperStyles","TableHeader","saved","roll","handleUnsave","handleSave","handleDiceRoll","getButtonText","newYahtzee","yahtzeeAtom","atomWithStorage","yahtzeeRead","atom","get","topScores","bottomScores","playerAtom","finish","yahtzeeState","yahtzee","set","players","newPlayers","useYahtzeeState","state","setState","useAtom","payToPlay","topConstants","bottomConstants","Yahtzee","diceClick","newGame","updateTop","updateBottom","updateRoll","useAtomValue","newValues","newSaved","rollNum","handleTopScore","newTopScores","handleBottomScore","newBottomScores"],"mappings":"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"}