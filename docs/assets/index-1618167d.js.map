{"version":3,"file":"index-1618167d.js","sources":["../../src/apis/SlotMachine.ts","../../src/recoil/slots-state.ts","../../src/components/games/slots/PayoutTable.tsx","../../src/components/games/slots/MoneyTable.tsx","../../src/components/games/slots/ReelDisplay.tsx","../../src/components/games/slots/Slots.tsx"],"sourcesContent":["export enum SlotOption {\n  EMPTY = \"-\",\n  CHERRY = \"🍒\",\n  BAR = \"🍺\",\n  DOUBLE_BAR = \"🍻\",\n  TRIPLE_BAR = \"🥃\",\n  SEVEN = \"❌\",\n  JACKPOT = \"💰\",\n}\nexport type SlotDisplay = [SlotOption, SlotOption, SlotOption];\n\ninterface Reel {\n  symbol: SlotOption;\n  start: number;\n  stop: number;\n}\n\nconst NUM_REELS = 3;\n\n/** options to be displayed on slot machine */\nconst reels: Reel[] = [\n  { symbol: SlotOption.CHERRY, start: 1, stop: 2 },\n  { symbol: SlotOption.EMPTY, start: 3, stop: 7 },\n  { symbol: SlotOption.BAR, start: 8, stop: 12 },\n  { symbol: SlotOption.EMPTY, start: 13, stop: 17 },\n  { symbol: SlotOption.SEVEN, start: 18, stop: 25 },\n  { symbol: SlotOption.EMPTY, start: 26, stop: 30 },\n  { symbol: SlotOption.BAR, start: 31, stop: 35 },\n  { symbol: SlotOption.EMPTY, start: 36, stop: 41 },\n  { symbol: SlotOption.CHERRY, start: 42, stop: 43 },\n  { symbol: SlotOption.EMPTY, start: 44, stop: 49 },\n  { symbol: SlotOption.DOUBLE_BAR, start: 50, stop: 56 },\n  { symbol: SlotOption.EMPTY, start: 57, stop: 62 },\n  { symbol: SlotOption.CHERRY, start: 63, stop: 63 },\n  { symbol: SlotOption.EMPTY, start: 64, stop: 69 },\n  { symbol: SlotOption.DOUBLE_BAR, start: 70, stop: 75 },\n  { symbol: SlotOption.EMPTY, start: 76, stop: 81 },\n  { symbol: SlotOption.BAR, start: 82, stop: 87 },\n  { symbol: SlotOption.EMPTY, start: 88, stop: 93 },\n  { symbol: SlotOption.TRIPLE_BAR, start: 94, stop: 104 },\n  { symbol: SlotOption.EMPTY, start: 105, stop: 115 },\n  { symbol: SlotOption.JACKPOT, start: 116, stop: 117 },\n  { symbol: SlotOption.EMPTY, start: 118, stop: 128 },\n];\n\n/** prepare the slot machine */\nfunction prepareSlotMachine(): SlotDisplay[] {\n  const machine: SlotDisplay[] = [];\n  reels.forEach((reel: Reel, i: number) => {\n    // wrap the reels\n    const prev = i - 1 > 0 ? i - 1 : reels.length - 1;\n    const next = (i + 1) % reels.length;\n    // create the machine\n    for (let j = reel.start; j <= reel.stop; j += 1) {\n      machine.push([reels[prev].symbol, reel.symbol, reels[next].symbol]);\n    }\n  });\n  return machine;\n}\n\nconst machine = prepareSlotMachine();\n\n/** spin the slot machine and get a result */\nexport function spin(): SlotDisplay {\n  return machine[Math.floor(Math.random() * machine.length)];\n}\n\n/** Pull the slot machine handle, returns info needed for display */\nconst pullHandle = (): SlotDisplay[] => {\n  const reel = [];\n  for (let i = 0; i < NUM_REELS; i += 1) {\n    reel[i] = spin();\n  }\n  return reel;\n};\n\n/**\n * evaluate slot machine based of 3 reels\n * https://vegasclick.com/games/slots/how-they-work\n */\nconst getPayout = (reel: SlotDisplay[], bet: number): number => {\n  // for bar check\n  const bars = [SlotOption.BAR, SlotOption.DOUBLE_BAR, SlotOption.TRIPLE_BAR];\n  // get reel values\n  const r0 = reel[0][1];\n  const r1 = reel[1][1];\n  const r2 = reel[2][1];\n  const fReel = [r0, r1, r2];\n  // check if they match\n  const m01 = r0 === r1;\n  const m02 = r0 === r2;\n  // if we have 3 of a kind\n  if (m01 && m02) {\n    switch (r0) {\n      case SlotOption.JACKPOT:\n        return 1666 * bet;\n      case SlotOption.SEVEN:\n        return 300 * bet;\n      case SlotOption.TRIPLE_BAR:\n        return 100 * bet;\n      case SlotOption.DOUBLE_BAR:\n        return 50 * bet;\n      case SlotOption.BAR:\n        return 25 * bet;\n      case SlotOption.CHERRY:\n        return 12 * bet;\n      default:\n        return 0;\n    }\n  } else if (bars.includes(r0) && bars.includes(r1) && bars.includes(r2)) {\n    // if we have 3 of any bar\n    return 12 * bet;\n  } else if (\n    fReel.includes(SlotOption.CHERRY, fReel.indexOf(SlotOption.CHERRY) + 1)\n  ) {\n    // if we have 2 cherries\n    return 6 * bet;\n  } else if (fReel.includes(SlotOption.CHERRY)) {\n    // if we have 1 cherry\n    return 3 * bet;\n  }\n  return 0;\n};\n\nexport default {\n  pullHandle,\n  getPayout,\n};\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport SlotMachine, { SlotDisplay } from \"../apis/SlotMachine\";\nimport playerAtom from \"./player-atom\";\n\nexport const slotsAtom = atom({\n  key: \"slotsAtom\",\n  default:\n    (JSON.parse(\n      localStorage.getItem(\"slots-atom\") || \"null\"\n    ) as SlotDisplay[]) || SlotMachine.pullHandle(),\n  effects: [\n    ({ onSet }) => {\n      onSet((newReel) => {\n        localStorage.setItem(\"slots-atom\", JSON.stringify(newReel));\n      });\n    },\n  ],\n});\n\nconst slotsState = selector({\n  key: \"slotsState\",\n  get: ({ get }) => {\n    const reel = get(slotsAtom);\n    const players = get(playerAtom);\n    const player = players[0];\n    const dealer = players[players.length - 1];\n\n    return { reel, player, dealer };\n  },\n  set: ({ get, set }, state) => {\n    if (!(state instanceof DefaultValue)) {\n      const { reel, player, dealer } = state;\n      set(slotsAtom, reel);\n\n      const players = get(playerAtom);\n      const newPlayers = [...players];\n      newPlayers[0] = player;\n      newPlayers[players.length - 1] = dealer;\n      set(playerAtom, newPlayers);\n    }\n  },\n});\n\nexport default slotsState;\n","import * as React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { SlotOption as SO } from \"../../../apis/SlotMachine\";\n\n/** used to display the payout table */\nconst payoutTable = [\n  { symbol: `${SO.JACKPOT} ${SO.JACKPOT} ${SO.JACKPOT}`, payout: 1666 },\n  { symbol: `${SO.SEVEN} ${SO.SEVEN} ${SO.SEVEN}`, payout: 300 },\n  { symbol: `${SO.TRIPLE_BAR} ${SO.TRIPLE_BAR} ${SO.TRIPLE_BAR}`, payout: 100 },\n  { symbol: `${SO.DOUBLE_BAR} ${SO.DOUBLE_BAR} ${SO.DOUBLE_BAR}`, payout: 50 },\n  { symbol: `${SO.BAR} ${SO.BAR} ${SO.BAR}`, payout: 25 },\n  {\n    symbol: `3 of any ${SO.BAR} ${SO.DOUBLE_BAR} ${SO.TRIPLE_BAR}`,\n    payout: 12,\n  },\n  { symbol: `${SO.CHERRY} ${SO.CHERRY} ${SO.CHERRY}`, payout: 12 },\n  { symbol: `${SO.CHERRY} ${SO.CHERRY}`, payout: 6 },\n  { symbol: SO.CHERRY, payout: 3 },\n];\n\nconst PayoutTable: React.FC = React.memo(() => (\n  <Table>\n    <TableHead>\n      <TableRow>\n        <TableCell>Slot Roll</TableCell>\n        <TableCell>Payout</TableCell>\n      </TableRow>\n    </TableHead>\n    <TableBody>\n      {payoutTable.map((row, i) => (\n        <TableRow key={i}>\n          <TableCell>{row.symbol}</TableCell>\n          <TableCell>{`${row.payout} : 1`}</TableCell>\n        </TableRow>\n      ))}\n    </TableBody>\n  </Table>\n));\n\nexport default PayoutTable;\n","import * as React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\n\ninterface MoneyTableProps {\n  playerName: string;\n  playerMoney: number;\n  dealerMoney: number;\n}\n\nconst MoneyTable: React.FC<MoneyTableProps> = React.memo(\n  ({ playerName, playerMoney, dealerMoney }: MoneyTableProps) => (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Player</TableCell>\n          <TableCell>Money</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        <TableRow>\n          <TableCell>{playerName}</TableCell>\n          <TableCell>{`$${playerMoney}`}</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>House</TableCell>\n          <TableCell>{`$${dealerMoney}`}</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  )\n);\n\nexport default MoneyTable;\n","import * as React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Typography from \"@mui/material/Typography\";\nimport { SlotDisplay } from \"../../../apis/SlotMachine\";\n\ninterface ReelDisplayProps {\n  reel: SlotDisplay[];\n}\n\nconst cellStyles: React.CSSProperties = {\n  minHeight: 39,\n  fontWeight: 900,\n};\n\nconst ReelDisplay: React.FC<ReelDisplayProps> = (props: ReelDisplayProps) => {\n  const { reel } = props;\n  /** generate code for slot machine */\n  const getSlots = React.useCallback((): React.ReactNode[] => {\n    // display for slots\n    const slots = [];\n    for (let i = 0; i < 3; i += 1) {\n      // create 3 cells in a row\n      const row = reel.map((reelRow, j) => (\n        <TableCell key={`${j},${i}`}>\n          <Typography\n            variant=\"h4\"\n            component=\"h2\"\n            align=\"center\"\n            style={cellStyles}\n          >\n            {reelRow[i]}\n          </Typography>\n        </TableCell>\n      ));\n      // separate into rows\n      const slotRow = <TableRow key={`row${i}`}>{row}</TableRow>;\n      slots.push(slotRow);\n    }\n    return slots;\n  }, [reel]);\n\n  return (\n    <Table>\n      <TableBody>{getSlots()}</TableBody>\n    </Table>\n  );\n};\n\nexport default ReelDisplay;\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport { useRecoilState } from \"recoil\";\nimport slotsState from \"../../../recoil/slots-state\";\nimport PayoutTable from \"./PayoutTable\";\nimport MoneyTable from \"./MoneyTable\";\nimport ReelDisplay from \"./ReelDisplay\";\nimport SlotMachine from \"../../../apis/SlotMachine\";\n\n/* Slots  ->  ReelDisplay\n *       |->  MoneyTable\n *       |->  PayoutTable */\nconst Slots: React.FC = () => {\n  const [{ reel, player, dealer }, setState] = useRecoilState(slotsState);\n  const [exchange, setExchange] = React.useState(0);\n\n  const updateSlotMachine = () => {\n    // get rolled reel\n    const newReel = SlotMachine.pullHandle();\n\n    // determine payout\n    const { bet } = player;\n    const newExchange = SlotMachine.getPayout(newReel, bet) - bet;\n\n    // exchange money and update state\n    setExchange(newExchange);\n    setState({\n      reel: newReel,\n      player: { ...player, money: player.money + newExchange },\n      dealer: { ...dealer, money: dealer.money - newExchange },\n    });\n  };\n\n  return (\n    <>\n      <Typography variant=\"h2\" component=\"h1\">\n        Casino Slot Machine\n      </Typography>\n      <Grid container spacing={1} style={{ marginTop: \"2em\" }}>\n        <Grid item sm={6} xs={12}>\n          <Grid container spacing={1} style={{ marginBottom: \"1em\" }}>\n            <Grid item sm={3} xs={12}>\n              <Button\n                onClick={updateSlotMachine}\n                style={{ marginBottom: 15 }}\n                variant=\"contained\"\n              >\n                Spin\n              </Button>\n              {exchange ? (\n                <Typography variant=\"h4\" component=\"h2\">{`You ${\n                  exchange > 0 ? \"won\" : \"lost\"\n                } $${exchange}`}</Typography>\n              ) : null}\n            </Grid>\n            <Grid item sm={9} xs={12}>\n              <ReelDisplay reel={reel} />\n            </Grid>\n          </Grid>\n          <MoneyTable\n            playerMoney={player.money}\n            playerName={player.name}\n            dealerMoney={dealer.money}\n          />\n        </Grid>\n        <Grid item sm={6} xs={12}>\n          <PayoutTable />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Slots;\n"],"names":["SlotOption","NUM_REELS","reels","prepareSlotMachine","machine","reel","i","prev","next","j","spin","pullHandle","getPayout","bet","bars","r0","r1","r2","fReel","SlotMachine","slotsAtom","atom","onSet","newReel","slotsState","selector","get","players","playerAtom","player","dealer","set","state","DefaultValue","newPlayers","payoutTable","SO","PayoutTable","React.memo","Table","jsx","TableHead","TableRow","TableCell","TableBody","row","MoneyTable","playerName","playerMoney","dealerMoney","jsxs","cellStyles","ReelDisplay","props","getSlots","React.useCallback","slots","reelRow","Typography","slotRow","Slots","setState","useRecoilState","exchange","setExchange","React.useState","updateSlotMachine","newExchange","Fragment","Grid","Button","Slots$1"],"mappings":"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"}