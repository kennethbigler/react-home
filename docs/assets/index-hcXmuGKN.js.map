{"version":3,"file":"index-hcXmuGKN.js","sources":["../../src/recoil/blackjack-state.ts","../../src/components/games/blackjack/blackjackAI.ts","../../src/components/games/blackjack/blackjackHelpers.ts","../../src/components/games/blackjack/Rules.tsx","../../src/components/games/blackjack/help/Cell.tsx","../../src/components/games/blackjack/help/Row.tsx","../../src/components/games/blackjack/help/BlackjackTable.tsx","../../src/components/games/blackjack/help/Help.tsx","../../src/components/games/blackjack/Header.tsx","../../src/components/games/blackjack/Blackjack.tsx"],"sourcesContent":["import { atom, DefaultValue, selector } from \"recoil\";\nimport playerAtom from \"./player-atom\";\nimport turnAtom from \"./turn-atom\";\n\nexport enum GameFunctions {\n  NEW_GAME = \"New Game\",\n  FINISH_BETTING = \"Finish Betting\",\n  STAY = \"Stay\",\n  HIT = \"Hit\",\n  DOUBLE = \"Double\",\n  SPLIT = \"Split\",\n}\n\nexport interface BlackjackState {\n  gameFunctions: string[];\n  hideHands: boolean;\n}\n\nexport const newBlackjackGame = (): BlackjackState => ({\n  gameFunctions: [GameFunctions.FINISH_BETTING],\n  hideHands: true,\n});\n\nexport const blackjackAtom = atom({\n  key: \"blackjackAtom\",\n  default:\n    (JSON.parse(\n      localStorage.getItem(\"blackjack-atom\") || \"null\",\n    ) as BlackjackState) || newBlackjackGame(),\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"blackjack-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\nconst blackjackState = selector({\n  key: \"blackjackState\",\n  get: ({ get }) => {\n    const bj = get(blackjackAtom);\n    const players = get(playerAtom);\n    const turn = get(turnAtom);\n\n    return { bj, players, turn };\n  },\n  set: ({ set }, state) => {\n    if (!(state instanceof DefaultValue)) {\n      const { bj, turn, players } = state;\n      set(blackjackAtom, bj);\n      set(turnAtom, turn);\n      set(playerAtom, players);\n    }\n  },\n});\n\nexport default blackjackState;\n","import Deck, { DBCard } from \"../../../apis/Deck\";\nimport asyncForEach from \"../../../apis/asyncForEach\";\nimport { BlackjackState, GameFunctions } from \"../../../recoil/blackjack-state\";\nimport { DBHand, DBPlayer } from \"../../../recoil/player-atom\";\nimport { TurnState } from \"../../../recoil/turn-atom\";\n\n// Dealer constant\nexport const DEALER = 0;\nconst D_H_TURN = 0;\n\ninterface PlayerStats {\n  house: number;\n  payout: number;\n  status: string;\n}\n\ninterface FullBlackJackState {\n  turn: TurnState;\n  players: DBPlayer[];\n  bj: BlackjackState;\n}\n\ninterface PlayBotState {\n  hands: DBHand[];\n  doubled?: boolean;\n}\n\n/** calculate the weight of a hand */\nexport function weighHand(hand: DBCard[] = []): {\n  weight: number;\n  soft: boolean;\n} {\n  // set return values\n  let weight = 0;\n  let soft = false;\n\n  // find the weight of the hand\n  hand.forEach((card) => {\n    const cardWeight = card.weight || 0;\n    if (cardWeight === 14) {\n      // A\n      if (weight <= 10) {\n        weight += 11;\n        soft = true;\n      } else {\n        weight += 1;\n      }\n    } else if (cardWeight > 10) {\n      // J - K\n      weight += 10;\n    } else {\n      // 2 - 10\n      weight += cardWeight;\n    }\n    // reduce by 10 if bust and soft\n    if (weight > 21 && soft) {\n      weight -= 10;\n      soft = false;\n    }\n  });\n\n  // return object w/ useful information\n  return { weight, soft };\n}\n\n/** finish the game and check for a winner */\nconst banking = (players: DBPlayer[]): DBPlayer[] => {\n  // state variables\n  const dealer = players.filter((p) => p.id === DEALER)[0];\n  const dWeight = dealer.hands[0].weight || 0;\n  const dLength = dealer.hands[0].cards.length;\n  // track and find the winners\n  const playerStats: PlayerStats = { house: 0, payout: 0, status: \"\" };\n  // helper functions\n  const win = (ps: PlayerStats, bet: number, mul = 1): void => {\n    ps.house -= Math.floor(mul * bet);\n    ps.payout = Math.floor(mul * bet);\n    ps.status = \"win\";\n  };\n  const loss = (ps: PlayerStats, bet: number): void => {\n    ps.house += bet;\n    ps.payout = -bet;\n    ps.status = \"lose\";\n  };\n  return players.map((player) => {\n    const { id, bet } = player;\n    if (id === DEALER) {\n      if (playerStats.house > 0) {\n        playerStats.status = \"win\";\n      } else if (playerStats.house < 0) {\n        playerStats.status = \"lose\";\n      } else {\n        playerStats.status = \"push\";\n      }\n      return {\n        ...player,\n        status: playerStats.status,\n        money: player.money + playerStats.house,\n      };\n    }\n    player.hands.forEach((hand) => {\n      const { weight = 0, cards } = hand;\n      if (dWeight === 21 && dLength === 2) {\n        // dealer BlackJack\n        loss(playerStats, bet);\n      } else if (weight === 21 && cards.length === 2) {\n        // player BlackJack\n        win(playerStats, bet, 6 / 5);\n      } else if (weight <= 21 && (weight > dWeight || dWeight > 21)) {\n        win(playerStats, bet);\n      } else if (weight <= 21 && weight === dWeight) {\n        playerStats.payout = 0;\n        playerStats.status = \"push\";\n      } else {\n        loss(playerStats, bet);\n      }\n    });\n    return {\n      ...player,\n      status: playerStats.status,\n      money: player.money + playerStats.payout,\n    };\n  });\n};\n\n/** function to get a new card */\nexport const hitBotHelper = async (hand: DBHand): Promise<DBHand> => {\n  // draw 1 card\n  const drawnCards = await Deck.deal(1);\n  // update hands\n  const cards = [...hand.cards, ...drawnCards];\n  const { weight, soft } = weighHand(cards);\n  const newHand = { cards, weight, soft };\n  return newHand;\n};\n\n/** function that takes a hand of duplicates and makes 2 hands */\nexport const splitBotHelper = async (hand: DBHand): Promise<DBHand[]> => {\n  // get new cards\n  const newCards = await Deck.deal(2);\n  // create 2 hands\n  const hand1: DBHand = { cards: [hand.cards[0]] };\n  const hand2: DBHand = { cards: [hand.cards[1]] };\n  hand1.cards.push(newCards[0]);\n  hand2.cards.push(newCards[1]);\n  // update hand weights\n  Object.assign(hand1, weighHand(hand1.cards));\n  Object.assign(hand2, weighHand(hand2.cards));\n  // return new hands\n  return [hand1, hand2];\n};\n\n/** dealer recursive function */\nconst playDealer = async (dealer: DBPlayer): Promise<DBPlayer> => {\n  const { weight: pW, soft: pS } = weighHand(dealer.hands[D_H_TURN].cards);\n\n  // Dealer hits on 16 or less and soft 17\n  if (pW <= 16 || (pW === 17 && pS)) {\n    // get state values\n    const { hands } = dealer;\n    // logic to hit\n    const drawnCards = await Deck.deal(1);\n    const cards = [...hands[D_H_TURN].cards, ...drawnCards];\n    const { weight, soft } = weighHand(cards);\n    const newHands = [{ cards, weight, soft }];\n    // recursion\n    return playDealer({ ...dealer, hands: newHands });\n  }\n  return dealer;\n};\n\n/** function to play 1 player, link to AI above, return to stay (recursion) */\nconst playBot = async (hand: DBHand, dealer: DBHand): Promise<PlayBotState> => {\n  const n = hand.weight || 0;\n  const { soft } = hand;\n  // card / dealer weight\n  const { weight: d } = weighHand([dealer.cards[0]]);\n  const { weight: x } = weighHand([hand.cards[0]]);\n  const { weight: y } = weighHand([hand.cards[1]]);\n\n  // play AI logic\n  if (n < 22) {\n    // split algorithm\n    if (x === y) {\n      if (x === 2 || x === 3 || x === 7) {\n        // 2,3,7, split d2-7, hit d8+\n        if (d <= 7) {\n          // split\n          const [hand1, hand2] = await splitBotHelper(hand);\n          const { hands: hands1 } = await playBot(hand1, dealer);\n          const { hands: hands2 } = await playBot(hand2, dealer);\n          return { hands: [...hands1, ...hands2] };\n        }\n        // hit\n        const newHand = await hitBotHelper(hand);\n        return playBot(newHand, dealer);\n      }\n      if (x === 4) {\n        // 4, split d5-6, else hit\n        if (d === 5 || d === 6) {\n          // split\n          const [hand1, hand2] = await splitBotHelper(hand);\n          const { hands: hands1 } = await playBot(hand1, dealer);\n          const { hands: hands2 } = await playBot(hand2, dealer);\n          return { hands: [...hands1, ...hands2] };\n        }\n        // hit\n        const newHand = await hitBotHelper(hand);\n        return playBot(newHand, dealer);\n      }\n      if (x === 5) {\n        // 5, double d2-9, hit d10+\n        if (d <= 9) {\n          // double\n          const newHand = await hitBotHelper(hand);\n          return { hands: [newHand], doubled: true };\n        }\n        // hit\n        const newHand = await hitBotHelper(hand);\n        return playBot(newHand, dealer);\n      }\n      if (x === 6) {\n        // 6, split d2-6, else hit\n        if (d <= 6) {\n          // split\n          const [hand1, hand2] = await splitBotHelper(hand);\n          const { hands: hands1 } = await playBot(hand1, dealer);\n          const { hands: hands2 } = await playBot(hand2, dealer);\n          return { hands: [...hands1, ...hands2] };\n        }\n        // hit\n        const newHand = await hitBotHelper(hand);\n        return playBot(newHand, dealer);\n      }\n      if (x === 9) {\n        // 9, d7,10+ stay, else split\n        if (d === 7 || d >= 10) {\n          return { hands: [hand] }; // stay\n        }\n        // split\n        const [hand1, hand2] = await splitBotHelper(hand);\n        const { hands: hands1 } = await playBot(hand1, dealer);\n        const { hands: hands2 } = await playBot(hand2, dealer);\n        return { hands: [...hands1, ...hands2] };\n      }\n      if (x === 8 || x === 11) {\n        // 8,A split\n        const [hand1, hand2] = await splitBotHelper(hand);\n        const { hands: hands1 } = await playBot(hand1, dealer);\n        const { hands: hands2 } = await playBot(hand2, dealer);\n        return { hands: [...hands1, ...hands2] };\n      }\n      // 10 Stay\n      return { hands: [hand] }; // stay\n    }\n    if (n < 20 && soft) {\n      // soft hands, A9+ stays\n      if (n === 13 || n === 14) {\n        // A2-A3 double d5-6, hit d2-4, d7-A\n        if (d === 5 || d === 6) {\n          // double\n          const newHand = await hitBotHelper(hand);\n          return { hands: [newHand], doubled: true };\n        }\n        // hit\n        const newHand = await hitBotHelper(hand);\n        return playBot(newHand, dealer);\n      }\n      if (n === 15 || n === 16) {\n        // A4-A5 double d4-6, hit d2-3, d7-A\n        if (d >= 4 && d <= 6) {\n          // double\n          const newHand = await hitBotHelper(hand);\n          return { hands: [newHand], doubled: true };\n        }\n        // hit\n        const newHand = await hitBotHelper(hand);\n        return playBot(newHand, dealer);\n      }\n      if (n === 17) {\n        // A6 double d3-6, hit d2, d7-A\n        if (d >= 3 && d <= 6) {\n          // double\n          const newHand = await hitBotHelper(hand);\n          return { hands: [newHand], doubled: true };\n        }\n        // hit\n        const newHand = await hitBotHelper(hand);\n        return playBot(newHand, dealer);\n      }\n      if (n === 18) {\n        // A7 double d2-6, stay d7-8, hit d9-A\n        if (d >= 2 && d <= 6) {\n          // double\n          const newHand = await hitBotHelper(hand);\n          return { hands: [newHand], doubled: true };\n        }\n        if (d === 7 || d === 8) {\n          return { hands: [hand] }; // stay\n        }\n        // hit\n        const newHand = await hitBotHelper(hand);\n        return playBot(newHand, dealer);\n      }\n      if (n === 19) {\n        // A8 double d6, else stay\n        if (d === 6) {\n          // double\n          const newHand = await hitBotHelper(hand);\n          return { hands: [newHand], doubled: true };\n        }\n        return { hands: [hand] }; // stay\n      }\n    } else if (n < 17 && !soft) {\n      // hard hands, 17+ stays\n      if (n >= 5 && n <= 8) {\n        // 5-8 hit\n        // hit\n        const newHand = await hitBotHelper(hand);\n        return playBot(newHand, dealer);\n      }\n      if (n === 9) {\n        // 9 double d3-6, hit d2, d7-A\n        if (d >= 3 && d <= 6) {\n          // double\n          const newHand = await hitBotHelper(hand);\n          return { hands: [newHand], doubled: true };\n        }\n        // hit\n        const newHand = await hitBotHelper(hand);\n        return playBot(newHand, dealer);\n      }\n      if (n === 10) {\n        // 10 double d2-9, hit d10-A\n        if (d >= 2 && d <= 9) {\n          // double\n          const newHand = await hitBotHelper(hand);\n          return { hands: [newHand], doubled: true };\n        }\n        // hit\n        const newHand = await hitBotHelper(hand);\n        return playBot(newHand, dealer);\n      }\n      if (n === 11) {\n        // 11 double\n        const newHand = await hitBotHelper(hand);\n        return { hands: [newHand], doubled: true };\n      }\n      if (n === 12) {\n        // 12 hit d2-3, stay d4-6, hit 7-A\n        if (d >= 4 && d <= 6) {\n          return { hands: [hand] };\n        }\n        // hit\n        const newHand = await hitBotHelper(hand);\n        return playBot(newHand, dealer);\n      }\n      if (n >= 13 && n <= 16) {\n        // 13-16 stay d2-6, hit 7-A\n        if (d >= 2 && d <= 6) {\n          return { hands: [hand] }; // stay\n        }\n        // hit\n        const newHand = await hitBotHelper(hand);\n        return playBot(newHand, dealer);\n      }\n    } else {\n      return { hands: [hand] }; // stay\n    }\n  } else {\n    // bust\n    return { hands: [hand] }; // stay\n  }\n  return { hands: [hand] }; // stay\n};\n\n/** Function to play all AI players\n * AI: https://www.blackjackinfo.com/blackjack-basic-strategy-engine/\n */\nexport const playBots = async (\n  statePlayers: DBPlayer[],\n  stateTurn: TurnState,\n): Promise<FullBlackJackState> => {\n  // get state\n  const players = [...statePlayers];\n  let turn = { ...stateTurn };\n\n  // play each bot\n  const DEALER_IDX = players.length - 1;\n  const dealerHand = players[DEALER_IDX].hands[D_H_TURN];\n  const bots = players.slice(turn.player, DEALER_IDX);\n  await asyncForEach(bots, async (bot) => {\n    const { hands, doubled } = await playBot(bot.hands[D_H_TURN], dealerHand);\n    players[turn.player] = {\n      ...players[turn.player],\n      hands,\n      bet: players[turn.player].bet * (doubled ? 2 : 1),\n    };\n    turn = { player: turn.player + 1, hand: D_H_TURN };\n  });\n\n  // play dealer\n  const dealer = players[DEALER_IDX];\n  const newDealer = await playDealer({ ...dealer });\n  players[DEALER_IDX] = newDealer;\n\n  // return new state\n  return {\n    turn,\n    players: banking(players),\n    bj: { gameFunctions: [GameFunctions.NEW_GAME], hideHands: false },\n  };\n};\n","import { GameFunctions } from \"../../../recoil/blackjack-state\";\nimport { DBHand, DBPlayer } from \"../../../recoil/player-atom\";\nimport { hitBotHelper, splitBotHelper, weighHand } from \"./blackjackAI\";\n\n/** function that takes a hand of duplicates and makes 2 hands */\nexport const splitHelper = async (\n  player: DBPlayer,\n  handTurn: number,\n): Promise<DBHand[]> => {\n  const { hands } = player;\n  const [hand1, hand2] = await splitBotHelper(hands[handTurn]);\n  // update global hands\n  const newHands = hands.map((item, i) => (i !== handTurn ? item : hand2));\n  newHands.splice(handTurn, 0, hand1);\n  return newHands;\n};\n\n/** function to get a new card */\nexport const hitHelper = async (\n  player: DBPlayer,\n  handTurn: number,\n): Promise<DBHand[]> => {\n  const { hands } = player;\n  const newHand = await hitBotHelper(hands[handTurn]);\n  const newHands = hands.map((item, i) => (i !== handTurn ? item : newHand));\n  return newHands;\n};\n\n/** get the game functions for the present hand */\nexport const getGameFunctions = (hand: DBHand): GameFunctions[] => {\n  if (!hand) {\n    return [];\n  }\n\n  // reset game functions\n  const newGameFunctions = [GameFunctions.STAY];\n  const handWeight = hand.weight || 0;\n\n  // check if not a bust\n  if (handWeight < 21) {\n    newGameFunctions.push(GameFunctions.HIT);\n    // check if you only have 2 cards\n    if (hand.cards.length === 2) {\n      newGameFunctions.push(GameFunctions.DOUBLE);\n      // check if card1 and card2 have equal weight\n      const { weight: weight1 } = weighHand([hand.cards[0]]);\n      const { weight: weight2 } = weighHand([hand.cards[1]]);\n      if (weight1 === weight2) {\n        newGameFunctions.push(GameFunctions.SPLIT);\n      }\n    }\n  }\n\n  return newGameFunctions;\n};\n","import * as React from \"react\";\nimport Typography from \"@mui/material/Typography\";\n\nconst Rules = React.memo(() => (\n  <>\n    <Typography variant=\"h5\">Objective:</Typography>\n    <Typography>\n      Get as close to 21 as you can, without going over. Each card is worth\n      it&apos;s number, J/Q/K are worth 10, and an Ace is worth 11 unless you go\n      over 21, then it is worth 1.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">Blackjack:</Typography>\n    <Typography>\n      Delt an Ace and a 10/J/Q/K, this casino pays 3:2, but Vegas casinos do\n      6:5.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">Hit:</Typography>\n    <Typography>Get an extra card which adds to your total.</Typography>\n    <br />\n    <Typography variant=\"h5\">Stay:</Typography>\n    <Typography>Move to the next player.</Typography>\n    <br />\n    <Typography variant=\"h5\">Double Down:</Typography>\n    <Typography>\n      This option is available with a two card hand; before another card has\n      been drawn double your bet and receive one (and only one) additional card\n      to your hand. Play then moves to the next player.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">Splitting Pairs:</Typography>\n    <Typography>\n      When you are dealt a pair of cards of the same rank, you are allowed to\n      split into two separate hands and play them independently. You will match\n      your bet for the second hand. A double after a split is ok\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">Resplitting:</Typography>\n    <Typography>\n      When you get additional pairs in the first two cards of a hand you can\n      resplit. Typically a player is allowed to split up to 3 times (delt 4 of a\n      kind).\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">Splitting Aces:</Typography>\n    <Typography>\n      Player is limited to drawing only one additional card on each Ace. If you\n      draw a ten-valued card on one of your split Aces, the hand is not\n      considered a Blackjack (it is treated as a normal 21). You can re-split\n      Aces.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">Other Rules:</Typography>\n    <ul>\n      <li>\n        <Typography>Dealer hits on 16 or less and soft 17</Typography>\n      </li>\n      <li>\n        <Typography>Minimum bet is $5</Typography>\n      </li>\n    </ul>\n    <Typography variant=\"h5\">AI Algorithm:</Typography>\n    <ul>\n      <li>\n        <Typography>\n          House Rules: 6 decks, H17, DAS, No Surrender, Peek\n        </Typography>\n      </li>\n      <li>\n        <Typography>Estimated casino edge for these rules: 0.66%</Typography>\n      </li>\n    </ul>\n  </>\n));\n\nRules.displayName = \"Rules\";\n\nexport default Rules;\n","import * as React from \"react\";\nimport TableCell from \"@mui/material/TableCell\";\n\nexport interface CellProps {\n  color?: string;\n  style?: React.CSSProperties;\n  text: string;\n  rowSpan?: number;\n  colSpan?: number;\n}\n\nconst Cell = ({ color, text, style, ...otherProps }: CellProps) => {\n  const stl: React.CSSProperties = {\n    ...style,\n    textAlign: \"center\",\n    paddingLeft: 0,\n    paddingRight: 0,\n    backgroundColor: color,\n  };\n\n  return (\n    <TableCell size=\"small\" style={stl} {...otherProps}>\n      {text}\n    </TableCell>\n  );\n};\n\nCell.displayName = \"Cell\";\n\nexport default Cell;\n","import * as React from \"react\";\nimport TableRow from \"@mui/material/TableRow\";\nimport TableCell from \"@mui/material/TableCell\";\nimport Cell, { CellProps } from \"./Cell\";\n\nexport interface RowProps {\n  data: CellProps[];\n  name: string;\n}\n\nconst tableCellStyle: React.CSSProperties = { textAlign: \"center\", padding: 0 };\n\nconst Row = ({ name, data }: RowProps) => (\n  <TableRow>\n    <TableCell style={tableCellStyle} component=\"th\" scope=\"row\">\n      {name}\n    </TableCell>\n    {data.map((text, i) => (\n      <Cell key={i} {...text} />\n    ))}\n  </TableRow>\n);\n\nexport default Row;\n","import * as React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Cell from \"./Cell\";\nimport Row, { RowProps } from \"./Row\";\n\ninterface BlackjackTableProps {\n  data: RowProps[];\n  title: string;\n}\n\nconst cards: string[] = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"T\", \"A\"];\nconst cellStyle: React.CSSProperties = { width: 60 };\n\nconst BlackjackTable = ({ title, data }: BlackjackTableProps) => (\n  <Table aria-label={`ideal play strategy for ${title}`}>\n    <TableHead>\n      <TableRow>\n        <TableCell colSpan={11}>{title}</TableCell>\n      </TableRow>\n      <TableRow>\n        <Cell rowSpan={2} style={cellStyle} text=\"Hand\" />\n        <Cell colSpan={10} text=\"Dealer\" />\n      </TableRow>\n      <TableRow>\n        {cards.map((c) => (\n          <Cell key={c} text={c} />\n        ))}\n      </TableRow>\n    </TableHead>\n    <TableBody>\n      {data.map((obj) => (\n        <Row key={obj.name} name={obj.name} data={obj.data} />\n      ))}\n    </TableBody>\n  </Table>\n);\n\nexport default BlackjackTable;\n","// react\nimport * as React from \"react\";\n// material-ui\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { green, teal, red, orange, deepPurple } from \"@mui/material/colors\";\n// components\nimport Cell, { CellProps } from \"./Cell\";\nimport { RowProps } from \"./Row\";\nimport BlackjackTable from \"./BlackjackTable\";\n// Parents: blackjack/Header\n\n/* Help  ->  BlackJackTable  ->  Row  -->  Cell */\nconst Help = React.memo(() => {\n  // options\n  const h: CellProps = { color: green[200], text: \"H\" };\n  const d: CellProps = { color: teal[200], text: \"D\" };\n  const s: CellProps = { color: red[200], text: \"S\" };\n  const p: CellProps = { color: orange[200], text: \"P\" };\n  const ds: CellProps = { color: deepPurple[200], text: \"DS\" };\n\n  // algorithms for options\n  const hardTtl: RowProps[] = [\n    { name: \"Hard 5\", data: [h, h, h, h, h, h, h, h, h, h] },\n    { name: \"Hard 6\", data: [h, h, h, h, h, h, h, h, h, h] },\n    { name: \"Hard 7\", data: [h, h, h, h, h, h, h, h, h, h] },\n    { name: \"Hard 8\", data: [h, h, h, h, h, h, h, h, h, h] },\n    { name: \"Hard 9\", data: [h, d, d, d, d, h, h, h, h, h] },\n    { name: \"Hard 10\", data: [d, d, d, d, d, d, d, d, h, h] },\n    { name: \"Hard 11\", data: [d, d, d, d, d, d, d, d, d, d] },\n    { name: \"Hard 12\", data: [h, h, s, s, s, h, h, h, h, h] },\n    { name: \"Hard 13\", data: [s, s, s, s, s, h, h, h, h, h] },\n    { name: \"Hard 14\", data: [s, s, s, s, s, h, h, h, h, h] },\n    { name: \"Hard 15\", data: [s, s, s, s, s, h, h, h, h, h] },\n    { name: \"Hard 16\", data: [s, s, s, s, s, h, h, h, h, h] },\n    { name: \"Hard 17\", data: [s, s, s, s, s, s, s, s, s, s] },\n    { name: \"Hard 18+\", data: [s, s, s, s, s, s, s, s, s, s] },\n  ];\n  const softTtl: RowProps[] = [\n    { name: \"Ace + 2\", data: [h, h, h, d, d, h, h, h, h, h] },\n    { name: \"Ace + 3\", data: [h, h, h, d, d, h, h, h, h, h] },\n    { name: \"Ace + 4\", data: [h, h, d, d, d, h, h, h, h, h] },\n    { name: \"Ace + 5\", data: [h, h, d, d, d, h, h, h, h, h] },\n    { name: \"Ace + 6\", data: [h, d, d, d, d, h, h, h, h, h] },\n    { name: \"Ace + 7\", data: [ds, ds, ds, ds, ds, s, s, h, h, h] },\n    { name: \"Ace + 8\", data: [s, s, s, s, ds, s, s, s, s, s] },\n    { name: \"Ace + 9\", data: [s, s, s, s, s, s, s, s, s, s] },\n  ];\n  const pairs: RowProps[] = [\n    { name: \"(2,2)\", data: [p, p, p, p, p, p, h, h, h, h] },\n    { name: \"(3,3)\", data: [p, p, p, p, p, p, h, h, h, h] },\n    { name: \"(4,4)\", data: [h, h, h, p, p, h, h, h, h, h] },\n    { name: \"(5,5)\", data: [d, d, d, d, d, d, d, d, h, h] },\n    { name: \"(6,6)\", data: [p, p, p, p, p, h, h, h, h, h] },\n    { name: \"(7,7)\", data: [p, p, p, p, p, p, h, h, h, h] },\n    { name: \"(8,8)\", data: [p, p, p, p, p, p, p, p, p, p] },\n    { name: \"(9,9)\", data: [p, p, p, p, p, s, p, p, s, s] },\n    { name: \"(T,T)\", data: [s, s, s, s, s, s, s, s, s, s] },\n    { name: \"(A,A)\", data: [p, p, p, p, p, p, p, p, p, p] },\n  ];\n\n  return (\n    <>\n      <BlackjackTable data={hardTtl} title=\"Hard Totals\" />\n      <BlackjackTable data={softTtl} title=\"Soft Totals\" />\n      <BlackjackTable data={pairs} title=\"Pairs\" />\n      <Table aria-label=\"Key for above: H means Hit, S means Stand, P means Split, D means Double or Hit, DS means Double or Split\">\n        <TableHead>\n          <TableRow>\n            <TableCell colSpan={11}>Key</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow>\n            <Cell {...h} />\n            <Cell colSpan={2} text=\"= Hit\" />\n            <Cell {...s} />\n            <Cell colSpan={3} text=\"= Stand\" />\n            <Cell {...p} />\n            <Cell colSpan={3} text=\"= Split\" />\n          </TableRow>\n          <TableRow>\n            <Cell {...d} />\n            <Cell colSpan={10} text=\"= Double (Hit if not allowed)\" />\n          </TableRow>\n          <TableRow>\n            <Cell {...ds} />\n            <Cell colSpan={10} text=\"= Double (Stand if not allowed)\" />\n          </TableRow>\n        </TableBody>\n      </Table>\n    </>\n  );\n});\n\nHelp.displayName = \"Help\";\n\nexport default Help;\n","import * as React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport InfoPopup from \"../../common/info-popover/InfoPopup\";\nimport Rules from \"./Rules\";\nimport Help from \"./help\";\nimport PlayerMenu from \"../../common/header/PlayerMenu\";\n\nconst Header = React.memo(() => (\n  <div className=\"flex-container\">\n    <Typography variant=\"h2\" component=\"h1\" gutterBottom>\n      Blackjack (21)\n    </Typography>\n    <PlayerMenu />\n    <InfoPopup title=\"Rules\">\n      <Rules />\n      <Help />\n    </InfoPopup>\n  </div>\n));\n\nHeader.displayName = \"Header\";\n\nexport default Header;\n","/* Theoretical Max Score:   386 everyone splits 3 times and busts with 30, dealer bust with 26\n * Card Point Value:        340-380\n * split aces is not blackjack\n * get second card for dealer and hide it\n * buy insurance on dealer's Ace\n */\nimport * as React from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport asyncForEach from \"../../../apis/asyncForEach\";\nimport { getGameFunctions, hitHelper, splitHelper } from \"./blackjackHelpers\";\nimport { DEALER, weighHand, playBots } from \"./blackjackAI\";\nimport Header from \"./Header\";\nimport GameTable from \"../game-table\";\nimport Deck from \"../../../apis/Deck\";\nimport { DBPlayer } from \"../../../recoil/player-atom\";\nimport blackjackState, {\n  GameFunctions,\n  newBlackjackGame,\n} from \"../../../recoil/blackjack-state\";\n\nconst BlackJack = React.memo(() => {\n  const [\n    {\n      turn,\n      players,\n      bj: { gameFunctions, hideHands },\n    },\n    setState,\n  ] = useRecoilState(blackjackState);\n\n  /** function that takes a hand of duplicates and makes 2 hands */\n  const split = async (): Promise<void> => {\n    const newHands = await splitHelper(players[turn.player], turn.hand);\n    // set players\n    const newPlayers = [...players];\n    newPlayers[turn.player] = { ...players[turn.player], hands: newHands };\n    // set gameFunctions\n    const newGameFunctions: GameFunctions[] = getGameFunctions(\n      newPlayers[turn.player].hands[turn.hand],\n    );\n    // update game state\n    setState({\n      turn,\n      players: newPlayers,\n      bj: { gameFunctions: newGameFunctions, hideHands },\n    });\n  };\n\n  /** function to pass to the next player */\n  const stay = (): void => {\n    // get state values\n    const numHands = players[turn.player].hands.length - 1;\n    const newTurn =\n      turn.hand < numHands\n        ? { ...turn, hand: turn.hand + 1 }\n        : { player: turn.player + 1, hand: 0 };\n    const newGameFunctions: GameFunctions[] = getGameFunctions(\n      players[newTurn.player].hands[newTurn.hand],\n    );\n    setState({\n      turn: newTurn,\n      players,\n      bj: { gameFunctions: newGameFunctions, hideHands },\n    });\n  };\n\n  /** function that doubles your bet, but you only get 1 card */\n  const double = async (): Promise<void> => {\n    const newHands = await hitHelper(players[turn.player], turn.hand);\n    // set players\n    const newPlayers = [...players];\n    newPlayers[turn.player] = {\n      ...players[turn.player],\n      hands: newHands,\n      bet: players[turn.player].bet * 2,\n    };\n    // set turn\n    const lastHand = players[turn.player].hands.length - 1;\n    const newTurn =\n      turn.hand < lastHand\n        ? { ...turn, hand: turn.hand + 1 }\n        : { player: turn.player + 1, hand: 0 };\n    // set gameFunctions\n    let newGameFunctions: GameFunctions[] = [];\n    if (!newPlayers[newTurn.player].isBot) {\n      newGameFunctions = getGameFunctions(\n        newPlayers[newTurn.player].hands[newTurn.hand],\n      );\n    }\n    // update state\n    setState({\n      turn: newTurn,\n      players: newPlayers,\n      bj: { gameFunctions: newGameFunctions, hideHands },\n    });\n  };\n\n  /** function to get a new card */\n  const hit = async (): Promise<void> => {\n    const newHands = await hitHelper(players[turn.player], turn.hand);\n    // set players\n    const newPlayers = [...players];\n    newPlayers[turn.player] = { ...players[turn.player], hands: newHands };\n    // set gameFunctions\n    const newGameFunctions: GameFunctions[] = getGameFunctions(\n      newPlayers[turn.player].hands[turn.hand],\n    );\n    // update state\n    setState({\n      turn,\n      players: newPlayers,\n      bj: { gameFunctions: newGameFunctions, hideHands },\n    });\n  };\n\n  /**\n   * Triggered in handleGameFunctionClick\n   * Starts a new game\n   */\n  const newGame = (): void => {\n    setState({\n      bj: newBlackjackGame(),\n      players: players.map((player) => ({\n        ...player,\n        status: \"\",\n        hands: [],\n        bet: 5,\n      })),\n      turn: { player: 0, hand: 0 },\n    });\n  };\n\n  /**\n   * Triggered in handleGameFunctionClick\n   * Finish betting and start the game\n   */\n  const finishBetting = async (): Promise<void> => {\n    const newPlayers: DBPlayer[] = [];\n    // shuffle the deck\n    await Deck.shuffle().then(async () => {\n      // deal the hands\n      await asyncForEach(players, async (player: DBPlayer) => {\n        const newCards = await Deck.deal(player.id !== DEALER ? 2 : 1);\n        const cards = [...newCards];\n        cards.sort(Deck.rankSort);\n        const { weight, soft } = weighHand(cards);\n        newPlayers.push({ ...player, hands: [{ cards, weight, soft }] });\n      });\n    });\n    // get game functions\n    const newGameFunctions: GameFunctions[] = getGameFunctions(\n      newPlayers[turn.player].hands[turn.hand],\n    );\n    // update game state\n    setState({\n      turn,\n      players: newPlayers,\n      bj: { gameFunctions: newGameFunctions, hideHands: false },\n    });\n  };\n\n  const checkUpdate = async (): Promise<void> => {\n    if (!hideHands && gameFunctions[0] !== (GameFunctions.NEW_GAME as string)) {\n      const player = players[turn.player];\n      if (!player.isBot) {\n        return;\n      }\n      const newState = await playBots(players, turn);\n      setState(newState);\n    }\n  };\n\n  // ----------     interface to GameBoard     ---------- //\n  /** function to be called on card clicks */\n  const cardClickHandler = (\n    playerNo: number,\n    handNo: number,\n    cardNo: number,\n  ): void => {\n    console.log(players[playerNo].hands[handNo].cards[cardNo]);\n  };\n\n  /** function to be called on card clicks */\n  const betHandler = (id: number, _event: Event, bet: number): void => {\n    setState({\n      bj: { gameFunctions, hideHands },\n      turn,\n      players: players.map((player) =>\n        player.id === id ? { ...player, bet } : player,\n      ),\n    });\n  };\n\n  /** function to route click actions */\n  const handleGameFunctionClick = (type: GameFunctions): void => {\n    switch (type) {\n      case GameFunctions.NEW_GAME:\n        newGame();\n        break;\n      case GameFunctions.FINISH_BETTING:\n        finishBetting().catch((e) => console.log(e));\n        break;\n      case GameFunctions.STAY:\n        stay();\n        break;\n      case GameFunctions.HIT:\n        hit().catch((e) => console.log(e));\n        break;\n      case GameFunctions.DOUBLE:\n        double().catch((e) => console.log(e));\n        break;\n      case GameFunctions.SPLIT:\n        split().catch((e) => console.log(e));\n        break;\n      default:\n        console.error(\"Unknown Game Function: \", type);\n    }\n  };\n\n  /* render the UI */\n  checkUpdate().catch((e) => console.log(e));\n\n  return (\n    <>\n      <Header />\n      <GameTable\n        betHandler={betHandler}\n        cardClickHandler={cardClickHandler}\n        gameFunctions={gameFunctions}\n        onClick={handleGameFunctionClick as (type: string) => void}\n        hideHands={hideHands}\n        players={players}\n        turn={turn}\n      />\n    </>\n  );\n});\n\nBlackJack.displayName = \"BlackJack\";\n\nexport default BlackJack;\n"],"names":["GameFunctions","newBlackjackGame","blackjackAtom","atom","onSet","state","blackjackState","selector","get","bj","players","playerAtom","turn","turnAtom","set","DefaultValue","DEALER","D_H_TURN","weighHand","hand","weight","soft","card","cardWeight","banking","dealer","p","dWeight","dLength","playerStats","win","ps","bet","mul","loss","player","id","cards","hitBotHelper","drawnCards","Deck","splitBotHelper","newCards","hand1","hand2","playDealer","pW","pS","hands","playBot","d","x","y","hands1","hands2","newHand","playBots","statePlayers","stateTurn","DEALER_IDX","dealerHand","bots","asyncForEach","bot","doubled","newDealer","splitHelper","handTurn","newHands","item","i","hitHelper","getGameFunctions","newGameFunctions","weight1","weight2","Rules","React.memo","jsxs","Fragment","jsx","Typography","Cell","color","text","style","otherProps","stl","TableCell","tableCellStyle","Row","name","data","TableRow","cellStyle","BlackjackTable","title","Table","TableHead","c","TableBody","obj","Help","h","green","teal","s","red","orange","ds","deepPurple","hardTtl","softTtl","pairs","Header","PlayerMenu","InfoPopup","BlackJack","gameFunctions","hideHands","setState","useRecoilState","split","newPlayers","stay","numHands","newTurn","double","lastHand","hit","newGame","finishBetting","checkUpdate","newState","cardClickHandler","playerNo","handNo","cardNo","betHandler","_event","handleGameFunctionClick","type","e","GameTable"],"mappings":"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"}