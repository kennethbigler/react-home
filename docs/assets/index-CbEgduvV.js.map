{"version":3,"file":"index-CbEgduvV.js","sources":["../../src/recoil/tic-tac-toe-atom.ts","../../src/components/games/tictactoe/Header.tsx","../../src/components/games/tictactoe/helpers.ts","../../src/components/games/tictactoe/History.tsx","../../src/components/games/tictactoe/Cell.tsx","../../src/components/games/tictactoe/Board.tsx","../../src/components/games/tictactoe/TicTacToe.tsx"],"sourcesContent":["import { atom } from \"recoil\";\n\nexport interface HistoryEntry {\n  board: string[] | null[];\n  location?: number;\n}\nexport interface TicTacToeState {\n  history: HistoryEntry[];\n  turn: string;\n  step: number;\n}\n\nexport const X = \"X\";\nexport const O = \"O\";\nexport const EMPTY = null;\nexport const newTicTacToe = (): TicTacToeState => ({\n  history: [{ board: Array(9).fill(EMPTY) }],\n  turn: X,\n  step: 0,\n});\n\nconst tikTacToeAtom = atom({\n  key: \"tikTacToeAtom\",\n  default:\n    (JSON.parse(\n      localStorage.getItem(\"tik-tac-toe-atom\") || \"null\",\n    ) as TicTacToeState) || newTicTacToe(),\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"tik-tac-toe-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\nexport default tikTacToeAtom;\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\n\ninterface HeaderProps {\n  newGame: React.MouseEventHandler;\n  turn: string;\n  winner: string | null;\n}\n\nconst Header = React.memo(({ winner, turn, newGame }: HeaderProps) => (\n  <Toolbar>\n    <Typography style={{ flex: 1 }} variant=\"h4\" component=\"h2\">\n      {winner ? `Winner: ${winner}` : `Turn: ${turn}`}\n    </Typography>\n    <Button onClick={newGame} variant=\"contained\">\n      Reset Game\n    </Button>\n  </Toolbar>\n));\n\nHeader.displayName = \"Header\";\n\nexport default Header;\n","import { O, X, EMPTY } from \"../../../recoil/tic-tac-toe-atom\";\n\nexport const getTurn = (n: number): string => (n % 2 ? O : X);\n\n/** function to check if there are 3 in a row\n * @return value of winner and positions for winner */\nexport function calculateWinner(board: string[] | null[]): {\n  winner: string | null;\n  winRow: [number?, number?, number?];\n} {\n  const lines: [number, number, number][] = [\n    // horizontal\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    // vertical\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    // diagonal\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  // check each win condition\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n    // if all 3 match and aren't empty\n    if (board[a] !== EMPTY && board[a] === board[b] && board[a] === board[c]) {\n      // return winner and winning positions\n      return { winner: board[a], winRow: lines[i] };\n    }\n  }\n  return { winner: null, winRow: [] };\n}\n\nexport default getTurn;\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport { getTurn } from \"./helpers\";\nimport { HistoryEntry } from \"../../../recoil/tic-tac-toe-atom\";\n\ninterface HistoryProps {\n  history: HistoryEntry[];\n  jumpToStep: (move: number) => void;\n  step: number;\n}\n\nconst History = ({ history, step, jumpToStep }: HistoryProps) => {\n  const [ascend, setAscend] = React.useState(true);\n\n  /** function that generates text for the history tracker */\n  const getHistoryText = React.useCallback(\n    (round: HistoryEntry, move: number): React.ReactNode => {\n      const location = round.location || 0;\n      // generate description text\n      const description = !move\n        ? \"Game Start (Turn, Col, Row)\"\n        : `Move #${move} (${getTurn(move - 1)}, ` +\n          `${Math.floor(location / 3)}, ${location % 3})`;\n      // highlight current turn displayed on board\n      const color = step === move ? \"secondary\" : \"primary\";\n\n      return (\n        <Button\n          key={move}\n          color={color}\n          onClick={(): void => jumpToStep(move)}\n          style={{ display: \"block\" }}\n        >\n          {description}\n        </Button>\n      );\n    },\n    [jumpToStep, step],\n  );\n\n  // move history\n  const moves = history.map(getHistoryText);\n  // asc vs. desc\n  if (!ascend) {\n    moves.reverse();\n  }\n\n  return (\n    <>\n      <Button\n        onClick={(): void => {\n          setAscend(!ascend);\n        }}\n        style={{ marginTop: 20, marginBottom: 20 }}\n        variant=\"contained\"\n      >\n        {ascend ? \"Asc\" : \"Desc\"}\n      </Button>\n      {moves}\n    </>\n  );\n};\n\nexport default History;\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport { useTheme } from \"@mui/material/styles\";\n\ninterface CellProps {\n  onClick: React.MouseEventHandler;\n  value: string | null;\n  winner: boolean;\n}\n\nconst Cell = React.memo(({ value, winner, onClick }: CellProps) => {\n  const {\n    palette: {\n      primary: { main },\n    },\n  } = useTheme();\n  // add attributes if cell is a winner\n  const attr: React.CSSProperties = winner\n    ? { color: \"white\", backgroundColor: main }\n    : {};\n\n  return (\n    <Button\n      onClick={onClick}\n      style={attr}\n      aria-label={`Tic Tac Toe Play Button ${\n        value ? `${value} selected` : \"available\"\n      }`}\n    >\n      {value || <br />}\n    </Button>\n  );\n});\n\nCell.displayName = \"Cell\";\n\nexport default Cell;\n","import * as React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { grey } from \"@mui/material/colors\";\nimport Cell from \"./Cell\";\n\ninterface BoardProps {\n  board: string[] | null[];\n  onClick: (cell: number) => void;\n  winRow: [number?, number?, number?];\n}\n\nconst tableCellStyle: React.CSSProperties = {\n  padding: 0,\n  textAlign: \"center\",\n  border: `1px solid ${grey[400]}`,\n};\n\nconst Board = ({ board, onClick, winRow }: BoardProps) => {\n  const cells = [];\n  // create 3 rows\n  for (let i = 0; i < 3; i += 1) {\n    // create 3 cells in a row\n    const row = [];\n    for (let j = 0; j < 3; j += 1) {\n      const c = i * 3 + j;\n      // check if winning position\n      const winner = winRow.includes(c);\n      row.push(\n        <TableCell key={`${i},${j}`} style={tableCellStyle}>\n          <Cell\n            onClick={(): void => onClick(c)}\n            value={board[c]}\n            winner={winner}\n          />\n        </TableCell>,\n      );\n    }\n    const boardRow = <TableRow key={`row${i}`}>{row}</TableRow>;\n    // separate into rows\n    cells.push(boardRow);\n  }\n\n  return (\n    <Table aria-label=\"game of Tik Tac Toe in a 3 by 3 grid\">\n      <TableBody>{cells}</TableBody>\n    </Table>\n  );\n};\n\nexport default Board;\n","import * as React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Typography from \"@mui/material/Typography\";\nimport { useRecoilState } from \"recoil\";\nimport ticTacToeAtom, {\n  TicTacToeState,\n  X,\n  O,\n  EMPTY,\n  newTicTacToe,\n} from \"../../../recoil/tic-tac-toe-atom\";\nimport Header from \"./Header\";\nimport History from \"./History\";\nimport Board from \"./Board\";\nimport { getTurn, calculateWinner } from \"./helpers\";\n\nconst paperStyles: React.CSSProperties = {\n  width: 343,\n  display: \"block\",\n  margin: \"auto\",\n};\n\n/* TicTacToe  ->  Header\n *           |->  Board  ->  Cell\n *           |->  History */\nconst TicTacToe = React.memo(() => {\n  const [state, setState] = useRecoilState(ticTacToeAtom);\n  const { turn, step, history } = state;\n\n  /** function that modifies board with appropriate turn\n   * @param location - location of board click (row * 3 + col) */\n  const handleClick = (location: number): void => {\n    const newHistory = history.slice(0, step + 1);\n    const current = newHistory[step];\n    const board = current.board.slice();\n\n    // game is over or cell is full\n    if (!calculateWinner(board).winner && board[location] === EMPTY) {\n      // place marker, then update turn\n      board[location] = turn;\n\n      setState({\n        history: newHistory.concat([{ board, location }]),\n        step: newHistory.length,\n        turn: turn === X ? O : X,\n      });\n    }\n  };\n\n  /** function that resets game back to it's initial state */\n  const newTTTGame = (): void => setState(newTicTacToe());\n\n  /** function that modifies board to go back to a previous point in history\n   * @param step - desired point in history */\n  const jumpToStep = (stepNo: number): void => {\n    const newTurn: TicTacToeState = {\n      step: stepNo,\n      turn: getTurn(stepNo),\n      history,\n    };\n    // Double click will eliminate all other history if there is any\n    if (step === stepNo) {\n      newTurn.history = history.slice(0, step + 1);\n    }\n    // update board to previous turn, non-permanent, history exists still\n    setState(newTurn);\n  };\n\n  const current = history[step];\n  const board = current.board.slice();\n  const { winner, winRow } = calculateWinner(board);\n\n  return (\n    <>\n      <Typography variant=\"h2\" component=\"h1\" gutterBottom>\n        Tic-Tac-Toe\n      </Typography>\n      <Paper elevation={2} style={paperStyles}>\n        <Header newGame={newTTTGame} turn={turn} winner={winner} />\n        <Board board={board} onClick={handleClick} winRow={winRow} />\n      </Paper>\n      <History history={history} jumpToStep={jumpToStep} step={step} />\n    </>\n  );\n});\n\nTicTacToe.displayName = \"TicTacToe\";\n\nexport default TicTacToe;\n"],"names":["X","O","EMPTY","newTicTacToe","tikTacToeAtom","atom","onSet","state","Header","React.memo","winner","turn","newGame","jsxs","Toolbar","jsx","Typography","Button","getTurn","n","calculateWinner","board","lines","i","a","b","c","History","history","step","jumpToStep","ascend","setAscend","React.useState","getHistoryText","React.useCallback","round","move","location","description","color","moves","Fragment","Cell","value","onClick","main","useTheme","attr","tableCellStyle","grey","Board","winRow","cells","row","j","TableCell","boardRow","TableRow","Table","TableBody","paperStyles","TicTacToe","setState","useRecoilState","ticTacToeAtom","handleClick","newHistory","newTTTGame","stepNo","newTurn","Paper"],"mappings":"2OAYO,MAAMA,EAAI,IACJC,EAAI,IACJC,EAAQ,KACRC,EAAe,KAAuB,CACjD,QAAS,CAAC,CAAE,MAAO,MAAM,CAAC,EAAE,KAAKD,CAAK,EAAG,EACzC,KAAMF,EACN,KAAM,CACR,GAEMI,EAAgBC,EAAK,CACzB,IAAK,gBACL,QACG,KAAK,MACJ,aAAa,QAAQ,kBAAkB,GAAK,SACtBF,EAAa,EACvC,QAAS,CACP,CAAC,CAAE,MAAAG,CAAA,IAAY,CACbA,EAAOC,GAAU,CACf,aAAa,QAAQ,mBAAoB,KAAK,UAAUA,CAAK,CAAC,CAAA,CAC/D,CAAA,CACH,CAEJ,CAAC,ECvBKC,EAASC,EAAAA,KAAW,CAAC,CAAE,OAAAC,EAAQ,KAAAC,EAAM,QAAAC,CAAA,IACzCC,EAAA,KAACC,EACC,CAAA,SAAA,CAAAC,MAACC,GAAW,MAAO,CAAE,KAAM,GAAK,QAAQ,KAAK,UAAU,KACpD,WAAS,WAAWN,CAAM,GAAK,SAASC,CAAI,GAC/C,QACCM,EAAO,CAAA,QAASL,EAAS,QAAQ,YAAY,SAE9C,YAAA,CAAA,CAAA,CAAA,CACF,CACD,EAEDJ,EAAO,YAAc,SCpBd,MAAMU,EAAWC,GAAuBA,EAAI,EAAIlB,EAAID,EAIpD,SAASoB,EAAgBC,EAG9B,CACA,MAAMC,EAAoC,CAExC,CAAC,EAAG,EAAG,CAAC,EACR,CAAC,EAAG,EAAG,CAAC,EACR,CAAC,EAAG,EAAG,CAAC,EAER,CAAC,EAAG,EAAG,CAAC,EACR,CAAC,EAAG,EAAG,CAAC,EACR,CAAC,EAAG,EAAG,CAAC,EAER,CAAC,EAAG,EAAG,CAAC,EACR,CAAC,EAAG,EAAG,CAAC,CACV,EAEA,QAASC,EAAI,EAAGA,EAAID,EAAM,OAAQC,GAAK,EAAG,CACxC,KAAM,CAACC,EAAGC,EAAGC,CAAC,EAAIJ,EAAMC,CAAC,EAEzB,GAAIF,EAAMG,CAAC,IAAMtB,GAASmB,EAAMG,CAAC,IAAMH,EAAMI,CAAC,GAAKJ,EAAMG,CAAC,IAAMH,EAAMK,CAAC,EAE9D,MAAA,CAAE,OAAQL,EAAMG,CAAC,EAAG,OAAQF,EAAMC,CAAC,CAAE,CAC9C,CAEF,MAAO,CAAE,OAAQ,KAAM,OAAQ,CAAA,CAAG,CACpC,CCtBA,MAAMI,EAAU,CAAC,CAAE,QAAAC,EAAS,KAAAC,EAAM,WAAAC,KAA+B,CAC/D,KAAM,CAACC,EAAQC,CAAS,EAAIC,EAAAA,SAAe,EAAI,EAGzCC,EAAiBC,EAAM,YAC3B,CAACC,EAAqBC,IAAkC,CAChD,MAAAC,EAAWF,EAAM,UAAY,EAE7BG,EAAeF,EAEjB,SAASA,CAAI,KAAKnB,EAAQmB,EAAO,CAAC,CAAC,KAChC,KAAK,MAAMC,EAAW,CAAC,CAAC,KAAKA,EAAW,CAAC,IAF5C,8BAIEE,EAAQX,IAASQ,EAAO,YAAc,UAG1C,OAAAtB,EAAA,IAACE,EAAA,CAEC,MAAAuB,EACA,QAAS,IAAYV,EAAWO,CAAI,EACpC,MAAO,CAAE,QAAS,OAAQ,EAEzB,SAAAE,CAAA,EALIF,CAMP,CAEJ,EACA,CAACP,EAAYD,CAAI,CACnB,EAGMY,EAAQb,EAAQ,IAAIM,CAAc,EAExC,OAAKH,GACHU,EAAM,QAAQ,EAKZ5B,EAAA,KAAA6B,WAAA,CAAA,SAAA,CAAA3B,EAAA,IAACE,EAAA,CACC,QAAS,IAAY,CACnBe,EAAU,CAACD,CAAM,CACnB,EACA,MAAO,CAAE,UAAW,GAAI,aAAc,EAAG,EACzC,QAAQ,YAEP,WAAS,MAAQ,MAAA,CACpB,EACCU,CAAA,EACH,CAEJ,ECnDME,EAAOlC,EAAW,KAAA,CAAC,CAAE,MAAAmC,EAAO,OAAAlC,EAAQ,QAAAmC,KAAyB,CAC3D,KAAA,CACJ,QAAS,CACP,QAAS,CAAE,KAAAC,CAAK,CAAA,GAEhBC,EAAS,EAEPC,EAA4BtC,EAC9B,CAAE,MAAO,QAAS,gBAAiBoC,CAAA,EACnC,CAAC,EAGH,OAAA/B,EAAA,IAACE,EAAA,CACC,QAAA4B,EACA,MAAOG,EACP,aAAY,2BACVJ,EAAQ,GAAGA,CAAK,YAAc,WAChC,GAEC,SAAAA,SAAU,KAAG,CAAA,CAAA,CAAA,CAChB,CAEJ,CAAC,EAEDD,EAAK,YAAc,OCpBnB,MAAMM,EAAsC,CAC1C,QAAS,EACT,UAAW,SACX,OAAQ,aAAaC,EAAK,GAAG,CAAC,EAChC,EAEMC,EAAQ,CAAC,CAAE,MAAA9B,EAAO,QAAAwB,EAAS,OAAAO,KAAyB,CACxD,MAAMC,EAAQ,CAAC,EAEf,QAAS9B,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAE7B,MAAM+B,EAAM,CAAC,EACb,QAASC,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CACvB,MAAA,EAAIhC,EAAI,EAAIgC,EAEZ7C,EAAS0C,EAAO,SAAS,CAAC,EAC5BE,EAAA,KACFvC,EAAAA,IAACyC,EAA4B,CAAA,MAAOP,EAClC,SAAAlC,EAAA,IAAC4B,EAAA,CACC,QAAS,IAAYE,EAAQ,CAAC,EAC9B,MAAOxB,EAAM,CAAC,EACd,OAAAX,CAAA,CAJY,CAAA,EAAA,GAAGa,CAAC,IAAIgC,CAAC,EAMzB,CACF,CAAA,CAEF,MAAME,EAAY1C,MAAA2C,EAAA,CAA0B,SAAZJ,CAAA,EAAA,MAAM/B,CAAC,EAAS,EAEhD8B,EAAM,KAAKI,CAAQ,CAAA,CAGrB,aACGE,EAAM,CAAA,aAAW,uCAChB,SAAC5C,EAAA,IAAA6C,EAAA,CAAW,WAAM,CACpB,CAAA,CAEJ,EClCMC,EAAmC,CACvC,MAAO,IACP,QAAS,QACT,OAAQ,MACV,EAKMC,EAAYrD,EAAM,KAAK,IAAM,CACjC,KAAM,CAACF,EAAOwD,CAAQ,EAAIC,EAAeC,CAAa,EAChD,CAAE,KAAAtD,EAAM,KAAAkB,EAAM,QAAAD,CAAY,EAAArB,EAI1B2D,EAAe5B,GAA2B,CAC9C,MAAM6B,EAAavC,EAAQ,MAAM,EAAGC,EAAO,CAAC,EAEtCR,EADU8C,EAAWtC,CAAI,EACT,MAAM,MAAM,EAG9B,CAACT,EAAgBC,CAAK,EAAE,QAAUA,EAAMiB,CAAQ,IAAMpC,IAExDmB,EAAMiB,CAAQ,EAAI3B,EAEToD,EAAA,CACP,QAASI,EAAW,OAAO,CAAC,CAAE,MAAA9C,EAAO,SAAAiB,CAAS,CAAC,CAAC,EAChD,KAAM6B,EAAW,OACjB,KAAMxD,IAASX,EAAIC,EAAID,CAAA,CACxB,EAEL,EAGMoE,EAAa,IAAYL,EAAS5D,GAAc,EAIhD2B,EAAcuC,GAAyB,CAC3C,MAAMC,EAA0B,CAC9B,KAAMD,EACN,KAAMnD,EAAQmD,CAAM,EACpB,QAAAzC,CACF,EAEIC,IAASwC,IACXC,EAAQ,QAAU1C,EAAQ,MAAM,EAAGC,EAAO,CAAC,GAG7CkC,EAASO,CAAO,CAClB,EAGMjD,EADUO,EAAQC,CAAI,EACN,MAAM,MAAM,EAC5B,CAAE,OAAAnB,EAAQ,OAAA0C,GAAWhC,EAAgBC,CAAK,EAEhD,OAEIR,EAAA,KAAA6B,WAAA,CAAA,SAAA,CAAA3B,EAAAA,IAACC,GAAW,QAAQ,KAAK,UAAU,KAAK,aAAY,GAAC,SAErD,aAAA,CAAA,EACCH,EAAA,KAAA0D,EAAA,CAAM,UAAW,EAAG,MAAOV,EAC1B,SAAA,CAAA9C,EAAA,IAACP,EAAO,CAAA,QAAS4D,EAAY,KAAAzD,EAAY,OAAAD,EAAgB,EACxDK,EAAA,IAAAoC,EAAA,CAAM,MAAA9B,EAAc,QAAS6C,EAAa,OAAAd,CAAgB,CAAA,CAAA,EAC7D,EACCrC,EAAAA,IAAAY,EAAA,CAAQ,QAAAC,EAAkB,WAAAE,EAAwB,KAAAD,CAAY,CAAA,CAAA,EACjE,CAEJ,CAAC,EAEDiC,EAAU,YAAc"}