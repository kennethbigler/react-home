{"version":3,"file":"index-BJoFtzB9.js","sources":["../../src/jotai/stock-atom.ts","../../src/jotai/comp-calculator-atom.ts","../../node_modules/@mui/material/esm/DialogContentText/dialogContentTextClasses.js","../../node_modules/@mui/material/esm/DialogContentText/DialogContentText.js","../../src/components/resume/comp-calc/CompEntryDialog.tsx","../../src/components/resume/comp-calc/StockDialog.tsx","../../src/apis/usDollar.tsx","../../src/components/resume/comp-calc/StockDisplay.tsx","../../src/components/resume/comp-calc/CompHeader.tsx","../../src/components/resume/comp-calc/graphs/colors.ts","../../src/components/resume/comp-calc/graphs/CompGraph.tsx","../../src/components/resume/comp-calc/graphs/BreakdownGraph.tsx","../../src/components/resume/comp-calc/graphs/Graphs.tsx","../../src/components/resume/comp-calc/CompEntryCard.tsx","../../src/components/resume/comp-calc/CompEntryDisplay.tsx","../../src/components/resume/comp-calc/CompCalculator.tsx"],"sourcesContent":["import { atomWithStorage } from \"jotai/utils\";\n\nexport interface StockState {\n  [key: string]: number;\n}\n\nconst stockAtom = atomWithStorage<StockState>(\"stockAtom\", {});\n\nexport default stockAtom;\n","import { atom } from \"jotai\";\nimport { atomWithStorage } from \"jotai/utils\";\nimport stockAtom from \"./stock-atom\";\nimport dateHelper, { DateObj } from \"../apis/DateHelper\";\n\nexport interface CompEntry {\n  entryDate: string;\n  salary: number;\n  bonus: number;\n  stockTick: string;\n  priceThen: number;\n  grantDuration: number; // YEARS\n  grantQty: number; // STOCKS\n}\n\nexport interface CompCalcEntry {\n  stock: number;\n  stockAdj: number;\n  total: number;\n  totalAdj: number;\n  netDiff: number;\n  grantThen: number;\n  grantNow: number;\n}\n\ninterface PrevStock {\n  grantQty: number;\n  grantDuration: number;\n  exp: DateObj;\n}\n\nexport const compCalcAtom = atomWithStorage<CompEntry[]>(\"compCalcAtom\", []);\n\n/* --------------------     Comp Calc State     -------------------- */\nexport const compCalcRead = atom((get) => {\n  // access state\n  const compEntries = get(compCalcAtom);\n  const stockEntries = get(stockAtom);\n\n  const prevStockAcc: { [key: string]: PrevStock[] } = {};\n\n  const compCalcEntriesNoNet: Omit<CompCalcEntry, \"netDiff\">[] =\n    compEntries.map(\n      ({\n        bonus,\n        entryDate,\n        grantDuration,\n        grantQty,\n        priceThen,\n        salary,\n        stockTick,\n      }) => {\n        const priceNow = stockEntries[stockTick] || 0;\n        let stock = 0;\n        let stockAdj = 0;\n\n        const exp = dateHelper(entryDate);\n        exp.year += grantDuration;\n\n        if (!prevStockAcc[stockTick]) {\n          prevStockAcc[stockTick] = [];\n        }\n        if (grantQty > 0) {\n          prevStockAcc[stockTick].push({ grantQty, grantDuration, exp });\n        }\n        prevStockAcc[stockTick].forEach((s) => {\n          if (dateHelper(entryDate).diff(s.exp, \"days\") < 0) {\n            stock += (priceThen * s.grantQty) / s.grantDuration;\n            stockAdj += (priceNow * s.grantQty) / s.grantDuration;\n          }\n        });\n\n        const total = salary + bonus + stock;\n        const totalAdj = salary + bonus + stockAdj;\n        const grantThen = priceThen * grantQty;\n        const grantNow = priceNow * grantQty;\n\n        return {\n          stock,\n          stockAdj,\n          total,\n          totalAdj,\n          grantThen,\n          grantNow,\n        };\n      },\n    );\n\n  const compCalcEntries: CompCalcEntry[] = compCalcEntriesNoNet.map(\n    ({ totalAdj, ...rest }, i) => {\n      const netDiff =\n        i === 0 ? 0 : totalAdj - compCalcEntriesNoNet[i - 1].totalAdj;\n\n      return { totalAdj, netDiff, ...rest };\n    },\n  );\n\n  return compCalcEntries;\n});\n\nexport default compCalcAtom;\n","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getDialogContentTextUtilityClass(slot) {\n  return generateUtilityClass('MuiDialogContentText', slot);\n}\nconst dialogContentTextClasses = generateUtilityClasses('MuiDialogContentText', ['root']);\nexport default dialogContentTextClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport Typography from \"../Typography/index.js\";\nimport { getDialogContentTextUtilityClass } from \"./dialogContentTextClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  const composedClasses = composeClasses(slots, getDialogContentTextUtilityClass, classes);\n  return {\n    ...classes,\n    // forward classes to the Typography\n    ...composedClasses\n  };\n};\nconst DialogContentTextRoot = styled(Typography, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiDialogContentText',\n  slot: 'Root'\n})({});\nconst DialogContentText = /*#__PURE__*/React.forwardRef(function DialogContentText(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiDialogContentText'\n  });\n  const {\n    children,\n    className,\n    ...ownerState\n  } = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(DialogContentTextRoot, {\n    component: \"p\",\n    variant: \"body1\",\n    color: \"textSecondary\",\n    ref: ref,\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    ...props,\n    classes: classes\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContentText.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogContentText;","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport Select from \"@mui/material/Select\";\nimport TextField from \"@mui/material/TextField\";\nimport { TextFieldProps, SelectChangeEvent } from \"@mui/material\";\nimport dateHelper, { months } from \"../../../apis/DateHelper\";\nimport { CompEntry } from \"../../../jotai/comp-calculator-atom\";\n\nconst tfProps: TextFieldProps = {\n  variant: \"standard\",\n  fullWidth: true,\n  margin: \"dense\",\n};\n\nconst currentYear = new Date().getFullYear() - 2000;\nconst years: number[] = [];\nfor (let i = 0; i <= currentYear; i += 1) {\n  years.push(2000 + i);\n}\nyears.reverse();\n\ninterface CompEntryDialogProps {\n  open: boolean;\n  compEntry?: CompEntry;\n  onClose: () => void;\n  addCompEntry: (n: CompEntry) => void;\n}\n\nconst CompEntryDialog = ({\n  open,\n  compEntry,\n  onClose,\n  addCompEntry,\n}: CompEntryDialogProps) => {\n  const [entryDateMonth, setEntryDateMonth] = React.useState(\"1\");\n  const [entryDateYear, setEntryDateYear] = React.useState(years[0].toString());\n  const [salary, setSalary] = React.useState(0);\n  const [bonus, setBonus] = React.useState(0);\n  const [stockTick, setStockTick] = React.useState(\"\");\n  const [priceThen, setPriceThen] = React.useState(0);\n  const [grantDuration, setGrantDuration] = React.useState(4);\n  const [grantQty, setGrantQty] = React.useState(0);\n\n  const resetState = () => {\n    setEntryDateMonth(\"1\");\n    setEntryDateYear(years[0].toString());\n    setSalary(0);\n    setBonus(0);\n    setStockTick(\"\");\n    setPriceThen(0);\n    setGrantDuration(4);\n    setGrantQty(0);\n  };\n\n  React.useEffect(() => {\n    if (compEntry) {\n      const { month, year } = dateHelper(compEntry.entryDate);\n      setEntryDateMonth((month + 1).toString());\n      setEntryDateYear(year.toString());\n      setSalary(compEntry.salary);\n      setBonus(compEntry.bonus);\n      setStockTick(compEntry.stockTick);\n      setPriceThen(compEntry.priceThen);\n      setGrantDuration(compEntry.grantDuration);\n      setGrantQty(compEntry.grantQty);\n    } else {\n      resetState();\n    }\n  }, [compEntry, compEntry?.salary]);\n\n  const handleChange =\n    (func: (n: number) => void) => (e: React.ChangeEvent<HTMLInputElement>) =>\n      func(parseFloat(e.target.value));\n  const handleStockTick = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setStockTick(e.target.value);\n  const handleSelectMonth = (e: SelectChangeEvent<string>) =>\n    setEntryDateMonth(e.target.value);\n  const handleSelectYear = (e: SelectChangeEvent<string>) =>\n    setEntryDateYear(e.target.value);\n\n  const handleSubmit = () => {\n    addCompEntry({\n      entryDate: `${entryDateYear}-${entryDateMonth.length < 2 ? \"0\" : \"\"}${entryDateMonth}`,\n      salary,\n      bonus,\n      stockTick,\n      priceThen,\n      grantDuration,\n      grantQty,\n    });\n    resetState();\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <DialogTitle>{compEntry ? \"Edit\" : \"New\"} Comp Entry</DialogTitle>\n      <DialogContent>\n        <div style={{ display: \"flex\", marginTop: 5 }}>\n          <FormControl fullWidth>\n            <InputLabel id=\"month-select\">Month</InputLabel>\n            <Select\n              labelId=\"month-select\"\n              label=\"Month\"\n              value={entryDateMonth}\n              onChange={handleSelectMonth}\n            >\n              {months.map((month, i) => (\n                <MenuItem value={i + 1} key={i}>\n                  {month}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <FormControl fullWidth>\n            <InputLabel id=\"year-select\">Year</InputLabel>\n            <Select\n              labelId=\"year-select\"\n              label=\"Year\"\n              value={entryDateYear}\n              onChange={handleSelectYear}\n            >\n              {years.map((year) => (\n                <MenuItem value={year} key={year}>\n                  {year}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <TextField\n          label=\"Salary\"\n          value={salary}\n          type=\"number\"\n          onChange={handleChange(setSalary)}\n          slotProps={{ input: { startAdornment: \"$\" } }}\n          {...tfProps}\n        />\n        <TextField\n          label=\"Bonus\"\n          value={bonus}\n          type=\"number\"\n          onChange={handleChange(setBonus)}\n          slotProps={{ input: { startAdornment: \"$\" } }}\n          {...tfProps}\n        />\n        <DialogContentText variant=\"h6\" component=\"h4\" sx={{ marginTop: 7 }}>\n          Stock\n        </DialogContentText>\n        <TextField\n          label=\"Stock Ticker\"\n          value={stockTick}\n          onChange={handleStockTick}\n          {...tfProps}\n        />\n        <TextField\n          label=\"Grant Quantity\"\n          value={grantQty}\n          type=\"number\"\n          onChange={handleChange(setGrantQty)}\n          {...tfProps}\n        />\n        <TextField\n          label=\"Grant Duration\"\n          value={grantDuration}\n          type=\"number\"\n          onChange={handleChange(setGrantDuration)}\n          {...tfProps}\n        />\n        <TextField\n          label=\"Stock Price Then\"\n          value={priceThen}\n          type=\"number\"\n          onChange={handleChange(setPriceThen)}\n          slotProps={{ input: { startAdornment: \"$\" } }}\n          {...tfProps}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button type=\"submit\" onClick={handleSubmit}>\n          {compEntry ? \"Update\" : \"Add\"}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default CompEntryDialog;\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport TextField from \"@mui/material/TextField\";\nimport { TextFieldProps } from \"@mui/material\";\n\nconst tfProps: TextFieldProps = {\n  variant: \"standard\",\n  fullWidth: true,\n  margin: \"dense\",\n};\n\ninterface StockDialogProps {\n  open: boolean;\n  price?: number;\n  stock?: string;\n  onClose: () => void;\n  addStockEntry: (s: string, n: number) => void;\n  removeStockEntry: (s: string) => () => void;\n}\n\nconst StockDialog = React.memo(\n  ({\n    open,\n    price: exPrice,\n    stock: exStock,\n    onClose,\n    addStockEntry,\n    removeStockEntry,\n  }: StockDialogProps) => {\n    const [price, setPrice] = React.useState(0);\n    const [stock, setStock] = React.useState(\"\");\n\n    const resetState = () => {\n      setPrice(0);\n      setStock(\"\");\n    };\n\n    React.useEffect(() => {\n      if (exStock && exPrice !== undefined) {\n        setPrice(exPrice);\n        setStock(exStock);\n      } else {\n        resetState();\n      }\n    }, [exPrice, exStock]);\n\n    const handleStockChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n      setStock(e.target.value);\n\n    const handlePriceChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n      setPrice(parseFloat(e.target.value));\n\n    const handleSubmit = () => {\n      addStockEntry(stock, price);\n      resetState();\n    };\n\n    return (\n      <Dialog open={open} onClose={onClose}>\n        <DialogTitle>{exStock ? \"Edit\" : \"New\"} Stock Entry</DialogTitle>\n        <DialogContent>\n          <div style={{ marginTop: 5 }}>\n            <TextField\n              label=\"Stock\"\n              value={stock}\n              onChange={handleStockChange}\n              {...tfProps}\n            />\n            <TextField\n              label=\"Price Now\"\n              value={price}\n              type=\"number\"\n              onChange={handlePriceChange}\n              slotProps={{ input: { startAdornment: \"$\" } }}\n              {...tfProps}\n            />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={removeStockEntry(stock)} color=\"error\">\n            Delete\n          </Button>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button type=\"submit\" onClick={handleSubmit}>\n            {exStock ? \"Update\" : \"Add\"}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  },\n);\n\nStockDialog.displayName = \"StockDialog\";\n\nexport default StockDialog;\n","/** use the usDollar.format() function to format a number into a USD string */\nconst usDollar = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n});\n\nexport default usDollar;\n","import Chip from \"@mui/material/Chip\";\nimport usDollar from \"../../../apis/usDollar\";\nimport { StockState } from \"../../../jotai/stock-atom\";\n\ninterface StockEntryProps {\n  stockEntries: StockState;\n  openStockModal: (s: string) => () => void;\n}\n\nconst StockDisplay = ({ stockEntries, openStockModal }: StockEntryProps) => (\n  <div>\n    {Object.keys(stockEntries).map((stockKey, i) => (\n      <Chip\n        key={`stock-entry-${i}`}\n        color=\"primary\"\n        label={`${stockKey}: ${usDollar.format(stockEntries[stockKey])}`}\n        onClick={openStockModal(stockKey)}\n        sx={{ margin: 0.5, fontWeight: \"bold\" }}\n      />\n    ))}\n  </div>\n);\n\nexport default StockDisplay;\n","import * as React from \"react\";\nimport { useAtom } from \"jotai\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport { CompEntry } from \"../../../jotai/comp-calculator-atom\";\nimport CompEntryDialog from \"./CompEntryDialog\";\nimport StockDialog from \"./StockDialog\";\nimport stockAtom from \"../../../jotai/stock-atom\";\nimport StockDisplay from \"./StockDisplay\";\n\ninterface CompHeaderProps {\n  compEntries: CompEntry[];\n  editEntryIdx: number;\n  openEntry: boolean;\n  setCompEntries: (c: CompEntry[]) => void;\n  setEditEntryIdx: React.Dispatch<React.SetStateAction<number>>;\n  setOpenEntry: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst CompHeader = ({\n  compEntries,\n  setCompEntries,\n  openEntry,\n  setOpenEntry,\n  editEntryIdx,\n  setEditEntryIdx,\n}: CompHeaderProps) => {\n  const [stockEntries, setStockEntries] = useAtom(stockAtom);\n  const [openStock, setOpenStock] = React.useState(false);\n  const [editStockTick, setEditStockTick] = React.useState(\"\");\n\n  // entry open/closers\n  const closeEntryModal = () => setOpenEntry(false);\n  const openNewEntry = () => {\n    setEditEntryIdx(-1);\n    setOpenEntry(true);\n  };\n\n  // stock open/closers\n  const closeStockModal = () => setOpenStock(false);\n  const openNewStock = () => {\n    setEditStockTick(\"\");\n    setOpenStock(true);\n  };\n  const openEditStock = (s: string) => () => {\n    setEditStockTick(s);\n    setOpenStock(true);\n  };\n\n  const addCompEntry = (compEntry: CompEntry) => {\n    const newCompEntries = [...compEntries];\n    if (editEntryIdx === -1) {\n      newCompEntries.push(compEntry);\n    } else {\n      newCompEntries[editEntryIdx] = compEntry;\n    }\n    setCompEntries(newCompEntries);\n    closeEntryModal();\n  };\n\n  const addStockEntry = (stock: string, price: number) => {\n    const newStockEntries = { ...stockEntries };\n    newStockEntries[stock] = price;\n    setStockEntries(newStockEntries);\n    closeStockModal();\n  };\n\n  const removeStockEntry = (stock: string) => () => {\n    const newStockEntries = { ...stockEntries };\n    delete newStockEntries[stock];\n    setStockEntries(newStockEntries);\n    closeStockModal();\n  };\n\n  return (\n    <>\n      <Typography variant=\"h2\" component=\"h1\">\n        Comp Calculator\n      </Typography>\n      <div\n        className=\"flex-container\"\n        style={{ marginTop: 10, marginBottom: 10 }}\n      >\n        <StockDisplay\n          stockEntries={stockEntries}\n          openStockModal={openEditStock}\n        />\n        <div>\n          <Button onClick={openNewStock}>+ Stock</Button>\n          <Button onClick={openNewEntry}>+ Entry</Button>\n        </div>\n      </div>\n      <StockDialog\n        open={openStock}\n        price={editStockTick ? stockEntries[editStockTick] : undefined}\n        stock={editStockTick}\n        onClose={closeStockModal}\n        addStockEntry={addStockEntry}\n        removeStockEntry={removeStockEntry}\n      />\n      <CompEntryDialog\n        open={openEntry}\n        compEntry={editEntryIdx !== -1 ? compEntries[editEntryIdx] : undefined}\n        onClose={closeEntryModal}\n        addCompEntry={addCompEntry}\n      />\n    </>\n  );\n};\n\nexport default CompHeader;\n","import { blue, lightGreen, orange } from \"@mui/material/colors\";\n\nconst colors: string[] = [lightGreen[500], orange[500], blue[500], orange[900]];\n\nexport default colors;\n","import { useAtomValue } from \"jotai\";\nimport * as Highcharts from \"highcharts\";\nimport \"highcharts/modules/accessibility\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport themeAtom from \"../../../../jotai/theme-atom\";\nimport {\n  CompCalcEntry,\n  CompEntry,\n} from \"../../../../jotai/comp-calculator-atom\";\nimport dateHelper from \"../../../../apis/DateHelper\";\nimport colors from \"./colors\";\n\nconst STOCK = 0;\nconst BONUS = 1;\nconst SALARY = 2;\nconst TOTAL = 3;\nconst INFL = 4;\n\nconst inflationKey: { [key: number]: number } = {\n  2000: 1.034,\n  2001: 1.028,\n  2002: 1.016,\n  2003: 1.023,\n  2004: 1.027,\n  2005: 1.034,\n  2006: 1.032,\n  2007: 1.028,\n  2008: 1.038,\n  2009: 0.996,\n  2010: 1.016,\n  2011: 1.032,\n  2012: 1.021,\n  2013: 1.015,\n  2014: 1.016,\n  2015: 1.001,\n  2016: 1.013,\n  2017: 1.021,\n  2018: 1.024,\n  2019: 1.018,\n  2020: 1.012,\n  2021: 1.047,\n  2022: 1.08,\n  2023: 1.041,\n  2024: 1.027,\n};\n\ninterface CompChartProps {\n  startIdx: number;\n  compCalcEntries: CompCalcEntry[];\n  compEntries: CompEntry[];\n  onClick: (e: Highcharts.SeriesClickEventObject) => void;\n}\n\nconst CompChart = ({\n  startIdx,\n  compCalcEntries,\n  compEntries,\n  onClick,\n}: CompChartProps) => {\n  // process theme\n  const theme = useAtomValue(themeAtom);\n  const color = theme.mode === \"light\" ? \"black\" : \"white\";\n\n  // calculate chart data\n  const compChartData: number[][] = [[], [], [], [], []];\n  if (compEntries.length > 0) {\n    // set start basis for inflation calculation\n    let startYear = dateHelper(compEntries[startIdx].entryDate).year;\n    let startTC =\n      compEntries[startIdx].salary +\n      compEntries[startIdx].bonus +\n      (compCalcEntries[startIdx].stockAdj || compCalcEntries[startIdx].stock);\n\n    // calculate chart data\n    compEntries.forEach(({ bonus, salary, entryDate }, i) => {\n      const { stock, stockAdj } = compCalcEntries[i];\n      compChartData[STOCK].push(stockAdj || stock);\n      compChartData[BONUS].push(bonus);\n      compChartData[SALARY].push(salary);\n      compChartData[TOTAL].push(stock + bonus + salary);\n      // calculate inflation rate from first job (or clicked job)\n      const endYear = dateHelper(entryDate).year;\n      if (endYear >= startYear) {\n        for (; startYear < endYear; startYear += 1) {\n          startTC *= inflationKey[startYear];\n        }\n        compChartData[INFL].push(startTC);\n      } else {\n        compChartData[INFL].push(bonus + salary + (stockAdj || stock));\n      }\n    });\n  }\n\n  // set chart options\n  const options = {\n    accessibility: { enabled: true },\n    colors: [...colors, color],\n    chart: { type: \"area\", backgroundColor: null },\n    credits: { enabled: false },\n    legend: { enabled: false },\n    title: { text: \"Total Comp\", style: { color } },\n    xAxis: { visible: false },\n    yAxis: { labels: { style: { color } }, title: { enabled: false } },\n    tooltip: {\n      shared: true,\n      headerFormat: \"<h3>Compensation</h3><br />\",\n      pointFormat:\n        '<span style=\"color:{series.color}\">\\u25CF</span> {series.name}: <b>${point.y:,.2f}</b><br />',\n      footerFormat: \"\\u25CF *Total: $<b>{point.total:,.2f}</b>\",\n    },\n    plotOptions: {\n      area: {\n        stacking: \"normal\",\n        lineColor: color,\n        lineWidth: 1,\n        marker: { lineWidth: 1, lineColor: color },\n      },\n      series: { cursor: \"pointer\", events: { click: onClick } },\n    },\n    series: [\n      { type: \"area\", name: \"Stock\", data: [...compChartData[STOCK]] },\n      { type: \"area\", name: \"Bonus\", data: [...compChartData[BONUS]] },\n      { type: \"area\", name: \"Salary\", data: [...compChartData[SALARY]] },\n      { type: \"spline\", name: \"Total\", data: [...compChartData[TOTAL]] },\n      { type: \"spline\", name: \"Inflation\", data: [...compChartData[INFL]] },\n    ],\n  };\n\n  return (\n    <figure style={{ margin: 0, width: \"100%\" }}>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </figure>\n  );\n};\n\nexport default CompChart;\n","import * as React from \"react\";\nimport { useAtomValue } from \"jotai\";\nimport * as Highcharts from \"highcharts\";\nimport \"highcharts/modules/accessibility\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport themeAtom from \"../../../../jotai/theme-atom\";\nimport colors from \"./colors\";\n\ninterface BreakdownChartProps {\n  bonus: number;\n  salary: number;\n  stock: number;\n}\n\nconst BreakdownChart = React.memo(\n  ({ bonus, salary, stock }: BreakdownChartProps) => {\n    const theme = useAtomValue(themeAtom);\n    const color = theme.mode === \"light\" ? \"black\" : \"white\";\n\n    const options = {\n      accessibility: { enabled: true },\n      colors,\n      chart: { type: \"pie\", backgroundColor: null },\n      credits: { enabled: false },\n      legend: { enabled: false },\n      title: { text: \"Comp Breakdown\", style: { color } },\n      tooltip: { pointFormat: \"<b>${point.y:,.2f}</b>\" },\n      plotOptions: {\n        series: {\n          allowPointSelect: true,\n          cursor: \"pointer\",\n          dataLabels: [\n            { enabled: true, format: \"{point.name}\" },\n            {\n              enabled: true,\n              distance: -30,\n              format: \"{point.percentage:.0f}%\",\n              style: { fontSize: \"1em\" },\n            },\n          ],\n        },\n      },\n      series: [\n        {\n          data: [\n            { name: \"Stock\", y: stock },\n            { name: \"Bonus\", y: bonus },\n            { name: \"Salary\", y: salary },\n          ],\n        },\n      ],\n    };\n\n    return (\n      <figure style={{ margin: 0, width: \"100%\" }}>\n        <HighchartsReact highcharts={Highcharts} options={options} />\n      </figure>\n    );\n  },\n);\n\nBreakdownChart.displayName = \"BreakdownChart\";\n\nexport default BreakdownChart;\n","import * as React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { SeriesClickEventObject } from \"highcharts\";\nimport CompChart from \"./CompGraph\";\nimport BreakdownChart from \"./BreakdownGraph\";\nimport {\n  CompCalcEntry,\n  CompEntry,\n} from \"../../../../jotai/comp-calculator-atom\";\n\ninterface GraphsProps {\n  compCalcEntries: CompCalcEntry[];\n  compEntries: CompEntry[];\n}\n\nconst Graphs = ({ compEntries, compCalcEntries }: GraphsProps) => {\n  const { stock, stockAdj } = compCalcEntries[compCalcEntries.length - 1];\n  const { bonus, salary } = compEntries[compEntries.length - 1];\n\n  const [startIdx, setStartIdx] = React.useState(0);\n  const [cStock, setStock] = React.useState(stockAdj || stock);\n  const [cBonus, setBonus] = React.useState(bonus);\n  const [cSalary, setSalary] = React.useState(salary);\n\n  React.useEffect(() => {\n    setStartIdx(0);\n    setStock(stockAdj || stock);\n    setBonus(bonus);\n    setSalary(salary);\n  }, [stockAdj, stock, bonus, salary]);\n\n  const handleClick = ({ point: { index } }: SeriesClickEventObject) => {\n    const { stock, stockAdj } = compCalcEntries[index];\n    const { bonus, salary } = compEntries[index];\n    setStartIdx(index >= compEntries.length - 1 ? 0 : index);\n    setStock(stockAdj || stock);\n    setBonus(bonus);\n    setSalary(salary);\n  };\n\n  return (\n    <Grid container>\n      <Grid size={{ xs: 12, md: 6, lg: 8, xl: 9 }}>\n        <CompChart\n          startIdx={startIdx}\n          compCalcEntries={compCalcEntries}\n          compEntries={compEntries}\n          onClick={handleClick}\n        />\n      </Grid>\n      <Grid size={{ xs: 12, md: 6, lg: 4, xl: 3 }}>\n        <BreakdownChart stock={cStock} bonus={cBonus} salary={cSalary} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Graphs;\n","import Card from \"@mui/material/Card\";\nimport CardActionArea from \"@mui/material/CardActionArea\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport Divider from \"@mui/material/Divider\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport { CompCalcEntry, CompEntry } from \"../../../jotai/comp-calculator-atom\";\nimport dateObj from \"../../../apis/DateHelper\";\nimport usDollar from \"../../../apis/usDollar\";\n\ninterface CompEntryCardProps {\n  compEntry: CompEntry;\n  compCalcEntry: CompCalcEntry;\n  compEntryCount: number;\n  onClick: () => void;\n}\n\nconst CompEntryCard = ({\n  compEntry: {\n    entryDate,\n    salary,\n    bonus,\n    stockTick,\n    priceThen,\n    grantDuration,\n    grantQty,\n  },\n  compCalcEntry: {\n    stock,\n    stockAdj,\n    total,\n    totalAdj,\n    netDiff,\n    grantThen,\n    grantNow,\n  },\n  compEntryCount,\n  onClick,\n}: CompEntryCardProps) => (\n  <Grid\n    size={{\n      xs: 12,\n      md: 6,\n      lg: 4,\n      xl: 3,\n      // @ts-expect-error - custom breakpoints\n      xxl: compEntryCount > 4 ? 2 : undefined,\n      xxxl: compEntryCount > 6 ? 1 : undefined,\n    }}\n  >\n    <Card>\n      <CardActionArea onClick={onClick}>\n        <Grid container>\n          <Grid size={stockTick ? 6 : 12}>\n            <CardHeader title=\"Salary\" />\n            <CardContent>\n              <Typography>\n                Date: {dateObj(entryDate).format(\"MMMM Y\")}\n              </Typography>\n              <Typography>Salary: {usDollar.format(salary)}</Typography>\n              <Typography>Bonus: {usDollar.format(bonus)}</Typography>\n              <Divider aria-hidden />\n              <Typography>Stock: {usDollar.format(stock)}</Typography>\n              <Typography>*Stock: {usDollar.format(stockAdj)}</Typography>\n              <Divider aria-hidden />\n              <Typography>Total: {usDollar.format(total)}</Typography>\n              <Typography sx={{ display: \"inline\" }}>*Total:</Typography>\n              <Typography\n                color=\"warning\"\n                fontWeight=\"fontWeightBold\"\n                sx={{ display: \"inline\", marginLeft: 1 }}\n              >\n                {usDollar.format(totalAdj)}\n              </Typography>\n              {netDiff !== 0 && (\n                <>\n                  <Divider aria-hidden />\n                  <Typography sx={{ display: \"inline\" }}>Net:</Typography>\n                  <Typography\n                    color={netDiff > 0 ? \"success\" : \"error\"}\n                    fontWeight=\"fontWeightBold\"\n                    sx={{ display: \"inline\", marginLeft: 1 }}\n                  >\n                    {usDollar.format(netDiff)}\n                  </Typography>\n                </>\n              )}\n            </CardContent>\n          </Grid>\n          {stockTick && (\n            <Grid size={6}>\n              <CardHeader title=\"Stock Grant\" />\n              <CardContent>\n                <Typography sx={{ display: \"inline\" }}>Ticker:</Typography>\n                <Typography\n                  color=\"primary\"\n                  fontWeight=\"fontWeightBold\"\n                  sx={{ display: \"inline\", marginLeft: 1 }}\n                >\n                  {stockTick}\n                </Typography>\n                {grantQty > 0 && (\n                  <>\n                    <Typography>Price: {usDollar.format(priceThen)}</Typography>\n                    <Typography>Grant Qty: {grantQty}</Typography>\n                    <Typography>Duration: {grantDuration} years</Typography>\n                    <Divider aria-hidden />\n                    <Typography>Grant: {usDollar.format(grantThen)}</Typography>\n                    <Typography>*Grant: {usDollar.format(grantNow)}</Typography>\n                  </>\n                )}\n              </CardContent>\n            </Grid>\n          )}\n        </Grid>\n      </CardActionArea>\n    </Card>\n  </Grid>\n);\n\nexport default CompEntryCard;\n","import Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport { CompCalcEntry, CompEntry } from \"../../../jotai/comp-calculator-atom\";\nimport CompEntryCard from \"./CompEntryCard\";\n\ninterface CompEntryDisplayProps {\n  compEntries: CompEntry[];\n  compCalcEntries: CompCalcEntry[];\n  onClick: (i: number) => () => void;\n}\n\nconst CompEntryDisplay = ({\n  compEntries,\n  compCalcEntries,\n  onClick,\n}: CompEntryDisplayProps) => (\n  <Grid container spacing={1}>\n    <Grid size={12}>\n      <Typography>*value computed from latest stock price above</Typography>\n    </Grid>\n    {compEntries\n      .map((compEntry, i) => (\n        <CompEntryCard\n          compEntry={compEntry}\n          compCalcEntry={compCalcEntries[i]}\n          compEntryCount={compEntries.length}\n          onClick={onClick(i)}\n          key={`comp-calc-entry-${i}`}\n        />\n      ))\n      .reverse()}\n  </Grid>\n);\n\nexport default CompEntryDisplay;\n","import * as React from \"react\";\nimport { useAtom, useAtomValue } from \"jotai\";\nimport compCalcState, {\n  compCalcRead,\n} from \"../../../jotai/comp-calculator-atom\";\nimport CompHeader from \"./CompHeader\";\nimport Graphs from \"./graphs/Graphs\";\nimport CompEntryDisplay from \"./CompEntryDisplay\";\n\nconst CompCalculator = () => {\n  const [compEntries, setCompEntries] = useAtom(compCalcState);\n  const compCalcEntries = useAtomValue(compCalcRead);\n\n  const [openEntry, setOpenEntry] = React.useState(false);\n  const [editEntryIdx, setEditEntryIdx] = React.useState(-1);\n\n  // entry open/closers\n  const openEditEntry = (i: number) => () => {\n    setEditEntryIdx(i);\n    setOpenEntry(true);\n  };\n\n  return (\n    <>\n      <CompHeader\n        compEntries={compEntries}\n        setCompEntries={setCompEntries}\n        openEntry={openEntry}\n        setOpenEntry={setOpenEntry}\n        editEntryIdx={editEntryIdx}\n        setEditEntryIdx={setEditEntryIdx}\n      />\n      {compEntries.length > 0 && (\n        <>\n          <Graphs compEntries={compEntries} compCalcEntries={compCalcEntries} />\n          <CompEntryDisplay\n            compEntries={compEntries}\n            compCalcEntries={compCalcEntries}\n            onClick={openEditEntry}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default CompCalculator;\n"],"names":["stockAtom","atomWithStorage","compCalcAtom","compCalcRead","atom","get","compEntries","stockEntries","prevStockAcc","compCalcEntriesNoNet","bonus","entryDate","grantDuration","grantQty","priceThen","salary","stockTick","priceNow","stock","stockAdj","exp","dateHelper","s","total","totalAdj","grantThen","grantNow","rest","i","netDiff","getDialogContentTextUtilityClass","slot","generateUtilityClass","generateUtilityClasses","useUtilityClasses","ownerState","classes","composedClasses","composeClasses","DialogContentTextRoot","styled","Typography","prop","rootShouldForwardProp","DialogContentText","React.forwardRef","inProps","ref","props","useDefaultProps","children","className","clsx","tfProps","currentYear","years","CompEntryDialog","open","compEntry","onClose","addCompEntry","entryDateMonth","setEntryDateMonth","React.useState","entryDateYear","setEntryDateYear","setSalary","setBonus","setStockTick","setPriceThen","setGrantDuration","setGrantQty","resetState","React.useEffect","month","year","handleChange","func","e","handleStockTick","handleSelectMonth","handleSelectYear","handleSubmit","jsxs","Dialog","DialogTitle","DialogContent","FormControl","jsx","InputLabel","Select","months","MenuItem","TextField","DialogActions","Button","StockDialog","React.memo","exPrice","exStock","addStockEntry","removeStockEntry","price","setPrice","setStock","handleStockChange","handlePriceChange","usDollar","StockDisplay","openStockModal","stockKey","Chip","CompHeader","setCompEntries","openEntry","setOpenEntry","editEntryIdx","setEditEntryIdx","setStockEntries","useAtom","openStock","setOpenStock","editStockTick","setEditStockTick","closeEntryModal","openNewEntry","closeStockModal","openNewStock","openEditStock","newCompEntries","newStockEntries","Fragment","colors","lightGreen","orange","blue","STOCK","BONUS","SALARY","TOTAL","INFL","inflationKey","CompChart","startIdx","compCalcEntries","onClick","color","useAtomValue","themeAtom","compChartData","startYear","startTC","endYear","options","HighchartsReact","Highcharts","BreakdownChart","Graphs","setStartIdx","cStock","cBonus","cSalary","handleClick","index","Grid","CompEntryCard","compEntryCount","Card","CardActionArea","CardHeader","CardContent","dateObj","Divider","CompEntryDisplay","CompCalculator","compCalcState","openEditEntry"],"mappings":"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","x_google_ignoreList":[2,3]}