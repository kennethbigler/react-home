{"version":3,"file":"index-1210c199.js","sources":["../../src/constants/ayto.ts","../../src/recoil/are-you-the-one-atom.ts","../../src/components/games/are-you-the-one/Controls.tsx","../../src/components/games/are-you-the-one/table/TBDialog.tsx","../../src/components/games/are-you-the-one/table/TableBody.tsx","../../src/components/games/are-you-the-one/table/Table.tsx","../../src/components/games/are-you-the-one/analysis/Analysis.tsx","../../src/components/games/are-you-the-one/analysis/useHist.ts","../../src/components/games/are-you-the-one/AreYouTheOne.tsx"],"sourcesContent":["// are-you-the-one\nexport const aytoSeasons = [\n  {\n    ladies: [\n      \"Amber\",\n      \"Ashleigh\",\n      \"Brittany\",\n      \"Coleysia\",\n      \"Jacy\",\n      \"Jessica\",\n      \"Kayla\",\n      \"Paige\",\n      \"Shanley\",\n      \"Simone\",\n    ],\n    gents: [\n      \"Adam\",\n      \"Dre\",\n      \"Chris S\",\n      \"Chris T\",\n      \"Dillan\",\n      \"Ethan\",\n      \"Joey\",\n      \"JJ\",\n      \"Ryan\",\n      \"Wes\",\n    ],\n  },\n  {\n    ladies: [\n      \"Alexandria\",\n      \"Ashley\",\n      \"Briana\",\n      \"Christina\",\n      \"Ellie\",\n      \"Jasmine\",\n      \"Jenni\",\n      \"Jessica\",\n      \"Paris\",\n      \"Shelby\",\n      \"Tyler\",\n    ],\n    gents: [\n      \"Alex\",\n      \"Anthony\",\n      \"Brandon\",\n      \"Curtis\",\n      \"Dario\",\n      \"Garland\",\n      \"John\",\n      \"Layton\",\n      \"Nathan\",\n      \"Tyler\",\n    ],\n  },\n  {\n    ladies: [\n      \"Amanda\",\n      \"Britni\",\n      \"Chelsey\",\n      \"Hannah\",\n      \"Kayla\",\n      \"Kiki\",\n      \"Cheyenne\",\n      \"Melanie\",\n      \"Rashida\",\n      \"Stacey\",\n    ],\n    gents: [\n      \"Alec\",\n      \"Austin\",\n      \"Chuck\",\n      \"Connor\",\n      \"Devin\",\n      \"Hunter\",\n      \"Mike\",\n      \"Nelson\",\n      \"Tyler\",\n      \"Zak\",\n    ],\n  },\n  {\n    ladies: [\n      \"Alyssa\",\n      \"Camille\",\n      \"Emma\",\n      \"Francesca\",\n      \"Julia\",\n      \"Kaylen\",\n      \"Mikala\",\n      \"Nicole\",\n      \"Tori\",\n      \"Victoria\",\n    ],\n    gents: [\n      \"Asaf\",\n      \"Cam\",\n      \"Cameron\",\n      \"Giovanni\",\n      \"John\",\n      \"Morgan\",\n      \"Prosper\",\n      \"Sam\",\n      \"Stephen\",\n      \"Tyler\",\n    ],\n  },\n  {\n    ladies: [\n      \"Alicia\",\n      \"Carolina\",\n      \"Cas\",\n      \"Gianna\",\n      \"Hannah\",\n      \"Kam\",\n      \"Kari\",\n      \"Kathryn\",\n      \"Shannon\",\n      \"Taylor\",\n      \"Tyranny\",\n    ],\n    gents: [\n      \"Andre\",\n      \"Derrick\",\n      \"Edward\",\n      \"Hayden\",\n      \"Jaylan\",\n      \"Joey\",\n      \"Michael\",\n      \"Mike\",\n      \"Osvaldo\",\n      \"Ozzy\",\n      \"Tyler\",\n    ],\n  },\n  {\n    ladies: [\n      \"Alexis\",\n      \"Alivia\",\n      \"Audrey\",\n      \"Diandra\",\n      \"Geles\",\n      \"Jada\",\n      \"Keyana\",\n      \"Nicole\",\n      \"Nurys\",\n      \"Uche\",\n      \"Zoe\",\n    ],\n    gents: [\n      \"Anthony\",\n      \"Clinton\",\n      \"David\",\n      \"Dimitri\",\n      \"Ethan\",\n      \"Joe\",\n      \"Kareem\",\n      \"Keith\",\n      \"Malcolm\",\n      \"Michael\",\n      \"Tyler\",\n    ],\n  },\n  {\n    ladies: [\n      \"Asia\",\n      \"Bria\",\n      \"Cali\",\n      \"Jasmine\",\n      \"Kayla\",\n      \"Kenya\",\n      \"Lauren\",\n      \"Maria\",\n      \"Morgan\",\n      \"Nutsa\",\n      \"Samantha\",\n    ],\n    gents: [\n      \"Andrew\",\n      \"Brett\",\n      \"Cam\",\n      \"Daniel\",\n      \"Kwasi\",\n      \"Lewis\",\n      \"Moe\",\n      \"Shamoy\",\n      \"Tevin\",\n      \"Tomas\",\n      \"Zak\",\n    ],\n  },\n  {\n    ladies: [\n      \"Anissa\",\n      \"Brooke\",\n      \"CC\",\n      \"Courtney\",\n      \"Danielle\",\n      \"Dew\",\n      \"Jordanne\",\n      \"Julia-Ruth\",\n      \"Mijntje\",\n      \"Roz\",\n      \"Taylor\",\n    ],\n    gents: [\n      \"Aqel\",\n      \"Brendan\",\n      \"Clay\",\n      \"Eduardo\",\n      \"Hamudi\",\n      \"Leo\",\n      \"Michael\",\n      \"Nathan\",\n      \"Ollie\",\n      \"Samuel\",\n      \"Will\",\n    ],\n  },\n];\n\nexport const seasons = [\n  \"Season 1\",\n  \"Season 2\",\n  \"Season 3\",\n  \"Season 4\",\n  \"Season 5\",\n  \"Season 6\",\n  \"Season 7\",\n  \"Season 9\",\n];\n\nexport const options = [\n  \"Matchup 1\",\n  \"Matchup 2\",\n  \"Matchup 3\",\n  \"Matchup 4\",\n  \"Matchup 5\",\n  \"Matchup 6\",\n  \"Matchup 7\",\n  \"Matchup 8\",\n  \"Matchup 9\",\n  \"Matchup 10\",\n  \"Truth Booth\",\n  \"Consolidated\",\n];\n","import { atom, DefaultValue, selector } from \"recoil\";\nimport { aytoSeasons, options } from \"../constants/ayto\";\n\nexport interface RoundPairing {\n  /** [lady-i: gent-i] */\n  pairs: number[];\n  /** score of the round */\n  score: number;\n}\n\nexport interface AYTOState {\n  /** [lady-i: (gent-i | -1), -1, -1, ...] */\n  matches: number[];\n  /** [lady-i: [gent-i: bool]] */\n  noMatch: boolean[][];\n  /** [round-i: RoundPairing] */\n  roundPairings: RoundPairing[];\n}\n\nconst DEFAULT_SEASON = 7;\n\nconst newAYTOState = (season = DEFAULT_SEASON): AYTOState => ({\n  matches: aytoSeasons[season].ladies.map(() => -1),\n  noMatch: aytoSeasons[season].ladies.map(() =>\n    aytoSeasons[season].gents.map(() => false)\n  ),\n  roundPairings: [],\n});\n\n/** used for main game state */\nexport const areYouTheOneAtom = atom({\n  key: \"areYouTheOneAtom\",\n  default:\n    (JSON.parse(\n      localStorage.getItem(\"are-you-the-one-atom\") || \"null\"\n    ) as AYTOState) || newAYTOState(),\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"are-you-the-one-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\n/** used internally to store season */\nconst aytoSeasonAtom = atom({\n  key: \"aytoSeason\",\n  default:\n    (JSON.parse(\n      localStorage.getItem(\"ayto-season-atom\") || \"null\"\n    ) as number) || DEFAULT_SEASON,\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"ayto-season-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\n/** used externally to set season and side effects in main state */\nexport const aytoSeasonSelector = selector({\n  key: \"aytoSeasonSelector\",\n  get: ({ get }) => get(aytoSeasonAtom),\n  set: ({ set }, state) => {\n    if (!(state instanceof DefaultValue)) {\n      set(aytoSeasonAtom, state);\n      set(areYouTheOneAtom, newAYTOState(state));\n    }\n  },\n});\n\n/** used externally to get player info */\nexport const aytoPlayerSelector = selector({\n  key: \"aytoPlayerSelector\",\n  get: ({ get }) => {\n    const season = get(aytoSeasonAtom);\n    const newOptions = [...options];\n    // if season 1, there are only 9 TBs\n    if (season === 1) {\n      newOptions.splice(9, 1);\n    }\n\n    return { ...aytoSeasons[season], options };\n  },\n});\n\nexport default areYouTheOneAtom;\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\nimport { useRecoilState } from \"recoil\";\nimport {\n  aytoSeasonSelector,\n  RoundPairing,\n} from \"../../../recoil/are-you-the-one-atom\";\nimport { seasons } from \"../../../constants/ayto\";\nimport Dropdown from \"../../common/dropdown/Dropdown\";\n\ninterface ControlsProps {\n  onSelect: (index: number) => void;\n  options: string[];\n  roundNumber: number;\n  /** [round-i: RoundPairing] */\n  roundPairings: RoundPairing[];\n  updateScore: (score: number) => void;\n  onBlackout: (pairs: number[]) => void;\n}\n\n// eslint-disable-next-line no-restricted-globals\nconst getScore = (value: number) => (isNaN(value) ? -1 : value);\n\n/** Controls component for Are You The One */\nconst Controls = (props: ControlsProps) => {\n  const {\n    options,\n    onSelect,\n    roundNumber,\n    roundPairings,\n    onBlackout,\n    updateScore,\n  } = props;\n\n  // hooks/state\n  const [season, setSeason] = useRecoilState(aytoSeasonSelector);\n  const [score, setScore] = React.useState(\n    getScore(roundPairings[roundNumber]?.score)\n  );\n\n  // handlers\n  const handleSeasonSelect = (newSeason: number) => setSeason(newSeason);\n  const handleMatchupSelect = (index: number) => {\n    setScore(getScore(roundPairings[index]?.score));\n    onSelect(index);\n  };\n\n  const handleBlackout = () => {\n    onBlackout(roundPairings[roundNumber].pairs);\n    setScore(0);\n  };\n\n  const incrScore = () => {\n    setScore(score + 1);\n    updateScore(score + 1);\n  };\n  const decrScore = () => {\n    setScore(score - 1);\n    updateScore(score - 1);\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        flexWrap: \"wrap\",\n        gap: \"1em\",\n      }}\n    >\n      <Dropdown\n        ariaLabel=\"select season\"\n        value={season}\n        options={seasons}\n        onSelect={handleSeasonSelect}\n      />\n      <Dropdown\n        ariaLabel=\"select matchup\"\n        value={roundNumber}\n        options={options}\n        onSelect={handleMatchupSelect}\n      />\n      {roundNumber < options.length - 2 && (\n        <>\n          <Button variant=\"outlined\" color=\"secondary\" onClick={handleBlackout}>\n            Blackout\n          </Button>\n          <div>\n            <p style={{ display: \"inline\", marginRight: 15 }}>Score: {score}</p>\n            <ButtonGroup variant=\"contained\" aria-label=\"modify matchup score\">\n              <Button aria-label=\"decrement score\" onClick={decrScore}>\n                -\n              </Button>\n              <Button aria-label=\"increment score\" onClick={incrScore}>\n                +\n              </Button>\n            </ButtonGroup>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Controls;\n","import Button from \"@mui/material/Button\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\n\nexport interface TBDialogProps {\n  open: boolean;\n  content: string;\n  onMatch: () => void;\n  onNoMatch: () => void;\n  onCancel: () => void;\n}\n\nconst TBDialog = ({\n  open,\n  content,\n  onMatch,\n  onNoMatch,\n  onCancel,\n}: TBDialogProps) => (\n  <Dialog onClose={onCancel} open={open}>\n    <DialogTitle>TB Result</DialogTitle>\n    <DialogContent>Are {content} a perfect match?</DialogContent>\n    <DialogActions>\n      <Button onClick={onMatch}>Match</Button>\n      <Button onClick={onNoMatch} color=\"error\">\n        No Match\n      </Button>\n      <Button onClick={onCancel} color=\"warning\">\n        Cancel\n      </Button>\n    </DialogActions>\n  </Dialog>\n);\n\nexport default TBDialog;\n","import * as React from \"react\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Button from \"@mui/material/Button\";\nimport { RoundPairing } from \"../../../../recoil/are-you-the-one-atom\";\nimport { ColorOptions } from \"../types\";\nimport TBDialog from \"./TBDialog\";\nimport { AYTOHist } from \"../analysis/useHist\";\n\nexport interface AYTOTableProps {\n  gents: string[];\n  hist: AYTOHist[][];\n  ladies: string[];\n  /** [lady-i: (gent-i | -1), -1, -1, ...] */\n  matches: number[];\n  /** [lady-i: [gent-i: bool]] */\n  noMatch: boolean[][];\n  options: string[];\n  roundNumber: number;\n  /** [round-i: RoundPairing] */\n  roundPairings: RoundPairing[];\n  updateMatch: (li: number, gi: number) => void;\n  updateNoMatch: (li: number, gi: number) => void;\n  updatePairs: (ri: number, li: number, gi: number) => void;\n}\n\nconst AYTOTableBody = (props: AYTOTableProps) => {\n  const {\n    gents,\n    hist,\n    ladies,\n    matches,\n    noMatch,\n    options,\n    roundNumber: ri,\n    roundPairings,\n    updateMatch,\n    updateNoMatch,\n    updatePairs,\n  } = props;\n  const isTB = options.length === ri + 2;\n  const isConsolidated = options.length === ri + 1;\n\n  // state\n  const [open, setOpen] = React.useState(false);\n  const [tbi, setTBI] = React.useState([-1, -1]);\n\n  // Handlers\n  const handleClick = (roundi: number, ladyi: number, genti: number) => () => {\n    if (isConsolidated) {\n      return;\n    }\n    if (isTB) {\n      setTBI([ladyi, genti]);\n      setOpen(true);\n      return;\n    }\n    // Regular Round, verify gent isn't already taken\n    const tempLi = roundPairings[roundi]?.pairs.indexOf(genti);\n    if (tempLi !== -1) {\n      // deselect gent from old lady\n      updatePairs(roundi, tempLi, -1);\n    }\n    // assign to new lady\n    updatePairs(roundi, ladyi, genti);\n  };\n\n  const handleCancel = () => {\n    setOpen(false);\n  };\n\n  const handleMatch = () => {\n    const [li, gi] = tbi;\n    updateMatch(li, gi);\n    handleCancel();\n  };\n\n  const handleNoMatch = () => {\n    const [li, gi] = tbi;\n    updateNoMatch(li, gi);\n    handleCancel();\n  };\n\n  return (\n    <TableBody>\n      {ladies.map((lName, li) => (\n        <TableRow\n          key={`ayto-table-row-${lName}`}\n          sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n        >\n          <TableCell component=\"th\" scope=\"row\">\n            {lName}\n          </TableCell>\n          {gents.map((gName, gi) => {\n            // variables\n            let variant: \"outlined\" | \"contained\" = \"outlined\";\n            let color: ColorOptions = \"primary\";\n\n            // logic\n            if (isTB) {\n              // if has data about match or no match\n              if ((noMatch[li] && noMatch[li][gi]) || matches[li] === gi) {\n                variant = \"contained\";\n              }\n            } else if (roundPairings[ri]?.pairs[li] === gi) {\n              // if paired this round\n              variant = \"contained\";\n            }\n\n            if (noMatch[li] && noMatch[li][gi]) {\n              color = \"error\";\n            }\n\n            // if match\n            if (matches[li] === gi) {\n              color = \"success\";\n            }\n\n            const histValue = (hist[li] && hist[li][gi]?.rounds?.length) || 0;\n            // if consolidated\n            if (isConsolidated && histValue > 0) {\n              variant = \"contained\";\n            }\n\n            // render\n            return (\n              <TableCell key={gName} sx={{ padding: 0, textAlign: \"center\" }}>\n                <Button\n                  variant={variant}\n                  color={color}\n                  onClick={handleClick(ri, li, gi)}\n                >\n                  {isConsolidated ? histValue : `${lName[0]}-${gName[0]}`}\n                </Button>\n              </TableCell>\n            );\n          })}\n        </TableRow>\n      ))}\n      <TBDialog\n        open={open}\n        content={`${ladies[tbi[0]]} & ${gents[tbi[1]]}`}\n        onCancel={handleCancel}\n        onMatch={handleMatch}\n        onNoMatch={handleNoMatch}\n      />\n    </TableBody>\n  );\n};\n\nexport default AYTOTableBody;\n","import Table from \"@mui/material/Table\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport AYTOTableBody, { AYTOTableProps } from \"./TableBody\";\n\nconst AYTOTable = ({ gents, ...other }: AYTOTableProps) => (\n  <TableContainer component={Paper}>\n    <Table aria-label=\"are you the one data entry table\">\n      <TableHead>\n        <TableRow>\n          <TableCell>-</TableCell>\n          {gents.map((name) => (\n            <TableCell\n              key={name}\n              sx={{ paddingLeft: 0, paddingRight: 0, textAlign: \"center\" }}\n            >\n              {name}\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n      <AYTOTableBody gents={gents} {...other} />\n    </Table>\n  </TableContainer>\n);\n\nexport default AYTOTable;\n","import * as React from \"react\";\nimport Stack from \"@mui/material/Stack\";\nimport Chip from \"@mui/material/Chip\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Switch from \"@mui/material/Switch\";\nimport { RoundPairing } from \"../../../../recoil/are-you-the-one-atom\";\nimport { ChipColorOptions } from \"../types\";\nimport { AYTOHist } from \"./useHist\";\n\nexport interface AnalysisProps {\n  calculatedEquations: RoundPairing[];\n  gents: string[];\n  hist: AYTOHist[][];\n  ladies: string[];\n  /** [lady-i: (gent-i | -1), -1, -1, ...] */\n  matches: number[];\n  /** [lady-i: [gent-i: bool]] */\n  noMatch: boolean[][];\n  /** [round-i: RoundPairing] */\n  roundPairings: RoundPairing[];\n  tempScore: number[];\n}\n\nconst Analysis = (props: AnalysisProps) => {\n  const {\n    gents,\n    ladies,\n    matches,\n    noMatch,\n    roundPairings,\n    hist,\n    tempScore,\n    calculatedEquations,\n  } = props;\n\n  // state\n  const [showAll, setShowAll] = React.useState(false);\n\n  // handlers\n  const handleSwitch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setShowAll(event.target.checked);\n  };\n\n  return (\n    <div>\n      <Stack direction=\"row\" justifyContent=\"space-between\">\n        <h1>Analysis</h1>\n        <FormControlLabel\n          control={\n            <Switch checked={showAll} onChange={handleSwitch} name=\"show-all\" />\n          }\n          label=\"Show All Couples\"\n        />\n      </Stack>\n      <Stack spacing={1} direction=\"row\" flexWrap=\"wrap\">\n        {roundPairings.map(({ pairs, score }, ri) => {\n          const equation: React.ReactNode[] = [];\n          let numNoMatches = 0;\n          let numMatchAndRepeat = 0;\n          pairs.forEach((gi, li) => {\n            // if cleared pairing\n            if (li < 0 || gi < 0 || li === undefined || gi === undefined) {\n              return;\n            }\n\n            const isRepeat = hist[li][gi].rounds.length > 1;\n            let color: ChipColorOptions = isRepeat ? \"primary\" : \"default\";\n\n            if (!showAll) {\n              // hide matches and noMatches\n              if (noMatch[li][gi] || matches[li] === gi) {\n                return;\n              }\n            } else {\n              // no match chip\n              if (noMatch[li][gi]) {\n                color = \"error\";\n              }\n              // match chip\n              if (matches[li] === gi) {\n                color = \"success\";\n              }\n            }\n\n            const label = `${ladies[li]}-${gents[gi]}${\n              isRepeat ? ` ${hist[li][gi].rounds.length}` : \"\"\n            } - ${hist[li][gi].odds}%`;\n\n            const chip = (\n              <Chip\n                key={`eq-r${ri}-l${li}-g${gi}`}\n                label={label}\n                color={color}\n              />\n            );\n\n            // create equation chips: matches > repeats > first time > no match\n            switch (color) {\n              case \"success\":\n                numMatchAndRepeat += 1;\n                equation.unshift(chip);\n                return;\n              case \"error\":\n                numNoMatches += 1;\n                equation.push(chip);\n                return;\n              case \"primary\":\n                equation.splice(numMatchAndRepeat, 0, chip);\n                numMatchAndRepeat += 1;\n                return;\n              default:\n                equation.splice(equation.length - numNoMatches, 0, chip);\n            }\n          });\n\n          // return each equation stack\n          return !equation.every((e) => e === null) ? (\n            <Stack key={`equation-${ri}`} spacing={1}>\n              <h2 style={{ textAlign: \"center\" }}>Matchup {ri + 1}</h2>\n              {equation}\n              <Chip\n                label={showAll ? score : score - tempScore[ri]}\n                color=\"warning\"\n              />\n            </Stack>\n          ) : null;\n        })}\n      </Stack>\n      {calculatedEquations.length > 0 && <hr />}\n      <Stack spacing={1} direction=\"row\" flexWrap=\"wrap\">\n        {calculatedEquations.map(({ pairs, score }, cei) => (\n          <Stack key={`equation-${cei}`} spacing={1}>\n            <h2 style={{ textAlign: \"center\" }}>Calculated {cei + 1}</h2>\n            {pairs.map((gi, li) => (\n              <Chip\n                key={`eq-calc-l${li}-g${gi}`}\n                label={`${ladies[li]}-${gents[gi]} ${hist[li][gi].rounds.length} - ${hist[li][gi].odds}%`}\n                color=\"primary\"\n              />\n            ))}\n            <Chip label={`max ${score}`} color=\"warning\" />\n          </Stack>\n        ))}\n      </Stack>\n    </div>\n  );\n};\n\nexport default Analysis;\n","import { RoundPairing } from \"../../../../recoil/are-you-the-one-atom\";\n\nexport interface AYTOHist {\n  odds: number;\n  oddsWeight: number;\n  rounds: number[];\n}\n\nexport interface AYTODictObj {\n  couples: [number, number][];\n  score: number;\n}\n\nexport interface AYTODict {\n  [key: string]: AYTODictObj;\n}\n\n/** [lady-i: (gent-i | -1), -1, -1, ...] */\n/** [lady-i: [gent-i: bool]] */\n/** [round-i: RoundPairing] */\nconst useHist = (\n  len: number,\n  matches: number[],\n  noMatch: boolean[][],\n  roundPairings: RoundPairing[]\n) => {\n  // state\n  const hist: AYTOHist[][] = [];\n  const tempScore: number[] = [];\n  const totals: number[] = [];\n\n  // create histogram\n  roundPairings.forEach(({ pairs }, ri) => {\n    tempScore[ri] = 0;\n    totals[ri] = len;\n\n    pairs.forEach((gi, li) => {\n      // noMatch increases odds of the rest\n      if (li < 0 || gi < 0 || noMatch[li][gi]) {\n        totals[ri] -= 1;\n      }\n      // remove matches\n      if (matches[li] === gi) {\n        tempScore[ri] += 1;\n        totals[ri] -= 1;\n      }\n      // verify data obj\n      !hist[li] && (hist[li] = []);\n      !hist[li][gi] && (hist[li][gi] = { odds: 0, oddsWeight: 0, rounds: [] });\n      // histogram\n      hist[li][gi].rounds.push(ri);\n    });\n  });\n\n  // temp state\n  const dict: AYTODict = {};\n\n  // with histogram made, time to get some stats\n  roundPairings.forEach(({ pairs, score }, ri) => {\n    pairs.forEach((gi, li) => {\n      // ----------     odds     ---------- //\n      const histObj = hist[li][gi];\n      // 0% odds for no match\n      if (noMatch[li][gi]) {\n        return;\n      }\n      // 100% odds for match or max score\n      if (matches[li] === gi || score === len) {\n        histObj.odds = 100;\n        return;\n      }\n      // calculate odds for the round\n      const odds = totals[ri]\n        ? ((score - tempScore[ri]) * 100) / totals[ri]\n        : 0;\n      // assign first odds\n      if (histObj.oddsWeight === 0) {\n        histObj.odds = Math.floor(odds);\n      } else if (!odds || !histObj.odds) {\n        // if odds for either are 0\n        histObj.odds = 0;\n      } else {\n        // rolling average\n        histObj.odds = Math.floor(\n          (histObj.odds * histObj.oddsWeight + odds) / (histObj.oddsWeight + 1)\n        );\n      }\n      // update odds weight\n      histObj.oddsWeight += 1;\n\n      // ----------     equations     ---------- //\n      // only care about repeats\n      if (histObj.rounds.length < 2) {\n        return;\n      }\n      // create key from round combination (length)\n      const keys = [\n        histObj.rounds.reduce((acc, val) => acc + val.toString(), \"\"),\n      ];\n      // add every pair of 2 rounds as keys\n      for (let i = ri + 1; i < histObj.rounds.length; i += 1) {\n        keys.push(`${histObj.rounds[ri]}${histObj.rounds[i]}`);\n      }\n      // NOTE: length (l) and 2 are covered, anything in-between is not directly considered (still covered in 2s)\n      keys.forEach((key) => {\n        // put that in the dictionary\n        !dict[key] && (dict[key] = { couples: [], score });\n        // calculate equations\n        let canAdd = true;\n        dict[key].couples.forEach(([tli, tgi]) => {\n          canAdd = canAdd && tli !== li && tgi !== gi;\n        });\n        canAdd && dict[key].couples.push([li, gi]);\n        dict[key].score = Math.min(score - tempScore[ri], dict[key].score);\n      });\n    });\n  });\n\n  // more state\n  const calculatedEquations: RoundPairing[] = [];\n\n  // convert qualifying couples to more equations\n  Object.keys(dict).forEach((key) => {\n    if (\n      // only care about repeat couples\n      dict[key].couples.length > 1 &&\n      // where there are more couples than score available\n      dict[key].couples.length > dict[key].score\n    ) {\n      const tempPairs: number[] = [];\n      // convert to RP\n      dict[key].couples.forEach(([li, gi]) => {\n        tempPairs[li] = gi;\n      });\n      // validate new equation doesn't already exist\n      let isRepeat = false;\n      calculatedEquations.forEach(({ pairs, score }, ci) => {\n        let hasExactRepeat = true;\n        let hasRoughRepeat = true;\n        for (let i = 0; i < pairs.length; i += 1) {\n          if (tempPairs[i] !== pairs[i]) {\n            if (tempPairs[i]) {\n              hasExactRepeat = false;\n              hasRoughRepeat = false;\n            } else {\n              // new equation has fewer couples, may still be a match but is missing some keys\n              hasExactRepeat = false;\n            }\n          }\n        }\n        isRepeat =\n          // compare against itself\n          isRepeat ||\n          // exclude if exact repeat\n          hasExactRepeat ||\n          // exclude if rough repeat with higher or equal score\n          (hasRoughRepeat && dict[key].score >= score);\n        // if exact repeat, pick the lower of the 2 scores\n        if (hasExactRepeat) {\n          calculatedEquations[ci].score = Math.min(score, dict[key].score);\n        }\n      });\n      // Add RP to equations\n      !isRepeat &&\n        calculatedEquations.push({\n          pairs: tempPairs,\n          score: dict[key].score,\n        });\n    }\n  });\n\n  return {\n    hist,\n    tempScore,\n    calculatedEquations,\n  };\n};\n\nexport default useHist;\n","import * as React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport Controls from \"./Controls\";\nimport Table from \"./table/Table\";\nimport Analysis from \"./analysis/Analysis\";\nimport aYTOAtom, {\n  aytoPlayerSelector,\n} from \"../../../recoil/are-you-the-one-atom\";\nimport useHist from \"./analysis/useHist\";\n\n/** TODO: replace Dropdown with MUI Dropdown when available */\nconst AreYouTheOne = () => {\n  const [{ matches, noMatch, roundPairings }, setState] =\n    useRecoilState(aYTOAtom);\n  const { ladies, gents, options } = useRecoilValue(aytoPlayerSelector);\n\n  // state\n  const [roundNumber, setRoundNumber] = React.useState(0);\n  const { hist, tempScore, calculatedEquations } = useHist(\n    ladies.length,\n    matches,\n    noMatch,\n    roundPairings\n  );\n\n  // handlers\n  const handleSelect = (selected: number) => {\n    setRoundNumber(selected);\n  };\n\n  const handleUpdateScore = (score: number) => {\n    const newRoundPairing = !roundPairings[roundNumber]\n      ? { pairs: [], score: 0 }\n      : { ...roundPairings[roundNumber] };\n    newRoundPairing.score = score;\n    const newRoundPairings = [...roundPairings];\n    newRoundPairings[roundNumber] = newRoundPairing;\n    setState({ matches, noMatch, roundPairings: newRoundPairings });\n  };\n\n  const handleUpdateNoMatch = (li: number, gi: number) => {\n    const newMatches = noMatch.map((gentArray: boolean[]) => [...gentArray]);\n    // if array for lady doesn't exist yet, create skeleton one\n    !newMatches[li] && (newMatches[li] = []);\n    // assign no match\n    newMatches[li][gi] = !newMatches[li][gi];\n    // update state\n    setState({ matches, noMatch: newMatches, roundPairings });\n  };\n\n  const handleBlackout = (pairs: number[]) => {\n    // create immutable copy for storage\n    const newNoMatches = noMatch.map((gentArray: boolean[]) => [...gentArray]);\n    // no match for all pairs\n    pairs.forEach((gi, li) => {\n      if (matches[li] !== gi && !noMatch[li][gi]) {\n        // if array for lady doesn't exist yet, create skeleton one\n        !newNoMatches[li] && (newNoMatches[li] = []);\n        // assign no match\n        newNoMatches[li][gi] = true;\n      }\n    });\n    const newRoundPairing = { ...roundPairings[roundNumber], score: 0 };\n    const newRoundPairings = [...roundPairings];\n    newRoundPairings[roundNumber] = newRoundPairing;\n    // update state\n    setState({\n      matches,\n      noMatch: newNoMatches,\n      roundPairings: newRoundPairings,\n    });\n  };\n\n  const handleUpdatePairs = (ri: number, li: number, gi: number) => {\n    const newRoundPairing = !roundPairings[ri]\n      ? { pairs: [], score: 0 }\n      : { ...roundPairings[ri], pairs: [...roundPairings[ri].pairs] };\n    newRoundPairing.pairs[li] = gi;\n    const newRoundPairings = [...roundPairings];\n    newRoundPairings[roundNumber] = newRoundPairing;\n    setState({ matches, noMatch, roundPairings: newRoundPairings });\n  };\n\n  const handleUpdateMatch = (li: number, gi: number) => {\n    const newMatches = [...matches];\n    const newNoMatches = noMatch.map((gentArray: boolean[]) => [...gentArray]);\n    // if array for lady doesn't exist yet, create skeleton one\n    !newNoMatches[li] && (newNoMatches[li] = []);\n    // assign new match\n    newMatches[li] = gi;\n    // make all gent options no matches\n    for (let i = 0; i < gents.length; i += 1) {\n      newNoMatches[li][i] = i !== gi;\n    }\n    // make all ladies options no matches\n    for (let i = 0; i < ladies.length; i += 1) {\n      !newNoMatches[i] && (newNoMatches[i] = []);\n      newNoMatches[i][gi] = i !== li;\n    }\n\n    const numMatches = newMatches.reduce(\n      (acc, matchStatus) => (matchStatus >= 0 ? acc + 1 : acc),\n      0\n    );\n\n    // update round pairings\n    const newRoundPairings = [...roundPairings];\n    for (let ri = 0; ri < options.length - 2; ri += 1) {\n      const { pairs, score } = roundPairings[ri] || {\n        pairs: [],\n        score: numMatches,\n      };\n      if (!roundPairings[ri] || pairs[li] < 0 || pairs[li] === undefined) {\n        const newRoundPairing = {\n          pairs: [...pairs],\n          score: Math.max(score, numMatches),\n        };\n        newRoundPairing.pairs[li] = gi;\n        newRoundPairings[ri] = newRoundPairing;\n      }\n    }\n\n    // update state\n    setState({\n      matches: newMatches,\n      noMatch: newNoMatches,\n      roundPairings: newRoundPairings,\n    });\n  };\n\n  return (\n    <>\n      <h1>Are You The One?</h1>\n      <Controls\n        onSelect={handleSelect}\n        options={options}\n        roundNumber={roundNumber}\n        roundPairings={roundPairings}\n        onBlackout={handleBlackout}\n        updateScore={handleUpdateScore}\n      />\n      <br />\n      <Table\n        gents={gents}\n        hist={hist}\n        ladies={ladies}\n        matches={matches}\n        noMatch={noMatch}\n        options={options}\n        roundNumber={roundNumber}\n        roundPairings={roundPairings}\n        updateMatch={handleUpdateMatch}\n        updateNoMatch={handleUpdateNoMatch}\n        updatePairs={handleUpdatePairs}\n      />\n      <Analysis\n        calculatedEquations={calculatedEquations}\n        gents={gents}\n        hist={hist}\n        ladies={ladies}\n        matches={matches}\n        noMatch={noMatch}\n        roundPairings={roundPairings}\n        tempScore={tempScore}\n      />\n    </>\n  );\n};\n\nexport default AreYouTheOne;\n"],"names":["aytoSeasons","seasons","options","DEFAULT_SEASON","newAYTOState","season","areYouTheOneAtom","atom","onSet","state","aytoSeasonAtom","aytoSeasonSelector","selector","get","set","DefaultValue","aytoPlayerSelector","getScore","value","Controls","props","onSelect","roundNumber","roundPairings","onBlackout","updateScore","setSeason","useRecoilState","score","setScore","React.useState","_a","handleSeasonSelect","newSeason","handleMatchupSelect","index","handleBlackout","incrScore","decrScore","jsxs","jsx","Dropdown","Fragment","Button","ButtonGroup","TBDialog","open","content","onMatch","onNoMatch","onCancel","Dialog","DialogTitle","DialogContent","DialogActions","AYTOTableBody","gents","hist","ladies","matches","noMatch","ri","updateMatch","updateNoMatch","updatePairs","isTB","isConsolidated","setOpen","tbi","setTBI","handleClick","roundi","ladyi","genti","tempLi","handleCancel","handleMatch","li","gi","handleNoMatch","TableBody","lName","TableRow","TableCell","gName","variant","color","histValue","_c","_b","AYTOTable","other","TableContainer","Paper","Table","TableHead","name","Analysis","tempScore","calculatedEquations","showAll","setShowAll","handleSwitch","event","Stack","FormControlLabel","Switch","pairs","equation","numNoMatches","numMatchAndRepeat","isRepeat","label","chip","Chip","e","cei","useHist","len","totals","dict","histObj","odds","keys","acc","val","key","canAdd","tli","tgi","tempPairs","ci","hasExactRepeat","hasRoughRepeat","AreYouTheOne","setState","aYTOAtom","useRecoilValue","setRoundNumber","handleSelect","selected","handleUpdateScore","newRoundPairing","newRoundPairings","handleUpdateNoMatch","newMatches","gentArray","newNoMatches","handleUpdatePairs","handleUpdateMatch","i","numMatches","matchStatus","AreYouTheOne$1"],"mappings":"qlBACO,MAAMA,EAAc,CACzB,CACE,OAAQ,CACN,QACA,WACA,WACA,WACA,OACA,UACA,QACA,QACA,UACA,QACF,EACA,MAAO,CACL,OACA,MACA,UACA,UACA,SACA,QACA,OACA,KACA,OACA,KACF,CACF,EACA,CACE,OAAQ,CACN,aACA,SACA,SACA,YACA,QACA,UACA,QACA,UACA,QACA,SACA,OACF,EACA,MAAO,CACL,OACA,UACA,UACA,SACA,QACA,UACA,OACA,SACA,SACA,OACF,CACF,EACA,CACE,OAAQ,CACN,SACA,SACA,UACA,SACA,QACA,OACA,WACA,UACA,UACA,QACF,EACA,MAAO,CACL,OACA,SACA,QACA,SACA,QACA,SACA,OACA,SACA,QACA,KACF,CACF,EACA,CACE,OAAQ,CACN,SACA,UACA,OACA,YACA,QACA,SACA,SACA,SACA,OACA,UACF,EACA,MAAO,CACL,OACA,MACA,UACA,WACA,OACA,SACA,UACA,MACA,UACA,OACF,CACF,EACA,CACE,OAAQ,CACN,SACA,WACA,MACA,SACA,SACA,MACA,OACA,UACA,UACA,SACA,SACF,EACA,MAAO,CACL,QACA,UACA,SACA,SACA,SACA,OACA,UACA,OACA,UACA,OACA,OACF,CACF,EACA,CACE,OAAQ,CACN,SACA,SACA,SACA,UACA,QACA,OACA,SACA,SACA,QACA,OACA,KACF,EACA,MAAO,CACL,UACA,UACA,QACA,UACA,QACA,MACA,SACA,QACA,UACA,UACA,OACF,CACF,EACA,CACE,OAAQ,CACN,OACA,OACA,OACA,UACA,QACA,QACA,SACA,QACA,SACA,QACA,UACF,EACA,MAAO,CACL,SACA,QACA,MACA,SACA,QACA,QACA,MACA,SACA,QACA,QACA,KACF,CACF,EACA,CACE,OAAQ,CACN,SACA,SACA,KACA,WACA,WACA,MACA,WACA,aACA,UACA,MACA,QACF,EACA,MAAO,CACL,OACA,UACA,OACA,UACA,SACA,MACA,UACA,SACA,QACA,SACA,MACF,CACF,CACF,EAEaC,GAAU,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"}