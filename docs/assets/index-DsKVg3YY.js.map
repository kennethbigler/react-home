{"version":3,"file":"index-DsKVg3YY.js","sources":["../../node_modules/@mui/material/DialogContentText/dialogContentTextClasses.js","../../node_modules/@mui/material/DialogContentText/DialogContentText.js","../../src/recoil/stock-atom.ts","../../src/recoil/comp-calculator-state.ts","../../src/apis/usdFormatter.tsx","../../src/components/resume/comp-calc/CompEntryDisplay.tsx","../../src/components/resume/comp-calc/CompEntryDialog.tsx","../../src/components/resume/comp-calc/StockDialog.tsx","../../src/components/resume/comp-calc/StockDisplay.tsx","../../src/components/resume/comp-calc/graphs/CompGraph.tsx","../../src/components/resume/comp-calc/graphs/BreakdownGraph.tsx","../../src/components/resume/comp-calc/graphs/Graphs.tsx","../../src/components/resume/comp-calc/CompCalculator.tsx"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getDialogContentTextUtilityClass(slot) {\n  return generateUtilityClass('MuiDialogContentText', slot);\n}\nconst dialogContentTextClasses = generateUtilityClasses('MuiDialogContentText', ['root']);\nexport default dialogContentTextClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport Typography from \"../Typography/index.js\";\nimport { getDialogContentTextUtilityClass } from \"./dialogContentTextClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  const composedClasses = composeClasses(slots, getDialogContentTextUtilityClass, classes);\n  return {\n    ...classes,\n    // forward classes to the Typography\n    ...composedClasses\n  };\n};\nconst DialogContentTextRoot = styled(Typography, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiDialogContentText',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\nconst DialogContentText = /*#__PURE__*/React.forwardRef(function DialogContentText(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiDialogContentText'\n  });\n  const {\n    children,\n    className,\n    ...ownerState\n  } = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(DialogContentTextRoot, {\n    component: \"p\",\n    variant: \"body1\",\n    color: \"textSecondary\",\n    ref: ref,\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    ...props,\n    classes: classes\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContentText.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogContentText;","import { atom } from \"recoil\";\n\nexport interface StockState {\n  [key: string]: number;\n}\n\nconst initialState: StockState = {};\n\nconst stockAtom = atom({\n  key: \"stockAtom\",\n  default:\n    (JSON.parse(localStorage.getItem(\"stock-atom\") || \"null\") as StockState) ||\n    initialState,\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"stock-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\nexport default stockAtom;\n","import { atom, selector } from \"recoil\";\nimport stockAtom from \"./stock-atom\";\nimport dateHelper, { DateObj } from \"../apis/DateHelper\";\n\nexport interface CompEntry {\n  entryDate: string;\n  salary: number;\n  bonus: number;\n  stockTick: string;\n  priceThen: number;\n  grantDuration: number; // YEARS\n  grantQty: number; // STOCKS\n}\n\nexport interface CompCalcEntry {\n  stock: number;\n  stockAdj: number;\n  total: number;\n  totalAdj: number;\n  netDiff: number;\n  grantThen: number;\n  grantNow: number;\n}\n\ninterface PrevStock {\n  grantQty: number;\n  grantDuration: number;\n  exp: DateObj;\n}\n\nexport const compCalcAtom = atom({\n  key: \"compCalcAtom\",\n  default:\n    (JSON.parse(\n      localStorage.getItem(\"comp-calc-atom\") || \"null\",\n    ) as CompEntry[]) || [],\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"comp-calc-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\n/* --------------------     Comp Calc State     -------------------- */\nexport const compCalcReadOnlyState = selector({\n  key: \"compCalcReadOnlyState\",\n  get: ({ get }) => {\n    // access state\n    const compEntries = get(compCalcAtom);\n    const stockEntries = get(stockAtom);\n\n    const prevStockAcc: { [key: string]: PrevStock[] } = {};\n\n    const compCalcEntriesNoNet: Omit<CompCalcEntry, \"netDiff\">[] =\n      compEntries.map(\n        ({\n          bonus,\n          entryDate,\n          grantDuration,\n          grantQty,\n          priceThen,\n          salary,\n          stockTick,\n        }) => {\n          const priceNow = stockEntries[stockTick] || 0;\n          let stock = 0;\n          let stockAdj = 0;\n\n          const exp = dateHelper(entryDate);\n          exp.year += grantDuration;\n\n          if (!prevStockAcc[stockTick]) {\n            prevStockAcc[stockTick] = [];\n          }\n          if (grantQty > 0) {\n            prevStockAcc[stockTick].push({ grantQty, grantDuration, exp });\n          }\n          prevStockAcc[stockTick].forEach((s) => {\n            if (dateHelper(entryDate).diff(s.exp, \"days\") < 0) {\n              stock += (priceThen * s.grantQty) / s.grantDuration;\n              stockAdj += (priceNow * s.grantQty) / s.grantDuration;\n            }\n          });\n\n          const total = salary + bonus + stock;\n          const totalAdj = salary + bonus + stockAdj;\n          const grantThen = priceThen * grantQty;\n          const grantNow = priceNow * grantQty;\n\n          return {\n            stock,\n            stockAdj,\n            total,\n            totalAdj,\n            grantThen,\n            grantNow,\n          };\n        },\n      );\n\n    const compCalcEntries: CompCalcEntry[] = compCalcEntriesNoNet.map(\n      ({ totalAdj, ...rest }, i) => {\n        const netDiff =\n          i === 0 ? 0 : totalAdj - compCalcEntriesNoNet[i - 1].totalAdj;\n\n        return { totalAdj, netDiff, ...rest };\n      },\n    );\n\n    return compCalcEntries;\n  },\n});\n\nexport default compCalcAtom;\n","/** use the usDollar.format() function to format a number into a USD string */\nconst usDollar = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n});\n\nexport default usDollar;\n","import Card from \"@mui/material/Card\";\nimport CardActionArea from \"@mui/material/CardActionArea\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport Divider from \"@mui/material/Divider\";\nimport Grid from \"@mui/material/Grid2\";\nimport Typography from \"@mui/material/Typography\";\nimport {\n  CompCalcEntry,\n  CompEntry,\n} from \"../../../recoil/comp-calculator-state\";\nimport dateObj from \"../../../apis/DateHelper\";\nimport usDollar from \"../../../apis/usdFormatter\";\n\ninterface CompEntryDisplayProps {\n  compEntries: CompEntry[];\n  compCalcEntries: CompCalcEntry[];\n  onClick: (i: number) => () => void;\n}\n\nconst CompEntryDisplay = ({\n  compEntries,\n  compCalcEntries,\n  onClick,\n}: CompEntryDisplayProps) => (\n  <Grid container spacing={1}>\n    <Grid size={12}>\n      <Typography>*value computed from latest stock price above</Typography>\n    </Grid>\n    {compEntries\n      .map((compEntry, i) => {\n        const {\n          entryDate,\n          salary,\n          bonus,\n          stockTick,\n          priceThen,\n          grantDuration,\n          grantQty,\n        } = compEntry;\n        const {\n          stock,\n          stockAdj,\n          total,\n          totalAdj,\n          netDiff,\n          grantThen,\n          grantNow,\n        } = compCalcEntries[i];\n        return (\n          <Grid\n            size={{\n              xs: 12,\n              md: 6,\n              lg: 4,\n              xl: 3,\n              // @ts-expect-error - custom breakpoints\n              xxl: compEntries.length > 4 ? 2 : undefined,\n              xxxl: compEntries.length > 6 ? 1 : undefined,\n            }}\n            key={`comp-calc-entry-${i}`}\n          >\n            <Card>\n              <CardActionArea onClick={onClick(i)}>\n                <Grid container>\n                  <Grid size={stockTick ? 6 : 12}>\n                    <CardHeader title=\"Salary\" />\n                    <CardContent>\n                      <Typography>\n                        Date: {dateObj(entryDate).format(\"MMMM Y\")}\n                      </Typography>\n                      <Typography>Salary: {usDollar.format(salary)}</Typography>\n                      <Typography>Bonus: {usDollar.format(bonus)}</Typography>\n                      <Divider aria-hidden />\n                      <Typography>Stock: {usDollar.format(stock)}</Typography>\n                      <Typography>\n                        *Stock: {usDollar.format(stockAdj)}\n                      </Typography>\n                      <Divider aria-hidden />\n                      <Typography>Total: {usDollar.format(total)}</Typography>\n                      <Typography sx={{ display: \"inline\" }}>\n                        *Total:\n                      </Typography>\n                      <Typography\n                        color=\"warning\"\n                        fontWeight=\"fontWeightBold\"\n                        sx={{ display: \"inline\", marginLeft: 1 }}\n                      >\n                        {usDollar.format(totalAdj)}\n                      </Typography>\n                      {netDiff !== 0 && (\n                        <>\n                          <Divider aria-hidden />\n                          <Typography sx={{ display: \"inline\" }}>\n                            Net:\n                          </Typography>\n                          <Typography\n                            color={netDiff > 0 ? \"success\" : \"error\"}\n                            fontWeight=\"fontWeightBold\"\n                            sx={{ display: \"inline\", marginLeft: 1 }}\n                          >\n                            {usDollar.format(netDiff)}\n                          </Typography>\n                        </>\n                      )}\n                    </CardContent>\n                  </Grid>\n                  {stockTick && (\n                    <Grid size={6}>\n                      <CardHeader title=\"Stock Grant\" />\n                      <CardContent>\n                        <Typography sx={{ display: \"inline\" }}>\n                          Ticker:\n                        </Typography>\n                        <Typography\n                          color=\"primary\"\n                          fontWeight=\"fontWeightBold\"\n                          sx={{ display: \"inline\", marginLeft: 1 }}\n                        >\n                          {stockTick}\n                        </Typography>\n                        {grantQty > 0 && (\n                          <>\n                            <Typography>\n                              Price: {usDollar.format(priceThen)}\n                            </Typography>\n                            <Typography>Grant Qty: {grantQty}</Typography>\n                            <Typography>\n                              Duration: {grantDuration} years\n                            </Typography>\n                            <Divider aria-hidden />\n                            <Typography>\n                              Grant: {usDollar.format(grantThen)}\n                            </Typography>\n                            <Typography>\n                              *Grant: {usDollar.format(grantNow)}\n                            </Typography>\n                          </>\n                        )}\n                      </CardContent>\n                    </Grid>\n                  )}\n                </Grid>\n              </CardActionArea>\n            </Card>\n          </Grid>\n        );\n      })\n      .reverse()}\n  </Grid>\n);\n\nexport default CompEntryDisplay;\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport Select from \"@mui/material/Select\";\nimport TextField from \"@mui/material/TextField\";\nimport { TextFieldProps, SelectChangeEvent } from \"@mui/material\";\nimport dateHelper, { months } from \"../../../apis/DateHelper\";\nimport { CompEntry } from \"../../../recoil/comp-calculator-state\";\n\nconst tfProps: TextFieldProps = {\n  variant: \"standard\",\n  fullWidth: true,\n  margin: \"dense\",\n};\n\nconst currentYear = new Date().getFullYear() - 2000;\nconst years: number[] = [];\nfor (let i = 0; i <= currentYear; i += 1) {\n  years.push(2000 + i);\n}\nyears.reverse();\n\ninterface CompEntryDialogProps {\n  open: boolean;\n  compEntry?: CompEntry;\n  onClose: () => void;\n  addCompEntry: (n: CompEntry) => void;\n}\n\nconst CompEntryDialog = ({\n  open,\n  compEntry,\n  onClose,\n  addCompEntry,\n}: CompEntryDialogProps) => {\n  const [entryDateMonth, setEntryDateMonth] = React.useState(\"1\");\n  const [entryDateYear, setEntryDateYear] = React.useState(years[0].toString());\n  const [salary, setSalary] = React.useState(0);\n  const [bonus, setBonus] = React.useState(0);\n  const [stockTick, setStockTick] = React.useState(\"\");\n  const [priceThen, setPriceThen] = React.useState(0);\n  const [grantDuration, setGrantDuration] = React.useState(4);\n  const [grantQty, setGrantQty] = React.useState(0);\n\n  const resetState = () => {\n    setEntryDateMonth(\"1\");\n    setEntryDateYear(years[0].toString());\n    setSalary(0);\n    setBonus(0);\n    setStockTick(\"\");\n    setPriceThen(0);\n    setGrantDuration(4);\n    setGrantQty(0);\n  };\n\n  React.useEffect(() => {\n    if (compEntry) {\n      const { month, year } = dateHelper(compEntry.entryDate);\n      setEntryDateMonth((month + 1).toString());\n      setEntryDateYear(year.toString());\n      setSalary(compEntry.salary);\n      setBonus(compEntry.bonus);\n      setStockTick(compEntry.stockTick);\n      setPriceThen(compEntry.priceThen);\n      setGrantDuration(compEntry.grantDuration);\n      setGrantQty(compEntry.grantQty);\n    } else {\n      resetState();\n    }\n  }, [compEntry, compEntry?.salary]);\n\n  const handleChange =\n    (func: (n: number) => void) => (e: React.ChangeEvent<HTMLInputElement>) =>\n      func(parseFloat(e.target.value));\n  const handleStockTick = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setStockTick(e.target.value);\n  const handleSelectMonth = (e: SelectChangeEvent<string>) =>\n    setEntryDateMonth(e.target.value);\n  const handleSelectYear = (e: SelectChangeEvent<string>) =>\n    setEntryDateYear(e.target.value);\n\n  const handleSubmit = () => {\n    addCompEntry({\n      entryDate: `${entryDateYear}-${entryDateMonth.length < 2 ? \"0\" : \"\"}${entryDateMonth}`,\n      salary,\n      bonus,\n      stockTick,\n      priceThen,\n      grantDuration,\n      grantQty,\n    });\n    resetState();\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <DialogTitle>{compEntry ? \"Edit\" : \"New\"} Comp Entry</DialogTitle>\n      <DialogContent>\n        <div style={{ display: \"flex\", marginTop: 5 }}>\n          <FormControl fullWidth>\n            <InputLabel id=\"month-select\">Month</InputLabel>\n            <Select\n              labelId=\"month-select\"\n              label=\"Month\"\n              value={entryDateMonth}\n              onChange={handleSelectMonth}\n            >\n              {months.map((month, i) => (\n                <MenuItem value={i + 1} key={i}>\n                  {month}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <FormControl fullWidth>\n            <InputLabel id=\"year-select\">Year</InputLabel>\n            <Select\n              labelId=\"year-select\"\n              label=\"Year\"\n              value={entryDateYear}\n              onChange={handleSelectYear}\n            >\n              {years.map((year) => (\n                <MenuItem value={year} key={year}>\n                  {year}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <TextField\n          label=\"Salary\"\n          value={salary}\n          type=\"number\"\n          onChange={handleChange(setSalary)}\n          slotProps={{ input: { startAdornment: \"$\" } }}\n          {...tfProps}\n        />\n        <TextField\n          label=\"Bonus\"\n          value={bonus}\n          type=\"number\"\n          onChange={handleChange(setBonus)}\n          slotProps={{ input: { startAdornment: \"$\" } }}\n          {...tfProps}\n        />\n        <DialogContentText variant=\"h6\" component=\"h4\" sx={{ marginTop: 7 }}>\n          Stock\n        </DialogContentText>\n        <TextField\n          label=\"Stock Ticker\"\n          value={stockTick}\n          onChange={handleStockTick}\n          {...tfProps}\n        />\n        <TextField\n          label=\"Grant Quantity\"\n          value={grantQty}\n          type=\"number\"\n          onChange={handleChange(setGrantQty)}\n          {...tfProps}\n        />\n        <TextField\n          label=\"Grant Duration\"\n          value={grantDuration}\n          type=\"number\"\n          onChange={handleChange(setGrantDuration)}\n          {...tfProps}\n        />\n        <TextField\n          label=\"Stock Price Then\"\n          value={priceThen}\n          type=\"number\"\n          onChange={handleChange(setPriceThen)}\n          slotProps={{ input: { startAdornment: \"$\" } }}\n          {...tfProps}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button type=\"submit\" onClick={handleSubmit}>\n          {compEntry ? \"Update\" : \"Add\"}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default CompEntryDialog;\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport TextField from \"@mui/material/TextField\";\nimport { TextFieldProps } from \"@mui/material\";\n\nconst tfProps: TextFieldProps = {\n  variant: \"standard\",\n  fullWidth: true,\n  margin: \"dense\",\n};\n\ninterface StockDialogProps {\n  open: boolean;\n  price?: number;\n  stock?: string;\n  onClose: () => void;\n  addStockEntry: (s: string, n: number) => void;\n  removeStockEntry: (s: string) => () => void;\n}\n\nconst StockDialog = React.memo(\n  ({\n    open,\n    price: exPrice,\n    stock: exStock,\n    onClose,\n    addStockEntry,\n    removeStockEntry,\n  }: StockDialogProps) => {\n    const [price, setPrice] = React.useState(0);\n    const [stock, setStock] = React.useState(\"\");\n\n    const resetState = () => {\n      setPrice(0);\n      setStock(\"\");\n    };\n\n    React.useEffect(() => {\n      if (exStock && exPrice !== undefined) {\n        setPrice(exPrice);\n        setStock(exStock);\n      } else {\n        resetState();\n      }\n    }, [exPrice, exStock]);\n\n    const handleStockChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n      setStock(e.target.value);\n\n    const handlePriceChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n      setPrice(parseFloat(e.target.value));\n\n    const handleSubmit = () => {\n      addStockEntry(stock, price);\n      resetState();\n    };\n\n    return (\n      <Dialog open={open} onClose={onClose}>\n        <DialogTitle>{exStock ? \"Edit\" : \"New\"} Stock Entry</DialogTitle>\n        <DialogContent>\n          <div style={{ marginTop: 5 }}>\n            <TextField\n              label=\"Stock\"\n              value={stock}\n              onChange={handleStockChange}\n              {...tfProps}\n            />\n            <TextField\n              label=\"Price Now\"\n              value={price}\n              type=\"number\"\n              onChange={handlePriceChange}\n              slotProps={{ input: { startAdornment: \"$\" } }}\n              {...tfProps}\n            />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={removeStockEntry(stock)} color=\"error\">\n            Delete\n          </Button>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button type=\"submit\" onClick={handleSubmit}>\n            {exStock ? \"Update\" : \"Add\"}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  },\n);\n\nStockDialog.displayName = \"StockDialog\";\n\nexport default StockDialog;\n","import Chip from \"@mui/material/Chip\";\nimport usDollar from \"../../../apis/usdFormatter\";\nimport { StockState } from \"../../../recoil/stock-atom\";\n\ninterface StockEntryProps {\n  stockEntries: StockState;\n  openStockModal: (s: string) => () => void;\n}\n\nconst StockDisplay = ({ stockEntries, openStockModal }: StockEntryProps) => (\n  <div>\n    {Object.keys(stockEntries).map((stockKey, i) => (\n      <Chip\n        key={`stock-entry-${i}`}\n        color=\"primary\"\n        label={`${stockKey}: ${usDollar.format(stockEntries[stockKey])}`}\n        onClick={openStockModal(stockKey)}\n        sx={{ margin: 0.5, fontWeight: \"bold\" }}\n      />\n    ))}\n  </div>\n);\n\nexport default StockDisplay;\n","import * as Highcharts from \"highcharts\";\nimport highchartsAccessibility from \"highcharts/modules/accessibility\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { useRecoilValue } from \"recoil\";\nimport themeAtom from \"../../../../recoil/theme-atom\";\nimport {\n  CompCalcEntry,\n  CompEntry,\n} from \"../../../../recoil/comp-calculator-state\";\nimport dateHelper from \"../../../../apis/DateHelper\";\n\nhighchartsAccessibility(Highcharts); // initiate accessibility module\n\nconst STOCK = 0;\nconst BONUS = 1;\nconst SALARY = 2;\nconst TOTAL = 3;\nconst INFL = 4;\n\nconst inflationKey: { [key: number]: number } = {\n  2000: 1.034,\n  2001: 1.028,\n  2002: 1.016,\n  2003: 1.023,\n  2004: 1.027,\n  2005: 1.034,\n  2006: 1.032,\n  2007: 1.028,\n  2008: 1.038,\n  2009: 0.996,\n  2010: 1.016,\n  2011: 1.032,\n  2012: 1.021,\n  2013: 1.015,\n  2014: 1.016,\n  2015: 1.001,\n  2016: 1.013,\n  2017: 1.021,\n  2018: 1.024,\n  2019: 1.018,\n  2020: 1.012,\n  2021: 1.047,\n  2022: 1.08,\n  2023: 1.041,\n  2024: 1.027,\n};\n\ninterface CompChartProps {\n  startIdx: number;\n  compCalcEntries: CompCalcEntry[];\n  compEntries: CompEntry[];\n  onClick: (e: Highcharts.SeriesClickEventObject) => void;\n}\n\nconst CompChart = ({\n  startIdx,\n  compCalcEntries,\n  compEntries,\n  onClick,\n}: CompChartProps) => {\n  // process theme\n  const theme = useRecoilValue(themeAtom);\n  const color = theme.mode === \"light\" ? \"black\" : \"white\";\n\n  // calculate chart data\n  const compChartData: number[][] = [[], [], [], [], []];\n  if (compEntries.length > 0) {\n    // set start basis for inflation calculation\n    let startYear = dateHelper(compEntries[startIdx].entryDate).year;\n    let startTC =\n      compEntries[startIdx].salary +\n      compEntries[startIdx].bonus +\n      (compCalcEntries[startIdx].stockAdj || compCalcEntries[startIdx].stock);\n\n    // calculate chart data\n    compEntries.forEach(({ bonus, salary, entryDate }, i) => {\n      const { stock, stockAdj } = compCalcEntries[i];\n      compChartData[STOCK].push(stockAdj || stock);\n      compChartData[BONUS].push(bonus);\n      compChartData[SALARY].push(salary);\n      compChartData[TOTAL].push(stock + bonus + salary);\n      // calculate inflation rate from first job (or clicked job)\n      const endYear = dateHelper(entryDate).year;\n      if (endYear >= startYear) {\n        for (; startYear < endYear; startYear += 1) {\n          startTC *= inflationKey[startYear];\n        }\n        compChartData[INFL].push(startTC);\n      } else {\n        compChartData[INFL].push(0);\n      }\n    });\n  }\n\n  // set chart options\n  const options = {\n    chart: { type: \"area\", backgroundColor: null },\n    credits: { enabled: false },\n    legend: { enabled: false },\n    title: { text: \"Total Comp\", style: { color } },\n    xAxis: { visible: false },\n    yAxis: { labels: { style: { color } }, title: { enabled: false } },\n    tooltip: {\n      shared: true,\n      headerFormat: \"<h3>Compensation</h3><br />\",\n      pointFormat:\n        '<span style=\"color:{series.color}\">\\u25CF</span> {series.name}: <b>${point.y:,.2f}</b><br />',\n      footerFormat: \"\\u25CF *Total: $<b>{point.total:,.2f}</b>\",\n    },\n    plotOptions: {\n      area: {\n        stacking: \"normal\",\n        lineColor: color,\n        lineWidth: 1,\n        marker: { lineWidth: 1, lineColor: color },\n      },\n      series: { cursor: \"pointer\", events: { click: onClick } },\n    },\n    series: [\n      { type: \"area\", name: \"Stock\", data: [...compChartData[STOCK]] },\n      { type: \"area\", name: \"Bonus\", data: [...compChartData[BONUS]] },\n      { type: \"area\", name: \"Salary\", data: [...compChartData[SALARY]] },\n      { type: \"spline\", name: \"Total\", data: [...compChartData[TOTAL]] },\n      { type: \"spline\", name: \"Inflation\", data: [...compChartData[INFL]] },\n    ],\n  };\n\n  return (\n    <figure style={{ margin: 0, width: \"100%\" }}>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </figure>\n  );\n};\n\nexport default CompChart;\n","import * as React from \"react\";\nimport * as Highcharts from \"highcharts\";\nimport highchartsAccessibility from \"highcharts/modules/accessibility\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { useRecoilValue } from \"recoil\";\nimport themeAtom from \"../../../../recoil/theme-atom\";\n\nhighchartsAccessibility(Highcharts); // initiate accessibility module\n\ninterface BreakdownChartProps {\n  bonus: number;\n  salary: number;\n  stock: number;\n}\n\nconst BreakdownChart = React.memo(\n  ({ bonus, salary, stock }: BreakdownChartProps) => {\n    const theme = useRecoilValue(themeAtom);\n    const color = theme.mode === \"light\" ? \"black\" : \"white\";\n\n    const options = {\n      chart: { type: \"pie\", backgroundColor: null },\n      credits: { enabled: false },\n      legend: { enabled: false },\n      title: { text: \"Comp Breakdown\", style: { color } },\n      tooltip: { pointFormat: \"<b>${point.y:,.2f}</b>\" },\n      plotOptions: {\n        series: {\n          allowPointSelect: true,\n          cursor: \"pointer\",\n          dataLabels: [\n            { enabled: true, format: \"{point.name}\" },\n            {\n              enabled: true,\n              distance: -30,\n              format: \"{point.percentage:.0f}%\",\n              style: { fontSize: \"1em\" },\n            },\n          ],\n        },\n      },\n      series: [\n        {\n          data: [\n            { name: \"Stock\", y: stock },\n            { name: \"Bonus\", y: bonus },\n            { name: \"Salary\", y: salary },\n          ],\n        },\n      ],\n    };\n\n    return (\n      <figure style={{ margin: 0, width: \"100%\" }}>\n        <HighchartsReact highcharts={Highcharts} options={options} />\n      </figure>\n    );\n  },\n);\n\nBreakdownChart.displayName = \"BreakdownChart\";\n\nexport default BreakdownChart;\n","import * as React from \"react\";\nimport Grid from \"@mui/material/Grid2\";\nimport { SeriesClickEventObject } from \"highcharts\";\nimport CompChart from \"./CompGraph\";\nimport BreakdownChart from \"./BreakdownGraph\";\nimport {\n  CompCalcEntry,\n  CompEntry,\n} from \"../../../../recoil/comp-calculator-state\";\n\ninterface GraphsProps {\n  compCalcEntries: CompCalcEntry[];\n  compEntries: CompEntry[];\n}\n\nconst Graphs = ({ compEntries, compCalcEntries }: GraphsProps) => {\n  const { stock, stockAdj } = compCalcEntries[compCalcEntries.length - 1];\n  const { bonus, salary } = compEntries[compEntries.length - 1];\n\n  const [startIdx, setStartIdx] = React.useState(0);\n  const [cStock, setStock] = React.useState(stockAdj || stock);\n  const [cBonus, setBonus] = React.useState(bonus);\n  const [cSalary, setSalary] = React.useState(salary);\n\n  React.useEffect(() => {\n    setStartIdx(0);\n    setStock(stockAdj || stock);\n    setBonus(bonus);\n    setSalary(salary);\n  }, [stockAdj, stock, bonus, salary]);\n\n  const handleClick = (e: SeriesClickEventObject) => {\n    const { stock, stockAdj } = compCalcEntries[e.point.index];\n    const { bonus, salary } = compEntries[e.point.index];\n    setStartIdx(e.point.index);\n    setStock(stockAdj || stock);\n    setBonus(bonus);\n    setSalary(salary);\n  };\n\n  return (\n    <Grid container>\n      <Grid size={{ xs: 12, md: 6, lg: 8, xl: 9 }}>\n        <CompChart\n          startIdx={startIdx}\n          compCalcEntries={compCalcEntries}\n          compEntries={compEntries}\n          onClick={handleClick}\n        />\n      </Grid>\n      <Grid size={{ xs: 12, md: 6, lg: 4, xl: 3 }}>\n        <BreakdownChart stock={cStock} bonus={cBonus} salary={cSalary} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Graphs;\n","import * as React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport compCalcState, {\n  CompEntry,\n  compCalcReadOnlyState,\n} from \"../../../recoil/comp-calculator-state\";\nimport CompEntryDisplay from \"./CompEntryDisplay\";\nimport CompEntryDialog from \"./CompEntryDialog\";\nimport StockDialog from \"./StockDialog\";\nimport stockAtom from \"../../../recoil/stock-atom\";\nimport StockDisplay from \"./StockDisplay\";\nimport Graphs from \"./graphs/Graphs\";\n\nconst CompCalculator = () => {\n  const [compEntries, setCompEntries] = useRecoilState(compCalcState);\n  const compCalcEntries = useRecoilValue(compCalcReadOnlyState);\n  const [stockEntries, setStockEntries] = useRecoilState(stockAtom);\n  const [openEntry, setOpenEntry] = React.useState(false);\n  const [openStock, setOpenStock] = React.useState(false);\n  const [editEntryIdx, setEditEntryIdx] = React.useState(-1);\n  const [editStockTick, setEditStockTick] = React.useState(\"\");\n\n  // entry open/closers\n  const closeEntryModal = () => setOpenEntry(false);\n  const openNewEntry = () => {\n    setEditEntryIdx(-1);\n    setOpenEntry(true);\n  };\n  const openEditEntry = (i: number) => () => {\n    setEditEntryIdx(i);\n    setOpenEntry(true);\n  };\n\n  // stock open/closers\n  const closeStockModal = () => setOpenStock(false);\n  const openNewStock = () => {\n    setEditStockTick(\"\");\n    setOpenStock(true);\n  };\n  const openEditStock = (s: string) => () => {\n    setEditStockTick(s);\n    setOpenStock(true);\n  };\n\n  const addCompEntry = (compEntry: CompEntry) => {\n    const newCompEntries = [...compEntries];\n    if (editEntryIdx === -1) {\n      newCompEntries.push(compEntry);\n    } else {\n      newCompEntries[editEntryIdx] = compEntry;\n    }\n    setCompEntries(newCompEntries);\n    closeEntryModal();\n  };\n\n  const addStockEntry = (stock: string, price: number) => {\n    const newStockEntries = { ...stockEntries };\n    newStockEntries[stock] = price;\n    setStockEntries(newStockEntries);\n    closeStockModal();\n  };\n\n  const removeStockEntry = (stock: string) => () => {\n    const newStockEntries = { ...stockEntries };\n    delete newStockEntries[stock];\n    setStockEntries(newStockEntries);\n    closeStockModal();\n  };\n\n  return (\n    <>\n      <Typography variant=\"h2\" component=\"h1\">\n        Comp Calculator\n      </Typography>\n      <div\n        className=\"flex-container\"\n        style={{ marginTop: 10, marginBottom: 10 }}\n      >\n        <StockDisplay\n          stockEntries={stockEntries}\n          openStockModal={openEditStock}\n        />\n        <div>\n          <Button onClick={openNewStock}>+ Stock</Button>\n          <Button onClick={openNewEntry}>+ Entry</Button>\n        </div>\n      </div>\n      {compEntries.length > 0 && (\n        <>\n          <Graphs compEntries={compEntries} compCalcEntries={compCalcEntries} />\n          <CompEntryDisplay\n            compEntries={compEntries}\n            compCalcEntries={compCalcEntries}\n            onClick={openEditEntry}\n          />\n        </>\n      )}\n      <StockDialog\n        open={openStock}\n        price={editStockTick ? stockEntries[editStockTick] : undefined}\n        stock={editStockTick}\n        onClose={closeStockModal}\n        addStockEntry={addStockEntry}\n        removeStockEntry={removeStockEntry}\n      />\n      <CompEntryDialog\n        open={openEntry}\n        compEntry={editEntryIdx !== -1 ? compEntries[editEntryIdx] : undefined}\n        onClose={closeEntryModal}\n        addCompEntry={addCompEntry}\n      />\n    </>\n  );\n};\n\nexport default CompCalculator;\n"],"names":["getDialogContentTextUtilityClass","slot","generateUtilityClass","generateUtilityClasses","useUtilityClasses","ownerState","classes","composedClasses","composeClasses","DialogContentTextRoot","styled","Typography","prop","rootShouldForwardProp","props","styles","DialogContentText","React.forwardRef","inProps","ref","useDefaultProps","children","className","clsx","initialState","stockAtom","atom","onSet","state","compCalcAtom","compCalcReadOnlyState","selector","get","compEntries","stockEntries","prevStockAcc","compCalcEntriesNoNet","bonus","entryDate","grantDuration","grantQty","priceThen","salary","stockTick","priceNow","stock","stockAdj","exp","dateHelper","s","total","totalAdj","grantThen","grantNow","rest","i","netDiff","usDollar","CompEntryDisplay","compCalcEntries","onClick","jsxs","Grid","jsx","compEntry","Card","CardActionArea","CardHeader","CardContent","dateObj","Divider","Fragment","tfProps","currentYear","years","CompEntryDialog","open","onClose","addCompEntry","entryDateMonth","setEntryDateMonth","React.useState","entryDateYear","setEntryDateYear","setSalary","setBonus","setStockTick","setPriceThen","setGrantDuration","setGrantQty","resetState","React.useEffect","month","year","handleChange","func","e","handleStockTick","handleSelectMonth","handleSelectYear","handleSubmit","Dialog","DialogTitle","DialogContent","FormControl","InputLabel","Select","months","MenuItem","TextField","DialogActions","Button","StockDialog","React.memo","exPrice","exStock","addStockEntry","removeStockEntry","price","setPrice","setStock","handleStockChange","handlePriceChange","StockDisplay","openStockModal","stockKey","Chip","highchartsAccessibility","Highcharts","STOCK","BONUS","SALARY","TOTAL","INFL","inflationKey","CompChart","startIdx","color","useRecoilValue","themeAtom","compChartData","startYear","startTC","endYear","options","HighchartsReact","BreakdownChart","Graphs","setStartIdx","cStock","cBonus","cSalary","handleClick","CompCalculator","setCompEntries","useRecoilState","compCalcState","setStockEntries","openEntry","setOpenEntry","openStock","setOpenStock","editEntryIdx","setEditEntryIdx","editStockTick","setEditStockTick","closeEntryModal","openNewEntry","openEditEntry","closeStockModal","openNewStock","openEditStock","newCompEntries","newStockEntries"],"mappings":"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","x_google_ignoreList":[0,1]}