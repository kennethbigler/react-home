{"version":3,"file":"index-CZ2-c80Z.js","sources":["../../src/components/games/slots/slotMachine.ts","../../src/jotai/slots-state.ts","../../src/components/games/slots/PayoutTable.tsx","../../src/components/games/slots/MoneyTable.tsx","../../src/components/games/slots/ReelDisplay.tsx","../../src/components/games/slots/Slots.tsx"],"sourcesContent":["export enum SlotOption {\n  EMPTY = \"-\",\n  CHERRY = \"🍒\",\n  BAR = \"🍺\",\n  DOUBLE_BAR = \"🍻\",\n  TRIPLE_BAR = \"🥃\",\n  SEVEN = \"❌\",\n  JACKPOT = \"💰\",\n}\nexport type SlotDisplay = [SlotOption, SlotOption, SlotOption];\n\ninterface Reel {\n  symbol: SlotOption;\n  start: number;\n  stop: number;\n}\n\nconst NUM_REELS = 3;\n\n/** options to be displayed on slot machine */\nconst reels: Reel[] = [\n  { symbol: SlotOption.CHERRY, start: 1, stop: 2 },\n  { symbol: SlotOption.EMPTY, start: 3, stop: 7 },\n  { symbol: SlotOption.BAR, start: 8, stop: 12 },\n  { symbol: SlotOption.EMPTY, start: 13, stop: 17 },\n  { symbol: SlotOption.SEVEN, start: 18, stop: 25 },\n  { symbol: SlotOption.EMPTY, start: 26, stop: 30 },\n  { symbol: SlotOption.BAR, start: 31, stop: 35 },\n  { symbol: SlotOption.EMPTY, start: 36, stop: 41 },\n  { symbol: SlotOption.CHERRY, start: 42, stop: 43 },\n  { symbol: SlotOption.EMPTY, start: 44, stop: 49 },\n  { symbol: SlotOption.DOUBLE_BAR, start: 50, stop: 56 },\n  { symbol: SlotOption.EMPTY, start: 57, stop: 62 },\n  { symbol: SlotOption.CHERRY, start: 63, stop: 63 },\n  { symbol: SlotOption.EMPTY, start: 64, stop: 69 },\n  { symbol: SlotOption.DOUBLE_BAR, start: 70, stop: 75 },\n  { symbol: SlotOption.EMPTY, start: 76, stop: 81 },\n  { symbol: SlotOption.BAR, start: 82, stop: 87 },\n  { symbol: SlotOption.EMPTY, start: 88, stop: 93 },\n  { symbol: SlotOption.TRIPLE_BAR, start: 94, stop: 104 },\n  { symbol: SlotOption.EMPTY, start: 105, stop: 115 },\n  { symbol: SlotOption.JACKPOT, start: 116, stop: 117 },\n  { symbol: SlotOption.EMPTY, start: 118, stop: 128 },\n];\n\n/** prepare the slot machine */\nfunction prepareSlotMachine(): SlotDisplay[] {\n  const machine: SlotDisplay[] = [];\n  reels.forEach((reel: Reel, i: number) => {\n    // wrap the reels\n    const prev = i - 1 > 0 ? i - 1 : reels.length - 1;\n    const next = (i + 1) % reels.length;\n    // create the machine\n    for (let j = reel.start; j <= reel.stop; j += 1) {\n      machine.push([reels[prev].symbol, reel.symbol, reels[next].symbol]);\n    }\n  });\n  return machine;\n}\n\nconst machine = prepareSlotMachine();\n\n/** spin the slot machine and get a result */\nexport function spin(): SlotDisplay {\n  return machine[Math.floor(Math.random() * machine.length)];\n}\n\n/** Pull the slot machine handle, returns info needed for display */\nconst pullHandle = (): SlotDisplay[] => {\n  const reel = [];\n  for (let i = 0; i < NUM_REELS; i += 1) {\n    reel[i] = spin();\n  }\n  return reel;\n};\n\n/**\n * evaluate slot machine based of 3 reels\n * https://vegasclick.com/games/slots/how-they-work\n */\nconst getPayout = (reel: SlotDisplay[], bet: number): number => {\n  // for bar check\n  const bars = [SlotOption.BAR, SlotOption.DOUBLE_BAR, SlotOption.TRIPLE_BAR];\n  // get reel values\n  const r0 = reel[0][1];\n  const r1 = reel[1][1];\n  const r2 = reel[2][1];\n  const fReel = [r0, r1, r2];\n  // check if they match\n  const m01 = r0 === r1;\n  const m02 = r0 === r2;\n  // if we have 3 of a kind\n  if (m01 && m02) {\n    switch (r0) {\n      case SlotOption.JACKPOT:\n        return 1666 * bet;\n      case SlotOption.SEVEN:\n        return 300 * bet;\n      case SlotOption.TRIPLE_BAR:\n        return 100 * bet;\n      case SlotOption.DOUBLE_BAR:\n        return 50 * bet;\n      case SlotOption.BAR:\n        return 25 * bet;\n      case SlotOption.CHERRY:\n        return 12 * bet;\n      default:\n        return 0;\n    }\n  } else if (bars.includes(r0) && bars.includes(r1) && bars.includes(r2)) {\n    // if we have 3 of any bar\n    return 12 * bet;\n  } else if (\n    fReel.includes(SlotOption.CHERRY, fReel.indexOf(SlotOption.CHERRY) + 1)\n  ) {\n    // if we have 2 cherries\n    return 6 * bet;\n  } else if (fReel.includes(SlotOption.CHERRY)) {\n    // if we have 1 cherry\n    return 3 * bet;\n  }\n  return 0;\n};\n\nexport default {\n  pullHandle,\n  getPayout,\n};\n","import { atom } from \"jotai\";\nimport { atomWithStorage } from \"jotai/utils\";\nimport slotMachine, {\n  SlotDisplay,\n} from \"../components/games/slots/slotMachine\";\nimport playerAtom from \"./player-atom\";\n\nexport const slotsAtom = atomWithStorage(\"slotsAtom\", slotMachine.pullHandle());\n\nexport const slotsRead = atom((get) => {\n  const players = get(playerAtom);\n  const { bet, name } = players[0];\n  return { bet, name };\n});\n\ninterface SlotsState {\n  reel: SlotDisplay[];\n  money: number;\n  houseMoney: number;\n}\n\nconst slotsState = atom(\n  (get) => {\n    const reel = get(slotsAtom);\n    const players = get(playerAtom);\n    const { money } = players[0];\n    const { money: houseMoney } = players[players.length - 1];\n\n    return { reel, money, houseMoney };\n  },\n  (get, set, { reel, money, houseMoney }: SlotsState) => {\n    // set reel state\n    set(slotsAtom, reel);\n\n    // get player state\n    const players = get(playerAtom);\n    const DEALER_IDX = players.length - 1;\n\n    // set player state\n    const newPlayers = [...players];\n    newPlayers[0] = { ...players[0], money };\n    newPlayers[DEALER_IDX] = { ...players[DEALER_IDX], money: houseMoney };\n    set(playerAtom, newPlayers);\n  },\n);\n\nexport default slotsState;\n","import * as React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { SlotOption as SO } from \"./slotMachine\";\n\n/** used to display the payout table */\nconst payoutTable = [\n  { symbol: `${SO.JACKPOT} ${SO.JACKPOT} ${SO.JACKPOT}`, payout: 1666 },\n  { symbol: `${SO.SEVEN} ${SO.SEVEN} ${SO.SEVEN}`, payout: 300 },\n  { symbol: `${SO.TRIPLE_BAR} ${SO.TRIPLE_BAR} ${SO.TRIPLE_BAR}`, payout: 100 },\n  { symbol: `${SO.DOUBLE_BAR} ${SO.DOUBLE_BAR} ${SO.DOUBLE_BAR}`, payout: 50 },\n  { symbol: `${SO.BAR} ${SO.BAR} ${SO.BAR}`, payout: 25 },\n  {\n    symbol: `3 of any ${SO.BAR} ${SO.DOUBLE_BAR} ${SO.TRIPLE_BAR}`,\n    payout: 12,\n  },\n  { symbol: `${SO.CHERRY} ${SO.CHERRY} ${SO.CHERRY}`, payout: 12 },\n  { symbol: `${SO.CHERRY} ${SO.CHERRY}`, payout: 6 },\n  { symbol: SO.CHERRY, payout: 3 },\n];\n\nconst PayoutTable = React.memo(() => (\n  <Table aria-label=\"payout reference table for slot game\">\n    <TableHead>\n      <TableRow>\n        <TableCell>Slot Roll</TableCell>\n        <TableCell>Payout</TableCell>\n      </TableRow>\n    </TableHead>\n    <TableBody>\n      {payoutTable.map((row, i) => (\n        <TableRow key={i}>\n          <TableCell component=\"th\" scope=\"row\">\n            {row.symbol}\n          </TableCell>\n          <TableCell>{`${row.payout} : 1`}</TableCell>\n        </TableRow>\n      ))}\n    </TableBody>\n  </Table>\n));\n\nPayoutTable.displayName = \"PayoutTable\";\n\nexport default PayoutTable;\n","import * as React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\n\ninterface MoneyTableProps {\n  name: string;\n  money: number;\n  houseMoney: number;\n}\n\nconst MoneyTable = React.memo(\n  ({ name, money, houseMoney }: MoneyTableProps) => (\n    <Table aria-label=\"current slot game monetary status\">\n      <TableHead>\n        <TableRow>\n          <TableCell>Player</TableCell>\n          <TableCell>Money</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        <TableRow>\n          <TableCell component=\"th\" scope=\"row\">\n            {name}\n          </TableCell>\n          <TableCell>{`$${money}`}</TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell component=\"th\" scope=\"row\">\n            House\n          </TableCell>\n          <TableCell>{`$${houseMoney}`}</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  ),\n);\n\nMoneyTable.displayName = \"MoneyTable\";\n\nexport default MoneyTable;\n","import * as React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Typography from \"@mui/material/Typography\";\nimport { SlotDisplay } from \"./slotMachine\";\n\ninterface ReelDisplayProps {\n  reel: SlotDisplay[];\n}\n\nconst cellStyles: React.CSSProperties = {\n  minHeight: 39,\n  fontWeight: 900,\n};\n\nconst ReelDisplay = ({ reel }: ReelDisplayProps) => {\n  /** generate code for slot machine */\n  const getSlots = React.useCallback((): React.ReactElement[] => {\n    // display for slots\n    const slots = [];\n    for (let i = 0; i < 3; i += 1) {\n      // create 3 cells in a row\n      const row = reel.map((reelRow, j) => (\n        <TableCell key={`${j},${i}`}>\n          <Typography\n            variant=\"h4\"\n            component=\"h2\"\n            align=\"center\"\n            style={cellStyles}\n          >\n            {reelRow[i]}\n          </Typography>\n        </TableCell>\n      ));\n      // separate into rows\n      const slotRow = <TableRow key={`row${i}`}>{row}</TableRow>;\n      slots.push(slotRow);\n    }\n    return slots;\n  }, [reel]);\n\n  return (\n    <Table aria-label=\"slots displayed in a 3 by 3 grid\">\n      <TableBody>{getSlots()}</TableBody>\n    </Table>\n  );\n};\n\nexport default ReelDisplay;\n","import * as React from \"react\";\nimport { useAtom, useAtomValue } from \"jotai\";\nimport Button from \"@mui/material/Button\";\nimport Grid from \"@mui/material/Grid2\";\nimport Typography from \"@mui/material/Typography\";\nimport slotsState, { slotsRead } from \"../../../jotai/slots-state\";\nimport PayoutTable from \"./PayoutTable\";\nimport MoneyTable from \"./MoneyTable\";\nimport ReelDisplay from \"./ReelDisplay\";\nimport slotMachine from \"./slotMachine\";\nimport PlayerMenu from \"../../common/header/PlayerMenu\";\n\n/* Slots  ->  ReelDisplay\n *       |->  MoneyTable\n *       |->  PayoutTable */\nconst Slots = React.memo(() => {\n  const [{ reel, money, houseMoney }, setState] = useAtom(slotsState);\n  const { bet, name } = useAtomValue(slotsRead);\n  const [exchange, setExchange] = React.useState(0);\n\n  const updateSlotMachine = () => {\n    // get rolled reel\n    const newReel = slotMachine.pullHandle();\n\n    // determine payout\n    const newExchange = slotMachine.getPayout(newReel, bet) - bet;\n\n    // exchange money and update state\n    setExchange(newExchange);\n    setState({\n      reel: newReel,\n      money: money + newExchange,\n      houseMoney: houseMoney - newExchange,\n    });\n  };\n\n  return (\n    <>\n      <div className=\"flex-container\">\n        <Typography variant=\"h2\" component=\"h1\">\n          Casino Slot Machine\n        </Typography>\n        <PlayerMenu />\n      </div>\n      <Grid container spacing={1} style={{ marginTop: \"2em\" }}>\n        <Grid size={{ xs: 12, sm: 6 }}>\n          <div>\n            <Button\n              onClick={updateSlotMachine}\n              style={{ marginBottom: 15 }}\n              variant=\"contained\"\n            >\n              Spin\n            </Button>\n            {exchange !== 0 && (\n              <Typography variant=\"h4\" component=\"h2\">{`You ${\n                exchange > 0 ? \"won\" : \"lost\"\n              } $${exchange}`}</Typography>\n            )}\n          </div>\n          <ReelDisplay reel={reel} />\n          <MoneyTable money={money} name={name} houseMoney={houseMoney} />\n        </Grid>\n        <Grid size={{ xs: 12, sm: 6 }}>\n          <PayoutTable />\n        </Grid>\n      </Grid>\n    </>\n  );\n});\n\nSlots.displayName = \"Slots\";\n\nexport default Slots;\n"],"names":["SlotOption","NUM_REELS","reels","prepareSlotMachine","machine","reel","i","prev","next","j","spin","pullHandle","getPayout","bet","bars","r0","r1","r2","fReel","slotMachine","slotsAtom","atomWithStorage","slotsRead","atom","get","players","playerAtom","name","slotsState","money","houseMoney","set","DEALER_IDX","newPlayers","payoutTable","SO","PayoutTable","React.memo","jsxs","Table","jsx","TableHead","TableRow","TableCell","TableBody","row","MoneyTable","cellStyles","ReelDisplay","getSlots","React.useCallback","slots","reelRow","Typography","slotRow","Slots","setState","useAtom","useAtomValue","exchange","setExchange","React.useState","updateSlotMachine","newReel","newExchange","Fragment","PlayerMenu","Grid","Button"],"mappings":"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"}