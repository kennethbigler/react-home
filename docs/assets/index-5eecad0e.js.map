{"version":3,"file":"index-5eecad0e.js","sources":["../../src/recoil/blackjack-state.ts","../../src/components/games/blackjack/blackjackHelpers.ts","../../src/components/games/blackjack/Rules.tsx","../../src/components/games/blackjack/help/Cell.tsx","../../src/components/games/blackjack/help/Row.tsx","../../src/components/games/blackjack/help/BlackjackTable.tsx","../../src/components/games/blackjack/help/Help.tsx","../../src/components/games/blackjack/Header.tsx","../../src/components/games/blackjack/Blackjack.tsx"],"sourcesContent":["import { atom, DefaultValue, selector } from \"recoil\";\nimport playerAtom from \"./player-atom\";\nimport turnAtom from \"./turn-atom\";\n\nexport enum GameFunctions {\n  NEW_GAME = \"New Game\",\n  FINISH_BETTING = \"Finish Betting\",\n  STAY = \"Stay\",\n  HIT = \"Hit\",\n  DOUBLE = \"Double\",\n  SPLIT = \"Split\",\n}\n\nexport interface BlackjackState {\n  gameFunctions: string[];\n  hideHands: boolean;\n}\n\nexport const newBlackjackGame = (): BlackjackState => ({\n  gameFunctions: [GameFunctions.FINISH_BETTING],\n  hideHands: true,\n});\n\nexport const blackjackAtom = atom({\n  key: \"blackjackAtom\",\n  default:\n    (JSON.parse(\n      localStorage.getItem(\"blackjack-atom\") || \"null\"\n    ) as BlackjackState) || newBlackjackGame(),\n  effects: [\n    ({ onSet }) => {\n      onSet((state) => {\n        localStorage.setItem(\"blackjack-atom\", JSON.stringify(state));\n      });\n    },\n  ],\n});\n\nconst blackjackState = selector({\n  key: \"blackjackState\",\n  get: ({ get }) => {\n    const bj = get(blackjackAtom);\n    const players = get(playerAtom);\n    const turn = get(turnAtom);\n\n    return { bj, players, turn };\n  },\n  set: ({ set }, state) => {\n    if (!(state instanceof DefaultValue)) {\n      const { bj, turn, players } = state;\n      set(blackjackAtom, bj);\n      set(turnAtom, turn);\n      set(playerAtom, players);\n    }\n  },\n});\n\nexport default blackjackState;\n","import { DBCard } from \"../../../apis/Deck\";\nimport { GameFunctions } from \"../../../recoil/blackjack-state\";\nimport { DBHand, DBPlayer } from \"../../../recoil/player-atom\";\n\n/** calculate the weight of a hand */\nexport function weighHand(hand: DBCard[] = []): {\n  weight: number;\n  soft: boolean;\n} {\n  // set return values\n  let weight = 0;\n  let soft = false;\n\n  // find the weight of the hand\n  hand.forEach((card) => {\n    const cardWeight = card.weight || 0;\n    if (cardWeight === 14) {\n      // A\n      if (weight <= 10) {\n        weight += 11;\n        soft = true;\n      } else {\n        weight += 1;\n      }\n    } else if (cardWeight > 10) {\n      // J - K\n      weight += 10;\n    } else {\n      // 2 - 10\n      weight += cardWeight;\n    }\n    // reduce by 10 if bust and soft\n    if (weight > 21 && soft) {\n      weight -= 10;\n      soft = false;\n    }\n  });\n\n  // return object w/ useful information\n  return { weight, soft };\n}\n\n// AI: https://www.blackjackinfo.com/blackjack-basic-strategy-engine/\nexport const playBot = async (\n  hand: DBHand,\n  dealer: DBHand,\n  double: () => Promise<void>,\n  hit: () => Promise<void>,\n  split: () => Promise<void>,\n  stay: () => void\n): Promise<void> => {\n  // validate hand exists\n  if (!hand) {\n    return;\n  }\n  const n = hand.weight || 0;\n  const { soft } = hand;\n  // card / dealer weight\n  const { weight: d } = weighHand([dealer.cards[0]]);\n  const { weight: x } = weighHand([hand.cards[0]]);\n  const { weight: y } = weighHand([hand.cards[1]]);\n\n  // play AI logic\n  if (n < 22) {\n    // split algorithm\n    if (x === y) {\n      if (x === 2 || x === 3 || x === 7) {\n        // 2,3,7, split d2-7, hit d8+\n        d <= 7 ? await split() : await hit();\n      } else if (x === 4) {\n        // 4, split d5-6, else hit\n        d === 5 || d === 6 ? await split() : await hit();\n      } else if (x === 5) {\n        // 5, double d2-9, hit d10+\n        d <= 9 ? await double() : await hit();\n      } else if (x === 6) {\n        // 6, split d2-6, else hit\n        d <= 6 ? await split() : await hit();\n      } else if (x === 9) {\n        // 9, d7,10+ stay, else split\n        d === 7 || d >= 10 ? stay() : await split();\n      } else if (x === 8 || x === 11) {\n        // 8,A split\n        await split();\n      } else {\n        // 10 Stay\n        stay();\n      }\n    } else if (n < 20 && soft) {\n      // soft hands, A9+ stays\n      if (n === 13 || n === 14) {\n        // A2-A3 double d5-6, hit d2-4, d7-A\n        d === 5 || d === 6 ? await double() : await hit();\n      } else if (n === 15 || n === 16) {\n        // A4-A5 double d4-6, hit d2-3, d7-A\n        d >= 4 && d <= 6 ? await double() : await hit();\n      } else if (n === 17) {\n        // A6 double d3-6, hit d2, d7-A\n        d >= 3 && d <= 6 ? await double() : await hit();\n      } else if (n === 18) {\n        // A7 double d2-6, stay d7-8, hit d9-A\n        if (d >= 2 && d <= 6) {\n          await double();\n        } else if (d === 7 || d === 8) {\n          stay();\n        } else {\n          await hit();\n        }\n      } else if (n === 19) {\n        // A8 double d6, else stay\n        d === 6 ? await double() : stay();\n      }\n    } else if (n < 17 && !soft) {\n      // hard hands, 17+ stays\n      if (n >= 5 && n <= 8) {\n        // 5-8 hit\n        await hit();\n      } else if (n === 9) {\n        // 9 double d3-6, hit d2, d7-A\n        d >= 3 && d <= 6 ? await double() : await hit();\n      } else if (n === 10) {\n        // 10 double d2-9, hit d10-A\n        d >= 2 && d <= 9 ? await double() : await hit();\n      } else if (n === 11) {\n        // 11 double\n        await double();\n      } else if (n === 12) {\n        // 12 hit d2-3, stay d4-6, hit 7-A\n        d >= 4 && d <= 6 ? stay() : await hit();\n      } else if (n >= 13 && n <= 16) {\n        // 13-16 stay d2-6, hit 7-A\n        d >= 2 && d <= 6 ? stay() : await hit();\n      }\n    } else {\n      stay();\n    }\n  } else {\n    // bust\n    stay();\n  }\n};\n\nexport interface PlayerStats {\n  house: number;\n  payout: number;\n  status: string;\n}\n\n// Dealer constant\nexport const DEALER = 0;\n\n/** finish the game and check for a winner */\nexport const banking = (players: DBPlayer[]): DBPlayer[] => {\n  // state variables\n  const dealer = players.filter((p) => p.id === DEALER)[0];\n  const dWeight = dealer.hands[0].weight || 0;\n  const dLength = dealer.hands[0].cards.length;\n  // track and find the winners\n  const playerStats: PlayerStats = { house: 0, payout: 0, status: \"\" };\n  // helper functions\n  const win = (ps: PlayerStats, bet: number, mul = 1): void => {\n    ps.house -= Math.floor(mul * bet);\n    ps.payout = Math.floor(mul * bet);\n    ps.status = \"win\";\n  };\n  const loss = (ps: PlayerStats, bet: number): void => {\n    ps.house += bet;\n    ps.payout = -bet;\n    ps.status = \"lose\";\n  };\n  return players.map((player) => {\n    const { id, bet } = player;\n    if (id === DEALER) {\n      if (playerStats.house > 0) {\n        playerStats.status = \"win\";\n      } else if (playerStats.house < 0) {\n        playerStats.status = \"lose\";\n      } else {\n        playerStats.status = \"push\";\n      }\n      return {\n        ...player,\n        status: playerStats.status,\n        money: player.money + playerStats.house,\n      };\n    }\n    player.hands.forEach((hand) => {\n      const { weight = 0, cards } = hand;\n      if (dWeight === 21 && dLength === 2) {\n        // dealer BlackJack\n        loss(playerStats, bet);\n      } else if (weight === 21 && cards.length === 2) {\n        // player BlackJack\n        win(playerStats, bet, 6 / 5);\n      } else if (weight <= 21 && (weight > dWeight || dWeight > 21)) {\n        win(playerStats, bet);\n      } else if (weight <= 21 && weight === dWeight) {\n        playerStats.payout = 0;\n        playerStats.status = \"push\";\n      } else {\n        loss(playerStats, bet);\n      }\n    });\n    return {\n      ...player,\n      status: playerStats.status,\n      money: player.money + playerStats.payout,\n    };\n  });\n};\n\n/** get the game functions for the present hand */\nexport const getGameFunctions = (hand: DBHand): GameFunctions[] => {\n  if (!hand) {\n    return [];\n  }\n\n  // reset game functions\n  const newGameFunctions = [GameFunctions.STAY];\n  const handWeight = hand.weight || 0;\n\n  // check if not a bust\n  if (handWeight < 21) {\n    newGameFunctions.push(GameFunctions.HIT);\n    // check if you only have 2 cards\n    if (hand.cards.length === 2) {\n      newGameFunctions.push(GameFunctions.DOUBLE);\n      // check if card1 and card2 have equal weight\n      const { weight: weight1 } = weighHand([hand.cards[0]]);\n      const { weight: weight2 } = weighHand([hand.cards[1]]);\n      if (weight1 === weight2) {\n        newGameFunctions.push(GameFunctions.SPLIT);\n      }\n    }\n  }\n\n  return newGameFunctions;\n};\n","import * as React from \"react\";\nimport Typography from \"@mui/material/Typography\";\n\nconst Rules: React.FC = React.memo(() => (\n  <>\n    <Typography variant=\"h5\">Objective:</Typography>\n    <Typography>\n      Get as close to 21 as you can, without going over. Each card is worth\n      it&apos;s number, J/Q/K are worth 10, and an Ace is worth 11 unless you go\n      over 21, then it is worth 1.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">Blackjack:</Typography>\n    <Typography>\n      Delt an Ace and a 10/J/Q/K, this casino pays 3:2, but Vegas casinos do\n      6:5.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">Hit:</Typography>\n    <Typography>Get an extra card which adds to your total.</Typography>\n    <br />\n    <Typography variant=\"h5\">Stay:</Typography>\n    <Typography>Move to the next player.</Typography>\n    <br />\n    <Typography variant=\"h5\">Double Down:</Typography>\n    <Typography>\n      This option is available with a two card hand; before another card has\n      been drawn double your bet and receive one (and only one) additional card\n      to your hand. Play then moves to the next player.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">Splitting Pairs:</Typography>\n    <Typography>\n      When you are dealt a pair of cards of the same rank, you are allowed to\n      split into two separate hands and play them independently. You will match\n      your bet for the second hand. A double after a split is ok\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">Resplitting:</Typography>\n    <Typography>\n      When you get additional pairs in the first two cards of a hand you can\n      resplit. Typically a player is allowed to split up to 3 times (delt 4 of a\n      kind).\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">Splitting Aces:</Typography>\n    <Typography>\n      Player is limited to drawing only one additional card on each Ace. If you\n      draw a ten-valued card on one of your split Aces, the hand is not\n      considered a Blackjack (it is treated as a normal 21). You can re-split\n      Aces.\n    </Typography>\n    <br />\n    <Typography variant=\"h5\">Other Rules:</Typography>\n    <ul>\n      <Typography>\n        <li>Dealer hits on 16 or less and soft 17</li>\n      </Typography>\n      <Typography>\n        <li>Minimum bet is $5</li>\n      </Typography>\n    </ul>\n    <Typography variant=\"h5\">AI Algorithm:</Typography>\n    <ul>\n      <Typography>\n        <li>House Rules: 6 decks, H17, DAS, No Surrender, Peek</li>\n      </Typography>\n      <Typography>\n        <li>Estimated casino edge for these rules: 0.66%</li>\n      </Typography>\n    </ul>\n  </>\n));\n\nexport default Rules;\n","import * as React from \"react\";\nimport TableCell from \"@mui/material/TableCell\";\n\nexport interface CellProps {\n  color?: string;\n  style?: React.CSSProperties;\n  text: string;\n  rowSpan?: number;\n  colSpan?: number;\n}\n\nconst Cell: React.FC<CellProps> = React.memo((props: CellProps) => {\n  const { color, text, style, ...otherProps } = props;\n\n  const stl: React.CSSProperties = {\n    ...style,\n    textAlign: \"center\",\n    paddingLeft: 0,\n    paddingRight: 0,\n    backgroundColor: color,\n  };\n\n  return (\n    <TableCell size=\"small\" style={stl} {...otherProps}>\n      {text}\n    </TableCell>\n  );\n});\n\nexport default Cell;\n","import * as React from \"react\";\nimport TableRow from \"@mui/material/TableRow\";\nimport TableCell from \"@mui/material/TableCell\";\nimport Cell, { CellProps } from \"./Cell\";\n\nexport interface RowProps {\n  data: CellProps[];\n  name: string;\n}\n\nconst tableCellStyle: React.CSSProperties = { textAlign: \"center\", padding: 0 };\n\nconst Row: React.FC<RowProps> = ({ name, data }: RowProps) => (\n  <TableRow>\n    <TableCell style={tableCellStyle}>{name}</TableCell>\n    {data.map((text, i) => (\n      <Cell key={i} {...text} />\n    ))}\n  </TableRow>\n);\n\nexport default Row;\n","import * as React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Cell from \"./Cell\";\nimport Row, { RowProps } from \"./Row\";\n\ninterface BlackjackTableProps {\n  data: RowProps[];\n  title: string;\n}\n\nconst cards: string[] = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"T\", \"A\"];\nconst cellStyle: React.CSSProperties = { width: 60 };\n\nconst BlackjackTable: React.FC<BlackjackTableProps> = ({ title, data }) => (\n  <Table>\n    <TableHead>\n      <TableRow>\n        <TableCell colSpan={11}>{title}</TableCell>\n      </TableRow>\n    </TableHead>\n    <TableBody>\n      <TableRow>\n        <Cell rowSpan={2} style={cellStyle} text=\"Hand\" />\n        <Cell colSpan={10} text=\"Dealer\" />\n      </TableRow>\n      <TableRow>\n        {cards.map((c) => (\n          <Cell key={c} text={c} />\n        ))}\n      </TableRow>\n      {data.map((obj) => (\n        <Row key={obj.name} name={obj.name} data={obj.data} />\n      ))}\n    </TableBody>\n  </Table>\n);\n\nexport default BlackjackTable;\n","// react\nimport * as React from \"react\";\n// material-ui\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { green, teal, red, orange, deepPurple } from \"@mui/material/colors\";\n// components\nimport Cell, { CellProps } from \"./Cell\";\nimport { RowProps } from \"./Row\";\nimport BlackjackTable from \"./BlackjackTable\";\n// Parents: blackjack/Header\n\n/* Help  ->  BlackJackTable  ->  Row  -->  Cell */\nconst Help: React.FC = React.memo(() => {\n  // options\n  const h: CellProps = { color: green[200], text: \"H\" };\n  const d: CellProps = { color: teal[200], text: \"D\" };\n  const s: CellProps = { color: red[200], text: \"S\" };\n  const p: CellProps = { color: orange[200], text: \"P\" };\n  const ds: CellProps = { color: deepPurple[200], text: \"DS\" };\n\n  // algorithms for options\n  const hardTtl: RowProps[] = [\n    { name: \"Hard 5\", data: [h, h, h, h, h, h, h, h, h, h] },\n    { name: \"Hard 6\", data: [h, h, h, h, h, h, h, h, h, h] },\n    { name: \"Hard 7\", data: [h, h, h, h, h, h, h, h, h, h] },\n    { name: \"Hard 8\", data: [h, h, h, h, h, h, h, h, h, h] },\n    { name: \"Hard 9\", data: [h, d, d, d, d, h, h, h, h, h] },\n    { name: \"Hard 10\", data: [d, d, d, d, d, d, d, d, h, h] },\n    { name: \"Hard 11\", data: [d, d, d, d, d, d, d, d, d, d] },\n    { name: \"Hard 12\", data: [h, h, s, s, s, h, h, h, h, h] },\n    { name: \"Hard 13\", data: [s, s, s, s, s, h, h, h, h, h] },\n    { name: \"Hard 14\", data: [s, s, s, s, s, h, h, h, h, h] },\n    { name: \"Hard 15\", data: [s, s, s, s, s, h, h, h, h, h] },\n    { name: \"Hard 16\", data: [s, s, s, s, s, h, h, h, h, h] },\n    { name: \"Hard 17\", data: [s, s, s, s, s, s, s, s, s, s] },\n    { name: \"Hard 18+\", data: [s, s, s, s, s, s, s, s, s, s] },\n  ];\n  const softTtl: RowProps[] = [\n    { name: \"Ace + 2\", data: [h, h, h, d, d, h, h, h, h, h] },\n    { name: \"Ace + 3\", data: [h, h, h, d, d, h, h, h, h, h] },\n    { name: \"Ace + 4\", data: [h, h, d, d, d, h, h, h, h, h] },\n    { name: \"Ace + 5\", data: [h, h, d, d, d, h, h, h, h, h] },\n    { name: \"Ace + 6\", data: [h, d, d, d, d, h, h, h, h, h] },\n    { name: \"Ace + 7\", data: [ds, ds, ds, ds, ds, s, s, h, h, h] },\n    { name: \"Ace + 8\", data: [s, s, s, s, ds, s, s, s, s, s] },\n    { name: \"Ace + 9\", data: [s, s, s, s, s, s, s, s, s, s] },\n  ];\n  const pairs: RowProps[] = [\n    { name: \"(2,2)\", data: [p, p, p, p, p, p, h, h, h, h] },\n    { name: \"(3,3)\", data: [p, p, p, p, p, p, h, h, h, h] },\n    { name: \"(4,4)\", data: [h, h, h, p, p, h, h, h, h, h] },\n    { name: \"(5,5)\", data: [d, d, d, d, d, d, d, d, h, h] },\n    { name: \"(6,6)\", data: [p, p, p, p, p, h, h, h, h, h] },\n    { name: \"(7,7)\", data: [p, p, p, p, p, p, h, h, h, h] },\n    { name: \"(8,8)\", data: [p, p, p, p, p, p, p, p, p, p] },\n    { name: \"(9,9)\", data: [p, p, p, p, p, s, p, p, s, s] },\n    { name: \"(T,T)\", data: [s, s, s, s, s, s, s, s, s, s] },\n    { name: \"(A,A)\", data: [p, p, p, p, p, p, p, p, p, p] },\n  ];\n\n  return (\n    <>\n      <BlackjackTable data={hardTtl} title=\"Hard Totals\" />\n      <BlackjackTable data={softTtl} title=\"Soft Totals\" />\n      <BlackjackTable data={pairs} title=\"Pairs\" />\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell colSpan={11}>Key</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow>\n            <Cell {...h} />\n            <Cell colSpan={2} text=\"= Hit\" />\n            <Cell {...s} />\n            <Cell colSpan={3} text=\"= Stand\" />\n            <Cell {...p} />\n            <Cell colSpan={3} text=\"= Split\" />\n          </TableRow>\n          <TableRow>\n            <Cell {...d} />\n            <Cell colSpan={10} text=\"= Double (Hit if not allowed)\" />\n          </TableRow>\n          <TableRow>\n            <Cell {...ds} />\n            <Cell colSpan={10} text=\"= Double (Stand if not allowed)\" />\n          </TableRow>\n        </TableBody>\n      </Table>\n    </>\n  );\n});\n\nexport default Help;\n","import * as React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport InfoPopup from \"../../common/info-popover/InfoPopup\";\nimport Rules from \"./Rules\";\nimport Help from \"./help\";\n\nconst Header: React.FC = React.memo(() => (\n  <div className=\"flex-container\">\n    <Typography variant=\"h2\" component=\"h1\" gutterBottom>\n      Blackjack (21)\n    </Typography>\n    <InfoPopup title=\"Rules\">\n      <Rules />\n      <Help />\n    </InfoPopup>\n  </div>\n));\n\nexport default Header;\n","/* Theoretical Max Score:   386 everyone splits 3 times and busts with 30, dealer bust with 26\n * Card Point Value:        340-380\n * split aces is not blackjack\n * get second card for dealer and hide it\n * buy insurance on dealer's Ace\n */\nimport * as React from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport asyncForEach from \"../../../helpers/asyncForEach\";\nimport {\n  weighHand,\n  playBot,\n  banking,\n  DEALER,\n  getGameFunctions,\n} from \"./blackjackHelpers\";\nimport Header from \"./Header\";\nimport GameTable from \"../game-table\";\nimport Deck from \"../../../apis/Deck\";\nimport { DBHand, DBPlayer } from \"../../../recoil/player-atom\";\nimport blackjackState, {\n  GameFunctions,\n  newBlackjackGame,\n} from \"../../../recoil/blackjack-state\";\n\nconst BlackJack: React.FC = () => {\n  const [\n    {\n      turn,\n      players,\n      bj: { gameFunctions, hideHands },\n    },\n    setState,\n  ] = useRecoilState(blackjackState);\n\n  /** function that takes a hand of duplicates and makes 2 hands */\n  const split = async (): Promise<void> => {\n    // get state values\n    const { hands } = players[turn.player];\n\n    const newCards = await Deck.deal(2);\n\n    const hand = hands[turn.hand];\n    // split the hands into 2\n    const hand1: DBHand = { cards: [hand.cards[0]] };\n    const hand2: DBHand = { cards: [hand.cards[1]] };\n\n    hand1.cards.push(newCards[0]);\n    hand2.cards.push(newCards[1]);\n\n    // update the weights\n    Object.assign(hand1, weighHand(hand1.cards));\n    Object.assign(hand2, weighHand(hand2.cards));\n    // update global hands\n    const newHands = hands.map((item, i) => (i !== turn.hand ? item : hand2));\n    newHands.splice(turn.hand, 0, hand1);\n\n    const newPlayers = [...players];\n    newPlayers[turn.player] = { ...players[turn.player], hands: newHands };\n\n    let newGameFunctions: GameFunctions[] = [];\n    if (!newPlayers[turn.player].isBot) {\n      newGameFunctions = getGameFunctions(\n        newPlayers[turn.player].hands[turn.hand]\n      );\n    }\n\n    // update game state\n    setState({\n      turn,\n      players: newPlayers,\n      bj: { gameFunctions: newGameFunctions, hideHands },\n    });\n  };\n\n  /** function to pass to the next player */\n  const stay = (): void => {\n    // get state values\n    const lastHand = players[turn.player].hands.length - 1;\n    const newTurn =\n      turn.hand < lastHand\n        ? { ...turn, hand: turn.hand + 1 }\n        : { player: turn.player + 1, hand: 0 };\n    let newGameFunctions: GameFunctions[] = [];\n    if (!players[newTurn.player].isBot) {\n      newGameFunctions = getGameFunctions(\n        players[newTurn.player].hands[newTurn.hand]\n      );\n    }\n    // check if the player has more than 1 hand\n    setState({\n      turn: newTurn,\n      players,\n      bj: { gameFunctions: newGameFunctions, hideHands },\n    });\n  };\n\n  /** function that doubles your bet, but you only get 1 card */\n  const double = async (): Promise<void> => {\n    const { hands } = players[turn.player];\n\n    // Draw Card\n    const drawnCards = await Deck.deal(1);\n    const cards = [...hands[turn.hand].cards, ...drawnCards];\n    const { weight, soft } = weighHand(cards);\n    const newHands = hands.map((item, i) =>\n      i !== turn.hand ? item : { cards, weight, soft }\n    );\n    // create new players object\n    const newPlayers = [...players];\n    newPlayers[turn.player] = {\n      ...players[turn.player],\n      hands: newHands,\n      bet: players[turn.player].bet * 2,\n    };\n    // get state values\n    const lastHand = players[turn.player].hands.length - 1;\n    const newTurn =\n      turn.hand < lastHand\n        ? { ...turn, hand: turn.hand + 1 }\n        : { player: turn.player + 1, hand: 0 };\n    let newGameFunctions: GameFunctions[] = [];\n    if (!newPlayers[newTurn.player].isBot) {\n      newGameFunctions = getGameFunctions(\n        newPlayers[newTurn.player].hands[newTurn.hand]\n      );\n    }\n    // check if the player has more than 1 hand\n    setState({\n      turn: newTurn,\n      players: newPlayers,\n      bj: { gameFunctions: newGameFunctions, hideHands },\n    });\n  };\n\n  /** function to get a new card */\n  const hit = async (): Promise<void> => {\n    // get state values\n    const { hands } = players[turn.player];\n\n    // logic to hit\n    const drawnCards = await Deck.deal(1);\n    const cards = [...hands[turn.hand].cards, ...drawnCards];\n    const { weight, soft } = weighHand(cards);\n    const newHands = hands.map((item, i) =>\n      i !== turn.hand ? item : { cards, weight, soft }\n    );\n    // create new players object\n    const newPlayers = [...players];\n    newPlayers[turn.player] = { ...players[turn.player], hands: newHands };\n    // get new game functions\n    let newGameFunctions: GameFunctions[] = [];\n    if (!newPlayers[turn.player].isBot) {\n      newGameFunctions = getGameFunctions(\n        newPlayers[turn.player].hands[turn.hand]\n      );\n    }\n    // update state\n    setState({\n      turn,\n      players: newPlayers,\n      bj: { gameFunctions: newGameFunctions, hideHands },\n    });\n  };\n\n  /**\n   * Triggered in handleGameFunctionClick\n   * Starts a new game\n   */\n  const newGame = (): void => {\n    setState({\n      bj: newBlackjackGame(),\n      players: players.map((player) => ({\n        ...player,\n        status: \"\",\n        hands: [],\n        bet: 5,\n      })),\n      turn: { player: 0, hand: 0 },\n    });\n  };\n\n  /**\n   * Triggered in handleGameFunctionClick\n   * Finish betting and start the game\n   */\n  const finishBetting = async (): Promise<void> => {\n    const newPlayers: DBPlayer[] = [];\n    // shuffle the deck\n    await Deck.shuffle().then(async () => {\n      // deal the hands\n      await asyncForEach(players, async (player: DBPlayer) => {\n        const newCards = await Deck.deal(player.id !== DEALER ? 2 : 1);\n        const cards = [...newCards];\n        cards.sort(Deck.rankSort);\n        const { weight, soft } = weighHand(cards);\n        newPlayers.push({ ...player, hands: [{ cards, weight, soft }] });\n      });\n    });\n    // get game functions\n    let newGameFunctions: GameFunctions[] = [];\n    if (!newPlayers[turn.player].isBot) {\n      newGameFunctions = getGameFunctions(\n        newPlayers[turn.player].hands[turn.hand]\n      );\n    }\n    // update game state\n    setState({\n      turn,\n      players: newPlayers,\n      bj: { gameFunctions: newGameFunctions, hideHands: false },\n    });\n  };\n\n  /** function to execute dealer logic */\n  const playDealer = async (): Promise<void> => {\n    const dealer = players.filter((p) => p.id === DEALER)[0];\n    const hand = dealer.hands[0].cards;\n    const { weight: tempW, soft: tempS } = weighHand(hand);\n    // Dealer hits on 16 or less and soft 17\n    if (tempW <= 16 || (tempW === 17 && tempS)) {\n      // get state values\n      const { hands } = players.filter((p) => p.id === DEALER)[0];\n      // logic to hit\n      const drawnCards = await Deck.deal(1);\n      const cards = [...hands[turn.hand].cards, ...drawnCards];\n      const { weight, soft } = weighHand(cards);\n      const newHands = hands.map((item, i) =>\n        i !== turn.hand ? item : { cards, weight, soft }\n      );\n      // create new players object\n      const newPlayers = [...players];\n      newPlayers[players.length - 1] = {\n        ...players[players.length - 1],\n        hands: newHands,\n      };\n      // update state\n      setState({\n        bj: { gameFunctions, hideHands },\n        turn,\n        players: newPlayers,\n      });\n    } else {\n      const newPlayers = banking(players);\n      // update game functions\n      setState({\n        turn,\n        players: newPlayers,\n        bj: { gameFunctions: [GameFunctions.NEW_GAME], hideHands },\n      });\n    }\n  };\n\n  const checkUpdate = async (): Promise<void> => {\n    const player = players[turn.player];\n    if (!player.isBot || hideHands || !player) {\n      return;\n    }\n\n    if (player.id !== DEALER) {\n      const hand = players[turn.player].hands[turn.hand];\n      const dealer = players[players.length - 1].hands[0];\n      await playBot(hand, dealer, double, hit, split, stay);\n    } else if (!gameFunctions.includes(GameFunctions.NEW_GAME)) {\n      await playDealer();\n    }\n  };\n\n  // ----------     interface to GameBoard     ---------- //\n  /** function to be called on card clicks */\n  const cardClickHandler = (\n    playerNo: number,\n    handNo: number,\n    cardNo: number\n  ): void => {\n    // eslint-disable-next-line no-console\n    console.log(players[playerNo].hands[handNo].cards[cardNo]);\n  };\n\n  /** function to be called on card clicks */\n  const betHandler = (id: number, _event: Event, bet: number): void => {\n    setState({\n      bj: { gameFunctions, hideHands },\n      turn,\n      players: players.map((player) =>\n        player.id === id ? { ...player, bet } : player\n      ),\n    });\n  };\n\n  /** function to route click actions */\n  const handleGameFunctionClick = (type: string): void => {\n    switch (type) {\n      case GameFunctions.NEW_GAME:\n        newGame();\n        break;\n      case GameFunctions.FINISH_BETTING:\n        finishBetting().catch((e) => console.log(e));\n        break;\n      case GameFunctions.STAY:\n        stay();\n        break;\n      case GameFunctions.HIT:\n        hit().catch((e) => console.log(e));\n        break;\n      case GameFunctions.DOUBLE:\n        double().catch((e) => console.log(e));\n        break;\n      case GameFunctions.SPLIT:\n        split().catch((e) => console.log(e));\n        break;\n      default:\n        // eslint-disable-next-line no-console\n        console.error(\"Unknown Game Function: \", type);\n    }\n  };\n\n  /* render the UI */\n  checkUpdate().catch((e) => console.log(e));\n\n  return (\n    <>\n      <Header />\n      <GameTable\n        betHandler={betHandler}\n        cardClickHandler={cardClickHandler}\n        gameFunctions={gameFunctions}\n        onClick={handleGameFunctionClick}\n        hideHands={hideHands}\n        players={players}\n        turn={turn}\n      />\n    </>\n  );\n};\n\nexport default BlackJack;\n"],"names":["GameFunctions","newBlackjackGame","blackjackAtom","atom","onSet","state","blackjackState","selector","get","bj","players","playerAtom","turn","turnAtom","set","DefaultValue","weighHand","hand","weight","soft","card","cardWeight","playBot","dealer","double","hit","split","stay","n","d","x","y","DEALER","banking","p","dWeight","dLength","playerStats","win","ps","bet","mul","loss","player","id","cards","getGameFunctions","newGameFunctions","weight1","weight2","Rules","React.memo","jsxs","Fragment","jsx","Typography","Cell","props","color","text","style","otherProps","stl","TableCell","tableCellStyle","Row","name","data","TableRow","i","cellStyle","BlackjackTable","title","Table","TableHead","TableBody","c","obj","Help","h","green","teal","s","red","orange","ds","deepPurple","hardTtl","softTtl","pairs","Header","InfoPopup","BlackJack","gameFunctions","hideHands","setState","useRecoilState","hands","newCards","Deck","hand1","hand2","newHands","item","newPlayers","lastHand","newTurn","drawnCards","newGame","finishBetting","asyncForEach","playDealer","tempW","tempS","checkUpdate","cardClickHandler","playerNo","handNo","cardNo","betHandler","_event","handleGameFunctionClick","type","e","GameTable","BlackJack$1"],"mappings":"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"}